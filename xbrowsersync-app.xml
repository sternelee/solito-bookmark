This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  workflows/
    build.yml
    release.yml
  FUNDING.yml
docs/
  _config.yml
  firefox-versions.json
  index.md
fastlane/
  metadata/
    android/
      en-US/
        changelogs/
          14007.txt
          15101.txt
        full_description.txt
        short_description.txt
        title.txt
      fi-FI/
        full_description.txt
        short_description.txt
      pt-BR/
        full_description.txt
        short_description.txt
      ru-RU/
        full_description.txt
        short_description.txt
      zh-CN/
        full_description.txt
        short_description.txt
res/
  android/
    platforms/
      .gitignore
    plugins/
      .gitignore
    res/
      android/
        drawable/
          app_background_bg.xml
          app_background_fg.xml
          app_background.xml
          ic_launcher_foreground.xml
        drawable-night/
          app_background_bg.xml
          app_background_fg.xml
        drawable-v24/
          ic_launcher_background.xml
        mipmap-anydpi-v26/
          ic_launcher_round.xml
          ic_launcher.xml
        values/
          styles.xml
        xml/
          network_security_config.xml
    scripts/
      beforeBuild.js
    www/
      app.html
    .gitignore
    build-extras.gradle
    config.xml
    gradle.dev.properties
    gradle.release.properties
    package.json
  images/
    clouds.svg
    logo-dark.svg
    logo.svg
    scan_error.svg
    scan.svg
  strings/
    ar.json
    de.json
    en.json
    es.json
    fi.json
    fr.json
    gl.json
    id.json
    it.json
    ja.json
    nl.json
    pl.json
    pt.json
    ru.json
    sv.json
    zh.json
  webext/
    images/
      notification.svg
    app.html
    background.html
    manifest.json
scripts/
  android-utils.js
  create-apk-package.js
  create-zip-package.js
  update-build-number.js
src/
  @types/
    global.d.ts
  modules/
    android/
      android-app/
        android-app-alert/
          android-app-alert.component.ts
        android-app-backup-restore-settings/
          android-app-backup-restore-settings.component.ts
        android-app-bookmark/
          android-app-bookmark.component.scss
          android-app-bookmark.component.ts
        android-app-scan/
          android-app-scan.component.html
          android-app-scan.component.scss
          android-app-scan.component.ts
          android-app-scan.controller.html
        android-app-search/
          android-app-search.component.scss
          android-app-search.component.ts
        android-app-working/
          android-app-working.component.ts
        shared/
          android-app-helper/
            android-app-helper.service.ts
        android-app.component.scss
        android-app.component.ts
        android-app.interface.ts
        android-app.module.ts
      android-shared/
        android-bookmark/
          android-bookmark.service.ts
        android-platform/
          android-platform.service.ts
        android-store/
          android-store.enum.ts
          android-store.service.ts
        android-upgrade/
          android-v1.6.0-upgrade-provider.service.ts
        android-shared.module.ts
    app/
      app-background/
        app-background.component.html
        app-background.component.scss
        app-background.component.ts
      app-bookmark/
        app-bookmark.component.html
        app-bookmark.component.scss
        app-bookmark.component.ts
        app-bookmark.controller.html
        app-bookmark.interface.ts
      app-help/
        app-help.component.html
        app-help.component.scss
        app-help.component.ts
        app-help.controller.html
        app-help.interface.ts
      app-login/
        api-xbrowsersync-login-form/
          api-xbrowsersync-login-form.component.html
          api-xbrowsersync-login-form.component.scss
          api-xbrowsersync-login-form.component.ts
        password-strength/
          password-strength.directive.ts
        app-login.component.html
        app-login.component.scss
        app-login.component.ts
        app-login.controller.html
        app-login.module.ts
      app-main/
        app-main.component.html
        app-main.component.scss
        app-main.component.ts
      app-permissions/
        app-permissions.component.html
        app-permissions.component.scss
        app-permissions.component.ts
        app-permissions.controller.html
      app-search/
        bookmark/
          bookmark.component.html
          bookmark.component.scss
          bookmark.component.ts
        bookmark-tree/
          bookmark-tree.component.html
          bookmark-tree.component.scss
          bookmark-tree.component.ts
        app-search.component.html
        app-search.component.scss
        app-search.component.ts
        app-search.controller.html
        app-search.interface.ts
      app-settings/
        about-settings/
          about-settings.component.html
          about-settings.component.scss
          about-settings.component.ts
        backup-restore-settings/
          backup-restore-settings.component.html
          backup-restore-settings.component.scss
          backup-restore-settings.component.ts
        issues-settings/
          issues-settings.component.html
          issues-settings.component.scss
          issues-settings.component.ts
        permissions-settings/
          permissions-settings.component.html
          permissions-settings.component.scss
          permissions-settings.component.ts
        preferences-settings/
          preferences-settings.component.html
          preferences-settings.component.scss
          preferences-settings.component.ts
        qr-panel/
          qr-panel.component.html
          qr-panel.component.scss
          qr-panel.component.ts
        sync-settings/
          api-xbrowsersync-service-info/
            api-xbrowsersync-service-info.component.html
            api-xbrowsersync-service-info.component.scss
            api-xbrowsersync-service-info.component.ts
          sync-settings.component.html
          sync-settings.component.scss
          sync-settings.component.ts
        app-settings.component.html
        app-settings.component.scss
        app-settings.component.ts
        app-settings.controller.html
        app-settings.module.ts
      app-support/
        app-support.component.html
        app-support.component.scss
        app-support.component.ts
        app-support.controller.html
      app-sync-removed/
        app-sync-removed.component.html
        app-sync-removed.component.scss
        app-sync-removed.component.ts
        app-sync-removed.controller.html
      app-telemetry/
        app-telemetry.component.html
        app-telemetry.component.scss
        app-telemetry.component.ts
        app-telemetry.controller.html
      app-updated/
        app-updated.component.html
        app-updated.component.scss
        app-updated.component.ts
        app-updated.controller.html
      shared/
        app-helper/
          app-helper.service.ts
        icon/
          icon.component.html
          icon.component.scss
          icon.component.ts
        icon-button/
          icon-button.component.html
          icon-button.component.scss
          icon-button.component.ts
      app.controller.ts
      app.enum.ts
      app.module.ts
      app.routes.ts
      sync-enabled.controller.ts
    shared/
      alert/
        alert.enum.ts
        alert.interface.ts
        alert.service.spec.ts
        alert.service.ts
      api/
        api-request-interceptor/
          api-request-interceptor.factory.ts
        api-xbrowsersync/
          api-xbrowsersync.enum.ts
          api-xbrowsersync.interface.ts
          api-xbrowsersync.service.ts
        api.enum.ts
        api.interface.ts
      backup-restore/
        backup-restore.interface.ts
        backup-restore.service.ts
      bookmark/
        bookmark-helper/
          bookmark-helper.service.ts
        bookmark.enum.ts
        bookmark.interface.ts
      crypto/
        crypto.service.ts
      errors/
        exception-handler/
          exception-handler.service.ts
        errors.interface.ts
        errors.ts
      log/
        log.enum.ts
        log.interface.ts
        log.service.spec.ts
        log.service.ts
      metadata/
        get-metadata.ts
        metadata.service.ts
      network/
        network.service.spec.ts
        network.service.ts
      settings/
        settings.interface.ts
        settings.service.ts
      store/
        store.enum.ts
        store.interface.ts
        store.service.ts
      sync/
        bookmark-sync-provider/
          bookmark-sync-provider.service.ts
        sync.enum.ts
        sync.interface.ts
        sync.module.ts
        sync.service.ts
      telemetry/
        telemetry.interface.ts
        telemetry.service.ts
      upgrade/
        v1.6.0-upgrade-provider/
          v1.6.0-upgrade-provider.service.ts
        upgrade.interface.ts
        upgrade.service.ts
      utility/
        utility.service.ts
      working/
        working.enum.ts
        working.interface.ts
        working.service.ts
      global-shared.constants.ts
      global-shared.enum.ts
      global-shared.interface.ts
      global-shared.module.ts
    webext/
      chromium/
        chromium-app/
          chromium-app-backup-restore-settings/
            chromium-app-backup-restore-settings.component.ts
          shared/
            chromium-app-helper/
              chromium-app-helper.service.ts
          chromium-app.module.ts
        chromium-background/
          chromium-background.module.ts
        shared/
          chromium-bookmark/
            chromium-bookmark.service.ts
          chromium-platform/
            chromium-platform.service.ts
      firefox/
        firefox-app/
          firefox-app-backup-restore-settings/
            firefox-app-backup-restore-settings.component.ts
          shared/
            firefox-app-helper/
              firefox-app-helper.service.ts
          firefox-app.module.ts
        firefox-background/
          firefox-background.module.ts
        shared/
          firefox-bookmark/
            firefox-bookmark.service.ts
          firefox-platform/
            firefox-platform.service.ts
      shared/
        bookmark-id-mapper/
          bookmark-id-mapper.interface.ts
          bookmark-id-mapper.service.ts
        webext-bookmark/
          webext-bookmark.service.ts
        webext-platform/
          webext-platform.service.ts
        webext-store/
          webext-store.service.ts
        webext-upgrade/
          webext-v1.6.0-upgrade-provider.service.ts
        webext-shared.module.ts
      webext-app/
        shared/
          webext-app-helper/
            webext-app-helper.service.ts
        webext-app-alert/
          webext-app-alert.component.html
          webext-app-alert.component.scss
          webext-app-alert.component.ts
        webext-app-backup-restore-settings/
          webext-app-backup-restore-settings.component.ts
        webext-app-search/
          webext-app-search.component.ts
        webext-app-working/
          webext-app-working.component.html
          webext-app-working.component.scss
          webext-app-working.component.ts
          webext-app-working.controller.html
        webext-app.component.scss
        webext-app.component.ts
        webext-app.module.ts
      webext-background/
        webext-background.component.html
        webext-background.component.ts
        webext-background.module.ts
        webext-background.service.ts
      webpage-metadata-collecter/
        webpage-metadata-collecter.ts
      webext.interface.ts
  styles/
    modules/
      _all.scss
      _animations.scss
      _background.scss
      _borders.scss
      _colors-dark.scss
      _colors-default.scss
      _fonts.scss
      _functions.scss
      _mixins.scss
      _responsive.scss
    partials/
      _animations.scss
      _base.scss
      _bootstrap.scss
      _buttons.scss
      _fonts.scss
      _forms.scss
      _layout.scss
      _typography.scss
      _utilities.scss
    styles.scss
  test/
    mock-services.ts
webpack/
  android.config.js
  base.config.js
  chromium.config.js
  firefox.config.js
  webext.config.js
.gitattributes
.gitignore
CHANGELOG.md
crowdin.yml
LICENSE.md
package.json
README.md
tsconfig.eslint.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Issue report
about: Log an issue or bug with the xBrowserSync browser extensions or mobile app
title: ''
labels: ''
assignees: ''

---

<!--
This is the issue tracker for the xBrowserSync browser extensions and mobile app. If you would like to report an issue for the xBrowserSync API, please do so at https://github.com/xbrowsersync/api/issues/.

Alternatively, if you are a user and need to report an issue with a particular xBrowserSync service, please send us a message instead using the contact form at https://www.xbrowsersync.org/#contact.

Before you continue, please check the list of supported browsers/operating systems (https://github.com/xbrowsersync/app/wiki/Supported-browsers-and-operating-systems), known issues (https://github.com/xbrowsersync/app/wiki/Known-issues) and the FAQs (https://www.xbrowsersync.org/#faqs). Please do not create issues for unsupported browsers/platforms. If your issue is already covered in the existing documentation then it will be closed.

** Important note: I do not have time to chase people for information so if the form below is not completed adequately your issue will likely be closed without further consideration. Remember this is FOSS, if you're using it and want a bug to be fixed then do me the courtesy of completing the issue form properly.

Thanks for using xBrowserSync!
-->

**Describe the issue you are experiencing**
A clear and concise description of your issue:

**How can the issue be reproduced?**
Steps to reproduce the behavior:

1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Screenshots**
If applicable, add screenshots to help explain your problem:

**Desktop browser**
Please complete the following information for all affected desktop browsers:

- OS: [e.g. Win10]
- Browser [e.g. Chrome, Firefox]
- Version [e.g. v1.5.0]

**Mobile device**
Please complete the following information for all affected mobile devices:

- Device: [e.g. Samsung Galaxy S10]
- OS: [e.g. Android 9 Pie]
- Version [e.g. v1.5.0]

**Application log**
Please include the logs from the affected clients:

<details>
<summary>Log entries</summary>

```
Download the Application log from the Settings panel and paste the contents here.
```

</details>
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea to improve xBrowserSync
title: ''
labels: ''
assignees: ''

---

<!--
This is the issue tracker for the xBrowserSync browser extensions and mobile app. If you would like to request a new feature for the xBrowserSync API, please do so at https://github.com/xbrowsersync/api/issues/.

Before you continue, please check the roadmap (https://github.com/xbrowsersync/app/wiki/Roadmap) and current feature requests (https://github.com/xbrowsersync/app/issues?q=is%3Aissue+is%3Aopen+label%3A%22feature+request%22) to see if your idea is already listed. Otherwise, please fill out all of the information below.

Thanks for using xBrowserSync!
-->

**Is your feature request related to a problem?**
A clear and concise description of what the problem is:

E.g. I'm always frustrated when [...]

**Tell us about your idea**
Use screenshots and links to help illustrate if relevant:
</file>

<file path=".github/workflows/build.yml">
name: Build

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '.github/workflows/**.yml'
      - 'res/strings/*.json'
  push:
    paths-ignore:
      - '**.md'
      - '.github/workflows/**.yml'
      - 'res/strings/*.json'
  workflow_dispatch:

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test -- --coverage

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build platforms
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 16

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'

      - uses: android-actions/setup-android@v2

      - name: Fix android build tools cordova issue
        run: |
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --uninstall "build-tools;32.0.0"
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --uninstall "build-tools;31.0.0"
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "build-tools;30.0.3"

      - name: Install cordova
        run: |
          npm install -g cordova@11.0.0
          pushd res/android
          cordova telemetry off
          cordova prepare
          popd

      - name: Install dependencies
        run: npm install

      - name: Build platform:chromium
        run: npm run build:chromium

      - name: Build platform:firefox
        run: npm run build:firefox

      - name: Build platform:android
        run: |
          npm run build:android
          cd build/android
          cordova build android
</file>

<file path=".github/workflows/release.yml">
name: Release

on:
  workflow_dispatch:
    inputs:
      beta_release:
        required: true
        default: 'false'

jobs:
  package:
    name: Package platforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 16

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'

      - uses: android-actions/setup-android@v2

      - name: Fix android build tools cordova issue
        run: |
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --uninstall "build-tools;32.0.0"
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --uninstall "build-tools;31.0.0"
          $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "build-tools;30.0.3"

      - name: Add android sdk build tools to PATH
        run: |
          cd $ANDROID_SDK_ROOT/build-tools/30.0.3
          ls -l
          echo "${{ env.ANDROID_SDK_ROOT }}/build-tools/30.0.3" >> $GITHUB_PATH
          echo "GITHUB_PATH = $GITHUB_PATH"
          echo "PATH = $PATH"

      - name: Install cordova
        run: |
          npm install -g cordova@11.0.0
          pushd res/android
          cordova telemetry off
          cordova prepare
          popd

      - name: Install dependencies
        run: npm install

      - name: Create Chromium package
        run: npm run package:chromium
        env:
          BETA: ${{ github.event.inputs.beta_release == 'true' }}

      - name: Create Firefox package
        run: npm run package:firefox
        env:
          BETA: ${{ github.event.inputs.beta_release == 'true' }}

      - name: Create Android package
        run: npm run package:android
        env:
          SIGNING_ALIAS: ${{ secrets.ANDROID_SIGNING_ALIAS }}
          SIGNING_PASSWORD: ${{ secrets.ANDROID_SIGNING_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}
          BETA: ${{ github.event.inputs.beta_release == 'true' }}

      - name: Set release version env var
        run: |
          echo "RELEASE_VERSION=$(cat PACKAGE_VERSION)" >> $GITHUB_ENV

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ github.event.inputs.beta_release == 'true' }}
          tag_name: v${{ env.RELEASE_VERSION }}
          body_path: CHANGELOG.md
          files: |
            dist/xbrowsersync_${{ env.RELEASE_VERSION }}_chromium.zip
            dist/xbrowsersync_${{ env.RELEASE_VERSION }}_firefox.xpi
            dist/xbrowsersync_${{ env.RELEASE_VERSION }}_android.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</file>

<file path=".github/FUNDING.yml">
patreon: xbrowsersync
liberapay: xbrowsersync
custom: https://link.xbrowsersync.org/cryptos
</file>

<file path="docs/_config.yml">
theme: jekyll-theme-slate
</file>

<file path="docs/firefox-versions.json">
{
  "addons": {
    "{019b606a-6f61-4d01-af2a-cea528f606da}": {
      "updates": [
        {
          "version": "1.4.0",
          "update_link": "https://github.com/xbrowsersync/app/releases/download/v1.4.0/xbrowsersync_1.4.0.xpi"
        },
        {
          "version": "1.5.0",
          "update_link": "https://github.com/xbrowsersync/app/releases/download/v1.5.0/xbrowsersync_1.5.0_firefox.xpi"
        },
        {
          "version": "1.5.1",
          "update_link": "https://github.com/xbrowsersync/app/releases/download/v1.5.1/xbrowsersync_1.5.1_firefox.xpi"
        },
        {
          "version": "1.5.2",
          "update_link": "https://github.com/xbrowsersync/app/releases/download/v1.5.2/xbrowsersync_1.5.2_firefox.xpi"
        }
      ]
    }
  }
}
</file>

<file path="docs/index.md">
## Welcome to GitHub Pages

You can use the [editor on GitHub](https://github.com/xbrowsersync/app/edit/master/docs/index.md) to maintain and preview the content for your website in Markdown files.

Whenever you commit to this repository, GitHub Pages will run [Jekyll](https://jekyllrb.com/) to rebuild the pages in your site, from the content in your Markdown files.

### Markdown

Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for

```markdown
Syntax highlighted code block

# Header 1
## Header 2
### Header 3

- Bulleted
- List

1. Numbered
2. List

**Bold** and _Italic_ and `Code` text

[Link](url) and ![Image](src)
```

For more details see [Basic writing and formatting syntax](https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).

### Jekyll Themes

Your Pages site will use the layout and styles from the Jekyll theme you have selected in your [repository settings](https://github.com/xbrowsersync/app/settings/pages). The name of this theme is saved in the Jekyll `_config.yml` configuration file.

### Support or Contact

Having trouble with Pages? Check out our [documentation](https://docs.github.com/categories/github-pages-basics/) or [contact support](https://support.github.com/contact) and we’ll help you sort it out.
</file>

<file path="fastlane/metadata/android/en-US/changelogs/14007.txt">
- Added Firefox support.
- Huge improvements to encryption: now uses native Web Crypto API rather than external cryptography library, key derivation uses PBKDF2 with 250,000 rounds of SHA-256, encryption uses AES-GCM with a random 16 byte IV and the user's random 32 char sync ID as a salt.
- Data is now compressed before being encrypted reducing sync size by up to 60%.
- Many, many more minor enhancements and bug fixes (see release notes in app for more details).
</file>

<file path="fastlane/metadata/android/en-US/changelogs/15101.txt">
- Updated Android platform to include v1.5.0 changes, and:
 	- Add support for landscape orientation
	- Fixed bug when fetching metadata after sharing bookmark
	- Added get metadata button to bookmark panel
	- Added ability to display search bar beneath search results
	- Backup and log files are now saved to the Download folder
- Added bookmark folder view to search panel
- Added reveal password functionality on login panel
- Many, many more minor enhancements and bug fixes
</file>

<file path="fastlane/metadata/android/en-US/full_description.txt">
xBrowserSync is a completely free and open source tool for syncing your bookmarks and browser data between your desktop browsers. xBrowserSync respects your privacy and gives you complete anonymity — no sign up is required and no personal data is ever collected. It is also completely secure; your data is encrypted client-side with military grade encryption, Even if someone intercepted your data, only you can decrypt it.

xBrowserSync enriches your bookmarks with the addition of descriptions and tags. An intuitive search interface lets you find bookmarks quickly and easily, or simply browse your bookmarks hierarchy by folders. And don’t ever worry about losing your data thanks to the included back up and restore functionality.

The web extension fully supports your native desktop browser bookmarking features; xBrowserSync will preserve your existing bookmarks hierarchy and any changes you make using the native bookmarking functionality are synced by xBrowserSync automatically. xBrowserSync will even add metadata to new bookmarks automatically!

With the xBrowserSync mobile app you can use xBrowserSync on the go with your Android device. Once you have created a new sync on your desktop browser using the web extension, simply scan your sync ID code into the app and enter your password to connect to your synced data. Add new bookmarks easily by sharing from your favourite apps (browsers, YouTube, Spotify and any other app that shares URLs), xBrowserSync will even populate the bookmark properties for you.

For ultimate privacy, configure your very own xBrowserSync cloud service on your Linux or Windows server to sync to. The code for the xBrowserSync cloud service is open source and is easy to set up for any relatively tech savvy individual.

Welcome to browser syncing as it should be: secure, anonymous and free!

Key features: 

★ Sync bookmarks between desktop browsers (syncing of additional browser data will be added in future versions), and access bookmarks on the move using the xBrowserSync Android app.
★ Absolutely free, there are no charges for using the service. Ever.
★ Totally anonymous, no sign up or submission of personal data required, just install and sync.
★ Encrypts your browser data client-side using military grade encryption that only you can decrypt.
★ Browse, find, modify and share bookmarks quickly and easily.
★ Enrich your bookmarks with descriptions and tags.
★ Works with native desktop browser bookmarking features.
★ Add bookmarks with the mobile app by sharing from your favourite apps.
★ Share bookmarks with friends with the mobile app.
★ Back up and restore your synced data for total peace of mind.
★ Run your very own xBrowserSync cloud service for syncing in complete privacy.

For more information visit www.xbrowsersync.org.
</file>

<file path="fastlane/metadata/android/en-US/short_description.txt">
Browser syncing as it should be: secure, anonymous and free!
</file>

<file path="fastlane/metadata/android/en-US/title.txt">
xBrowserSync
</file>

<file path="fastlane/metadata/android/fi-FI/full_description.txt">
xBrowserSync on täysin ilmainen ja avoimen lähdekoodin työkalu kirjanmerkkien ja selaimen tietojen synkronointiin työpöytäselainten välillä. xBrowserSync kunnioittaa yksityisyyttäsi ja antaa sinulle täydellisen anonymiteetin — rekisteröitymistä ei vaadita eikä henkilötietoja kerätä koskaan. Se on myös täysin suojattu; tietosi on salattu asiakkaan puolella sotilaallisen luokan salauksella, Vaikka joku kaappaisi tietosi, vain sinä voit purkaa sen salauksen.

xBrowserSync rikastaa kirjanmerkkejäsi lisäämällä kuvauksia ja tunnisteita. Intuitiivisen hakukäyttöliittymän avulla voit löytää kirjanmerkkejä nopeasti ja helposti, tai yksinkertaisesti selata kirjanmerkkihierarkiaa kansioina. Äläkä ole koskaan holissasi tietojen menetyksestä kiitos mukana olevan varmuuskopiointi- ja palautustoiminnon.

Web-laajennus tukee täysin natiiveja työpöytäselainten kirjanmerkkitoimintoja; xBrowserSync säilyttää olemassa olevan kirjanmerkkihierarkian ja kaikki selaimen työkaluilla tekemäsi muutokset synkronoidaan xBrowserSyncillä automaattisesti. xBrowserSync lisää jopa metatietoja uusiin kirjanmerkkeihin automaattisesti!

xBrowserSync-mobiilisovelluksen avulla voit käyttää xBrowserSync-synkronointia liikkeellä ollessasi Android-laitteesi kanssa. Kun olet luonut uuden synkronoinnin työpöytäselaimessasi käyttäen web-laajennusta, skannaa synkronointi-ID:si QR-koodi sovellukseen ja syötä salasanasi, jotta voit muodostaa yhteyden synkronoituihin tietoihisi. Lisää uusia kirjanmerkkejä helposti jakamalla suosikkisovelluksistasi (selaimet, YouTube, Spotify ja mikä tahansa muu sovellus, joka jakaa URL-osoitteet), xBrowserSync jopa täyttää kirjanmerkin ominaisuudet sinulle.

Äärimmäistä yksityisyyttä varten, määritä oma xBrowserSync-pilvipalvelusi Linux- tai Windows-palvelimellesi. xBrowserSync-pilvipalvelun koodi on avointa lähdekoodia ja kenelle tahansa suhteellisen tekniselle henkilölle se on helppo asentaa.

Tervetuloa synkronoimaan selaimesi oikein: turvallisesti, anonyymisti ja ilmaiseksi!

Avainominaisuudet: 

★ Synkronoi kirjanmerkit työpöytäselainten välillä (selaimen lisätietojen synkronointi lisätään tulevaisuudessa) ja käytä kirjanmerkkejä liikkeellä ollessasi xBrowserSyncin Android-sovelluksella.
★ Ehdottomasti täysin ilmainen, palvelun käytöstä ei veloiteta mitään. Koskaan.
★ Täysin anonyymi, ei rekisteröitymistä tai tarvetta henkilökohtaisille tiedoille, asenna ja synkronoi.
★ Salaa selaimesi teidot asiakkaan puolella sotilaallisen luokan salauksella niin, että vain sinä voit purkaa salauksen.
★ Selaa, etsi, muokkaa ja jaa kirjanmerkkejä nopeasti ja helposti.
★ Rikasta kirjanmerkkejä kuvauksilla ja tunnisteilla.
★ Toimii työpöytäselainten natiivien kirjanmerkkitoimintojen kanssa.
★ Lisää kirjanmerkkejä mobiilisovelluksella jakamalla ne suosikkisovelluksistasi.
★ Jaa kirjanmerkit kavereiden kanssa mobiilisovelluksella.
★ Varmuuskopioi ja palauta synkronoidut tietosi täydellistä mielenrauhaa varten.
★ Pyöritä omaa xBrowserSync-pilvipalveluasi synkronoidaksesi täysin yksityisesti.

Lisätietoja löydät osoitteesta www.xbrowsersync.org.
</file>

<file path="fastlane/metadata/android/fi-FI/short_description.txt">
Selainsynkronointi oikein: turvallisesti, anonyymisti ja ilmaiseksi!
</file>

<file path="fastlane/metadata/android/pt-BR/full_description.txt">
xBrowserSync é uma ferramenta totalmente gratuita e de código aberto para sincronizar seus favoritos e dados do navegador entre os seus navegadores desktop. O xBrowserSync respeita a sua privacidade e lhe dá anonimato total — nenhum registro é necessário e nenhum dado pessoal será coletado. Ele também é completamente seguro; seus dados são criptografados pelo cliente com criptografia de categoria militar, mesmo que alguém tenha interceptado seus dados, só você pode descriptografá-los.

xBrowserSync enriquece seus favoritos com a adição de descrições e tags. Uma interface de busca intuitiva permite encontrar favoritos de forma rápida e fácil, ou simplesmente navegar pela hierarquia de favoritos por pastas. E nunca se preocupe em perder seus dados graças à funcionalidade de backup e restauração incluída.

A extensão da web suporta totalmente os recursos de favoritos do navegador nativo; xBrowserSync preservará sua hierarquia de favoritos existente e quaisquer alterações que você fizer usando a funcionalidade de favoritos nativos serão sincronizadas pelo xBrowserSync automaticamente. xBrowserSync vai até adicionar metadados aos novos favoritos automaticamente!

Com o aplicativo móvel xBrowserSync, você pode usar xBrowserSync em qualquer lugar com o seu dispositivo Android. Depois de criar uma nova sincronização no navegador do computador usando a extensão da web, simplesmente digitalize o seu código de identificação sincronizado no aplicativo e digite sua senha para conectar-se aos seus dados sincronizados. Adicione novos favoritos facilmente compartilhando seus aplicativos favoritos (navegadores, YouTube, Spotify e qualquer outro aplicativo que compartilhe URLs), xBrowserSync até irá preencher as propriedades dos favoritos para você.

Para privacidade suprema, configure seu próprio serviço de nuvem xBrowserSync no seu servidor Linux ou Windows para sincronizar. O código para o serviço de nuvem xBrowserSync é de código aberto e é fácil de configurar para qualquer indivíduo com experiência tecnológica.

Bem-vindo à sincronização do navegador como deve ser: seguro, anônimo e grátis!

Principais recursos:

★ Sincronizar favoritos entre os navegadores do computador (sincronização de dados adicionais do navegador será adicionada em futuras versões), e acesse os favoritos no movimento usando o app Android xBrowserSync.
★ Absolutamente gratuito, não há nenhuma cobrança por usar o serviço. Jamais.
★ Totalmente anônimo, sem registro ou submissão de dados pessoais, basta instalar e sincronizar.
★ Criptografa o lado do cliente de dados do seu navegador usando criptografia de nível militar que somente você pode descriptografar.
★ Localize, modifique e compartilhe favoritos de forma rápida e fácil.
★ Enriqueça seus favoritos com descrições e tags.
★ Funciona com recursos de favoritos nativos do navegador.
★ Adicione favoritos ao app para dispositivos móveis, compartilhando seus apps favoritos.
★ Compartilhe favoritos com amigos com o aplicativo para dispositivos móveis.
★ Faça backup e restaure seus dados sincronizados para total tranquilidade de espírito.
★ Execute o seu próprio serviço de nuvem xBrowserSync para sincronizar com total privacidade.

Para mais informações visite www.xbrowsersync.org.
</file>

<file path="fastlane/metadata/android/pt-BR/short_description.txt">
Sincronização do navegador deve ser: segura, anônima e gratuita!
</file>

<file path="fastlane/metadata/android/ru-RU/full_description.txt">
xBrowserSync - это совершенно бесплатное приложение с открытым исходным кодом для синхронизации закладок и данных между браузерами. xBrowserSync уважает вашу конфиденциальность и обеспечивает полную анонимность — регистрация не требуется, и ни при каких обстоятельствах персональные данные не собираются. Это полностью безопасно; ваши данные зашифрованы на стороне клиента с шифрованием военного класса, даже если кто-то перехватил ваши данные, только вы можете расшифровать их.

xBrowserSync обогащает ваши закладки добавлением описаний и тегов. Интуитивно понятный интерфейс поиска позволяет быстро и легко находить закладки или просто просматривать иерархию закладок по папкам. И не беспокойтесь о потере ваших данных благодаря наличию функции резервного копирования и восстановления.

Веб-расширение полностью поддерживает функции закладок Вашего браузера рабочего стола; xBrowserSync сохранит иерархию закладок и все изменения, которые вы вносите с помощью родной функции закладок, синхронизируются с xBrowserSync автоматически. xBrowserSync автоматически добавит метаданные в новые закладки!

С помощью мобильного приложения xBrowserSync вы можете использовать xBrowserSync вместе с вашим Android-устройством. После создания новой синхронизации в настольном браузере с использованием веб-расширения, просто отсканируйте QR-код вашей синхронизации в приложение и введите пароль, чтобы подключиться к синхронизированным данным. Добавляйте новые закладки с помощью своих любимых приложений (браузеров, YouTube, Spotify и любое другое приложение, которое делится URL), xBrowserSync даже заполнит свойства закладок.

Для полной конфиденциальности настройте собственную службу xBrowserSync на вашем сервере Linux или Windows. Код для облачного сервиса xBrowserSync является открытым исходным кодом и легко настраивается для любых относительно сложных индивидуальных возможностей.

Добро пожаловать в браузерную синхронизацию, как она должна быть: безопасная, анонимная и бесплатная!

Основные возможности:

★ Синхронизация закладок между браузерами рабочего стола (синхронизация дополнительных данных браузера будет добавлена в будущих версиях), и доступ к закладкам при перемещении с помощью приложения xBrowserSync для Android.
★ Абсолютно бесплатно, никаких комиссий за пользование сервисом. Навсегда.
★ Полностью анонимно, без регистрации и ввода персональных данных, просто установите и синхронизируйтесь.
★ Шифрование данных вашего браузера с помощью шифрования военного класса, которое только Вы можете расшифровать.
★ Ищите, находите, изменяйте закладки быстро и просто.
★ Улучшайте ваши закладки описаниями и тегами.
★ Работайте с родными закладками браузера.
★ Добавляйте закладки с мобильного приложения, поделившись ими из других приложений.
★ Делитесь закладками с друзьями в мобильном приложении.
★ Создание резервных копий и восстановление синхронизированных данных для полного спокойствия.
★ Запустите собственную службу xBrowserSync для синхронизации и полной конфиденциальности.

Для получения дополнительной информации посетите www.xbrowsersync.org.
</file>

<file path="fastlane/metadata/android/ru-RU/short_description.txt">
Синхронизация браузера как она должна быть: безопасная, анонимная и бесплатная!
</file>

<file path="fastlane/metadata/android/zh-CN/full_description.txt">
xBrowserSync 是一个完全免费的开源工具，用于在桌面浏览器之间同步您的书签和浏览器数据。 xBrowserSync 尊重您的隐私并给予您完整的匿名性 — — 不需要注册，也从未收集过任何个人数据。 它也是完全安全的； 您的数据在客户端进行了军用级加密，即使有人截获了您的数据，也只有您可以对其解密。

xBrowserSync 通过添加描述和标记丰富了您的书签。 直观的搜索界面可以让您快速轻松地找到书签，或者只是通过文件夹来浏览您的书签等级。 由于包含了备份和恢复功能，所以不必担心您的数据丢失。

Web 扩展完全支持您原生的桌面浏览器书签功能； xBrowserSync 将保存您现有的书签层级，您使用本地书签功能进行的任何更改都会通过 xBrowserSync 自动同步。 xBrowserSync 甚至会自动将元数据添加到新书签！

使用 xBrowserSync 移动应用程序，您可以使用 xBrowserSync 与您的 Android 设备连接。 一旦您使用网页扩展在桌面浏览器上创建了新的同步， 只需扫描您的同步 ID 代码到应用程序并输入密码以连接到您的同步数据。 通过(浏览器、YouTube、Spotify 等任何可以分享 URL 的应用程序) 分享，就可以轻松添加书签。 xBrowserSync 甚至可以自动抓取书签属性。

为了最终隐私，请在您的 Linux 或 Windows 服务器上配置您自己的 xBrowserSync 云服务以进行同步。 xBrowserSync 云服务的代码是开源的，并且易于为任何相对精通技术的人设置。

欢迎使用浏览器同步：安全、匿名和免费！

关键功能： 

★ 在桌面浏览器之间同步书签(将在未来版本中添加额外浏览器数据同步)， 并使用 xBrowserSync Android 应用程序访问移动上的书签。
★ 绝对免费，无需收费使用此服务。 永远。
★ 完全匿名，不需要注册或提交个人数据，只需安装和同步。
★ 使用军事等级加密来加密您的浏览器数据客户端，只有您才能解密。
★ 快速浏览、查找、修改和分享书签。
★ 用描述和标记丰富你的书签。
★ 与本地桌面浏览器书签功能兼容。
★ 通过您最喜欢的应用分享来添加书签。
★ 通过手机应用与朋友分享书签。
★ 备份和还原您同步的数据以实现心灵完全安宁。
★ 运行您自己的 xBrowserSync 云服务以便完全隐私地同步。

欲了解更多信息，请访问 www.xbrowsersync.org。
</file>

<file path="fastlane/metadata/android/zh-CN/short_description.txt">
欢迎使用浏览器同步：安全、匿名和免费！
</file>

<file path="res/android/platforms/.gitignore">
# Ignore everything in this directory
*
# Except this file
!.gitignore
</file>

<file path="res/android/plugins/.gitignore">
# Ignore everything in this directory
*
# Except this file
!.gitignore
</file>

<file path="res/android/res/android/drawable/app_background_bg.xml">
<?xml version="1.0" encoding="utf-8"?>
<vector android:height="24dp" android:viewportHeight="1080" android:viewportWidth="1080" android:width="24dp" 
  xmlns:aapt="http://schemas.android.com/aapt" 
  xmlns:android="http://schemas.android.com/apk/res/android">
  <path android:pathData="M0,0h1080v1080h-1080z">
    <aapt:attr name="android:fillColor">
      <gradient android:endX="776.7206" android:endY="-110.3847" android:startX="303.2794" android:startY="1190.3846" android:type="linear">
        <item android:color="#FF01AB8A" android:offset="0"/>
        <item android:color="#FF35C6E8" android:offset="1"/>
      </gradient>
    </aapt:attr>
  </path>
</vector>
</file>

<file path="res/android/res/android/drawable/app_background_fg.xml">
<?xml version="1.0" encoding="utf-8"?>
<vector android:height="144dp" android:viewportHeight="144" android:viewportWidth="114.6" android:width="115dp" 
  xmlns:android="http://schemas.android.com/apk/res/android">
  <path android:fillColor="#0A323D" android:pathData="M32.7,140.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L32.7,140.8zM29.6,140.6l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8L29.6,140.6z"/>
  <path android:fillColor="#0A323D" android:pathData="M35.5,139.2l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.7,1L35.5,139.2z"/>
  <path android:fillColor="#0A323D" android:pathData="M47.9,131.9l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L47.9,131.9zM44.9,131.7l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8L44.9,131.7z"/>
  <path android:fillColor="#0A323D" android:pathData="M56.3,127.1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L56.3,127.1z"/>
  <path android:fillColor="#0A323D" android:pathData="M64.6,122.3l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1L64.6,122.3z"/>
  <path android:fillColor="#0A323D" android:pathData="M71.3,116.4l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8l1.4,-0.8L71.3,116.4zM66.5,115.2l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8L66.5,115.2z"/>
  <path android:fillColor="#0A323D" android:pathData="M75.7,115.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.7,1L75.7,115.8z"/>
  <path android:fillColor="#0A323D" android:pathData="M88.2,108.6l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1L88.2,108.6z"/>
  <path android:fillColor="#0A323D" android:pathData="M99.9,105.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L99.9,105.8z"/>
  <path android:fillColor="#0A323D" android:pathData="M104.9,98.9l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.7,1l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L104.9,98.9z"/>
  <path android:fillColor="#0A323D" android:pathData="M108.2,91.1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1L108.2,91.1z"/>
  <path android:fillColor="#0A323D" android:pathData="M79.7,38.3l-26.4,-15.3l-0.1,-15.3l26.4,15.3z"/>
  <path android:fillColor="#0A323D" android:pathData="M79.9,99.5l-26.5,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#0A323D" android:pathData="M66.5,91.9l-26.4,-15.4l-0.1,-15.3l26.5,15.4z"/>
  <path android:fillColor="#0A323D" android:pathData="M66.4,61.3l-26.4,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#0A323D" android:pathData="M53.2,84.3l-26.5,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#0A323D" android:pathData="M39.9,107.2l-26.4,-15.3l-0.1,-15.3l26.5,15.3z"/>
  <path android:fillColor="#0A323D" android:pathData="M39.8,76.7l-26.4,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#0A323D" android:pathData="M26.5,69.1l-26.5,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#0A323D" android:pathData="M26.7,130.2l-26.5,-15.4l0,-15.2l26.4,15.3z"/>
  <path android:fillColor="#267D91" android:pathData="M79.6,23l-26.4,-15.3l13.3,-7.7l26.5,15.4z"/>
  <path android:fillColor="#267D91" android:pathData="M79.8,84.2l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#267D91" android:pathData="M66.5,76.6l-26.5,-15.4l13.3,-7.7l26.5,15.4z"/>
  <path android:fillColor="#267D91" android:pathData="M66.4,46l-26.4,-15.4l13.3,-7.6l26.4,15.3z"/>
  <path android:fillColor="#267D91" android:pathData="M53.1,69l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#267D91" android:pathData="M39.9,91.9l-26.5,-15.3l13.3,-7.7l26.5,15.4z"/>
  <path android:fillColor="#267D91" android:pathData="M39.8,61.4l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#267D91" android:pathData="M26.4,53.8l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#267D91" android:pathData="M26.6,114.9l-26.4,-15.3l13.3,-7.7l26.4,15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M93,15.4l0,15.2l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M93.1,76.5l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M79.8,68.9l0,15.3l-13.3,7.7l0,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M79.7,38.3l0,15.3l-13.3,7.7l0,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M66.4,61.3l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M53.2,84.3l0,15.3l-13.3,7.6l0,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M53.1,53.7l0,15.3l-13.3,7.7l0,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M39.7,46.1l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#71D2E2" android:pathData="M39.9,107.2l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
</vector>
</file>

<file path="res/android/res/android/drawable/app_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
  <item android:drawable="@drawable/app_background_bg"/>
  <item android:drawable="@drawable/app_background_fg" android:gravity="center"/>
</layer-list>
</file>

<file path="res/android/res/android/drawable/ic_launcher_foreground.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="1440"
    android:viewportHeight="1440">
  <group android:translateX="462.3905"
      android:translateY="360">
    <path
        android:pathData="M440.699,211.95l-146.181,-84.951l-0.24,-84.528l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M441.658,550.098l-146.181,-84.951l-0.24,-84.528l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M367.857,508.041l-146.181,-84.951l-0.24,-84.528l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M367.377,338.986l-146.181,-84.951l-0.239,-84.566l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M294.056,465.984l-146.181,-84.951l-0.24,-84.528l146.181,84.952z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M220.734,592.982l-146.181,-84.951l-0.24,-84.527l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M220.255,423.927l-146.181,-84.951l-0.24,-84.565l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M146.421,381.851l-146.181,-84.951l-0.24,-84.527l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M147.379,720l-146.181,-84.951l-0.239,-84.528l146.181,84.951z"
        android:fillColor="#0A323D"/>
    <path
        android:pathData="M440.459,127.422l-146.181,-84.951l73.562,-42.471l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M441.418,465.57l-146.181,-84.951l73.561,-42.47l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M367.617,423.513l-146.181,-84.951l73.561,-42.47l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M367.138,254.42l-146.181,-84.951l73.561,-42.47l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M293.816,381.457l-146.181,-84.952l73.561,-42.47l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M220.494,508.455l-146.181,-84.951l73.562,-42.471l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M220.015,339.362l-146.181,-84.951l73.561,-42.471l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M146.181,297.324l-146.181,-84.951l73.594,-42.49l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M147.14,635.472l-146.181,-84.951l73.594,-42.49l146.181,84.951z"
        android:fillColor="#267D91"/>
    <path
        android:pathData="M514.021,84.951l0.239,84.528l-73.561,42.471l-0.24,-84.528z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M514.979,423.1l0.24,84.527l-73.561,42.471l-0.24,-84.528z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M441.178,381.043l0.24,84.527l-73.561,42.471l-0.24,-84.528z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M440.699,211.95l0.24,84.565l-73.562,42.471l-0.239,-84.566z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M367.377,338.986l0.24,84.527l-73.561,42.471l-0.24,-84.527z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M294.056,465.984l0.239,84.528l-73.561,42.47l-0.24,-84.527z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M293.576,296.891l0.24,84.566l-73.561,42.47l-0.24,-84.565z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M219.775,254.834l0.24,84.528l-73.594,42.489l-0.24,-84.527z"
        android:fillColor="#71D2E2"/>
    <path
        android:pathData="M220.734,592.982l0.24,84.528l-73.595,42.49l-0.239,-84.528z"
        android:fillColor="#71D2E2"/>
  </group>
</vector>
</file>

<file path="res/android/res/android/drawable-night/app_background_bg.xml">
<?xml version="1.0" encoding="utf-8"?>
<color android:color="#1e2228" 
  xmlns:android="http://schemas.android.com/apk/res/android"></color>
</file>

<file path="res/android/res/android/drawable-night/app_background_fg.xml">
<?xml version="1.0" encoding="utf-8"?>
<vector android:height="144dp" android:viewportHeight="144" android:viewportWidth="114.6" android:width="115dp" 
  xmlns:android="http://schemas.android.com/apk/res/android">
  <path android:fillColor="#768390" android:pathData="M32.7,140.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L32.7,140.8zM29.6,140.6l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8L29.6,140.6z"/>
  <path android:fillColor="#768390" android:pathData="M35.5,139.2l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.7,1L35.5,139.2z"/>
  <path android:fillColor="#768390" android:pathData="M47.9,131.9l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L47.9,131.9zM44.9,131.7l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8L44.9,131.7z"/>
  <path android:fillColor="#768390" android:pathData="M56.3,127.1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L56.3,127.1z"/>
  <path android:fillColor="#768390" android:pathData="M64.6,122.3l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1L64.6,122.3z"/>
  <path android:fillColor="#768390" android:pathData="M71.3,116.4l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8l1.4,-0.8L71.3,116.4zM66.5,115.2l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8L66.5,115.2z"/>
  <path android:fillColor="#768390" android:pathData="M75.7,115.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.7,1L75.7,115.8z"/>
  <path android:fillColor="#768390" android:pathData="M88.2,108.6l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1L88.2,108.6z"/>
  <path android:fillColor="#768390" android:pathData="M99.9,105.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L99.9,105.8z"/>
  <path android:fillColor="#768390" android:pathData="M104.9,98.9l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.7,1l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1l1.7,1l1.7,1l1.7,1L104.9,98.9z"/>
  <path android:fillColor="#768390" android:pathData="M108.2,91.1l-1.7,-1l-1.4,0.8l-1.4,0.8l-1.4,0.8l1.7,1l1.7,1l1.7,1l1.4,-0.8l1.4,-0.8l1.4,-0.8l-1.7,-1l1.4,-0.8l1.7,1l1.7,1l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.4,0.8l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l-1.7,-1l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.4,-0.8l1.7,1l1.7,1L108.2,91.1z"/>
  <path android:fillColor="#2D333B" android:pathData="M79.7,38.3l-26.4,-15.3l-0.1,-15.3l26.4,15.3z"/>
  <path android:fillColor="#2D333B" android:pathData="M79.9,99.5l-26.5,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#2D333B" android:pathData="M66.5,91.9l-26.4,-15.4l-0.1,-15.3l26.5,15.4z"/>
  <path android:fillColor="#2D333B" android:pathData="M66.4,61.3l-26.4,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#2D333B" android:pathData="M53.2,84.3l-26.5,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#2D333B" android:pathData="M39.9,107.2l-26.4,-15.3l-0.1,-15.3l26.5,15.3z"/>
  <path android:fillColor="#2D333B" android:pathData="M39.8,76.7l-26.4,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#2D333B" android:pathData="M26.5,69.1l-26.5,-15.4l0,-15.3l26.4,15.4z"/>
  <path android:fillColor="#2D333B" android:pathData="M26.7,130.2l-26.5,-15.4l0,-15.2l26.4,15.3z"/>
  <path android:fillColor="#444c56" android:pathData="M79.6,23l-26.4,-15.3l13.3,-7.7l26.5,15.4z"/>
  <path android:fillColor="#444c56" android:pathData="M79.8,84.2l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#444c56" android:pathData="M66.5,76.6l-26.5,-15.4l13.3,-7.7l26.5,15.4z"/>
  <path android:fillColor="#444c56" android:pathData="M66.4,46l-26.4,-15.4l13.3,-7.6l26.4,15.3z"/>
  <path android:fillColor="#444c56" android:pathData="M53.1,69l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#444c56" android:pathData="M39.9,91.9l-26.5,-15.3l13.3,-7.7l26.5,15.4z"/>
  <path android:fillColor="#444c56" android:pathData="M39.8,61.4l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#444c56" android:pathData="M26.4,53.8l-26.4,-15.4l13.3,-7.7l26.4,15.4z"/>
  <path android:fillColor="#444c56" android:pathData="M26.6,114.9l-26.4,-15.3l13.3,-7.7l26.4,15.3z"/>
  <path android:fillColor="#768390" android:pathData="M93,15.4l0,15.2l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M93.1,76.5l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M79.8,68.9l0,15.3l-13.3,7.7l0,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M79.7,38.3l0,15.3l-13.3,7.7l0,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M66.4,61.3l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M53.2,84.3l0,15.3l-13.3,7.6l0,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M53.1,53.7l0,15.3l-13.3,7.7l0,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M39.7,46.1l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
  <path android:fillColor="#768390" android:pathData="M39.9,107.2l0.1,15.3l-13.3,7.7l-0.1,-15.3z"/>
</vector>
</file>

<file path="res/android/res/android/drawable-v24/ic_launcher_background.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="1080"
    android:viewportHeight="1080">
  <path
      android:pathData="M0,0h1080v1080h-1080z">
    <aapt:attr name="android:fillColor">
      <gradient 
          android:startY="776.7206"
          android:startX="-110.3847"
          android:endY="303.2794"
          android:endX="1190.3846"
          android:type="linear">
        <item android:offset="0" android:color="#FF01AB8A"/>
        <item android:offset="1" android:color="#FF35C6E8"/>
      </gradient>
    </aapt:attr>
  </path>
</vector>
</file>

<file path="res/android/res/android/mipmap-anydpi-v26/ic_launcher_round.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
</adaptive-icon>
</file>

<file path="res/android/res/android/mipmap-anydpi-v26/ic_launcher.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
</adaptive-icon>
</file>

<file path="res/android/res/android/values/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <style name="AppTheme" parent="Theme.AppCompat.DayNight.NoActionBar">
    <item name="android:windowBackground">@drawable/app_background</item>
    <item name="android:windowTranslucentStatus">true</item>
  </style>
</resources>
</file>

<file path="res/android/res/android/xml/network_security_config.xml">
<?xml version="1.0" encoding="utf-8"?>

<network-security-config>
  <base-config cleartextTrafficPermitted="true">
    <trust-anchors>
      <certificates src="system"/>
      <certificates src="user"/>
    </trust-anchors>
  </base-config>
</network-security-config>
</file>

<file path="res/android/scripts/beforeBuild.js">
const fs = require('fs');
const path = require('path');

module.exports = (ctx) => {
  let source;
  let destination;

  // Copy build-extras.gradle
  source = path.join(ctx.opts.projectRoot, 'build-extras.gradle');
  destination = path.join(ctx.opts.projectRoot, 'platforms/android/app/build-extras.gradle');
  fs.copyFileSync(source, destination);

  // Copy gradle.properties
  if (ctx.opts.options.release) {
    source = path.join(ctx.opts.projectRoot, 'gradle.release.properties');
  } else {
    source = path.join(ctx.opts.projectRoot, 'gradle.dev.properties');
  }
  destination = path.join(ctx.opts.projectRoot, 'platforms/android/app/gradle.properties');
  fs.copyFileSync(source, destination);
};
</file>

<file path="res/android/www/app.html">
<!doctype html>
<html ng-csp>

<head>
  <meta charset="utf-8">
  <meta name="color-scheme" content="dark">
  <link href="assets/app.css" rel="stylesheet">
  <link rel="preload" href="assets/roboto-condensed-all-400-normal.woff" as="font" type="font/woff">
  <link rel="preload" href="assets/roboto-condensed-all-400-italic.woff" as="font" type="font/woff">
  <link rel="preload" href="assets/roboto-condensed-all-700-normal.woff" as="font" type="font/woff">
  <link rel="preload" href="assets/roboto-condensed-all-700-italic.woff" as="font" type="font/woff">
  <link rel="preload" href="assets/source-code-pro-all-500-normal.woff" as="font" type="font/woff">
</head>

<body>
  <app></app>
  <script src="cordova.js"></script>
  <script src="assets/vendor.js"></script>
  <script src="assets/app.js"></script>
</body>

</html>
</file>

<file path="res/android/.gitignore">
package-lock.json
</file>

<file path="res/android/build-extras.gradle">
android {
  lintOptions {
    abortOnError false
    checkAllWarnings false
    checkReleaseBuilds false
    ignoreWarnings true
    quiet true
  }
}
</file>

<file path="res/android/config.xml">
<?xml version='1.0' encoding='utf-8'?>
<widget id="com.xBrowserSync.android"
  xmlns="http://www.w3.org/ns/widgets" 
  xmlns:android="http://schemas.android.com/apk/res/android" 
  xmlns:cdv="http://cordova.apache.org/ns/1.0">
  <name>xBrowserSync</name>
  <description>Browser syncing as it should be: secure, anonymous and free!</description>
  <author email="admin@xbrowsersync.org" href="https://www.xbrowsersync.org" />
  <content src="app.html" />
  <access origin="*" />
  <allow-intent href="http://*/*" />
  <allow-intent href="https://*/*" />
  <allow-intent href="tel:*" />
  <allow-intent href="sms:*" />
  <allow-intent href="mailto:*" />
  <allow-intent href="geo:*" />
  <platform name="android">
    <allow-intent href="market:*" />
    <config-file target="AndroidManifest.xml" parent="/manifest/application/activity[@android:name='MainActivity']">
      <intent-filter>
        <action android:name="android.intent.action.SEND" />
        <category android:name="android.intent.category.DEFAULT" />
        <data android:mimeType="text/plain" />
      </intent-filter>
    </config-file>
    <edit-config file="AndroidManifest.xml" target="/manifest/application" mode="merge">
      <application android:icon="@mipmap/ic_launcher" android:networkSecurityConfig="@xml/network_security_config" android:roundIcon="@mipmap/ic_launcher_round" />
    </edit-config>
    <edit-config file="AndroidManifest.xml" target="/manifest/application/activity[@android:name='MainActivity']" mode="merge">
      <activity android:allowBackup="false" android:fullBackupOnly="false" android:theme="@style/AppTheme" android:windowSoftInputMode="adjustPan" />
    </edit-config>
    <hook type="before_build" src="scripts/beforeBuild.js" />
    <resource-file src="res/android/drawable/app_background.xml" target="app/src/main/res/drawable/app_background.xml" />
    <resource-file src="res/android/drawable/app_background_bg.xml" target="app/src/main/res/drawable/app_background_bg.xml" />
    <resource-file src="res/android/drawable/app_background_fg.xml" target="app/src/main/res/drawable/app_background_fg.xml" />
    <resource-file src="res/android/drawable/ic_launcher_foreground.xml" target="app/src/main/res/drawable/ic_launcher_foreground.xml" />
    <resource-file src="res/android/drawable-v24/ic_launcher_background.xml" target="app/src/main/res/drawable-v24/ic_launcher_background.xml" />
    <resource-file src="res/android/drawable-night/app_background_bg.xml" target="app/src/main/res/drawable-night/app_background_bg.xml" />
    <resource-file src="res/android/drawable-night/app_background_fg.xml" target="app/src/main/res/drawable-night/app_background_fg.xml" />
    <resource-file src="res/android/mipmap-anydpi-v26/ic_launcher.xml" target="app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" />
    <resource-file src="res/android/mipmap-anydpi-v26/ic_launcher_round.xml" target="app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml" />
    <resource-file src="res/android/mipmap-hdpi/ic_launcher.png" target="app/src/main/res/mipmap-hdpi/ic_launcher.png" />
    <resource-file src="res/android/mipmap-hdpi/ic_launcher_round.png" target="app/src/main/res/mipmap-hdpi/ic_launcher_round.png" />
    <resource-file src="res/android/mipmap-mdpi/ic_launcher.png" target="app/src/main/res/mipmap-mdpi/ic_launcher.png" />
    <resource-file src="res/android/mipmap-mdpi/ic_launcher_round.png" target="app/src/main/res/mipmap-mdpi/ic_launcher_round.png" />
    <resource-file src="res/android/mipmap-xhdpi/ic_launcher.png" target="app/src/main/res/mipmap-xhdpi/ic_launcher.png" />
    <resource-file src="res/android/mipmap-xhdpi/ic_launcher_round.png" target="app/src/main/res/mipmap-xhdpi/ic_launcher_round.png" />
    <resource-file src="res/android/mipmap-xxhdpi/ic_launcher.png" target="app/src/main/res/mipmap-xxhdpi/ic_launcher.png" />
    <resource-file src="res/android/mipmap-xxhdpi/ic_launcher_round.png" target="app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png" />
    <resource-file src="res/android/mipmap-xxxhdpi/ic_launcher.png" target="app/src/main/res/mipmap-xxxhdpi/ic_launcher.png" />
    <resource-file src="res/android/mipmap-xxxhdpi/ic_launcher_round.png" target="app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png" />
    <resource-file src="res/android/values/styles.xml" target="app/src/main/res/values/styles.xml" />
    <resource-file src="res/android/xml/network_security_config.xml" target="app/src/main/res/xml/network_security_config.xml" />
  </platform>
  <preference name="android-minSdkVersion" value="26" />
  <preference name="android-targetSdkVersion" value="30" />
  <preference name="AndroidXEnabled" value="true" />
  <preference name="GradlePluginKotlinEnabled" value="true" />
  <preference name="GradlePluginKotlinCodeStyle" value="official" />
  <preference name="GradlePluginKotlinVersion" value="1.3.50" />
  <preference name="AndroidLaunchMode" value="singleTask" />
  <preference name="BackgroundColor" value="#00000000"/>
  <preference name="DisallowOverscroll" value="true" />
  <preference name="OverrideUserAgent" value="Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" />
</widget>
</file>

<file path="res/android/gradle.dev.properties">
org.gradle.jvmargs=-Xmx512m -XX:MaxMetaspaceSize=256m
org.gradle.daemon.performance.enable-monitoring=false
</file>

<file path="res/android/gradle.release.properties">
org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g
org.gradle.daemon.performance.enable-monitoring=false
</file>

<file path="res/android/package.json">
{
  "name": "com.xbrowsersync.android",
  "displayName": "xBrowserSync",
  "version": "1.6.0",
  "description": "xBrowserSync mobile app for Android.",
  "keywords": [
    "ecosystem:cordova"
  ],
  "author": "xBrowserSync",
  "license": "GPL-3.0-only",
  "dependencies": {
    "com-darryncampbell-cordova-plugin-intent": "^2.0.0",
    "cordova-android": "^9.1.0",
    "cordova-clipboard": "^1.3.0",
    "cordova-plugin-android-dark-mode-support": "^1.0.0",
    "cordova-plugin-androidx-adapter": "^1.1.3",
    "cordova-plugin-app-version": "^0.1.9",
    "cordova-plugin-background-mode": "github:xbrowsersync/cordova-plugin-background-mode#0.7.4",
    "cordova-plugin-device": "^2.0.3",
    "cordova-plugin-exit": "^1.0.3",
    "cordova-plugin-file": "^6.0.2",
    "cordova-plugin-filepicker": "^1.1.6",
    "cordova-plugin-globalization": "^1.11.0",
    "cordova-plugin-inappbrowser": "github:xbrowsersync/cordova-plugin-inappbrowser#3.1.2",
    "cordova-plugin-ionic-keyboard": "^2.2.0",
    "cordova-plugin-native-spinner": "^1.1.3",
    "cordova-plugin-nativestorage": "^2.3.2",
    "cordova-plugin-network-information": "^2.0.2",
    "cordova-plugin-qrscanner": "github:xbrowsersync/cordova-plugin-qrscanner#3.0.3",
    "cordova-plugin-snackbar": "github:xbrowsersync/cordova-plugin-snackbar#2.2.2",
    "cordova-plugin-whitelist": "1.3.4",
    "cordova-sqlite-storage": "^6.0.0"
  },
  "cordova": {
    "plugins": {
      "cordova-plugin-file": {},
      "cordova-plugin-filepicker": {},
      "cordova-plugin-native-spinner": {},
      "cordova-plugin-nativestorage": {},
      "cordova-plugin-whitelist": {},
      "cordova-plugin-device": {},
      "cordova-plugin-snackbar": {},
      "cordova-plugin-network-information": {},
      "cordova-plugin-ionic-keyboard": {},
      "cordova-plugin-inappbrowser": {},
      "cordova-clipboard": {},
      "cordova-plugin-background-mode": {},
      "cordova-plugin-qrscanner": {},
      "cordova-plugin-exit": {},
      "cordova-plugin-globalization": {},
      "cordova-plugin-app-version": {},
      "com-darryncampbell-cordova-plugin-intent": {},
      "cordova-plugin-android-dark-mode-support": {},
      "cordova-plugin-androidx-adapter": {},
      "cordova-sqlite-storage": {},
      "cordova-plugin-x-socialsharing": {}
    },
    "platforms": [
      "android"
    ]
  },
  "devDependencies": {
    "cordova-plugin-x-socialsharing": "^6.0.3",
    "es6-promise-plugin": "^4.2.2"
  }
}
</file>

<file path="res/images/clouds.svg">
<svg version="1.1" viewBox="0 0 1668 1000" xmlns="http://www.w3.org/2000/svg"><polygon points="782.56 330.6 782.56 330.66 802.56 319.13 802.5 319.1" fill="none"/><polygon points="872.6 313.29 872.6 313.35 882.59 307.59 882.54 307.56" fill="none"/><polygon points="2.074 502.97 0 501.78 0 501.82 2.074 503.01" fill="none"/><polygon points="852.59 313.29 852.59 313.35 862.58 307.59 862.53 307.56" fill="none"/><polygon points="812.58 324.83 812.58 324.89 842.57 307.59 842.52 307.56" fill="none"/><polygon points="1339.7 751.1 1349.7 745.33 1339.7 751.08" fill="none"/><polygon points="1349.6 733.81 1349.6 733.81 1349.6 745.27 1349.7 745.33 1349.7 733.79 1359.7 728.01 1359.7 728" fill="none"/><polygon points="1449.8 664.58 1459.7 670.31 1449.8 676.05 1449.8 676.07 1459.8 670.3 1449.8 664.53" fill="none"/><polygon points="612.42 474.94 612.42 486.48 602.42 492.25 602.42 515.34 602.47 515.37 602.48 515.36 602.48 492.27 612.49 486.5 612.49 474.96 622.48 469.2 622.42 469.16" fill="none"/><polygon points="22.083 514.46 22.167 514.42 22.083 514.37" fill="none"/><polygon points="122.13 502.92 122.2 502.88 122.13 502.83" fill="none"/><polygon points="834.31 654.94 834.31 654.94 844.26 649.2 844.23 649.19" fill="none"/><polygon points="142.13 491.38 142.16 491.36 142.13 491.35" fill="none"/><polygon points="752.48 347.96 752.48 359.5 742.48 365.27 742.48 376.82 722.47 388.36 722.47 399.9 702.46 411.45 702.46 422.99 682.45 434.53 682.45 446.08 652.44 463.39 652.44 474.94 642.5 480.67 642.5 480.73 652.51 474.96 652.51 463.41 682.52 446.1 682.52 434.56 702.53 423.01 702.53 411.47 722.54 399.92 722.54 388.38 742.54 376.84 742.54 365.3 752.55 359.52 752.55 347.98 762.55 342.21 762.6 330.64 772.54 324.9 772.49 324.87 762.48 330.64 762.48 342.19 732.47 324.87 762.48 342.19" fill="none"/><polygon points="502.37 573.05 492.37 578.82 492.37 578.83 502.38 573.05 502.38 561.52 502.37 561.51" fill="none"/><polygon points="522.38 538.42 522.38 549.97 512.38 555.74 512.38 555.74 522.39 549.97 522.39 538.42 532.39 532.66 532.38 532.65" fill="none"/><polygon points="824.3 683.78 820.26 686.13 824.31 683.8 824.31 672.26 827.54 670.39 824.3 672.24" fill="none"/><polygon points="804.29 706.89 804.3 706.89 804.3 695.43 804.29 695.44" fill="none"/><polygon points="162.14 491.38 162.2 491.34 162.14 491.31" fill="none"/><polygon points="834.31 666.48 804.29 649.22 834.26 666.51" fill="none"/><polygon points="1369.7 733.79 1369.7 733.78 1369.7 733.78" fill="none"/><polygon points="892.66 313.26 892.66 313.32 902.6 307.59 902.54 307.56" fill="none"/><polygon points="679.71 70.764 679.7 70.768 679.7 82.209 679.71 82.205" fill="none"/><polygon points="1171.4 257.99 1141.4 240.68" fill="none"/><polygon points="144.85 824.5 144.85 824.5 154.86 830.28 154.87 830.27 144.33 824.21" fill="none"/><polygon points="1351.5 177.19 1351.5 177.19 1351.5 177.18" fill="none"/><polygon points="452.59 146.99 452.59 146.99" fill="none"/><polygon points="1659.9 531.74 1659.9 531.71 1659.9 531.78" fill="none"/><polygon points="1519.8 601.03 1519.8 601.04 1519.8 589.52 1519.8 589.54" fill="none"/><polygon points="1619.8 577.95 1620 577.88 1619.8 577.81" fill="none"/><polygon points="679.59 82.249 659.7 93.748 679.61 82.26" fill="none"/><rect x="1381.5" y="171.42" width="0" height="0" fill="none"/><polygon points="709.72 41.865 709.71 41.87 709.71 53.351 709.72 53.347" fill="none"/><polygon points="144.85 847.59 144.87 847.58 134.36 841.54" fill="none"/><polygon points="1609.8 572.17 1609.8 583.6 1609.8 583.63 1609.8 572.18 1599.4 566.18" fill="none"/><polygon points="719.72 59.118 719.64 59.169 719.72 59.22" fill="none"/><path d="m1639.9 635.67v0.014l-0.012-7e-3 -0.04 0.023v-0.046l-9.964-5.749-50.062 28.881v-0.036l-9.973-5.754-0.031 0.018v11.543l-50.022 28.858v-11.543l-0.033 0.019-0.014 11.496-9.956-5.744-40.018 23.087v11.543l-10.004 5.772v11.543l-30.013 17.315v-11.543l-0.053 0.031 0.029 0.017-0.014 11.503-9.991-5.764-39.992 23.072v11.543l-30.013 17.315v-11.543l-0.08 0.046-0.014 11.424-9.893-5.708-20.026 11.553v11.543l-60.011 34.604-29.94-17.273-0.059-11.545 20.009-11.543 29.971 17.291 0.028-0.016v-11.506l-0.014 11.503-29.94-17.273-0.059-11.545 30.013 17.315v-0.036l-30.013-17.315 20.009-11.543 0.073 0.042-0.059-11.493-0.109-0.063 20.009-11.543 30.013 17.315-19.976 11.525 0.062 0.036v-0.046l19.996-11.536-0.023-0.013v-9e-3l-29.857-17.225-0.059-11.545 29.952 17.28v-0.038l6e-3 -4e-3 -29.958-17.284 20.009-11.543 29.952 17.28v-0.037l-29.893-17.246-0.058-11.455-0.15-0.087 10.057-5.777-0.059-11.541v-3e-3l3e-3 2e-3 20.006-11.542 10.065 5.807 20.042-11.601v-11.474l-0.094-0.055 20.009-11.543 30.013 17.315-19.948 11.509 0.034 0.02 20.009-11.543v-0.025l-29.952-17.28v-11.543l3e-3 2e-3 29.949-17.327 10.015 5.778v-11.541l0.049 0.028 19.96-11.515 29.952 17.28 0.016-9e-3 -29.978-17.295v-11.543l30.013 17.315v-0.04l0.04-0.023-30.04-17.279 10.027-5.785 29.977 17.286v-0.044l-29.853-17.222v-11.549l0.017 0.01 29.828-17.341-0.015-9e-3v-11.544l0.039 0.022 29.997-17.333 10.119 5.838 0.045-0.026 9.901 5.712 9.901-5.712 9.978 5.756 0.049-0.028 10.096 5.825 9.997-5.768-0.107-0.062v-11.543l0.03 0.017 9.997-5.768 10.032 5.785 0.077-0.045v-11.433l29.931 17.268v-0.045l6e-3 -4e-3 -29.937-17.271 20.009-11.543 29.931 17.268v-0.017l-29.996-17.305-0.017-23.073 0.12 0.069 9.924-5.725 9.894 5.705 0.118-0.068 0.03 0.017-0.017-22.959 28.088 16.21v-0.04l-28.092-16.207 20.009-11.543 8.084 4.664v-478.81h-805.79l-22.438 12.945-10.004-5.772-10.004 5.772-10.004-5.772v11.543l-30.013 17.315-30.013-17.315v-11.543l10.004-5.772v-1.401h-759.74v478.69l12.063 6.959 30.029-17.358 20.133 11.615 9.979-5.757 9.955 5.743 9.955-5.743 9.876 5.698 0.07-0.04v-11.532l30.013 17.315v11.455l0.058 0.033-0.015-11.447 0.057-0.033-10.722-6.186-19.391-11.154 10.027-5.785 10.073 5.809 10.009-5.774 10.02 5.781 19.955-11.542 30.013 17.315v11.543l-70.045 40.427v11.543l-90.039 51.945v11.543l-32.073 18.506v380.43h759.74v-10.27l20.009-11.543v-11.543l20.009-11.543v-11.543l10.004-5.772 30.013 17.315v-11.543l20.009-11.543v-11.545l20.009-11.543v-11.543l10.004-5.772v-11.543l10.004-5.772v-11.543l20.009-11.543v-11.543l30.013-17.315v-11.543l10.004-5.772 30.013 17.315 10.004 5.772 10.004-5.772 10.004 5.772 10.004-5.772 10.004 5.772 20.009-11.543 10.004 5.772 10.004-5.772 30.013 17.315v11.543l-50.022 28.858-10.004-5.772-20.009 11.543v11.543l-50.021 28.858-10.004-5.772-20.009 11.543v11.543l-30.012 17.316v11.543l-57.818 33.357h806.01v-380.55l-28.115 16.22zm-1010.2-559.23l20-11.559 2e-3 1e-3v-11.422l30.02-17.422v-11.543l10.004-5.772 10.014 5.778 9.994-5.778 30.013 17.315v6e-3l9.999 5.769 5e-3 -3e-3v11.543l-30.013 17.315v0.102l-10.003-5.873-10.004 5.772v11.543l-40.017 23.087-30.013-17.315v-11.544zm-314.76 696.13l-10.004 5.772v11.543l-30.013 17.315-10.004-5.772-10.004 5.772v11.543l-30.013 17.315-10.004-5.772-40.017 23.087-10.004-5.772-20.009 11.543-30.013-17.315v-11.51l-0.116-0.067 10.027-5.785 30.107 17.361-30.013-17.315v-11.51l-0.116-0.067 10.027-5.785 30.107 17.361-30.013-17.315v-11.492l-0.206-0.118 20.12-11.523 30.107 17.361-30.013-17.315v-11.492l-0.206-0.118 30.125-17.295 30.107 17.361-30.013-17.315v-11.518l-0.022-0.013 0.022-0.013 10.004-5.772 19.867 11.461 30.061-17.279 29.983 17.29 10.034-5.746 10.094 5.82 5e-3 -3e-3v5e-3l20.009 11.538v11.549zm127.66-596.71l-20.009 11.543v11.543l-40.017 23.087-10.004-5.772-90.039 51.945-10.004-5.772-40.017 23.087-10.004-5.772-30.013 17.315-10.004-5.772-80.035 46.174-30.013-17.315v-11.543l20.009-11.543v-11.543l20.009-11.543 10.004 5.772 10.004-5.772v-11.543l10.004-5.772v-11.543l10.004-5.772v-11.543l20.009-11.543v-11.543l20.009-11.543 30.013 17.315v11.543l10.004 5.772v-23.087l10.004-5.772v-23.087l20.009-11.543v-11.543l10.004-5.772v-11.543l10.004-5.772v-11.543l20.009-11.543 30.013 17.315v11.543l10.004 5.772 10.004-5.772 10.004 5.772 20.009-11.543 10.004 5.772 30.013-17.315 10.004 5.772 30.013-17.315 30.013 17.315 10.004 5.772v11.543l-50.022 28.858-10.004-5.772v11.541zm199.84 339.55v11.481l-9.95-5.74-19.993 11.534v-11.543l-0.07 0.04v11.481l-9.95-5.74-9.989 5.763v-11.526l-0.07-0.04v11.543l-19.996-11.536v11.536l-10.004 5.772v11.543l-10.004 5.772v11.543l-20.009 11.543v-11.543l-0.013 7e-3v11.536l-9.991-5.764v11.536l-20.009 11.543v-11.543l-0.013 7e-3v11.536l-9.998-5.768-9.998 5.768v-11.536l-0.013-7e-3v11.543l-30.013-17.315v-11.543l20.009-11.543v-11.543l20.009-11.543v-11.543l20.009-11.543 10.004 5.772 20.009-11.543 30.013 17.315-30 17.308v8e-3l30.006-17.311-10.011-5.775v-11.543l10.004-5.772v-23.087l10.004-5.772v-11.548l20.009-11.543 20.009 11.543v-11.543l30.013-17.315v-11.543l20.009-11.543v-11.543l20.009-11.543v-11.543l20.009-11.543v-11.543l10.004-5.772v-11.543l10.004-5.772v-11.543l20.009-11.543 10.004 5.772 20.009-11.543 10.004 5.772 30.013-17.315 10.004 5.772 10.004-5.772 10.004 5.772 10.004-5.772 10.004 5.772 10.004-5.772 30.013 17.315 0.054 0.031 0.015-9e-3v0.018l9.934 5.731-9.879 5.7v0.063l9.949-5.74v11.543l-30.013 17.315v11.543l-10.004 5.772v11.543l-10.004 5.772 0.683 11.149-10.687 6.166v11.543l-30.013 17.315v11.543l-60.026 34.63v-11.543l-0.07 0.04v11.481l-9.95-5.74-29.997 17.306v-11.543l-0.07 0.04v11.481l-9.95-5.74-9.989 5.763v11.543l-70.03 40.402v-11.543l-0.068 0.036zm301.93 133.77l-30.013 17.315v11.543l-30.013 17.315v-0.044l-9.966-5.749-20.047 11.566v11.543l-50.022 28.858v-11.543l-0.092 0.053 0.082 0.047v11.543l-10.086-5.819-39.925 23.034v-11.543l-0.09 0.052 0.09 0.052v11.543l-10.094-5.823-19.919 11.492v0.102l-30.013-17.315v-11.592l-0.183-0.106 30.196-17.162v-11.543l30.013 17.315v11.442-11.543l0.013-8e-3 -30.118-17.324 30.196-17.162 9.9 5.711 10.007-5.703 29.892 17.245 0.045-0.026-29.937-17.271v-11.543l20.006-11.652v-11.543l10.007-5.704-4e-3 -11.592 20.019-11.595 10.061 5.804 9.936-5.756 10.034 5.789v-11.569l9.988-5.76 10.005 5.771h1e-3l10.071 5.809 10.072-5.733 9.937 5.733 10.072-5.733 29.878 17.237v11.542zm477.13-512.38l20.009-11.543v-11.543l30.013-17.315v-11.544l20.009-11.543 30.013 17.315 10.004-5.772 30.013 17.315v11.543l-50.022 28.858-10.004-5.772-10.004 5.772v11.543l-10.004 5.772-10.004-5.772-20.009 11.543-30.013-17.315v-11.542zm-210.09 167.38l-30.013 17.315-10.004-5.772-30.013 17.315-30.013-17.315v-11.543l10.004-5.772v-11.543l10.004-5.772v-11.543l20.009-11.543-10.004-5.772v-11.543l10.004-5.772v-23.087l10.004-5.772v-11.543l20.009-11.543v-11.543l20.009-11.543v-11.543l20.009-11.543 10.004 5.772 10.004-5.772 10.004 5.772 10.004-5.772 10.004 5.772 20.009-11.543 30.013 17.315 10.004 5.772 20.009-11.543 20.009 11.543 10.004-5.772 10.004 5.772 10.004-5.772 30.013 17.315v11.543l-10.004 5.772v11.543l-30.013 17.315v11.543l-40.017 23.087-10.004-5.772-60.026 34.63-10.004-5.772-40.017 23.087-10.004-5.772-10.004 5.772v11.542z" fill="none"/><polygon points="849.78 983.96 869.79 972.42 849.78 983.93" fill="none"/><polygon points="1579.8 589.48 1579.8 589.5 1579.9 589.45 1579.9 589.44" fill="none"/><polygon points="1589.8 595.27 1589.9 595.22 1589.8 595.17" fill="none"/><polygon points="492.61 135.44 502.61 129.67" fill="none"/><polygon points="2.074 503.01 0 501.82 0 524.76 2.074 525.95" fill="#A3A3A3"/><polygon points="132.07 497.04 132.07 485.59 102.06 468.28 102.06 479.81 102.12 479.77" fill="#A3A3A3"/><polygon points="2.074 502.92 2.159 502.87 0 501.63 0 501.78 2.074 502.97" fill="#D6D6D6"/><polygon points="0 478.69 0 492.62 12.063 485.65" fill="#D6D6D6"/><polygon points="2.074 526.01 2.074 525.95 0 524.76 0 527.2" fill="#D6D6D6"/><polygon points="122.13 491.38 122.13 502.83 122.2 502.88 132.13 497.15 132.13 497.08 132.07 497.04 102.12 479.77 102.06 479.81 101.99 479.85 122.05 491.42" fill="#D6D6D6"/><polygon points="22.083 491.38 22.083 514.37 22.167 514.42 62.074 491.39 52.194 485.69 62.224 479.91 42.091 468.29 12.063 485.65 0 492.62 0 501.63 2.159 502.87" fill="#D6D6D6"/><polygon points="82.109 491.46 82.109 502.92 92.038 497.19" fill="#D6D6D6"/><polygon points="72.104 497.15 82.033 491.42 72.104 485.69" fill="#D6D6D6"/><polygon points="52.194 485.69 62.074 491.39 72.104 485.61 72.104 485.69 82.158 479.89 72.203 474.15 62.224 479.91" fill="#D6D6D6"/><polygon points="72.104 485.69 82.033 491.42 82.109 491.38 82.109 491.46 92.038 497.19 102.12 491.38 102.12 502.92 122.05 491.42 101.99 479.85 92.113 474.15 82.158 479.89" fill="#D6D6D6"/><polygon points="121.45 479.41 132.17 485.6 132.19 485.59" fill="#D6D6D6"/><polygon points="142.12 479.88 142.13 491.35 142.16 491.36 152.2 485.57 132.23 474.05 142.19 468.29 132.17 462.51 122.16 468.28 142.19 479.84" fill="#D6D6D6"/><polygon points="152.2 485.57 162.14 479.84 162.14 491.31 162.2 491.34 192.16 474.06 162.14 456.75 142.19 468.29 132.23 474.05" fill="#D6D6D6"/><polygon points="142.12 479.86 142.12 479.88 142.19 479.84 122.16 468.28 112.09 462.48 102.06 468.26 121.45 479.41 132.19 485.59" fill="#D6D6D6"/><polygon points="32.072 589.52 122.11 537.58 122.11 526.03 192.16 485.61 192.16 474.06 162.2 491.34 162.14 491.38 162.14 491.31 162.14 479.84 152.2 485.57 142.16 491.36 142.13 491.38 142.13 491.35 142.12 479.88 142.12 479.86 132.19 485.59 132.17 485.6 132.12 485.63 132.13 497.08 132.13 497.15 122.2 502.88 122.13 502.92 122.13 502.83 122.13 491.38 122.05 491.42 102.12 502.92 102.12 491.38 92.038 497.19 82.109 502.92 82.109 491.46 82.109 491.38 82.033 491.42 72.104 497.15 72.104 485.69 72.104 485.61 62.074 491.39 22.167 514.42 22.083 514.46 22.083 514.37 22.083 491.38 2.159 502.87 2.074 502.92 2.074 502.97 2.074 503.01 2.074 525.95 2.074 526.01 0 527.2 0 619.57 32.072 601.07" fill="#fff"/><polygon points="694.25 747.39 724.26 764.7 724.26 764.6 694.25 747.29" fill="#A3A3A3"/><polygon points="754.28 758.93 754.28 747.39 754.19 747.34 744.18 753.11" fill="#A3A3A3"/><polygon points="754.28 735.74 754.28 724.3 724.26 706.99 724.26 718.53 754.19 735.8" fill="#A3A3A3"/><polygon points="804.29 741.62 804.29 730.07 804.21 730.02 794.2 735.8" fill="#A3A3A3"/><polygon points="804.29 695.44 774.28 678.12 774.28 689.66 804.21 706.94 804.29 706.89" fill="#A3A3A3"/><polygon points="824.3 672.24 794.28 654.92 794.28 666.47 824.3 683.78" fill="#A3A3A3"/><polygon points="834.31 654.94 834.31 654.94 834.3 654.94 804.28 637.63 804.29 649.22 834.31 666.48" fill="#A3A3A3"/><polygon points="874.37 689.55 884.33 695.3 884.33 683.8" fill="#A3A3A3"/><polygon points="874.26 643.43 874.27 643.43 874.33 643.4 874.33 643.47 884.27 649.2 884.33 649.17 884.33 637.7 854.33 620.3 854.33 631.87 874.31 643.4" fill="#A3A3A3"/><polygon points="724.26 753.06 694.25 735.8 694.25 735.85 694.25 747.29 724.26 764.6 724.26 753.16" fill="#A3A3A3"/><polygon points="724.26 753.06 754.19 735.8 724.26 718.53 694.07 735.69 694.25 735.8 724.26 753.06" fill="#D6D6D6"/><polygon points="754.28 701.11 764.27 695.42 754.37 689.71 724.17 706.87 754.29 724.19 774.28 712.66" fill="#D6D6D6"/><polygon points="774.28 712.66 784.29 706.89 784.29 718.43 804.17 706.96 774.28 689.72 764.27 695.42 754.28 701.11" fill="#D6D6D6"/><polygon points="804.3 695.43 804.3 695.34 820.26 686.13 824.3 683.78 794.28 666.47 774.28 678.12 804.29 695.44" fill="#D6D6D6"/><polygon points="827.54 670.39 834.26 666.51 804.29 649.22 794.28 654.92 824.3 672.24" fill="#D6D6D6"/><polygon points="854.33 631.93 874.26 643.43 874.31 643.4 854.33 631.87 844.3 626.08 834.36 631.84 844.5 637.68" fill="#D6D6D6"/><polygon points="844.23 649.19 844.26 649.2 854.32 643.4 854.32 654.94 864.32 649.17 854.28 643.37" fill="#D6D6D6"/><polygon points="834.31 654.94 844.23 649.19 854.28 643.37 844.46 637.71 844.5 637.68 834.36 631.84 824.3 626.03 804.28 637.63 834.3 654.94" fill="#D6D6D6"/><polygon points="874.33 654.94 884.27 649.2 874.33 643.47" fill="#D6D6D6"/><polygon points="854.33 631.93 844.5 637.68 844.46 637.71 854.28 643.37 864.32 649.17 874.27 643.43 874.26 643.43" fill="#D6D6D6"/><polygon points="884.33 637.66 864.34 626.07 874.33 620.31 864.32 614.54 854.33 620.3 884.33 637.7" fill="#D6D6D6"/><polygon points="894.34 643.4 894.34 643.4 894.34 643.39" fill="#D6D6D6"/><polygon points="884.33 637.66 884.33 637.62 884.34 637.62 874.34 631.85 884.4 626.12 874.33 620.31 874.33 620.31 864.34 626.07" fill="#D6D6D6"/><polygon points="914.35 643.4 904.34 637.62 904.34 649.17" fill="#D6D6D6"/><polygon points="894.34 643.4 904.34 637.62 894.34 631.85 894.34 643.39" fill="#D6D6D6"/><polygon points="874.34 631.85 884.34 637.62 894.34 631.85 904.41 626.12 894.47 620.39 884.4 626.12" fill="#D6D6D6"/><polygon points="904.41 626.12 894.34 631.85 904.34 637.62 904.34 637.62 904.34 637.62 914.35 643.4 924.35 637.62 924.35 649.17 944.36 637.62 914.48 620.39" fill="#D6D6D6"/><polygon points="924.35 637.62 914.35 643.4 904.34 649.17 904.34 637.62 904.34 637.62 904.34 637.62 894.34 643.4 894.34 643.4 894.34 643.39 894.34 631.85 884.34 637.62 884.33 637.62 884.33 637.66 884.33 637.7 884.33 649.17 884.27 649.2 874.33 654.94 874.33 643.47 874.33 643.4 874.27 643.43 864.32 649.17 854.32 654.94 854.32 643.4 844.26 649.2 834.31 654.94 834.31 666.48 834.26 666.51 827.54 670.39 824.31 672.26 824.31 683.8 820.26 686.13 804.3 695.34 804.3 695.43 804.3 706.89 804.29 706.89 804.21 706.94 804.17 706.96 784.29 718.43 784.29 706.89 774.28 712.66 754.29 724.19 754.28 724.2 754.28 735.74 754.28 735.74 754.19 735.8 724.26 753.06 724.26 753.06 724.26 753.16 724.26 764.6 744.18 753.11 754.19 747.34 754.28 747.29 754.28 758.83 794.2 735.8 804.21 730.02 804.3 729.97 804.3 741.52 854.32 712.66 854.32 701.11 874.37 689.55 884.33 683.8 884.33 695.3 884.33 695.34 914.35 678.03 914.35 666.48 944.36 649.17 944.36 637.62 924.35 649.17" fill="#fff"/><polygon points="779.75 978.19 759.74 989.73 777.54 1e3 801.97 1e3 809.76 995.5" fill="#D6D6D6"/><polygon points="829.77 972.42 822.47 968.2 799.76 955.1 779.75 966.64 809.76 983.96" fill="#D6D6D6"/><polygon points="839.78 955.1 809.76 937.78 799.76 943.56 829.76 960.86" fill="#D6D6D6"/><polygon points="829.77 972.42 829.77 972.42 822.47 968.2" fill="#D6D6D6"/><polygon points="829.77 960.87 839.78 955.1 829.76 960.86" fill="#D6D6D6"/><polygon points="839.78 978.19 849.78 972.42 849.78 983.93 869.79 972.42 839.78 955.1" fill="#D6D6D6"/><polygon points="889.8 949.33 859.78 932.01 839.78 943.56 869.79 960.87" fill="#D6D6D6"/><polygon points="909.81 926.24 879.79 908.93 859.78 920.47 889.8 937.78" fill="#D6D6D6"/><polygon points="919.81 908.93 889.8 891.61 879.79 897.38 909.81 914.7" fill="#D6D6D6"/><polygon points="929.81 891.61 899.8 874.3 889.8 880.07 919.81 897.38" fill="#D6D6D6"/><polygon points="949.82 868.52 919.81 851.21 899.8 862.75 929.81 880.07" fill="#D6D6D6"/><polygon points="979.84 839.67 949.82 822.35 919.81 839.67 949.82 856.98" fill="#D6D6D6"/><polygon points="1009.8 845.44 1009.8 845.44" fill="#D6D6D6"/><polygon points="989.84 822.35 959.83 805.04 949.82 810.81 979.84 828.12" fill="#D6D6D6"/><polygon points="999.84 828.12 989.84 822.35 989.84 833.89" fill="#D6D6D6"/><polygon points="1019.9 851.21 1029.9 845.44 1019.9 839.67" fill="#D6D6D6"/><polygon points="999.84 828.12 999.84 839.67 1009.8 833.89 1019.9 828.12 1009.8 822.35 999.84 828.12 989.84 833.89" fill="#D6D6D6"/><polygon points="1009.8 845.44 1009.8 845.44 1019.9 839.67 1009.8 833.89" fill="#D6D6D6"/><polygon points="1039.9 851.21 1049.9 845.44 1039.9 839.67" fill="#D6D6D6"/><polygon points="1009.8 833.89 1019.9 839.67 1019.9 839.67 1019.9 839.67 1029.9 845.44 1039.9 839.67 1029.9 833.89 1039.9 828.12 1029.9 822.35 1019.9 828.12" fill="#D6D6D6"/><polygon points="1029.9 833.89 1039.9 839.67 1039.9 839.67 1039.9 839.67 1049.9 845.44 1059.9 839.67 1059.9 851.21 1079.9 839.67 1059.9 828.12 1069.9 822.35 1059.9 816.58 1039.9 828.12" fill="#D6D6D6"/><polygon points="1079.9 839.67 1089.9 833.89 1089.9 845.44 1109.9 833.89 1079.9 816.58 1069.9 822.35 1059.9 828.12" fill="#D6D6D6"/><polygon points="759.74 1e3 777.54 1e3 759.74 989.73" fill="#A3A3A3"/><polygon points="809.76 983.96 779.75 966.64 779.75 978.19 809.76 995.5" fill="#A3A3A3"/><polygon points="829.77 972.42 829.77 960.87 829.76 960.86 799.76 943.56 799.76 955.1 822.47 968.2" fill="#A3A3A3"/><polygon points="869.79 960.87 839.78 943.56 839.78 955.1 869.79 972.42" fill="#A3A3A3"/><polygon points="889.8 937.78 859.78 920.47 859.78 932.01 889.8 949.33" fill="#A3A3A3"/><polygon points="909.81 914.7 879.79 897.38 879.79 908.93 909.81 926.24" fill="#A3A3A3"/><polygon points="919.81 897.38 889.8 880.07 889.8 891.61 919.81 908.93" fill="#A3A3A3"/><polygon points="929.81 880.07 899.8 862.75 899.8 874.3 929.81 891.61" fill="#A3A3A3"/><polygon points="949.82 856.98 919.81 839.67 919.81 851.21 949.82 868.52" fill="#A3A3A3"/><polygon points="979.84 828.12 949.82 810.81 949.82 822.35 979.84 839.67" fill="#A3A3A3"/><polygon points="1049.9 868.52 1059.9 874.3 1059.9 862.75" fill="#A3A3A3"/><polygon points="969.83 914.7 979.84 920.47 979.84 908.93" fill="#A3A3A3"/><polygon points="919.81 955.1 949.82 937.78 949.82 926.24 969.83 914.7 979.84 908.93 979.84 920.47 1029.9 891.61 1029.9 880.07 1049.9 868.52 1059.9 862.75 1059.9 874.3 1109.9 845.44 1109.9 833.89 1089.9 845.44 1089.9 833.89 1079.9 839.67 1059.9 851.21 1059.9 839.67 1049.9 845.44 1039.9 851.21 1039.9 839.67 1039.9 839.67 1039.9 839.67 1029.9 845.44 1019.9 851.21 1019.9 839.67 1019.9 839.67 1019.9 839.67 1009.8 845.44 1009.8 845.44 1009.8 845.44 1009.8 833.89 999.84 839.67 999.84 828.12 989.84 833.89 989.84 822.35 979.84 828.12 979.84 839.67 949.82 856.98 949.82 868.52 929.81 880.07 929.81 891.61 919.81 897.38 919.81 908.93 909.81 914.7 909.81 926.24 889.8 937.78 889.8 949.33 869.79 960.87 869.79 972.42 849.78 983.96 849.78 983.93 849.78 972.42 839.78 978.19 839.78 955.1 829.77 960.87 829.77 972.42 829.77 972.42 809.76 983.96 809.76 995.5 801.97 1e3 861.99 1e3 919.81 966.64" fill="#fff"/><polygon points="72.429 308.6 72.429 320.14 102.44 337.45 102.44 325.91" fill="#A3A3A3"/><polygon points="122.45 302.82 92.438 285.51 92.438 297.05 122.45 314.37" fill="#A3A3A3"/><polygon points="162.47 279.74 132.46 262.42 132.46 273.96 162.47 291.28" fill="#A3A3A3"/><polygon points="162.47 268.19 172.47 273.96 172.47 262.42 142.46 245.11 142.46 256.65" fill="#A3A3A3"/><polygon points="182.48 291.28 192.48 297.05 192.48 285.51" fill="#A3A3A3"/><rect transform="matrix(-.8662 -.4997 .4997 -.8662 177.07 589.57)" x="161.7" y="271.08" width="11.55" height="0" fill="#A3A3A3"/><polygon points="222.49 279.74 232.5 285.51 232.5 273.96" fill="#A3A3A3"/><polygon points="182.48 245.11 152.46 227.79 152.46 239.33 182.48 256.65" fill="#A3A3A3"/><polygon points="172.47 204.7 172.47 204.7" fill="#A3A3A3"/><polygon points="202.48 222.02 172.47 204.7 172.47 216.25 202.48 233.56" fill="#A3A3A3"/><polygon points="272.52 262.42 282.52 268.19 282.52 256.65" fill="#A3A3A3"/><polygon points="242.5 233.56 242.5 233.56 262.51 245.11 262.51 222.02 232.5 204.7 232.5 227.79" fill="#A3A3A3"/><polygon points="232.5 204.7 232.5 204.7" fill="#A3A3A3"/><polygon points="272.52 193.16 242.5 175.85 242.5 198.93 272.52 216.25" fill="#A3A3A3"/><polygon points="292.52 170.07 262.51 152.76 262.51 164.3 292.52 181.62" fill="#A3A3A3"/><polygon points="302.53 152.76 272.52 135.44 272.52 146.99 302.53 164.3" fill="#A3A3A3"/><polygon points="312.53 135.44 282.52 118.13 282.52 129.67 312.53 146.99" fill="#A3A3A3"/><polygon points="372.56 216.25 382.56 222.02 382.56 210.48" fill="#A3A3A3"/><polygon points="452.59 158.53 442.59 164.3 452.59 170.07" fill="#A3A3A3"/><polygon points="122.45 314.37 92.438 297.05 72.429 308.6 102.44 325.91" fill="#D6D6D6"/><polygon points="132.46 297.05 112.45 285.51 122.45 279.74 112.45 273.96 92.438 285.51 122.45 302.82" fill="#D6D6D6"/><polygon points="362.55 164.3 372.56 158.53 352.55 146.99 362.55 141.22 352.55 135.44 342.54 141.22 362.55 152.76" fill="#D6D6D6"/><polygon points="372.56 158.53 382.56 152.76 382.56 164.3 402.57 152.76 382.56 141.22 392.57 135.44 382.56 129.67 362.55 141.22 352.55 146.99" fill="#D6D6D6"/><polygon points="402.57 152.76 412.58 146.99 412.58 158.53 442.59 141.22 422.58 129.67 432.58 123.9 422.58 118.13 392.57 135.44 382.56 141.22" fill="#D6D6D6"/><polygon points="502.61 129.67 492.61 123.9 492.61 135.44" fill="#D6D6D6"/><polygon points="442.59 141.22 452.59 135.44 452.59 146.99 452.59 146.99 492.61 123.9 462.6 106.59 432.58 123.9 422.58 129.67" fill="#D6D6D6"/><polygon points="132.46 297.05 142.46 291.28 142.46 302.82 162.47 291.28 132.46 273.96 122.45 279.74 112.45 285.51" fill="#D6D6D6"/><polygon points="172.47 273.96 162.47 268.19 142.46 256.65 132.46 262.42 162.47 279.74" fill="#D6D6D6"/><polygon points="182.48 256.65 152.46 239.33 142.46 245.11 172.47 262.42" fill="#D6D6D6"/><polygon points="202.48 233.56 172.47 216.25 152.46 227.79 182.48 245.11" fill="#D6D6D6"/><polygon points="222.49 210.48 192.48 193.16 172.47 204.7 172.47 204.7 202.48 222.02" fill="#D6D6D6"/><polygon points="232.5 227.79 232.5 239.33 242.5 233.56 232.5 227.79 222.49 222.02 222.49 233.56" fill="#D6D6D6"/><polygon points="242.5 256.65 262.51 245.11 242.5 233.56" fill="#D6D6D6"/><polygon points="272.52 216.25 242.5 198.93 232.5 204.7 232.5 204.7 262.51 222.02" fill="#D6D6D6"/><polygon points="292.52 181.62 262.51 164.3 242.5 175.85 272.52 193.16" fill="#D6D6D6"/><polygon points="302.53 164.3 272.52 146.99 262.51 152.76 292.52 170.07" fill="#D6D6D6"/><polygon points="312.53 146.99 282.52 129.67 272.52 135.44 302.53 152.76" fill="#D6D6D6"/><polygon points="312.53 135.44 302.53 129.67 312.53 123.9 322.54 129.67 332.54 123.9 302.53 106.59 282.52 118.13" fill="#D6D6D6"/><polygon points="302.53 129.67 312.53 135.44 322.54 129.67 312.53 123.9" fill="#D6D6D6"/><polygon points="332.54 146.99 342.54 141.22 342.54 164.3 362.55 152.76 342.54 141.22 332.54 135.44" fill="#D6D6D6"/><polygon points="452.59 170.07 502.61 141.22 502.61 129.67 492.61 135.44 492.61 135.44 492.61 123.9 492.61 123.9 492.61 123.9 452.59 146.99 452.59 146.99 452.59 146.99 452.59 135.44 442.59 141.22 412.58 158.53 412.58 146.99 402.57 152.76 382.56 164.3 382.56 152.76 372.56 158.53 362.55 164.3 362.55 152.76 342.54 164.3 342.54 141.22 332.54 146.99 332.54 135.44 332.54 123.9 322.54 129.67 312.53 135.44 312.53 135.44 312.53 146.99 302.53 152.76 302.53 164.3 292.52 170.07 292.52 181.62 272.52 193.16 272.52 216.25 262.51 222.02 262.51 245.11 242.5 256.65 242.5 233.56 242.5 233.56 242.5 233.56 232.5 239.33 232.5 227.79 222.49 233.56 222.49 222.02 222.49 210.48 202.48 222.02 202.48 233.56 182.48 245.11 182.48 256.65 172.47 262.42 172.47 273.96 172.47 273.96 162.47 279.74 162.47 291.28 142.46 302.82 142.46 291.28 132.46 297.05 122.45 302.82 122.45 314.37 102.44 325.91 102.44 337.45 182.48 291.28 192.48 285.51 192.48 297.05 222.49 279.74 232.5 273.96 232.5 285.51 272.52 262.42 282.52 256.65 282.52 268.19 372.56 216.25 382.56 210.48 382.56 222.02 422.58 198.93 422.58 187.39 442.59 175.85 442.59 164.3 452.59 158.53" fill="#fff"/><polygon points="472.36 578.82 452.35 567.28 452.35 578.82 482.36 596.14 482.36 584.6" fill="#A3A3A3"/><polygon points="502.37 561.51 472.36 544.2 472.36 555.74 502.37 573.05" fill="#A3A3A3"/><polygon points="492.37 578.83 492.37 578.82 482.36 584.6 472.36 578.82 472.36 578.82 482.36 584.6 482.38 584.6 482.38 584.6" fill="#A3A3A3"/><polygon points="502.37 596.14 502.37 584.6 492.37 590.37" fill="#A3A3A3"/><polygon points="522.39 573.06 532.38 578.82 532.38 567.29 522.39 573.05" fill="#A3A3A3"/><polygon points="502.37 561.51 502.38 561.52 502.38 561.51 512.38 555.74 512.38 555.74" fill="#A3A3A3"/><polygon points="522.38 538.42 492.37 521.11 492.37 532.65 522.38 549.97" fill="#A3A3A3"/><polygon points="582.41 515.34 562.4 503.79 562.4 515.34 572.41 521.11 572.42 521.11 572.42 521.12 592.41 532.65 592.41 521.11" fill="#A3A3A3"/><polygon points="582.41 503.79 602.42 515.34 602.42 492.25 572.4 474.94 572.4 498.02" fill="#A3A3A3"/><polygon points="612.42 532.65 612.42 521.17 602.47 526.91" fill="#A3A3A3"/><polygon points="602.47 515.37 602.42 515.34 582.41 503.79 582.41 503.79 602.42 515.34 592.41 521.11 582.41 515.34 582.41 515.34 592.41 521.11 592.48 521.15 592.48 521.13" fill="#A3A3A3"/><polygon points="642.43 526.88 642.43 515.4 632.48 521.14" fill="#A3A3A3"/><polygon points="612.42 474.94 582.41 457.62 582.41 469.16 612.42 486.48" fill="#A3A3A3"/><polygon points="632.43 463.39 632.48 463.42 632.5 463.41 632.5 463.43 642.49 469.2 642.5 469.19 642.5 469.2 652.44 474.94 652.44 463.39 622.42 446.08 622.42 457.62" fill="#A3A3A3"/><polygon points="682.45 434.53 652.44 417.22 652.44 428.76 682.45 446.08" fill="#A3A3A3"/><polygon points="732.47 474.94 732.47 463.45 722.52 469.2" fill="#A3A3A3"/><polygon points="702.46 411.45 672.44 394.13 672.44 405.68 702.46 422.99" fill="#A3A3A3"/><polygon points="722.47 388.36 692.45 371.04 692.45 382.59 722.47 399.9" fill="#A3A3A3"/><polygon points="742.48 365.27 712.46 347.96 712.46 359.5 742.48 376.82" fill="#A3A3A3"/><polygon points="752.48 347.96 722.47 330.64 722.47 342.19 752.48 359.5" fill="#A3A3A3"/><polygon points="762.48 330.64 732.47 313.33 732.47 324.87 762.48 342.19" fill="#A3A3A3"/><polygon points="772.49 463.39 772.49 451.91 762.54 457.65" fill="#A3A3A3"/><polygon points="482.36 584.6 492.37 578.82 502.37 573.05 472.36 555.74 452.35 567.28 472.36 578.82" fill="#D6D6D6"/><polygon points="512.38 555.74 522.38 549.97 492.37 532.65 472.36 544.2 502.37 561.51" fill="#D6D6D6"/><polygon points="532.38 532.65 512.38 521.11 522.38 515.34 512.38 509.56 492.37 521.11 522.38 538.42" fill="#D6D6D6"/><polygon points="532.38 532.65 532.39 532.66 542.4 526.88 542.4 538.42 572.4 521.11 542.39 503.79 522.38 515.34 512.38 521.11" fill="#D6D6D6"/><polygon points="622.42 469.16 612.42 463.39 622.42 457.62 632.43 463.39 632.43 463.39 622.42 457.62 602.42 446.08 582.41 457.62 612.42 474.94" fill="#D6D6D6"/><polygon points="612.42 486.48 582.41 469.16 572.4 474.94 602.42 492.25" fill="#D6D6D6"/><polygon points="592.41 521.11 602.42 515.34 582.41 503.79 572.4 498.02 562.4 503.79 582.41 515.34" fill="#D6D6D6"/><polygon points="632.5 474.96 642.49 469.2 632.5 463.43" fill="#D6D6D6"/><polygon points="642.5 469.2 642.5 480.67 652.44 474.94" fill="#D6D6D6"/><polygon points="622.42 457.62 612.42 463.39 622.42 469.16 622.48 469.2 632.48 463.42 632.43 463.39" fill="#D6D6D6"/><polygon points="682.45 446.08 652.44 428.76 622.42 446.08 652.44 463.39" fill="#D6D6D6"/><polygon points="702.46 422.99 672.44 405.68 652.44 417.22 682.45 434.53" fill="#D6D6D6"/><polygon points="722.47 399.9 692.45 382.59 672.44 394.13 702.46 411.45" fill="#D6D6D6"/><polygon points="742.48 376.82 712.46 359.5 692.45 371.04 722.47 388.36" fill="#D6D6D6"/><polygon points="772.49 324.87 752.48 313.33 762.48 307.56 752.48 301.78 732.47 313.33 762.48 330.64" fill="#D6D6D6"/><polygon points="752.48 359.5 722.47 342.19 712.46 347.96 742.48 365.27" fill="#D6D6D6"/><polygon points="762.48 342.19 732.47 324.87 722.47 330.64 752.48 347.96" fill="#D6D6D6"/><polygon points="772.49 324.87 772.54 324.9 782.56 319.12 782.56 330.6 802.5 319.1 782.49 307.56 792.5 301.78 782.49 296.01 762.48 307.56 752.48 313.33" fill="#D6D6D6"/><polygon points="802.5 319.1 802.56 319.13 812.58 313.35 812.58 324.83 842.52 307.56 822.51 296.01 832.51 290.24 822.51 284.47 792.5 301.78 782.49 307.56" fill="#D6D6D6"/><polygon points="852.59 301.82 852.59 313.29 862.53 307.56" fill="#D6D6D6"/><polygon points="842.52 307.56 842.57 307.59 852.58 301.82 842.52 296.01 852.52 290.24 842.52 284.47 832.51 290.24 822.51 296.01" fill="#D6D6D6"/><polygon points="872.6 301.82 872.6 313.29 882.54 307.56" fill="#D6D6D6"/><polygon points="842.52 296.01 852.58 301.82 852.59 301.81 852.59 301.82 862.53 307.56 862.58 307.59 872.58 301.82 862.53 296.01 872.53 290.24 862.53 284.47 852.52 290.24" fill="#D6D6D6"/><polygon points="892.61 301.82 892.66 313.26 902.54 307.56" fill="#D6D6D6"/><polygon points="862.53 296.01 872.58 301.82 872.6 301.81 872.6 301.82 882.54 307.56 882.59 307.59 892.59 301.82 882.54 296.01 892.54 290.24 912.55 301.78 912.55 301.78 882.54 284.47 872.53 290.24" fill="#D6D6D6"/><polygon points="922.55 307.56 912.62 301.82 912.67 313.26" fill="#D6D6D6"/><polygon points="882.54 296.01 892.59 301.82 892.61 301.81 892.61 301.82 902.54 307.56 902.6 307.59 912.6 301.82 912.55 301.78 892.54 290.24" fill="#D6D6D6"/><polygon points="572.41 521.11 542.4 538.42 542.4 538.42 542.4 526.88 532.39 532.66 522.39 538.42 522.39 549.97 512.38 555.74 502.38 561.51 502.38 561.52 502.38 573.05 492.37 578.83 482.38 584.6 482.38 584.6 482.38 596.14 492.37 590.37 502.37 584.6 502.38 584.6 502.38 596.14 522.39 584.6 522.39 573.06 522.39 573.05 532.38 567.29 532.4 567.28 532.4 578.82 552.41 567.28 552.41 555.74 562.41 549.97 562.41 538.42 572.42 532.65 572.42 521.12 572.42 521.11" fill="#fff"/><polygon points="712.53 486.5 712.53 474.96 722.52 469.2 732.47 463.45 732.54 463.41 732.54 474.96 762.54 457.65 772.49 451.91 772.56 451.87 772.56 463.41 832.58 428.78 832.58 417.24 862.6 399.92 862.6 388.38 873.28 382.22 872.6 371.07 882.6 365.3 882.6 353.75 892.61 347.98 892.61 336.44 922.62 319.12 922.62 307.58 912.67 313.32 912.67 313.26 912.62 301.82 912.62 301.81 912.6 301.82 902.6 307.59 892.66 313.32 892.66 313.26 892.61 301.82 892.61 301.81 892.59 301.82 882.59 307.59 872.6 313.35 872.6 313.29 872.6 301.82 872.6 301.81 872.58 301.82 862.58 307.59 852.59 313.35 852.59 313.29 852.59 301.82 852.59 301.81 852.58 301.82 842.57 307.59 812.58 324.89 812.58 324.83 812.58 313.35 802.56 319.13 782.56 330.66 782.56 330.6 782.56 319.12 772.54 324.9 762.6 330.64 762.55 342.21 752.55 347.98 752.55 359.52 742.54 365.3 742.54 376.84 722.54 388.38 722.54 399.92 702.53 411.47 702.53 423.01 682.52 434.56 682.52 446.1 652.51 463.41 652.51 474.96 642.5 480.73 642.5 480.67 642.5 469.2 642.5 469.19 642.49 469.2 632.5 474.96 632.5 463.43 632.5 463.41 632.48 463.42 622.48 469.2 612.49 474.96 612.49 486.5 602.48 492.27 602.48 515.36 602.47 515.37 592.48 521.13 592.48 521.15 592.48 532.67 602.47 526.91 612.42 521.17 612.49 521.13 612.49 532.67 632.48 521.14 642.43 515.4 642.5 515.36 642.5 526.9" fill="#fff"/><polygon points="134.36 841.54 114.84 830.31 114.84 841.82 144.85 859.14 144.85 847.59" fill="#A3A3A3"/><rect transform="matrix(-.8662 -.4997 .4997 -.8662 -133.81 1619)" x="144.08" y="827.39" width="11.55" height="0" fill="#A3A3A3"/><polygon points="164.86 847.59 174.86 853.36 174.86 841.82" fill="#A3A3A3"/><polygon points="134.85 795.7 134.85 807.19 164.86 824.5 164.86 812.96" fill="#A3A3A3"/><polygon points="214.88 830.28 224.89 836.05 224.89 824.5" fill="#A3A3A3"/><polygon points="154.86 772.61 154.86 784.1 184.87 801.42 184.87 789.88" fill="#A3A3A3"/><polygon points="264.9 801.42 274.91 807.19 274.91 795.65" fill="#A3A3A3"/><polygon points="204.67 755.18 204.71 755.15 184.87 743.73 184.87 755.24 214.88 772.56 214.88 761.05" fill="#A3A3A3"/><polygon points="184.87 743.7 184.87 743.7" fill="#A3A3A3"/><polygon points="154.86 830.28 144.85 824.5 144.33 824.21 124.84 813 124.84 824.5 154.86 841.82" fill="#A3A3A3"/><polygon points="144.87 847.58 154.86 841.82 124.75 824.46 114.72 830.24 114.84 830.31 134.36 841.54" fill="#D6D6D6"/><polygon points="154.87 830.27 164.86 824.5 134.75 807.14 124.73 812.93 124.84 813 144.33 824.21" fill="#D6D6D6"/><polygon points="184.87 801.42 154.76 784.06 134.64 795.58 134.85 795.7 164.86 812.96" fill="#D6D6D6"/><polygon points="214.88 772.56 184.78 755.2 154.65 772.49 154.86 772.61 184.87 789.88" fill="#D6D6D6"/><polygon points="214.74 749.39 194.87 737.93 184.87 743.7 184.87 743.7 184.85 743.71 184.87 743.73 204.71 755.15" fill="#D6D6D6"/><polygon points="204.71 755.15 204.67 755.18 214.88 761.05 214.88 761.02 224.89 755.24 224.89 766.79 234.89 761.02 234.89 772.56 264.86 755.27 264.7 755.18 274.78 749.4 244.8 732.11 214.74 749.39" fill="#D6D6D6"/><polygon points="294.92 749.48 294.92 772.56 314.92 761.02 314.92 761.02 314.92 761.02" fill="#D6D6D6"/><polygon points="264.86 755.27 274.91 749.47 274.91 761.02 294.91 749.48 284.82 743.66 274.78 749.4 264.7 755.18" fill="#D6D6D6"/><polygon points="294.92 772.56 294.92 749.48 294.92 749.47 294.91 749.48 274.91 761.02 274.91 749.47 264.86 755.27 234.89 772.56 234.89 761.02 224.89 766.79 224.89 755.24 214.88 761.02 214.88 761.05 214.88 772.56 184.87 789.88 184.87 801.42 164.86 812.96 164.86 824.5 154.87 830.27 154.86 830.28 154.86 830.28 154.86 841.82 144.87 847.58 144.85 847.59 144.85 859.14 164.86 847.59 174.86 841.82 174.86 853.36 214.88 830.28 224.89 824.5 224.89 836.05 254.9 818.73 254.9 807.19 264.9 801.42 274.91 795.65 274.91 807.19 304.92 789.88 304.92 778.33 314.92 772.56 314.92 761.02 314.92 761.02" fill="#fff"/><polygon points="679.59 82.249 649.69 64.997 649.69 64.876 649.68 64.875 629.68 76.433 659.7 93.748" fill="#D6D6D6"/><polygon points="679.71 70.764 679.71 70.662 709.66 53.382 679.71 36.031 649.69 53.453 679.7 70.768" fill="#D6D6D6"/><polygon points="719.72 24.494 739.73 36.034 739.73 36.031 709.72 18.716 699.72 24.494 709.72 30.263" fill="#D6D6D6"/><polygon points="719.72 47.575 729.68 41.83 719.72 36.061" fill="#D6D6D6"/><polygon points="709.71 41.87 709.72 41.865 709.72 41.803 719.7 36.046 709.72 30.266 709.72 30.263 699.72 24.494 689.71 18.716 679.71 24.488" fill="#D6D6D6"/><polygon points="749.73 41.806 739.73 36.037 739.73 47.575" fill="#D6D6D6"/><polygon points="719.72 36.061 729.68 41.83 739.73 36.034 719.72 24.494 709.72 30.263 709.72 30.266 719.7 36.046 719.72 36.031" fill="#D6D6D6"/><polygon points="789.75 18.716 759.74 1.401 749.74 7.173 779.75 24.488" fill="#D6D6D6"/><polygon points="802.19 0 777.32 0 789.75 7.173" fill="#D6D6D6"/><polygon points="659.7 93.748 629.68 76.433 629.68 87.977 659.7 105.29" fill="#A3A3A3"/><polygon points="679.59 82.249 679.61 82.26 679.7 82.209 679.7 70.768 649.69 53.453 649.69 64.876 649.69 64.997" fill="#A3A3A3"/><polygon points="719.64 59.169 709.72 64.89 709.72 64.89 719.72 70.763 719.72 70.662 719.72 59.22" fill="#A3A3A3"/><polygon points="709.71 53.351 709.71 41.87 679.71 24.488 679.71 36.031 709.66 53.382" fill="#A3A3A3"/><polygon points="749.74 7.173 749.74 18.716 779.75 36.031 779.75 24.488" fill="#A3A3A3"/><polygon points="789.75 18.716 789.75 7.173 777.32 0 759.74 0 759.74 1.401" fill="#A3A3A3"/><polygon points="829.77 7.173 839.78 12.945 839.78 1.401" fill="#A3A3A3"/><polygon points="809.76 7.173 819.77 12.945 819.77 1.401" fill="#A3A3A3"/><polygon points="789.75 18.716 779.75 24.488 779.75 36.031 809.76 18.716 809.76 7.173 819.77 1.401 819.77 12.945 829.77 7.173 839.78 1.401 839.78 12.945 862.21 0 802.19 0 789.75 7.173" fill="#fff"/><polygon points="729.68 41.83 719.72 47.575 719.72 36.061 719.72 36.031 719.7 36.046 709.72 41.803 709.72 41.865 709.72 53.347 709.71 53.351 709.66 53.382 679.71 70.662 679.71 70.764 679.71 82.205 679.7 82.209 679.61 82.26 659.7 93.748 659.7 105.29 699.72 82.205 699.72 70.662 709.72 64.89 719.64 59.169 719.72 59.118 719.72 59.22 719.72 70.662 749.74 53.347 749.74 41.803 749.73 41.806 739.73 47.575 739.73 36.037 739.73 36.031 739.73 36.034" fill="#fff"/><polygon points="1229.7 826.18 1229.7 837.72 1259.7 855 1259.7 843.48" fill="#A3A3A3"/><polygon points="1249.7 814.63 1279.7 831.9 1279.7 820.4 1249.7 803.08" fill="#A3A3A3"/><polygon points="1299.7 797.32 1299.6 797.29 1299.6 797.31 1269.7 780.06 1269.8 791.55 1299.7 808.82" fill="#A3A3A3"/><polygon points="1319.7 774.24 1319.7 774.23 1289.8 756.95 1289.8 768.49 1319.7 785.72 1319.6 774.18" fill="#A3A3A3"/><polygon points="1339.7 751.1 1339.7 751.08 1339.6 751.13 1309.8 733.9 1309.8 745.36 1339.7 762.6 1339.7 751.1" fill="#A3A3A3"/><polygon points="1349.6 745.27 1349.6 733.81 1319.6 716.5 1319.7 728.04 1319.7 728.02" fill="#A3A3A3"/><polygon points="1319.6 716.49 1319.6 716.5 1319.6 716.5" fill="#A3A3A3"/><polygon points="1399.7 704.93 1399.7 704.91 1399.6 704.94 1369.7 687.68 1369.7 699.16 1399.7 716.47" fill="#A3A3A3"/><polygon points="1389.8 664.54 1389.8 664.54 1389.8 664.54" fill="#A3A3A3"/><polygon points="1419.8 681.83 1389.8 664.54 1389.8 676.08 1419.8 693.36 1419.8 681.84" fill="#A3A3A3"/><polygon points="1449.8 664.53 1459.8 670.3 1459.8 670.3 1459.8 658.82 1429.8 641.51 1429.8 652.99 1449.8 664.53" fill="#A3A3A3"/><polygon points="1429.8 641.45 1429.8 641.51 1429.8 641.48" fill="#A3A3A3"/><polygon points="1479.8 635.71 1449.8 618.4 1449.8 629.94 1479.7 647.23 1479.8 647.21" fill="#A3A3A3"/><polygon points="1489.8 618.33 1459.9 601.08 1459.9 612.6 1489.8 629.83 1489.8 618.36" fill="#A3A3A3"/><polygon points="1459.9 601.06 1459.9 601.08 1459.9 601.07" fill="#A3A3A3"/><polygon points="1519.8 601.03 1519.8 589.54 1489.8 572.22 1489.8 583.72 1489.8 583.73 1489.8 583.72" fill="#A3A3A3"/><polygon points="1489.8 572.18 1489.8 572.22 1489.8 572.2" fill="#A3A3A3"/><polygon points="1609.8 583.6 1609.8 572.17 1599.4 566.18 1579.8 554.89 1579.8 566.4 1579.9 566.46 1580 566.41" fill="#A3A3A3"/><polygon points="1579.8 554.86 1579.8 554.89 1579.8 554.88" fill="#A3A3A3"/><polygon points="1629.8 572.06 1629.8 560.68 1599.9 543.42 1599.9 554.85 1600 554.82" fill="#A3A3A3"/><polygon points="1619.9 508.82 1620 508.76 1619.8 508.69 1619.9 531.77 1649.9 549.07 1649.9 526.08" fill="#A3A3A3"/><polygon points="1639.9 508.69 1668 524.88 1668 501.94 1639.9 485.73" fill="#A3A3A3"/><polygon points="1349.6 803 1349.6 791.58 1339.7 797.29" fill="#A3A3A3"/><polygon points="1319.7 785.73 1319.7 774.24 1319.6 774.18 1319.7 785.72 1319.7 785.73 1319.7 785.74" fill="#A3A3A3"/><polygon points="1429.7 756.91 1429.7 745.4 1429.7 745.39 1419.7 751.14" fill="#A3A3A3"/><polygon points="1519.7 693.38 1519.7 681.89 1509.8 687.64" fill="#A3A3A3"/><polygon points="1569.8 652.99 1579.8 658.75 1579.8 647.24" fill="#A3A3A3"/><polygon points="1639.9 635.68 1639.9 635.67 1639.9 635.67" fill="#A3A3A3"/><polygon points="1629.9 629.9 1639.8 635.65 1639.8 624.15" fill="#A3A3A3"/><polygon points="1299.7 808.82 1269.8 791.55 1269.7 791.51 1249.7 803.05 1279.7 820.36" fill="#D6D6D6"/><polygon points="1259.7 843.45 1279.7 831.92 1249.7 814.63 1229.7 826.18 1259.7 843.48" fill="#D6D6D6"/><polygon points="1299.6 797.29 1319.6 785.76 1289.6 768.45 1269.6 779.99 1269.7 780.06 1299.6 797.31" fill="#D6D6D6"/><polygon points="1339.7 762.64 1309.8 745.36 1289.8 756.9 1319.7 774.19 1339.7 762.65" fill="#D6D6D6"/><polygon points="1349.6 733.81 1359.7 728 1339.8 716.5 1349.7 710.76 1339.6 704.95 1319.6 716.5 1319.6 716.5 1319.6 716.5 1319.6 716.5" fill="#D6D6D6"/><polygon points="1339.7 751.08 1349.7 745.33 1349.6 745.27 1319.7 728.02 1319.7 728.04 1309.6 733.82 1309.8 733.9 1339.6 751.13" fill="#D6D6D6"/><polygon points="1359.7 728 1359.7 728.01 1369.7 722.25 1369.7 733.78 1369.7 733.78 1399.7 716.47 1369.7 699.16 1349.7 710.76 1339.8 716.5" fill="#D6D6D6"/><polygon points="1399.7 704.91 1419.7 693.4 1389.6 676.09 1369.6 687.63 1369.7 687.68 1399.6 704.94" fill="#D6D6D6"/><polygon points="1429.7 676.1 1409.7 664.54 1429.7 653 1449.7 664.55 1449.8 664.53 1429.8 652.99 1419.8 647.21 1389.8 664.54 1389.8 664.54 1419.8 681.83" fill="#D6D6D6"/><polygon points="1449.8 664.58 1449.8 676.05 1459.7 670.31" fill="#D6D6D6"/><polygon points="1409.7 664.54 1429.7 676.1 1449.7 664.55 1429.7 653" fill="#D6D6D6"/><polygon points="1459.8 658.76 1479.7 647.24 1449.8 629.96 1429.8 641.48 1429.8 641.51 1459.8 658.82" fill="#D6D6D6"/><polygon points="1519.8 601.04 1519.8 601.03 1489.8 583.72 1489.8 583.73 1459.9 601.07 1459.9 601.08 1489.8 618.33" fill="#D6D6D6"/><polygon points="1519.8 589.52 1519.8 589.5 1529.8 583.7 1510 572.22 1529.9 560.7 1519.8 554.87 1489.8 572.2 1489.8 572.22 1519.8 589.54" fill="#D6D6D6"/><polygon points="1529.8 583.7 1539.7 577.99 1529.8 572.22 1539.9 566.39 1530 560.68 1529.9 560.7 1510 572.22" fill="#D6D6D6"/><polygon points="1529.8 572.22 1539.7 577.99 1539.8 577.96 1539.8 577.95 1559.7 566.44 1549.8 560.68 1539.9 566.39" fill="#D6D6D6"/><polygon points="1579.8 589.4 1579.8 589.48 1579.9 589.44" fill="#D6D6D6"/><polygon points="1539.8 577.95 1539.8 577.96 1549.8 572.18 1549.8 583.72 1559.8 577.95 1559.8 589.5 1569.9 583.68 1560 577.95 1569.9 572.23 1559.8 566.41 1559.7 566.44" fill="#D6D6D6"/><polygon points="1560 577.95 1569.9 583.68 1579.8 577.95 1579.8 589.4 1579.9 589.44 1579.9 589.45 1589.8 583.72 1589.8 595.17 1589.9 595.22 1609.8 583.72 1609.8 583.63 1609.8 583.6 1580 566.41 1579.9 566.46 1569.9 572.23" fill="#D6D6D6"/><polygon points="1649.9 549.09 1619.9 531.82 1599.9 543.36 1629.8 560.64 1649.9 549.1" fill="#D6D6D6"/><polygon points="1639.9 485.69 1668 501.9 1668 501.75 1660 497.13 1668 492.5 1668 478.81 1659.9 474.15" fill="#D6D6D6"/><polygon points="1609.8 572.18 1609.8 572.18 1609.9 572.12 1589.9 560.61 1599.8 554.89 1589.8 549.11 1579.8 554.88 1579.8 554.89 1599.4 566.18" fill="#D6D6D6"/><polygon points="1649.9 526.08 1649.9 526.01 1649.9 525.98 1629.9 514.46 1639.8 508.74 1629.9 503.04 1620 508.76 1619.9 508.82" fill="#D6D6D6"/><polygon points="1639.9 508.67 1639.8 508.74 1629.9 514.46 1649.9 525.98 1659.9 520.24 1659.9 531.71 1659.9 531.74 1668 527.08 1668 524.88 1639.9 508.69" fill="#D6D6D6"/><polygon points="1609.9 572.12 1619.8 566.41 1619.8 577.81 1620 577.88 1629.8 572.18 1629.8 572.06 1600 554.82 1599.9 554.85 1599.8 554.89 1589.9 560.61" fill="#D6D6D6"/><polygon points="1489.8 629.87 1459.8 612.58 1449.8 618.37 1479.8 635.65 1489.8 629.9" fill="#D6D6D6"/><polygon points="1668 501.75 1668 492.5 1660 497.13" fill="#D6D6D6"/><polygon points="1659.9 531.78 1659.9 531.71 1659.9 520.24 1649.9 525.98 1649.9 526.01 1649.9 526.08 1649.9 549.07 1649.9 549.09 1649.9 549.1 1629.8 560.64 1629.8 560.64 1629.8 560.68 1629.8 572.06 1629.8 572.18 1620 577.88 1619.8 577.95 1619.8 577.81 1619.8 566.41 1609.9 572.12 1609.8 572.18 1609.8 572.18 1609.8 583.63 1609.8 583.72 1589.9 595.22 1589.8 595.27 1589.8 595.17 1589.8 583.72 1579.9 589.45 1579.8 589.5 1579.8 589.48 1579.8 589.4 1579.8 577.95 1569.9 583.68 1559.8 589.5 1559.8 577.95 1549.8 583.72 1549.8 572.18 1539.8 577.96 1539.7 577.99 1529.8 583.7 1519.8 589.5 1519.8 589.52 1519.8 601.04 1489.8 618.33 1489.8 618.36 1489.8 629.83 1489.8 629.87 1489.8 629.9 1479.8 635.65 1479.8 635.67 1479.8 635.71 1479.8 647.21 1479.7 647.23 1479.7 647.24 1459.8 658.76 1459.8 658.82 1459.8 670.3 1459.8 670.3 1449.8 676.07 1449.8 676.05 1449.8 664.58 1449.8 664.53 1449.8 664.53 1449.7 664.55 1429.7 676.1 1419.8 681.83 1419.8 681.84 1419.8 693.36 1419.8 693.39 1399.7 704.93 1399.7 716.47 1369.7 733.78 1369.7 733.79 1369.7 733.78 1369.7 722.25 1359.7 728.01 1349.7 733.79 1349.7 745.33 1339.7 751.1 1339.7 751.1 1339.7 762.6 1339.7 762.64 1339.7 762.65 1319.7 774.19 1319.7 774.19 1319.7 774.23 1319.7 774.24 1319.7 785.73 1319.7 785.74 1299.7 797.28 1299.7 797.32 1299.7 808.82 1279.7 820.36 1279.7 820.4 1279.7 831.91 1279.7 831.92 1259.7 843.45 1259.7 843.48 1259.7 855 1319.7 820.39 1319.7 808.85 1339.7 797.29 1349.6 791.58 1349.7 791.53 1349.7 803.08 1379.7 785.76 1379.7 774.22 1419.7 751.14 1429.7 745.39 1429.7 745.36 1429.7 756.9 1459.8 739.59 1459.8 728.04 1469.8 722.27 1469.8 710.73 1509.8 687.64 1519.7 681.89 1519.8 681.87 1519.8 693.41 1569.8 664.55 1569.8 653.01 1569.8 652.99 1579.8 647.24 1579.8 658.75 1579.8 658.78 1629.9 629.9 1639.8 624.15 1639.8 635.65 1639.8 635.7 1639.9 635.67 1639.9 635.67 1668 619.45 1668 527.08 1659.9 531.74" fill="#fff"/><polygon points="1451.5 154.1 1421.5 136.79 1421.5 148.33 1451.5 165.65" fill="#A3A3A3"/><polygon points="1451.5 131.02 1471.5 142.56 1471.5 131.02 1441.5 113.7 1441.5 125.24" fill="#A3A3A3"/><polygon points="1471.5 154.1 1481.5 159.88 1481.5 148.33" fill="#A3A3A3"/><rect x="1461.5" y="125.24" width="0" height="23.1" fill="#A3A3A3"/><polygon points="1501.5 136.79 1511.5 142.56 1511.5 131.02" fill="#A3A3A3"/><polygon points="1501.5 102.16 1471.5 84.843 1471.5 96.386 1501.5 113.7" fill="#A3A3A3"/><polygon points="1111.4 304.17 1111.4 315.71 1141.4 333.02 1141.4 321.48" fill="#A3A3A3"/><polygon points="1151.4 304.17 1121.4 286.85 1121.4 298.4 1151.4 315.71" fill="#A3A3A3"/><polygon points="1151.4 292.62 1161.4 298.4 1161.4 286.85 1131.4 269.54 1131.4 281.08" fill="#A3A3A3"/><polygon points="1171.4 315.71 1181.4 321.48 1181.4 309.94" fill="#A3A3A3"/><rect transform="matrix(-.8662 -.4997 .4997 -.8662 2010.3 1129.3)" x="1150.6" y="295.51" width="11.55" height="0" fill="#A3A3A3"/><polygon points="1221.4 286.85 1231.4 292.62 1231.4 281.08" fill="#A3A3A3"/><polygon points="1181.4 263.76 1171.4 269.54 1181.4 275.31" fill="#A3A3A3"/><polygon points="1171.4 269.54 1171.4 257.99 1141.4 240.68 1141.4 252.22 1151.4 257.99 1151.4 257.99" fill="#A3A3A3"/><polygon points="1181.4 229.14 1151.4 211.82 1151.4 234.91 1181.4 252.22" fill="#A3A3A3"/><polygon points="1191.4 211.82 1161.4 194.5 1161.4 206.05 1191.4 223.36" fill="#A3A3A3"/><polygon points="1211.4 188.73 1181.4 171.42 1181.4 182.96 1211.4 200.28" fill="#A3A3A3"/><polygon points="1231.4 165.65 1201.4 148.33 1201.4 159.88 1231.4 177.19" fill="#A3A3A3"/><polygon points="1341.4 240.68 1351.5 246.45 1351.5 234.91" fill="#A3A3A3"/><polygon points="1271.4 269.54 1281.4 275.31 1281.4 263.76" fill="#A3A3A3"/><polygon points="1151.4 315.71 1121.4 298.4 1111.4 304.17 1141.4 321.48" fill="#D6D6D6"/><polygon points="1161.4 298.4 1151.4 292.62 1131.4 281.08 1121.4 286.85 1151.4 304.17" fill="#D6D6D6"/><polygon points="1181.4 275.31 1171.4 269.54 1171.4 269.54 1171.4 269.54 1151.4 257.99 1151.4 257.99 1131.4 269.54 1161.4 286.85" fill="#D6D6D6"/><polygon points="1181.4 252.22 1151.4 234.91 1141.4 240.68 1171.4 257.99" fill="#D6D6D6"/><polygon points="1191.4 223.36 1161.4 206.05 1151.4 211.82 1181.4 229.14" fill="#D6D6D6"/><polygon points="1211.4 200.28 1181.4 182.96 1161.4 194.5 1191.4 211.82" fill="#D6D6D6"/><polygon points="1231.4 177.19 1201.4 159.88 1181.4 171.42 1211.4 188.73" fill="#D6D6D6"/><polygon points="1241.4 159.88 1221.4 148.33 1231.4 142.56 1221.4 136.79 1201.4 148.33 1231.4 165.65" fill="#D6D6D6"/><polygon points="1241.4 159.88 1251.4 154.1 1251.4 165.65 1261.4 159.88 1241.4 148.33 1251.4 142.56 1241.4 136.79 1231.4 142.56 1221.4 148.33" fill="#D6D6D6"/><polygon points="1261.4 159.88 1271.4 154.1 1271.4 165.65 1281.4 159.88 1261.4 148.33 1271.4 142.56 1261.4 136.79 1251.4 142.56 1241.4 148.33" fill="#D6D6D6"/><polygon points="1331.4 154.1 1321.4 148.33 1321.5 159.86" fill="#D6D6D6"/><polygon points="1331.4 177.19 1341.5 171.41 1331.4 165.63" fill="#D6D6D6"/><polygon points="1281.4 159.88 1291.4 154.1 1291.4 165.65 1321.4 148.33 1291.4 131.02 1271.4 142.56 1261.4 148.33" fill="#D6D6D6"/><polygon points="1381.5 171.42 1381.5 171.42" fill="#D6D6D6"/><polygon points="1331.4 154.1 1331.4 165.63 1341.5 171.41 1351.5 165.65 1351.5 177.18 1351.5 177.19 1371.5 165.65 1361.5 159.88 1371.5 154.1 1351.5 142.56 1331.4 154.1 1321.5 159.86" fill="#D6D6D6"/><polygon points="1391.5 177.19 1401.5 171.42 1391.5 165.65" fill="#D6D6D6"/><polygon points="1381.5 159.88 1381.5 171.42 1381.5 171.42 1381.5 171.42 1391.5 165.65" fill="#D6D6D6"/><polygon points="1371.5 165.65 1381.5 159.88 1391.5 154.1 1381.5 148.33 1371.5 154.1 1361.5 159.88" fill="#D6D6D6"/><polygon points="1381.5 159.88 1391.5 165.65 1391.5 165.65 1391.5 165.65 1401.5 171.42 1411.5 165.65 1411.5 177.19 1431.5 165.65 1401.5 148.33 1391.5 154.1" fill="#D6D6D6"/><polygon points="1471.5 142.56 1451.5 131.02 1441.5 125.24 1421.5 136.79 1451.5 154.1" fill="#D6D6D6"/><polygon points="1531.5 107.93 1521.5 102.16 1521.5 113.7" fill="#D6D6D6"/><polygon points="1501.5 102.16 1511.5 96.386 1511.5 96.386 1521.5 90.614 1491.5 73.299 1471.5 84.843" fill="#D6D6D6"/><polygon points="1501.5 113.7 1471.5 96.386 1441.5 113.7 1471.5 131.02" fill="#D6D6D6"/><polygon points="1511.5 96.386 1521.5 90.614 1521.5 102.16 1531.5 107.93 1541.5 102.16 1541.5 113.7 1561.5 102.16 1531.5 84.843 1521.5 90.614" fill="#D6D6D6"/><polygon points="1231.4 281.08 1231.4 292.62 1271.4 269.54 1281.4 263.76 1281.4 275.31 1341.4 240.68 1351.5 234.91 1351.5 246.45 1391.5 223.36 1391.5 211.82 1421.5 194.5 1421.5 182.96 1431.5 177.19 1431.5 165.65 1411.5 177.19 1411.5 165.65 1401.5 171.42 1391.5 177.19 1391.5 165.65 1391.5 165.65 1391.5 165.65 1381.5 171.42 1381.5 171.42 1381.5 171.42 1381.5 171.42 1381.5 159.88 1371.5 165.65 1351.5 177.19 1351.5 177.19 1351.5 177.18 1351.5 165.65 1341.5 171.41 1331.4 177.19 1331.4 165.63 1331.4 154.1 1321.5 159.86 1321.4 148.33 1291.4 165.65 1291.4 154.1 1281.4 159.88 1271.4 165.65 1271.4 154.1 1261.4 159.88 1251.4 165.65 1251.4 154.1 1241.4 159.88 1231.4 165.65 1231.4 177.19 1211.4 188.73 1211.4 200.28 1191.4 211.82 1191.4 223.36 1181.4 229.14 1181.4 252.22 1171.4 257.99 1171.4 257.99 1171.4 269.54 1171.4 269.54 1171.4 269.54 1181.4 263.76 1181.4 275.31 1161.4 286.85 1161.4 298.4 1161.4 298.4 1151.4 304.17 1151.4 315.71 1141.4 321.48 1141.4 333.02 1171.4 315.71 1181.4 309.94 1181.4 321.48 1211.4 304.17 1211.4 292.62 1221.4 286.85" fill="#fff"/><polygon points="1541.5 102.16 1531.5 107.93 1521.5 113.7 1521.5 102.16 1521.5 90.614 1511.5 96.386 1501.5 102.16 1501.5 102.16 1501.5 113.7 1471.5 131.02 1471.5 142.56 1471.5 142.56 1451.5 154.1 1451.5 165.65 1471.5 154.1 1481.5 148.33 1481.5 159.88 1491.5 154.1 1491.5 142.56 1501.5 136.79 1511.5 131.02 1511.5 142.56 1561.5 113.7 1561.5 102.16 1541.5 113.7" fill="#fff"/></svg>
</file>

<file path="res/images/logo-dark.svg">
<?xml version="1.0" encoding="UTF-8"?><svg version="1.1" viewBox="0 0 440.104 552.999" xmlns="http://www.w3.org/2000/svg"><path d="m125.48 540.64l-5.332 3.091-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841 5.333-3.09 6.442 3.84 6.442 3.84 5.332-3.09 5.333-3.091 5.332-3.091 5.333-3.09 6.442 3.84 6.442 3.841 6.442 3.841 6.442 3.84 6.442 3.84-5.333 3.09zm-11.774-0.749l5.332-3.091-6.442-3.84-6.442-3.84-6.442-3.841-5.332 3.091-5.333 3.09-5.332 3.091 6.442 3.84 6.442 3.841 6.442 3.84 5.332-3.091 5.333-3.09z" fill="#768390"/><path d="m136.15 534.46l-6.442-3.841-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.84 5.333-3.091 5.333-3.091 5.333-3.09 5.333-3.091 6.442 3.841-5.333 3.09-5.333 3.091-5.333 3.09 6.442 3.841 6.442 3.84 6.442 3.84 6.442 3.841-5.333 3.091z" fill="#768390"/><path d="m184.14 506.64l-5.333 3.09-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84 5.333-3.091 5.332-3.09 5.333-3.091 5.333-3.09 5.333-3.091 6.442 3.841 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84-5.333 3.091zm-11.775-0.75l5.332-3.091-6.441-3.84-6.443-3.84-6.441-3.841-5.333 3.091-5.333 3.09-5.332 3.091 6.442 3.84 6.442 3.841 6.442 3.84 5.332-3.091 5.333-3.09z" fill="#768390"/><path d="m216.14 488.1l-5.333 3.09-5.332 3.09-5.333 3.091-5.333 3.091-6.441-3.841-6.443-3.84-6.441-3.84-6.443-3.841-6.441-3.84 5.332-3.091 6.442 3.841 6.442 3.84 6.442 3.841 6.442 3.84 5.332-3.091-6.441-3.84-6.443-3.84-6.441-3.841 5.332-3.091 6.442 3.841 6.442 3.841 6.442 3.84 5.333-3.091-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.84 5.332-3.091 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84 6.442 3.841-5.332 3.091z" fill="#768390"/><path d="m248.13 469.56l-5.332 3.091-5.333 3.09-5.333 3.091-5.332 3.09-6.442-3.84 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09-6.442-3.84-5.332 3.09-5.333 3.091-5.333 3.09-5.332 3.091-6.442-3.841-6.442-3.84-6.442-3.841 5.332-3.09 5.333-3.091 5.332-3.09 5.333-3.091 5.333-3.09 6.441 3.84-5.332 3.091-5.332 3.09-5.333 3.091-5.333 3.09 6.442 3.841 5.333-3.091 5.332-3.09 5.333-3.091 5.333-3.09 6.441 3.84 6.443 3.84 6.441 3.841-5.332 3.09z" fill="#768390"/><path d="m273.68 447.18l5.333-3.091 6.442 3.84-5.333 3.091-5.332 3.091-5.333 3.09-5.332 3.091-5.333 3.09-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.841 5.333-3.09 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.091 6.442 3.841 6.442 3.841 6.442 3.84-5.333 3.091-5.332 3.09-5.333 3.091-5.332 3.09 6.442 3.84 5.332-3.09 5.333-3.091 5.332-3.09zm-18.216-4.59l5.332-3.091-6.442-3.84-5.332 3.09-5.333 3.091-5.332 3.09 6.442 3.841 5.332-3.091 5.333-3.09z" fill="#768390"/><path d="m290.79 444.84l-6.441-3.84-6.443-3.84-6.441-3.841-6.443-3.841-6.441-3.84 5.332-3.09 5.332-3.091 5.333-3.091 5.333-3.09 6.441 3.84-5.332 3.091-5.332 3.09-5.333 3.091 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.841-5.333 3.09z" fill="#768390"/><path d="m338.78 417.02l-5.332 3.091-5.333 3.09-5.332 3.091-5.333 3.09-6.442-3.84 5.333-3.091 5.332-3.09 5.333-3.091 5.332-3.09-6.442-3.84-5.332 3.09-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.841 5.333-3.09 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09 6.442 3.84-5.333 3.091-5.332 3.09-5.333 3.091-5.332 3.09 6.442 3.841 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09 6.442 3.84 6.442 3.84 6.442 3.841-5.333 3.09z" fill="#768390"/><path d="m383.66 406.16l-5.333 3.091-5.333 3.091-5.332 3.09-5.332 3.091-6.443-3.84 5.333-3.091 5.333-3.09 5.332-3.091 5.333-3.091-6.441-3.84-5.333 3.09-5.332 3.091-5.333 3.091-5.333 3.09-6.441-3.84-6.443-3.84-6.441-3.841-6.443-3.84-6.441-3.841 5.332-3.09 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84 5.332-3.09 5.333-3.091 5.333-3.09-6.442-3.84-6.442-3.841-6.442-3.841-6.442-3.84 5.332-3.09 6.442 3.84 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.841 6.441 3.84 6.442 3.84-5.332 3.09z" fill="#768390"/><path d="m402.78 379.94l-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-5.332 3.091-5.333 3.09-5.333 3.091 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84-5.332 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09 5.333-3.091 6.441 3.841 6.443 3.84 6.441 3.841 6.443 3.84 6.441 3.84-5.332 3.091z" fill="#768390"/><path d="m415.44 349.88l-6.442-3.841-5.332 3.091-5.333 3.09-5.332 3.091 6.441 3.84 6.443 3.841 6.441 3.84 5.333-3.091 5.333-3.09 5.332-3.091-6.442-3.84 5.333-3.09 6.442 3.84 6.442 3.84-5.333 3.091-5.332 3.09-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84 5.332-3.091 5.333-3.09 5.333-3.091 5.332-3.09 5.333-3.091 6.442 3.841 6.442 3.84-5.333 3.091z" fill="#768390"/><polygon points="306.04 147.19 204.53 88.193 204.36 29.494 305.88 88.487" fill="#2D333B"/><polygon points="306.71 382.01 205.19 323.02 205.03 264.32 306.54 323.31" fill="#2D333B"/><polygon points="255.46 352.81 153.94 293.81 153.78 235.11 255.29 294.11" fill="#2D333B"/><polygon points="255.12 235.41 153.61 176.41 153.44 117.69 254.96 176.68" fill="#2D333B"/><polygon points="204.21 323.6 102.69 264.61 102.52 205.91 204.04 264.9" fill="#2D333B"/><polygon points="153.29 411.79 51.773 352.8 51.606 294.1 153.12 353.09" fill="#2D333B"/><polygon points="152.96 294.39 51.44 235.4 51.274 176.67 152.79 235.67" fill="#2D333B"/><polygon points="101.68 265.18 0.166 206.18 0 147.48 101.52 206.48" fill="#2D333B"/><polygon points="102.35 500 0.832 441.01 0.666 382.31 102.18 441.3" fill="#2D333B"/><polygon points="305.88 88.487 204.36 29.494 255.44 0 356.96 58.994" fill="#444c56"/><polygon points="306.54 323.31 205.03 264.32 256.11 234.82 357.62 293.82" fill="#444c56"/><polygon points="255.29 294.11 153.78 235.11 204.86 205.62 306.37 264.61" fill="#444c56"/><polygon points="254.96 176.68 153.44 117.69 204.53 88.193 306.04 147.19" fill="#444c56"/><polygon points="204.04 264.9 102.52 205.91 153.61 176.41 255.12 235.41" fill="#444c56"/><polygon points="153.12 353.09 51.606 294.1 102.69 264.61 204.21 323.6" fill="#444c56"/><polygon points="152.79 235.67 51.274 176.67 102.36 147.18 203.87 206.17" fill="#444c56"/><polygon points="101.52 206.48 0 147.48 51.107 117.97 152.62 176.97" fill="#444c56"/><polygon points="102.18 441.3 0.666 382.31 51.773 352.8 153.29 411.79" fill="#444c56"/><polygon points="356.96 58.994 357.12 117.69 306.04 147.19 305.88 88.487" fill="#768390"/><polygon points="357.62 293.82 357.79 352.52 306.71 382.01 306.54 323.31" fill="#768390"/><polygon points="306.37 264.61 306.54 323.31 255.46 352.81 255.29 294.11" fill="#768390"/><polygon points="306.04 147.19 306.21 205.91 255.12 235.41 254.96 176.68" fill="#768390"/><polygon points="255.12 235.41 255.29 294.11 204.21 323.6 204.04 264.9" fill="#768390"/><polygon points="204.21 323.6 204.37 382.3 153.29 411.79 153.12 353.09" fill="#768390"/><polygon points="203.87 206.17 204.04 264.9 152.96 294.39 152.79 235.67" fill="#768390"/><polygon points="152.62 176.97 152.79 235.67 101.68 265.18 101.52 206.48" fill="#768390"/><polygon points="153.29 411.79 153.45 470.49 102.35 500 102.18 441.3" fill="#768390"/></svg>
</file>

<file path="res/images/logo.svg">
<?xml version="1.0" encoding="UTF-8"?><svg version="1.1" viewBox="0 0 440.104 552.999" xmlns="http://www.w3.org/2000/svg"><path d="m125.48 540.64l-5.332 3.091-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841 5.333-3.09 6.442 3.84 6.442 3.84 5.332-3.09 5.333-3.091 5.332-3.091 5.333-3.09 6.442 3.84 6.442 3.841 6.442 3.841 6.442 3.84 6.442 3.84-5.333 3.09zm-11.774-0.749l5.332-3.091-6.442-3.84-6.442-3.84-6.442-3.841-5.332 3.091-5.333 3.09-5.332 3.091 6.442 3.84 6.442 3.841 6.442 3.84 5.332-3.091 5.333-3.09z" fill="#0A323D"/><path d="m136.15 534.46l-6.442-3.841-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.84 5.333-3.091 5.333-3.091 5.333-3.09 5.333-3.091 6.442 3.841-5.333 3.09-5.333 3.091-5.333 3.09 6.442 3.841 6.442 3.84 6.442 3.84 6.442 3.841-5.333 3.091z" fill="#0A323D"/><path d="m184.14 506.64l-5.333 3.09-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84 5.333-3.091 5.332-3.09 5.333-3.091 5.333-3.09 5.333-3.091 6.442 3.841 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84-5.333 3.091zm-11.775-0.75l5.332-3.091-6.441-3.84-6.443-3.84-6.441-3.841-5.333 3.091-5.333 3.09-5.332 3.091 6.442 3.84 6.442 3.841 6.442 3.84 5.332-3.091 5.333-3.09z" fill="#0A323D"/><path d="m216.14 488.1l-5.333 3.09-5.332 3.09-5.333 3.091-5.333 3.091-6.441-3.841-6.443-3.84-6.441-3.84-6.443-3.841-6.441-3.84 5.332-3.091 6.442 3.841 6.442 3.84 6.442 3.841 6.442 3.84 5.332-3.091-6.441-3.84-6.443-3.84-6.441-3.841 5.332-3.091 6.442 3.841 6.442 3.841 6.442 3.84 5.333-3.091-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.84 5.332-3.091 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84 6.442 3.841-5.332 3.091z" fill="#0A323D"/><path d="m248.13 469.56l-5.332 3.091-5.333 3.09-5.333 3.091-5.332 3.09-6.442-3.84 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09-6.442-3.84-5.332 3.09-5.333 3.091-5.333 3.09-5.332 3.091-6.442-3.841-6.442-3.84-6.442-3.841 5.332-3.09 5.333-3.091 5.332-3.09 5.333-3.091 5.333-3.09 6.441 3.84-5.332 3.091-5.332 3.09-5.333 3.091-5.333 3.09 6.442 3.841 5.333-3.091 5.332-3.09 5.333-3.091 5.333-3.09 6.441 3.84 6.443 3.84 6.441 3.841-5.332 3.09z" fill="#0A323D"/><path d="m273.68 447.18l5.333-3.091 6.442 3.84-5.333 3.091-5.332 3.091-5.333 3.09-5.332 3.091-5.333 3.09-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84-6.442-3.841 5.333-3.09 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.091 6.442 3.841 6.442 3.841 6.442 3.84-5.333 3.091-5.332 3.09-5.333 3.091-5.332 3.09 6.442 3.84 5.332-3.09 5.333-3.091 5.332-3.09zm-18.216-4.59l5.332-3.091-6.442-3.84-5.332 3.09-5.333 3.091-5.332 3.09 6.442 3.841 5.332-3.091 5.333-3.09z" fill="#0A323D"/><path d="m290.79 444.84l-6.441-3.84-6.443-3.84-6.441-3.841-6.443-3.841-6.441-3.84 5.332-3.09 5.332-3.091 5.333-3.091 5.333-3.09 6.441 3.84-5.332 3.091-5.332 3.09-5.333 3.091 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.841-5.333 3.09z" fill="#0A323D"/><path d="m338.78 417.02l-5.332 3.091-5.333 3.09-5.332 3.091-5.333 3.09-6.442-3.84 5.333-3.091 5.332-3.09 5.333-3.091 5.332-3.09-6.442-3.84-5.332 3.09-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.841 5.333-3.09 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09 6.442 3.84-5.333 3.091-5.332 3.09-5.333 3.091-5.332 3.09 6.442 3.841 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09 6.442 3.84 6.442 3.84 6.442 3.841-5.333 3.09z" fill="#0A323D"/><path d="m383.66 406.16l-5.333 3.091-5.333 3.091-5.332 3.09-5.332 3.091-6.443-3.84 5.333-3.091 5.333-3.09 5.332-3.091 5.333-3.091-6.441-3.84-5.333 3.09-5.332 3.091-5.333 3.091-5.333 3.09-6.441-3.84-6.443-3.84-6.441-3.841-6.443-3.84-6.441-3.841 5.332-3.09 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84 5.332-3.09 5.333-3.091 5.333-3.09-6.442-3.84-6.442-3.841-6.442-3.841-6.442-3.84 5.332-3.09 6.442 3.84 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.841 6.441 3.84 6.442 3.84-5.332 3.09z" fill="#0A323D"/><path d="m402.78 379.94l-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-5.332 3.091-5.333 3.09-5.333 3.091 6.442 3.84 6.442 3.841 6.442 3.84 6.442 3.84-5.332 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84 5.332-3.091 5.333-3.09 5.332-3.091 5.333-3.09 5.333-3.091 6.441 3.841 6.443 3.84 6.441 3.841 6.443 3.84 6.441 3.84-5.332 3.091z" fill="#0A323D"/><path d="m415.44 349.88l-6.442-3.841-5.332 3.091-5.333 3.09-5.332 3.091 6.441 3.84 6.443 3.841 6.441 3.84 5.333-3.091 5.333-3.09 5.332-3.091-6.442-3.84 5.333-3.09 6.442 3.84 6.442 3.84-5.333 3.091-5.332 3.09-5.333 3.091-5.332 3.09-5.333 3.091-6.442-3.841-6.442-3.84-6.442-3.84-6.442-3.841-6.442-3.84 5.332-3.091 5.333-3.09 5.333-3.091 5.332-3.09 5.333-3.091 6.442 3.841 6.442 3.84-5.333 3.091z" fill="#0A323D"/><polygon points="306.04 147.19 204.53 88.193 204.36 29.494 305.88 88.487" fill="#0A323D"/><polygon points="306.71 382.01 205.19 323.02 205.03 264.32 306.54 323.31" fill="#0A323D"/><polygon points="255.46 352.81 153.94 293.81 153.78 235.11 255.29 294.11" fill="#0A323D"/><polygon points="255.12 235.41 153.61 176.41 153.44 117.69 254.96 176.68" fill="#0A323D"/><polygon points="204.21 323.6 102.69 264.61 102.52 205.91 204.04 264.9" fill="#0A323D"/><polygon points="153.29 411.79 51.773 352.8 51.606 294.1 153.12 353.09" fill="#0A323D"/><polygon points="152.96 294.39 51.44 235.4 51.274 176.67 152.79 235.67" fill="#0A323D"/><polygon points="101.68 265.18 0.166 206.18 0 147.48 101.52 206.48" fill="#0A323D"/><polygon points="102.35 500 0.832 441.01 0.666 382.31 102.18 441.3" fill="#0A323D"/><polygon points="305.88 88.487 204.36 29.494 255.44 0 356.96 58.994" fill="#267D91"/><polygon points="306.54 323.31 205.03 264.32 256.11 234.82 357.62 293.82" fill="#267D91"/><polygon points="255.29 294.11 153.78 235.11 204.86 205.62 306.37 264.61" fill="#267D91"/><polygon points="254.96 176.68 153.44 117.69 204.53 88.193 306.04 147.19" fill="#267D91"/><polygon points="204.04 264.9 102.52 205.91 153.61 176.41 255.12 235.41" fill="#267D91"/><polygon points="153.12 353.09 51.606 294.1 102.69 264.61 204.21 323.6" fill="#267D91"/><polygon points="152.79 235.67 51.274 176.67 102.36 147.18 203.87 206.17" fill="#267D91"/><polygon points="101.52 206.48 0 147.48 51.107 117.97 152.62 176.97" fill="#267D91"/><polygon points="102.18 441.3 0.666 382.31 51.773 352.8 153.29 411.79" fill="#267D91"/><polygon points="356.96 58.994 357.12 117.69 306.04 147.19 305.88 88.487" fill="#71D2E2"/><polygon points="357.62 293.82 357.79 352.52 306.71 382.01 306.54 323.31" fill="#71D2E2"/><polygon points="306.37 264.61 306.54 323.31 255.46 352.81 255.29 294.11" fill="#71D2E2"/><polygon points="306.04 147.19 306.21 205.91 255.12 235.41 254.96 176.68" fill="#71D2E2"/><polygon points="255.12 235.41 255.29 294.11 204.21 323.6 204.04 264.9" fill="#71D2E2"/><polygon points="204.21 323.6 204.37 382.3 153.29 411.79 153.12 353.09" fill="#71D2E2"/><polygon points="203.87 206.17 204.04 264.9 152.96 294.39 152.79 235.67" fill="#71D2E2"/><polygon points="152.62 176.97 152.79 235.67 101.68 265.18 101.52 206.48" fill="#71D2E2"/><polygon points="153.29 411.79 153.45 470.49 102.35 500 102.18 441.3" fill="#71D2E2"/></svg>
</file>

<file path="res/images/scan_error.svg">
<svg version="1.1" viewBox="-379 181 200 200" xmlns="http://www.w3.org/2000/svg"><style type="text/css">.st0{fill:#EA3869;}</style><path class="st0" d="m-371 252.7c4.4 0 8-3.6 8-8v-47.8h47.8c4.4 0 8-3.6 8-8s-3.6-8-8-8h-55.8c-4.4 0.1-8 3.7-8 8.1v55.8c0 4.3 3.6 7.9 8 7.9z"/><path class="st0" d="m-242.7 196.9h47.8v47.8c0 4.4 3.6 8 8 8s8-3.6 8-8v-55.7c0-4.4-3.6-8-8-8h-55.8c-4.4 0-8 3.6-8 8s3.6 7.9 8 7.9z"/><path class="st0" d="m-242.7 381h55.7c4.4 0 8-3.6 8-8v-55.8c0-4.4-3.6-8-8-8s-8 3.6-8 8v47.8h-47.8c-4.4 0-8 3.6-8 8s3.7 8 8.1 8z"/><path class="st0" d="m-371 381h55.8c4.4 0 8-3.6 8-8s-3.6-8-8-8h-47.9v-47.8c0-4.4-3.6-8-8-8s-8 3.6-8 8v55.8c0.1 4.4 3.7 8 8.1 8z"/></svg>
</file>

<file path="res/images/scan.svg">
<svg version="1.1" viewBox="-379 181 200 200" xmlns="http://www.w3.org/2000/svg"><style type="text/css">.st0{fill:#EDFEFF;}</style><path class="st0" d="m-371 252.7c4.4 0 8-3.6 8-8v-47.8h47.8c4.4 0 8-3.6 8-8s-3.6-8-8-8h-55.8c-4.4 0.1-8 3.7-8 8.1v55.8c0 4.3 3.6 7.9 8 7.9z"/><path class="st0" d="m-242.7 196.9h47.8v47.8c0 4.4 3.6 8 8 8s8-3.6 8-8v-55.7c0-4.4-3.6-8-8-8h-55.8c-4.4 0-8 3.6-8 8s3.6 7.9 8 7.9z"/><path class="st0" d="m-242.7 381h55.7c4.4 0 8-3.6 8-8v-55.8c0-4.4-3.6-8-8-8s-8 3.6-8 8v47.8h-47.8c-4.4 0-8 3.6-8 8s3.7 8 8.1 8z"/><path class="st0" d="m-371 381h55.8c4.4 0 8-3.6 8-8s-3.6-8-8-8h-47.9v-47.8c0-4.4-3.6-8-8-8s-8 3.6-8 8v55.8c0.1 4.4 3.7 8 8.1 8z"/></svg>
</file>

<file path="res/strings/ar.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "يتوفر تحديث إكس براوزر سينك"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "الإصدار: {version} متاح للتنزيل. انقر لمزيد من المعلومات.",
        "android": "إصدار إكس براوزر سينك {version} متاح للتنزيل."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "تم التحديث لـ"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "تم تحديث إكس براوزر سينك. تم تعطيل المزامنة، أعد تفعيل المزامنة لإكمال عملية التحديث."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "تم إنشاء الإشارة المرجعية"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "تم حذف الإشارة المرجعية"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "تم تحديث الإشارة المرجعية"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "جارِ جلب بيانات الإشارة المرجعية، اضغط للإلغاء."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "تم تحديث بيانات الإشارة المرجعية."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "الذهاب"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "مزامنة المتصفح كما يجب أن تكون: آمنة، ومتخفية، ومجانية! قم بمزامنة الإشارات المرجعية عبر المتصفحات والأجهزة خاصتك، لا يتطلب التسجيل."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "الإشارات المرجعية بالقائمة"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "إشارات مرجعية أخرى"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "الإشارات المرجعية بشريط الأدوات"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "أضف إشارة مرجعية"
    },
    "Back": {
      "key": "Button_Back",
      "default": "الرجوع"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "إلغاء"
    },
    "Close": {
      "key": "Button_Close",
      "default": "إغلاق"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "نعم"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "استمرار"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "حذف الإشارة المرجعية"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "لا"
    },
    "Done": {
      "key": "Button_Done",
      "default": "تم"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "تحميل نسخة احتياطية"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "تعديل الإشارة المرجعية"
    },
    "Help": {
      "key": "Button_Help",
      "default": "عرض دليل المساعدة"
    },
    "Next": {
      "key": "Button_Next",
      "default": "التالي"
    },
    "OK": {
      "key": "Button_OK",
      "default": "حسنا"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "عرض ملاحظات الإصدار"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "جاري الحفظ"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "الإعدادات"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "مشاركة الإشارة المرجعية"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "تراجع"
    },
    "Update": {
      "key": "Button_Update",
      "default": "تحديث"
    },
    "View": {
      "key": "Button_View",
      "default": "عرض"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "الرجاء تجنب تعديل مجلدات [xbs] حيث أنه يمكن أن يسبب مشاكل في المزامنة."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "تم تغيير مجلد إكس براوزر سينك"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "قم بالمزامنة مع رمز مزامنة حالِ أو قم بالتبديل إلى خدمة مختلفة أو حاول مرة أخرى غدًا."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "تم الوصول إلى حد المزامنة الجديدة اليومي"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "إذا استمرت المشكلة من فضلك <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>أبلغ عن المشكلة</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "حدث خطأ ما"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "فشل النسخ الاحتياطي"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "فشل استعراض الملفات"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "عنوان يو آر إل غير صالح أو فشل استلام بيانات صفحة الويب."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "فشل الحصول على بيانات الإشارة المرجعية"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "فشل الحصول على التحديثات"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "بيانات النسخ الاحتياطي المزوَّدة ليست بتنسيق متوقع."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "غير قادر على استعادة البيانات"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "يجب أن تتم المزامنة لإضافة إشارة مرجعية"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "فشل استرداد عنوان يو آر إل للإشارة المرجعية المشارَكة"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "تحقق من اتصالك بالشبكة وحاول مرة أخرى. إذا استمرت المشكلة ، فقد تكون هناك مشكلة في خدمة xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "فشل المزامنة"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "غير قادر على العثور على بيانات الاعتماد المخزنة. أعد تمكين المزامنة وحاول مرة أخرى."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "بيانات الاعتماد مفقودة"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "تحقق من إدخال رمز المزامنة وكلمة المرور وعنوان يو آر إل الخدمة بشكل صحيح."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "البيانات غير صحيحة"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "عنوان يو آر إل للخدمة ليس بخدمة إكس براوزر سينك صحيحة."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "خدمة إكس براوزر سينك غير صحيحة"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "يحتمَل تلف الملف الشخصي للمتصفح، جرّب إنشاء ملف شخصي جديد مما قد يحل المشكلة."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "بنية الإشارات المرجعية غير متوقعة"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "تم تحديث بيانات المتصفح المحلية، يرجى إعادة تطبيق التغيير الأخير."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "خطأ بالمزامنة"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "تحقق من اتصالك بالشبكة وحاول مرة أخرى."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "فقد الاتصال"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "تأكد من أنك وفرت نسخة احتياطية سليمة لإكس براوزر سينك قبل استعادتها."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "لا توجد بيانات للإستعادة"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "قم بالتبديل إلى خدمة أخرى أو حاول لاحقاً."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "الخدمة لا تقبل مزامنات جديدة"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "البيانات المحلية كانت غير متزامنة وتم تحديثها الآن. يرجى إعادة تطبيق التغيير الأخير."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "تم اكتشاف تعارض مزامنة"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "احذف بعض الإشارات المرجعية وحاول مرة أخرى أو قم بالتبديل إلى خدمة ذات سعة مزامنة أكبر."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "تم تجاوز سعة بيانات المزامنة"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "تأكد من منح الصلاحية وحاول مجدداً."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "فشل الفحص"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "خدمة إكس براوزر سينك غير متصلة حالياً، حاول مرة أخرى لاحقا."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "الخدمة غير متصلة"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "فشل المشاركة"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "المزامنة المطلوبة غير موجودة، ربما تم إزالتها بسبب عدم النشاط."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "لم يتم العثور على المزامنة"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "بيانات النسخ الاحتياطي لايمكن استعادتها بهذه النسخة من إكس براوزر سينك حيث تم إنشاؤها باستخدام إصدار أحدث."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "هذا الرمز لا يمكن مزامنته مع هذا الإصدار من إكس براوزر سينك، حيث تم ترقية المزامنة إلى إصدار أحدث."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "إصدار مزامنة غير مدعوم"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "تم إلغاء تفعيل المزامنة، قم بتفعيلها لاستئناف عملية المزامنة."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "تم بلوغ حد طلب الخدمات"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "ستتم مزامنة التغييرات عند رجوع الاتصال."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "فقد الاتصال"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "هذه الخدمة تعمل بإصدار إيه بي آي غير مدعوم."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "خدمة غير مدعومة"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "سيتم إعادة محاولة التحديث عند إعادة تشغيل التطبيق. إذا استمرت المشكلة، الرجاء إعادة تثبيت إكس براوزر سينك.",
        "default": "أعد تشغيل المتصفح الخاص بك لمحاولة إعادة التحديث، إذا استمرت المشكلة، الرجاء إعادة تثبيت إكس براوزر سينك."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "فشل التحديث"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "خطأ في الإتصال"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "جار التحقق"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "لا يتم قبول مزامنات جديدة"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "غير متصل"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "متصل"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "غير متزامن"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "متزامن"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "جار المزامنة"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "أضف إشارة مرجعية"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "تعديل الإشارة المرجعية"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "العنوان"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "تم بالفعل إضافة إشارة لعنوان اليو آر إل"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "يو آر إل غير صحيح"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "يو آر إل"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "مطلوب عنوان يو آر إل"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "الوصف"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "العلامات"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "العلامة 1، العلامة 2، العلامة 3، إلخ"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "مسح العلامات"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "حذف العلامة"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "حذف"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "مشاركة"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "تحديث بيانات الإشارة المرجعية"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "القيمة التي تمت مشاركتها لا تحتوي على عنوان يو آر إل صحيح."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>إضافة إشارة مرجعية</h4><p>قم بوضع إشارة مرجعية على الصفحة الحالية بالنقر على رمز الإشارة المرجعية في شريط البحث. ستتم تعبئة بيانات الإشارة المرجعية لك تلقائيًا، على خلاف ذلك، أضف وصفاً وبعض العلامات لضمان نتائج بحث أفضل.</p><p>بديلاً لذلك، ما عليك سوى النقر على الزر \"إشارة مرجعية لهذه الصفحة\" بالمتصفح كالمعتاد وسيقوم إكس براوزر سينك تلقائيًا بملء بيانات الإشارة المرجعية (يجب منح أذونات اختيارية حتى يعمل هذا، تحقق من الإعدادات).</p>",
        "android": "<h4>إضافة إشارة مرجعية</h4><p>أضف إشارات مرجعية بسهولة من خلال المشاركة إلى إكس براوزر سينك من أي تطبيقات تشارك عناوين يو آر إل مثل المتصفحات و يوتيوب و سبوتيفاي وغيرها الكثير.</p><p>سيتم جلب بيانات الإشارة المرجعية لك، على خلاف ذلك، أضف وصفًا وبعض العلامات لضمان نتائج بحث أفضل.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>تذكر أن تقوم بنسخة احتياطية</h4><p>عند استخدام xBrowserSync بياناتك هي مسؤوليتك لذا كن ذكياً وتأكد من أخذ النسخ الاحتياطي.</p><p>التوجه إلى لوحة الإعدادات و قم بنسخ البيانات غير المشفرة الخاصة بك إلى ملف محلي يمكن استخدامه لاستعادة البيانات الخاصة بك إذا كنت بحاجة إليها.</p><p>إذا أصبحت بيانات المتصفح المحلي تالفة وليس لديك أي نسخ إحتياطية، يمكنك في أي وقت إعادة تعيين بياناتك إلى حالتها الأصلية من وقت تثبيت xBrowserSync .</p>",
        "android": "<h4>تذكر القيام بالنسخ الاحتياطي</h4><p>عند استخدام إكس براوزر سينك، فإن بياناتك هي مسؤوليتك، لذا كن ذكيًا وتأكد من عمل نسخ احتياطية.</p><p>توجه إلى لوحة الإعدادات وقم بنسخ بياناتك غير المشفرة احتياطياً إلى ملف محلي يمكن استخدامه لاستعادة بياناتك إذا احتجت إلى ذلك.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>قبل ان تبدأ</h4><p>يعدّل إكس براوزر سينك بيانات المتصفح المحلي الخاص بك، لذا فمن الجيد إجراء نسخ احتياطي للإشارات المرجعية وبيانات المتصفح الأخرى، في حالة ما إذا كنت تستخدم أي خدمات أو أدوات أخرى لمزامنة المتصفح (مثل <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>مزامنة جوجل كروم</a>) يرجى تعطيلها لتجنب التعارضات.</p>",
        "brave": "<h4>قبل ان تبدأ</h4><p>يعدّل إكس براوزر سينك بيانات المتصفح المحلي الخاص بك، لذا فمن الجيد إجراء نسخ احتياطي للإشارات المرجعية وبيانات المتصفح الأخرى، في حالة ما إذا كنت تستخدم أي خدمات أو أدوات أخرى لمزامنة المتصفح (مثل <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>مزامنة متصفح بريف</a>) يرجى تعطيلها لتجنب التعارضات.</p>",
        "edge": "<h4>قبل ان تبدأ</h4><p>يعدّل إكس براوزر سينك بيانات المتصفح المحلي الخاص بك، لذا فمن الجيد إجراء نسخ احتياطي للإشارات المرجعية وبيانات المتصفح الأخرى، في حالة ما إذا كنت تستخدم أي خدمات أو أدوات أخرى لمزامنة المتصفح (مثل <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>مزامنة متصفح إيدج</a>) يرجى تعطيلها لتجنب التعارضات.</p>",
        "firefox": "<h4>قبل ان تبدأ</h4><p>يعدّل إكس براوزر سينك بيانات المتصفح المحلي الخاص بك، لذا فمن الجيد إجراء نسخ احتياطي للإشارات المرجعية وبيانات المتصفح الأخرى، في حالة ما إذا كنت تستخدم أي خدمات أو أدوات أخرى لمزامنة المتصفح (مثل <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>مزامنة متصفح فَيَرفُكس</a>) يرجى تعطيلها لتجنب التعارضات.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>المزامنة مع الرمز الحالي الخاص بك</h4><p>انقر على \"هل حصلت بالفعل على رمز مزامنة؟\" لإدخال رمز المزامنة الحالي وكلمة المرور. إذا تم إنشاء رمز المزامنة الخاص بك على خدمة مختلفة عن تلك المعروضة، فانتقل إلى تلك الخدمة قبل محاولة المزامنة.</p><p>سيقوم إكس براوزر سينك باستلام وفك تشفير بياناتك المشفرة باستخدام كلمة مرورك المخزنة محليًا، ثم مسح إشاراتك المرجعية المحلية قبل إعادة ملئها من البيانات التي تم فك تشفيرها.</p><p>عند المزامنة، يتحقق إكس براوزر سينك في الخلفية كل خمس عشرة دقيقة للحصول على تحديثات لبياناتك المتزامنة وسيقوم تلقائيًا بتحديث الإشارات المرجعية المحلية عند الحاجة. يمكنك أيضًا مزامنة التحديثات المتوفرة يدويًا لبياناتك المتزامنة في لوحة الإعدادات.</p>",
        "android": "<h4>المزامنة مع الرمز الحالي الخاص بك</h4><p>ابدأ بمسح رمز الاستجابة السريعة لرمز المزامنة في لوحة الإعدادات داخل إضافة إكس براوزر سينك لمتصفح سطح المكتب (انقر على رمز المزامنة للكشف عنه). تأكد من إدخال نفس كلمة مرور التشفير المستخدمة عند إنشاء المزامنة وإلا فلن يتمكن إكس براوزر سينك من فك تشفير بياناتك.</p><p>أيضًا، إذا تمت مزامنتك مع خدمة إكس براوزر سينك مختلفة، فتأكد من أنها الخدمة النشطة و تم تهيئتها في لوحة الإعدادات.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>المزامنة لأول مرة</h4><p>قبل أن يتمكن إكس براوزر سينك من مزامنة بيانات المتصفح الخاص بك، ستحتاج إلى وضع كلمة مرور للتشفير. تأكد من جعلها قوية وقابلة للتذكر أيضًا، فلا توجد عمليات إعادة تعيين أو تذكير، لذا إذا نسيتها فلن تتمكن من الوصول إلى بياناتك المتزامنة.</p><p>سيتم تشفير بيانات المتصفح الخاصة بك باستخدام كلمة المرور الخاصة بك وحفظها في خدمة إكس براوزر سينك النشطة التي تم تهيئتها في لوحة الإعدادات.</p><p>بمجرد المزامنة، ستتم مزامنة أي تغييرات تجريها على الإشارات المرجعية المحلية تلقائياً بواسطة إكس براوزر سينك.</p>",
        "android": "<h4>المزامنة لأول مرة</h4><p>يقوم إكس براوزر سينك بمزامنة بيانات المتصفح بشكل نشط بين متصفحات سطح المكتب (المزامنة مع متصفحات الهاتف المحمول غير مدعومة في الوقت الحالي)، يمكنك استخدام هذا التطبيق للوصول إلى البيانات المتزامنة على جهازك المحمول الذي يعمل بنظام أندرويد.</p><p>إذا لم تكن قد أنشأت رمز مزامنة بالفعل، فانتقل إلى متصفح سطح المكتب الخاص بك و <a href='https://link.xbrowsersync.org/download' class='new-tab'>نزّل</a> إضافة إكس براوزر سينك. بمجرد إنشاء مزامنة، يمكنك استخدام رمز المزامنة الجديد خاصتك داخل هذا التطبيق للوصول لبياناتك.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>مزيد من الدعم</h4><p>يمكنك العثور على إجابات لأكثر الأسئلة شيوعًا في <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>أسئلة شائعة</a>، تحقق أيضًا من <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>المشاكل المعروفة</a> الحالية لمعرفة ما إذا كانت مشكلتك مدرجة هناك.</p><p>بديلاً لذلك، استخدم <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>متابع المشاكل</a> للإبلاغ عن مشكلة أو طلب ميزة جديدة.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>انطلق إلى الهاتف</h4><p>قم بالوصول إلى إشاراتك المرجعية التي تمت مزامنتها متنقلاً باستخدام تطبيق الأندرويد إكس براوزر سينك، والمتاح على متجر <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>كوكل بلاي</a> أو <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>إف درويد</a> أو حتى <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>تحميل مباشر</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>الميزات الأصلية مدعومة</h4><p>لا تتردد في الاستمرار في استخدام ميزات الإشارات المرجعية الأصلية لمتصفحك مثل شريط الإشارات ومدير الإشارات، وستتم مزامنة أي تغييرات تجريها تلقائياً في الخلفية.</p><p>إذا كنت قد نظمت إشاراتك المرجعية الحالية في مجلدات، فلا تقلق، فإن إكس براوزر سينك سيحترم ويحافظ على تسلسل المجلدات الحالي للإشارات المرجعية.</p>",
        "firefox": "<h4>الميزات الأصلية مدعومة</h4><p>لا تتردد في الاستمرار في استخدام ميزات الإشارات المرجعية الأصلية لمتصفحك مثل شريط الإشارات ومدير الإشارات، وستتم مزامنة أي تغييرات تجريها تلقائياً في الخلفية.</p><p>إذا كنت قد نظمت إشاراتك المرجعية الحالية في مجلدات، فلا تقلق، فإن إكس براوزر سينك سيحترم ويحافظ على تسلسل المجلدات الحالي للإشارات المرجعية.</p><p>يرجى ملاحظة أنه نظراً لأن واجهة برمجة تطبيقات الإشارات المرجعية في فَيَرفُكس لا تدعم حتى الآن الوصول إلى علامات الإشارات المرجعية الأصلية، فسيتم فقد أي علامات حالية عند المزامنة ولن يتم حفظ العلامات المضافة عبر إكس براوزر سينك كعلامات أصلية بالمتصفح.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "السابق"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>البحث في إشاراتك المرجعية</h4><p>بمجرد المزامنة، ما عليك سوى الضغط على زر إنتَر لعرض إشاراتك المرجعية الأخيرة أو كتابة بعض الكلمات أو عنوان يو آر إل للبحث في الإشارات المرجعية الخاصة بك.</p><p>قم بالتنقل بين نتائج البحث ومجلدات الإشارات المرجعية لتصفح التسلسل الهرمي بأكمله.</p><p>لتعديل إشارة مرجعية أو حذفها، مرر مؤشر الماوس على الإشارة المرجعية وانقر على رمز التحرير الذي سيظهر بجوار عنوان الإشارة المرجعية.</p>",
        "android": "<h4>البحث في إشاراتك المرجعية</h4><p>بمجرد المزامنة، يتم عرض إشاراتك المرجعية بترتيب زمني عند فتح إكس براوزر سينك. اكتب بعض الكلمات أو عنوان يو آر إل في مربع البحث للبحث في الإشارات المرجعية الخاصة بك.</p><p>قم بالتنقل بين نتائج البحث ومجلدات الإشارات المرجعية لتصفح التسلسل الهرمي بأكمله.</p><p>سيسمح لك الضغط لفترة طويلة على إشارة مرجعية بمشاركة الإشارة المرجعية مباشرةً أو تعديلها أو حذفها.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>المزامنة مع خدمة أخرى</h4><p>بشكل افتراضي، تتم مزامنة بياناتك مع <a href='https://link.xbrowsersync.org/api' class='new-tab'>خدمة إكس براوزر سينك الرسمية</a>، ومع ذلك إذا كنت ترغب في مزامنة بياناتك مع خدمة إكس براوزر سينك بديلة، فيمكنك تبديل الخدمة المفعَّلة قبل المزامنة.</p><p>تحقق من قائمة <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>خدمات إكس براوزر سينك العامة</a> المتاحة أو <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>شغّل خدمتك الخاصة</a>، إما للاستخدام الخاص لتحقيق أقصى درجات الأمان والخصوصية، أو للاستخدام العام حتى يتمكن المزيد من الأشخاص من الاستمتاع ببرنامج إكس براوزر سينك.</p><p><strong>مهم:</strong> يتم تشغيل خدمات إكس براوزر سينك بشكل مستقل من قبل المتطوعين. لا يتحمل مسؤول الخدمة أي مسؤولية عن بياناتك، لذا يرجى تذكر إجراء نسخ احتياطية بانتظام.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>استخدم الاختصارات!</h4><p>للبحث في الإشارات المرجعية الخاصة بك بسرعة، استخدم اختصار لوحة المفاتيح الافتراضي (كنترول + مسافة) لتنشيط الإضافة، ثم اضغط ببساطة على إنتر لعرض الإشارات المرجعية الأخيرة أو ابدأ الكتابة للبحث.</p><p>لتغيير الاختصار, إذهب الى:<br>chrome://extensions/shortcuts<br>وغير الاختصارات المتاحة الخاصة بإكس براوزر سينك.</p>",
        "brave": "<h4>استخدم الاختصارات!</h4><p>للبحث في الإشارات المرجعية الخاصة بك بسرعة، استخدم اختصار لوحة المفاتيح الافتراضي (كنترول + مسافة) لتنشيط الإضافة، ثم اضغط ببساطة على إنتر لعرض الإشارات المرجعية الأخيرة أو ابدأ الكتابة للبحث.</p><p>لتغيير الاختصار, إذهب الى:<br>brave://extensions/shortcuts<br>وغير الاختصارات المتاحة الخاصة بإكس براوزر سينك.</p>",
        "edge": "<h4>استخدم الاختصارات!</h4><p>للبحث في الإشارات المرجعية الخاصة بك بسرعة، استخدم اختصار لوحة المفاتيح الافتراضي (كنترول + مسافة) لتنشيط الإضافة، ثم اضغط ببساطة على إنتر لعرض الإشارات المرجعية الأخيرة أو ابدأ الكتابة للبحث.</p><p>لتغيير الاختصار, إذهب الى:<br>edge://extensions/shortcuts<br>وغير الاختصارات المتاحة الخاصة بإكس براوزر سينك.</p>",
        "firefox": "<h4>استخدم الاختصارات!</h4><p>للبحث في الإشارات المرجعية الخاصة بك بسرعة، استخدم اختصار لوحة المفاتيح الافتراضي (كنترول + مسافة) لتنشيط الإضافة، ثم اضغط ببساطة على إنتر لعرض الإشارات المرجعية الأخيرة أو ابدأ الكتابة للبحث.</p><p>لتغيير الاختصار, إذهب الى:<br>about:addons<br>وانقر على <br>“Manage Extension Shortcuts”<br> في قائمة الإعدادات وقم بتغيير الاختصارات المتاحة الخاصة بإكس براوزر سينك.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>رمز المزامنة الخاص بك</h4><p>يضمن إكس براوزر سينك خصوصيتك لأنه لا يجمع أي بيانات شخصية على الإطلاق ويتم تشفير بيانات المتصفح الخاص بك قبل مزامنتها. للتعريف ببياناتك المتزامنة، يتم تزويدك برمز مزامنة متخفي يمكن استخدامه مع كلمة المرور الخاصة بك لمزامنة بياناتك على المتصفحات والأجهزة الأخرى.</p><p>تذكر أن رمز المزامنة الخاص بك سيعمل فقط مع خدمة إكس براوزر سينك التي تم إنشاؤها من خلالها، إذا قمت بالتبديل إلى خدمة إكس براوزر سينك مختلفة، فيجب عليك إنشاء مزامنة جديدة أو استخدام رمز مزامنة حالى تم إنشاؤه عند المزامنة مسبقًا مع تلك الخدمة.</p><p>في أي وقت تتم فيه المزامنة، يمكنك عرض رمز المزامنة الخاص بك في لوحة الإعدادات، انقر عليه للكشف عن رمز الاستجابة السريعة العملي لمسحه عند المزامنة على الهواتف المحمولة.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>مرحباً بك في إكس براوزر سينك!</h4><p>إكس براوزر سينك هو بديل مجاني ومفتوح المصدر لخدمات مزامنة المتصفح التي تقدمها كوكل وموزيلا وأوبيرا وغيرها، ويحترم خصوصيتك ويمنحك إخفاء هوية كامل (تحقق من <a href='https://link.xbrowsersync.org/www' class='new-tab'>الموقع الالكتروني</a> لمزيد من المعلومات).</p><p>أقضِ لحظة لقراءة دليل المساعدة هذا للتعرف على إكس براوزر سينك، باستخدام روابط الترحيل أدناه أو مفاتيح الأسهم للتنقل بين الصفحات.</p><p>يرجى الملاحظة: يقوم إكس براوزر سينك حاليًا بمزامنة الإشارات المرجعية فقط. ستتم إضافة مزامنة بيانات متصفح إضافية في الإصدارات المستقبلية، تحقق من حالة التطوير <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>بخريطة الأهداف</a> لمعرفة ما تم تخطيطة.</p>",
        "android": "<h4>مرحباً بك في إكس براوزر سينك!</h4><p>إكس براوزر سينك هو بديل مجاني ومفتوح المصدر لخدمات مزامنة المتصفح التي تقدمها كوكل وموزيلا وأوبيرا وغيرها، ويحترم خصوصيتك ويمنحك إخفاء هوية كامل (تحقق من <a href='https://link.xbrowsersync.org/www' class='new-tab'>الموقع الالكتروني</a> لمزيد من المعلومات).</p><p>أقضِ لحظة لقراءة دليل المساعدة هذا للتعرف على إكس براوزر سينك، باستخدام روابط الترحيل أدناه أو السحب على الشاشة للتنقل بين الصفحات.</p><p>يرجى الملاحظة: يقوم إكس براوزر سينك حاليًا بمزامنة الإشارات المرجعية فقط. ستتم إضافة مزامنة بيانات متصفح إضافية في الإصدارات المستقبلية، تحقق من حالة التطوير <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>بخريطة الأهداف</a> لمعرفة ما تم تخطيطة.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "أتحتاج إلى رمز مزامنة؟"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "قم بتنزيل إضافة متصفح سطح المكتب إكس براوزر سينك وأنشئ مزامنة جديدة للوصول إلى إشاراتك المرجعية هنا."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "تأكيد كلمة المرور"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "كلمة مرور التشفير خاصتك"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "كلمة مرور التشفير"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "أدخل كلمة مرور التشفير"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "عرض كلمة المرور"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "اتصل بالمزامنة خاصتك"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "افتح إكس براوزر سينك على متصفح سطح المكتب، واذهب إلى لوحة الإعدادات وانقر على رمز المزامنة لعرض رمز الاستجابة السريعة الذي يمكنك مسحه هنا."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "مسح الرمز"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "أدخل تفاصيل المزامنة يدوياً"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "إصدار إيه بي آي"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "المزامنة مع هذه الخدمة؟"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "الموقع"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "حجم المزامنة الأقصى"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "مزامناً مع"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "الحالة"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "عنوان خدمه إكس براوزر سينك"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "أدخل عنوان يو آر إل لخدمة إكس براوزر سينك بديلة. تصفح قائمة خدمات إكس براوزر سينك العامة <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>هنا</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "تبديل الخدمة"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "مطلوب عنوان يو آر إل"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "خدمة إكس براوزر سينك غير صحيحة"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "يو آر إل غير صحيح"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "فشل الإتصال بالخدمة"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "هذه الخدمة تعمل بإصدار إيه بي آي غير مدعوم"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>مهم:</strong> يتم تشغيل خدمات إكس براوزر سينك بشكل مستقل من قبل المتطوعين. لا يتحمل مسؤول الخدمة أي مسؤولية عن بياناتك، لذا يرجى تذكر إجراء نسخ احتياطية بانتظام."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "هل أنت متأكد؟"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "سيحذف إكس براوزر سينك جميع بيانات الإشارات المرجعية المحلية قبل استعادة الإشارات المرجعية المتزامنة. تريد المتابعة؟"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "تعطيل أدوات مزامنة الإشارة المرجعية"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "مزامنة بيانات المتصفح الخاص بك مع إكس براوزر سينك أثناء استخدام أدوات مزامنة أخرى (<a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>كمزامنة جوجل كروم</a>) يمكن أن يسبب التكرار وربما تلف البيانات. يرجى إلغاء تفعيلها قبل المتابعة.",
            "brave": "مزامنة بيانات المتصفح الخاص بك مع إكس براوزر سينك أثناء استخدام أدوات مزامنة أخرى (<a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>كمزامنة متصفح بريف</a>) يمكن أن يسبب التكرار وربما تلف البيانات. يرجى إلغاء تفعيلها قبل المتابعة.",
            "edge": "مزامنة بيانات المتصفح الخاص بك مع إكس براوزر سينك أثناء استخدام أدوات مزامنة أخرى (<a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>كمزامنة متصفح إيدج</a>) يمكن أن يسبب التكرار وربما تلف البيانات. يرجى إلغاء تفعيلها قبل المتابعة.",
            "firefox": "مزامنة بيانات المتصفح الخاص بك مع إكس براوزر سينك أثناء استخدام أدوات مزامنة أخرى (<a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>كمزامنة متصفح فايرفُكس</a>) يمكن أن يسبب التكرار وربما تلف البيانات. يرجى إلغاء تفعيلها قبل المتابعة."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "مزامنة"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "إنشاء مزامنة جديدة"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "مستعد/ة لترقية المزامنة؟"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>يجب ترقية المزامنة قبل اجرائها مع هذا الإصدار من إكس براوزر سينك. بعد الترقية، لن تتمكن من المزامنة مع أي إصدارات سابقة من إكس براوزر سينك.</p><p>تأكد من تحديث إكس براوزر سينك على جميع الأجهزة المتزامنة قبل المتابعة. هل أنت جاهز/ة للمتابعة؟</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "ترقية المزامنة"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>يجب ترقية المزامنة قبل اجرائها مع هذا الإصدار من إكس براوزر سينك.</p><p> استخدم إضافة إكس براوزر سينك لمتصفح سطح المكتب لترقية المزامنة ثم أعد محاولة المزامنة هنا.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "رمز المزامنة الخاص بك"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "ألديك بالفعل رمز مزامنة؟"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "رمز مزامنة غير صحيح"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "الرمز"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "احصل على رمز مزامنة"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "الصلاحيات الاختيارية"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>يقوم إكس براوزر سينك تلقائيًا بإثراء الإشارات المرجعية المضافة باستخدام زر إضافة إشارة مرجعية بالمتصفح بالبيانات الوصفية المتاحة. لتمكين هذا، يحتاج إكس براوزر سينك <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>صلاحيات إضافية</a> ليتمكن من قراءة بيانات مواقع الويب التي تمت زيارته.</p><p>يُرجى توضيح في حال طُلب منك ما إذا كنت سعيدًا بمنح هذه الصلاحيات، يمكنك إضافة الأذونات أو إزالتها في أي وقت في لوحة الإعدادات.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "مسح رمز الاستجابة السريعة الخاص بمزامنتك"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "تشغيل/ايقاف الضوء"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "عرض مجلدات الإشارات المرجعية"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "محو"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "المجلد فارغ"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "ليس لديك أية إشارات مرجعية، اذهب لإضافة البعض!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "لا توجد إشارات مرجعية"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "اضغط إنتر أو ابحث عن الإشارات المرجعية",
        "android": "البحث عن الإشارات المرجعية"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "اسحب لأسفل للمزامنة"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "أفلِت للمزامنة"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "عرض نتائج البحث"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "النسخ الاحتياطي واستعادته"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "النسخ الاحتياطي التلقائي"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "تحميل النسخ الاحتياطي تلقائياً في مواعيد."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "النسخ الاحتياطي يعمل خلال"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "كل"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "واحد"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "اثنان"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "ثلاثة"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "أربعة"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "خمسة"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "ستة"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "سبعة"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "ثمانية"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "تسعة"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "عشرة"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "أحد عشر"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "اثني عشر"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "يوم/أيام"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "أسبوع/أسابيع"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "شهر/شهور"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "لمنع نافذة \"حفظ باسم..\" من الظهور عند تحميل النسخ الاحتياطية، قم بإلغاء تفعيل إعداد المتصفح: \"اسأل أين تحفظ كل ملف قبل التنزيل\"."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "النسخ الإحتياطي"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "تحميل نسخة احتياطية"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "قم بنسخ بيانات المتصفح المحلية إلى ملف."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "قم بحفظ البيانات المتزامنة احتياطياً بملف."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "الاستعادة"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "استعادة من نسخة احتياطية"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "استعادة بيانات المتصفح المحلية من نسخة احتياطية."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>نظرًا لأن المزامنة غير مفعلة حاليًا، فإن البيانات التي يتم استعادتها ستحل محل بيانات المتصفح المحلية.</p><p>موافق/ة للمتابعة؟</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "استعادة بيانات المتصفح المتزامنة من نسخة احتياطية."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>نظرًا لأن المزامنة مفعلة حاليًا، فإن البيانات التي يجري استعادتها ستحل محل البيانات المتزامنة بالحال.</p><p>لاستعادة البيانات إلى المتصفح المحلي فقط، قم بتعطيل المزامنة قبل الاستعادة.</p><p>موافق/ة للمتابعة؟</p>",
              "android": "<p>ستحل البيانات التي تتم استعادتها محل البيانات المتزامنة.</p><p>موافق/ة للمتابعة؟</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "تمت استعادة النسخة الاحتياطية."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "حدد ملف"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "حدد ملف نسخة احتياطية للاستعادة"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "نسخ محتويات ملف النسخ الاحتياطي لاستعادة البيانات."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "لصق بيانات النسخ الاحتياطي"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "استعادة البيانات"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "بيانات النسخ الاحتياطي لإكس براوزر سينك غير صحيحة"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>إذا تابعت/ي، سيتم تعطيل المزامنة وستتم إعادة تعيين بيانات المتصفح المحلي كما كانت عند تثبيت إكس براوزر سينك في {date}.</p><p>موافق/ة للمتابعة؟</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "إعادة ضبط البيانات المحلية"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "تم إعادة ظبط بيانات المتصفح المحلية إلى حالة التثبيت الأولية."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "بيانات حالة التثبيت غير متوفرة، غير قادر على إعادة الظبط."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "المساعدة والدعم"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "دليل المساعدة"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "هل لديك سؤال أو تواجه مشكلة؟ تأكد من القراءة من خلال دليل المساعدة، وعلى غير ذلك قد تكون الإجابة في قسم الأسئلة الشائعة."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "عرض الأسئلة الشائعة"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "الدعم"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "أتحتاج دعم؟ استخدم متتبع المشاكل للإبلاغ عن خطأ أو طلب ميزة."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "عرض متتبع المشاكل"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "سجل التطبيق"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "قم بتنزيل وإرفاق سجل التطبيق عند تسجيل المشكلة."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "حذف السجل"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "تنزيل السجل"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "حجم السجل الحالي"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "الصلاحيات الاختيارية"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "منح الصلاحيات"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "تم المنح"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "غير ممنوح"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "قراءة بيانات الموقع"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "مطلوب لإضافة البيانات الوصفية تلقائيًا إلى الإشارات المرجعية عند استخدام زر \"إشارة مرجعية لهذه الصفحة\" في المتصفح (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>مزيد من المعلومات</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "إزالة الصلاحيات"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "إحضار البيانات الوصفية للإشارات تلقائياً"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "إحضار البيانات الوصفية للإشارات تلقائياً عن إضافتها."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "تحقق تحديثات التطبيق"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "الإعلام عند توفر إصدار جديد من إكس براوزر سينك."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "تفعيل الوضع المظلم"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "مثالي للاستخدام في البيئات منخفضة الضوء."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "عرض مجلدات الإشارات المرجعية"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "عرض مجلدات الإشارات المرجعية افتراضياً."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "تغيير موضع شريط البحث"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "إظهار شريط البحث تحت النتائج."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "مزامنة شريط أدوات العلامات المرجعية"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "الغِ تفعيل هذا الإعداد لعرض إشارات مرجعية مختلفة بشريط الأدوات بكل متصفح متزامن."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>سيؤدي تفعيل هذا الإعداد إلى استبدال الإشارات المرجعية الموجودة حاليًا في شريط أدوات الإشارات المرجعية بإشاراتك المرجعية المتزامنة.</p><p>موافق/ة للمتابعة؟</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "تمكين القياس عن بعد"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "إرسال بيانات فنية مجهولة المصدر من حين لآخر للمساعدة في تحسين xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "الإعدادات"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "المزامنة"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "تعطيل المزامنة"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "رمز المزامنة"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "استخدم رمز المزامنة الخاص بك للاتصال ببياناتك المتزامنة على الأجهزة الأخرى (انقر للكشف عن رمز الاستجابة السريعة)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "استخدام البيانات"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "كمية بيانات المزامنة التي تسمح بها الخدمة التي تستخدمها."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "الخدمة"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "آخر مزامنة {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "جاهز للمزامنة (بميعاد {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "مزامنة الآن"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "قم بمسح رمز الاستجابة السريعة هذا باستخدام تطبيق إكس براوزر سينك للأندرويد للاتصال ببياناتك المتزامنة."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "عرض رمز الاستجابة السريعة"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "نسخ رمز المزامنة إلى الحافظة"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "تم النسخ!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "الإعدادات متاحة عند تمكين المزامنة."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "تم حفظ الملف في التنزيلات"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "ادعم إكس براوزر سينك"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "ادعم إكس براوزر سينك!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>نريد أن نجعل إكس براوزر سينك الأداة الأولى لمزامنة المتصفح، ولكن لا يزال هناك الكثير للقيام به:</p><ul><li>أضافة مزامنة علامات تبويب المتصفح وتاريخ التصفح</li><li>دعم جميع متصفحات سطح المكتب الرئيسية</li><li>الترجمة إلى لغات أخرى</li><li>و<a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>المزيد</a>!</li></ul><p>فقط بدعمك يمكننا الاستمرار في تحسين إكس براوزر سينك والتأكد من أنه يظل فعال في حماية الخصوصية عبر الإنترنت وتعزيز الإنتاجية.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "العملات الرقمية"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "ليبرا باي"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "باتريون"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "لم يتم العثور على المزامنة"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>تعذر العثور على المزامنة الخاصة بك وربما تمت إزالتها بسبب عدم النشاط.</p><p>ستحتاج إلى إنشاء مزامنة جديدة، ولكن انقر أولاً فوق الزر بالأسفل لتنزيل نسخة احتياطية من بياناتك المتزامنة والتي يمكنك بعد ذلك استعادتها إلى المزامنة الجديدة.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "إرسال مجهول الهوية؟"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p> يختلف xBrowserSync عن التطبيقات التقليدية نظرًا لأنه أداة مجهولة تمامًا ، وأولها الخصوصية. يعد الحفاظ على هذه الأداة أمرًا صعبًا نظرًا لعدم توفر إمكانية الوصول إلى بيانات المستخدم للمساعدة في تحديد أفضل السبل لنشر مواردنا المحدودة. لذلك ، نطلب إذنك لإرسال بيانات فنية مجهولة المصدر من حين لآخر لمساعدتنا على تحسين xBrowserSync. </p> <p> لا تتضمن بيانات التتبع عن بُعد هذه أي بيانات شخصية أو بيانات تعريف ، ولا تتضمن أيًا من بيانات المزامنة المشفرة ولا تمت مشاركتها مع أي جهات خارجية (يمكنك الاشتراك أو إلغاء الاشتراك في أي وقت في لوحة الإعدادات). </ p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "تم التحديث لـ"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>تم تحديث إكس براوزر سينك بأحدث الميزات والإصلاحات.</p><p>إذا كانت المزامنة مفعلة، فقد تم تعطيلها الآن ويجب أولاً ترقية المزامنة قبل اجرائها مع هذا الإصدار من إكس براوزر سينك. أعد تفعيل المزامنة لإكمال عملية الترقية.</p><p>لمزيد من التفاصيل حول التغييرات الواردة في هذا الإصدار، راجع ملاحظات الإصدار.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "جار الاستعادة"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "جار إعادة الضبط"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "جار المزامنة"
      }
    }
  }
}
</file>

<file path="res/strings/de.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSync Update verfügbar"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} steht zum Download bereit. Klicken Sie für weitere Informationen.",
        "android": "xBrowserSync {version} steht zum Download bereit."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Aktualisiert auf"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync wurde aktualisiert. Die Synchronisation wurde deaktiviert, bitte aktiviere sie erneut, um den Aktualisierungsprozess abzuschließen."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Lesezeichen erstellt"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Lesezeichen gelöscht"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Lesezeichen aktualisiert"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Rufe Lesezeichen-Eigenschaften ab, zum Abbrechen berühren."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Lesezeichen-Eigenschaften aktualisiert."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Los"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Browser-Synchronisierung wie es sein sollte: sicher, anonym und kostenlos! Synchronisieren Sie Lesezeichen zwischen Ihren Browsern und Geräten, keine Anmeldung erforderlich."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Menü-Lesezeichen"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Weitere Lesezeichen"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Lesezeichen-Symbolleiste"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Lesezeichen hinzufügen"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Zurück"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Abbrechen"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Schließen"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Ja"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Weiter"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Lesezeichen löschen"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Nein"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Fertig"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Sicherung herunterladen"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Lesezeichen hinzufügen"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Hilfeanleitung anzeigen"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Weiter"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Versionshinweise anzeigen"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Wird gespeichert"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Einstellungen"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Lesezeichen teilen"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Rückgängig"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Aktualisieren"
    },
    "View": {
      "key": "Button_View",
      "default": "Anzeigen"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Bitte vermeiden Sie das Ändern von [xbs] Ordnern, da dies zu Problemen beim Synchronisieren führen kann."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "xBrowserSync-Ordner geändert"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Synchronisieren Sie mit einer bestehenden Sync-ID, wechseln Sie zu einem anderen Dienst oder versuchen Sie es morgen erneut."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Tägliches Sync-Limit erreicht"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Wenn das Problem weiterhin besteht, bitte <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>melden Sie das Problem</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Etwas ist schiefgelaufen"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Backup fehlgeschlagen"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Durchsuchen der Dateien fehlgeschlagen"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "Die URL ist ungültig oder die Daten der Webseite konnten nicht abgerufen werden."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Lesezeichen-Eigenschaften konnten nicht abgerufen werden"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Aktualisierungen konnten nicht abgerufen werden"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Die Backup-Daten sind nicht im erwarteten Format."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Daten konnten nicht wiederhergestellt werden"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Sie müssen synchronisiert sein, um ein Lesezeichen hinzuzufügen"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Die URL des geteilten Lesezeichens konnte nicht abgerufen werden"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Überprüfen Sie Ihre Netzwerkverbindung und versuchen Sie es erneut. Wenn das Problem weiterhin besteht, liegt möglicherweise ein Problem mit dem xBrowserSync-Dienst vor."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Synchronisierung fehlgeschlagen"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Die gespeicherten Anmeldeinformationen konnten nicht gefunden werden. Synchronisierung erneut aktivieren und erneut versuchen."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Zugangsdaten fehlen"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Stellen Sie sicher, dass Ihre Sync-ID, Ihr Passwort und Ihre Dienst-URL korrekt eingegeben wurden."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Ungültige Zugangsdaten"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "Die Dienst-URL ist kein gültiger xBrowserSync-Dienst."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Ungültiger xBrowserSync Dienst"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Das Browserprofil ist möglicherweise beschädigt. Versuchen Sie das Problem zu lösen, indem Sie ein neues Profil erstellen."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Unerwartete Lesezeichenstruktur"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Lokale Browserdaten wurden aktualisiert, bitte die letzte Änderung erneut übernehmen."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Synchronisierungsfehler"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Überprüfen Sie Ihre Netzwerkverbindung und versuchen Sie es erneut."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Verbindung unterbrochen"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Stellen Sie sicher, dass Sie vor der Wiederherstellung ein gültiges xBrowserSync-Backup erstellt haben."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Keine Daten zum Wiederherstellen"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Wechseln Sie zu einem anderen Dienst oder versuchen Sie es später erneut."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Dienst akzeptiert keine neuen Synchronisationen"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Lokale Daten wurden nicht synchronisiert und wurden aktualisiert. Bitte die letzte Änderung erneut übernehmen."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Sync-Konflikt entdeckt"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Löschen Sie einige Lesezeichen und versuchen Sie es erneut oder wechseln Sie zu einem Dienst mit einem größeren Sync-Limit."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Sync-Datenlimit überschritten"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Überprüfe die Berechtigung und versuche es erneut."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Scan fehlgeschlagen"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "Der xBrowserSync-Dienst ist momentan offline, versuchen Sie es später erneut."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Dienst offline"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Teilen fehlgeschlagen"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "Die angeforderte Synchronisation existiert nicht, sie wurde möglicherweise aufgrund von Inaktivität entfernt."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Synchronisation wurde nicht gefunden"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Die Sicherungsdaten können von dieser Version von xBrowserSync nicht wiederhergestellt werden, da diese mit einer neueren Version erstellt wurden."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Diese ID kann nicht mit dieser Version von xBrowserSync synchronisiert werden, da der Sync auf eine neuere Version aktualisiert wurde."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Sync-Version nicht unterstützt"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Synchronisation wurde deaktiviert. Aktivieren Sie den Sync erneut, um sie fortzusetzen."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Limit für Serviceanfragen überschritten"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Änderungen werden synchronisiert, sobald die Verbindung wiederhergestellt ist."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Verbindung unterbrochen"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Dieser Dienst benutzt eine nicht unterstützte API-Version."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Dienst wird nicht unterstützt"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Das Upgrade wird beim Neustart der App erneut versucht. Wenn das Problem weiterhin besteht, installieren Sie bitte xBrowserSync erneut.",
        "default": "Starten Sie Ihren Browser neu, um das Upgrade erneut zu versuchen. Wenn das Problem weiterhin besteht, installieren Sie bitte xBrowserSync erneut."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Upgrade fehlgeschlagen"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Verbindungsfehler"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Überprüfen"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Keine neuen Synchronisierungen akzeptieren"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Offline"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Online"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "Nicht synchronisiert"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "synchronisiert"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "synchronisieren"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Lesezeichen hinzufügen"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Lesezeichen hinzufügen"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Titel"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "URL wurde bereits gespeichert"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "Keine gültige URL"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "URL ist erforderlich"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Beschreibung"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Stichworte"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "Stichwort 1, Stichwort 2, Stichwort 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Stichworte löschen"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Stichwort entfernen"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Löschen"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Teilen"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Eigenschaften des Lesezeichens aktualisieren"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "Der eingegebene Wert enthält keine gültige URL."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Lesezeichen hinzufügen</h4><p>Speichern Sie ein Lesezeichen der aktuellen Seite, indem Sie auf das Lesezeichensymbol in der Suchleiste klicken. Die Lesezeicheneigenschaften werden automatisch für Sie erzeugt. Gegebenenefalls fügen Sie eine Beschreibung und Stichworte hinzu, um bessere Suchergebnisse zu erzeugen. </p><p>Alternativ klicken Sie einfach wie üblich auf den Browserbutton \"Lesezeichen für diese Seite erstellen\" und xBrowserSync wird automatisch die Lesezeicheneigenschaften erzeugen (Optionale Berechtigungen müssen gewährt werden - siehe Einstellungen).</p>",
        "android": "<h4>Lesezeichen hinzufügen</h4><p>Fügen Sie Lesezeichen aus anderen Apps wie Browsern, YouTube, Spotify und vielen anderen einfach zu xBrowserSync hinzu.</p><p>Die Eigenschaften des Lesezeichens werden für Sie abgerufen, anderfalls fügen Sie eine Beschreibung und einige Stichworte hinzu, um bessere Suchergebnisse zu erzeugen.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Vergessen Sie nicht, eine Sicherung zu schaffen</h4><p>Wenn Sie xBrowserSync nutzen liegen Ihre Daten in Ihren Händen. Seien Sie also schlau und stellen Sie sicher, dass Sie Sicherungskopien anlegen.</p><p>Wechseln Sie in das Einstellungen-Fenster und sichern Sie Ihre unverschlüsselten Daten in eine lokale Datei. Diese kann benutzt werden, um Ihre Daten bei Bedarf wiederherzustellen.</p><p>Wenn Ihre lokalen Browserdaten beschädigt werden und Sie keinerlei Sicherungskopien haben, können Sie Ihre Daten jederzeit wieder in den ursprünglichen Zustand zurückversetzen, in dem sie sich bei der Installation von xBrowserSync befanden.</p>",
        "android": "<h4>Denken Sie an eine Sicherung</h4><p>Wenn Sie xBrowserSync nutzen liegen Ihre Daten in Ihren Händen. Seien Sie also schlau und stellen Sie sicher, dass Sie Sicherungskopien anlegen.</p><p>Wechseln Sie in das Einstellungen-Fenster und sichern Sie Ihre unverschlüsselten Daten in eine lokale Datei. Diese kann benutzt werden, um Ihre Daten bei Bedarf wiederherzustellen.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Bevor Sie beginnen</h4><p>xBrowserSync verändert Ihre lokalen Browserdaten. Daher ist es eine gute Idee Ihre Lesezeichen und andere Browserdaten vorsorglich zu sichern. Sollten Sie andere Dienste oder Tools zur Browsersynchronisation (wie zum Beispiel <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) nutzen, deaktivieren Sie sie bitte, um Konflikte zu vermeiden.</p>",
        "brave": "<h4>Bevor Sie beginnen</h4><p>xBrowserSync verändert Ihre lokalen Browserdaten. Daher ist es eine gute Idee Ihre Lesezeichen und andere Browserdaten vorsorglich zu sichern. Sollten Sie andere Dienste oder Tools zur Browsersynchronisation (wie zum Beispiel <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) nutzen, deaktivieren Sie sie bitte, um Konflikte zu vermeiden.</p>",
        "edge": "<h4>Bevor Sie beginnen</h4><p>xBrowserSync verändert Ihre lokalen Browserdaten. Daher ist es eine gute Idee Ihre Lesezeichen und andere Browserdaten vorsorglich zu sichern. Sollten Sie andere Dienste oder Tools zur Browsersynchronisation (wie zum Beispiel <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) nutzen, deaktivieren Sie sie bitte, um Konflikte zu vermeiden.</p>",
        "firefox": "<h4>Bevor Sie beginnen</h4><p>xBrowserSync verändert Ihre lokalen Browserdaten. Daher ist es eine gute Idee Ihre Lesezeichen und andere Browserdaten vorsorglich zu sichern. Sollten Sie andere Dienste oder Tools zur Browsersynchronisation (wie zum Beispiel <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) nutzen, deaktivieren Sie sie bitte, um Konflikte zu vermeiden.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Synchronisierung mit Ihrer bestehenden ID</h4><p>Klicken Sie auf „Haben Sie bereits eine Sync-ID?“, um Ihre bestehende Sync-ID und Ihr Passwort einzugeben. Wenn Ihre Sync-ID auf einem Dienst erstellt wurde, der sich von dem angezeigten unterscheidet, wechseln Sie zu diesem Dienst, bevor Sie die Synchronisierung versuchen.</p><p>xBrowserSync holt und entschlüsselt Ihre verschlüsselten Daten mit Ihrem lokal gespeicherten Passwort, löscht danach Sie Ihre lokalen Lesezeichen, bevor es sie wieder aus den entschlüsselten Daten einpflegt.</p><p>Wenn synchronisiert, prüft xBrowserSync alle fünfzehn Minuten im Hintergrund auf Aktualisierungen Ihrer synchronisierten Daten und aktualisiert Ihre lokalen Lesezeichen bei Bedarf automatisch. Sie können die verfügbaren Updates auch manuell im Einstellungen-Fenstersynchronisieren.</p>",
        "android": "<h4>Synchronisieren mit Ihrer bestehenden ID</h4><p>Scannen Sie den ID QR-Code im Einstellungen-Fenster der xBrowserSync-Desktop-Browser-Erweiterung (klicken Sie auf Ihre Sync-ID, um sie anzuzeigen). Stellen Sie sicher, dass Sie beim Erstellen der Synchronisation das gleiche Verschlüsselungspasswort eingeben, sonst wird xBrowserSync Ihre Daten nicht entschlüsseln können.</p><p>Wenn Sie mit einem anderen xBrowserSync-Dienst synchronisiert werden, stellen Sie sicher, dass er der aktive Dienst ist, der im Einstellungen-Fenster konfiguriert ist.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Erstmaliges Synchronisieren</h4><p>Bevor xBrowserSync Ihre Browserdaten synchronisieren kann, müssen Sie ein Verschlüsselungspasswort angeben. Vergewissern Sie sich, dass es stark, aber auch gut zu merken ist. Es gibt keine Rücksetzung oder Passworterinnerungen, wenn Sie es vergessen haben. Sie können dann nicht mehr auf Ihre synchronisierten Daten zugreifen.</p><p>Ihre Browserdaten werden mit Ihrem Passwort verschlüsselt und im aktiven Einstellungen-Fenster des konfigurierten xBrowserSync-Dienstes gespeichert.</p><p>Alle Änderungen, die Sie an Ihren lokalen Lesezeichen vornehmen, werden automatisch von xBrowserSync synchronisiert.</p>",
        "android": "<h4>Erstmaliges Synchronisieren</h4><p>xBrowserSync synchronisiert aktiv Ihre Browserdaten zwischen Ihren Desktop-Browsern (Synchronisation mit mobilen Browsern wird derzeit nicht unterstützt). Sie können diese App nutzen, um Ihre synchronisierten Daten auf Ihrem Androidgerät zuzugreifen</p><p>Wenn Sie nicht schon eine Sync-ID erstellt haben, wechseln Sie an Ihren Desktop-Browser und <a href='https://link.xbrowsersync.org/download' class='new-tab'>laden Sie hier</a> die xBrowserSync Erweiterung runter. Sobald Sie eine Synchronisation erstellt haben können Sie Ihre neue Sync-ID in dieser App nutzen, um auf Ihre Daten zuzugreifen.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Weitere Unterstützung</h4><p>Die Antworten auf die häufigsten Fragen finden Sie in den <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>FAQs</a>, überprüfen Sie auch die aktuellen <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>bekannten Tickets</a>, um zu sehen, ob Ihr Problem dort aufgelistet ist.</p><p>Alternativ können Sie den <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>Issue-Tracker</a> verwenden, um ein Problem zu melden oder ein neue Funktion anzufordern.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Mobil zugreifen</h4><p>Greifen Sie unterwegs auf Ihre synchronisierten Lesezeichen mit der xBrowserSync Android-App verfügbar im <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> Store, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> oder <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>direkter Download</a> zu.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Native Funktionen unterstützt</h4><p>Nutzen Sie wie gewohnt die nativen Lesezeichenfunktionen Ihres Browsers wie Lesezeichenleiste und Lesezeichen-Manager. Alle Änderungen, die Sie vornehmen, werden automatisch im Hintergrund synchronisiert.</p><p>Wenn Sie Ihre vorhandenen Lesezeichen in Ordnern organisiert haben, wird xBrowserSync Ihre bestehende Lesezeichenhierarchie übernehmen und beibehalten.</p>",
        "firefox": "<h4>Native Funktionen unterstützt</h4><p>Nutzen Sie wie gewohnt die nativen Lesezeichenfunktionen Ihres Browsers wie Lesezeichenleiste und Lesezeichen-Manager. Alle Änderungen, die Sie vornehmen, werden automatisch im Hintergrund synchronisiert.</p><p>Wenn Sie Ihre vorhandenen Lesezeichen in Ordnern organisiert haben, wird xBrowserSync Ihre bestehende Lesezeichenhierarchie respektieren und beibehalten.</p><p>Bitte beachten Sie jedoch, dass die Firefox-Lesezeichen-API den Zugriff auf native Lesezeichen-Stichworte (Tags) noch nicht unterstützt alle vorhandenen Stichworte gehen verloren, wenn sie synchronisiert werden. Stichworte, die über xBrowserSync hinzugefügt werden, werden nicht als native Stichworte gespeichert.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Vorheriger"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Suche nach Lesezeichen</h4><p>Einmal synchronisiert, drücken Sie einfach Enter oder geben einige Schlüsselwörter oder eine URL ein, um Ihre neuesten Lesezeichen anzuzeigen und zu durchsuchen.</p><p>Wechseln Sie zwischen Suchergebnissen und Lesezeichenordner um die gesamte Hierarchie zu durchsuchen.</p><p>Um ein Lesezeichen zu bearbeiten oder zu löschen, fahren Sie mit der Maus über das Lesezeichen und klicken Sie auf das jetzt sichtbare Symbol neben dem Titel des Lesezeichens.</p>",
        "android": "<h4>Suche nach Lesezeichen</h4><p>Einmal synchronisiert werden Ihre Lesezeichen in chronologischer Reihenfolge angezeigt, wenn Sie xBrowserSync öffnen. Geben Sie einige Stichwörter oder eine URL in das Suchfeld ein, um Ihre Lesezeichen zu durchsuchen.</p><p>Wechseln Sie zwischen Suchergebnissen und Lesezeichenordner um die gesamte Hierarchie zu durchsuchen.</p><p>Durch langes Drücken eines Lesezeichens können Sie das Lesezeichen direkt teilen, ändern oder löschen.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Synchronisierung mit einem anderen Dienst</h4><p>Standardmäßig werden Ihre Daten mit dem <a href='https://link.xbrowsersync.org/api' class='new-tab'>offiziellen xBrowserSync Service synchronisiert</a>, Wenn Sie jedoch Ihre Daten mit einem alternativen xBrowserSync-Dienst synchronisieren möchten, können Sie vor der Synchronisierung den aktiven Dienst wechseln.</p><p>Prüfen Sie die Liste der verfügbaren <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>öffentlichen xBrowserSync-Dienste</a> oder <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>betreiben Sie Ihren eigenen Dienst</a>, entweder für den privaten Gebrauch maximaler Sicherheit und Privatsphäre, oder für den öffentlichen Gebrauch, so dass mehr Leute xBrowserSync nutzen können.</p><p><strong>Wichtig:</strong> xBrowserSync Dienste werden unabhängig von Freiwilligen betrieben. Der Service-Administrator übernimmt keine Verantwortung für Ihre Daten. Bitte denken Sie daran, regelmäßig zu sichern.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Tastenkürzel verwenden!</h4><p>Um Ihre Lesezeichen schnell zu durchsuchen, verwenden Sie die Standard-Tastaturkürzel (Strg+Leerzeichen) um die Erweiterung zu aktivieren, drücken Sie dann die Eingabetaste um Ihre aktuellen Lesezeichen anzuzeigen oder tippen Sie zum Suchen ein.</p><p>Um die Verknüpfung zu ändern, gehen Sie zu chrome://extensions/shortcuts und aktualisieren Sie die verfügbaren Verknüpfungen unter xBrowserSync.</p>",
        "brave": "<h4>Tastenkürzel verwenden!</h4><p>Um Ihre Lesezeichen schnell zu durchsuchen, verwenden Sie die Standard-Tastaturkürzel (Strg+Leerzeichen) um die Erweiterung zu aktivieren, drücken Sie dann die Eingabetaste um Ihre aktuellen Lesezeichen anzuzeigen oder tippen Sie zum Suchen ein.</p><p>Um die Verknüpfung zu ändern, gehen Sie zu brave://extensions/shortcuts und aktualisieren Sie die verfügbaren Verknüpfungen unter xBrowserSync.</p>",
        "edge": "<h4>Tastenkürzel verwenden!</h4><p>Um Ihre Lesezeichen schnell zu durchsuchen, verwenden Sie die Standard-Tastaturkürzel (Strg+Leerzeichen) um die Erweiterung zu aktivieren, drücken Sie dann die Eingabetaste um Ihre aktuellen Lesezeichen anzuzeigen oder tippen Sie zum Suchen ein.</p><p>Um die Verknüpfung zu ändern, gehen Sie zu edge://extensions/shortcuts und aktualisieren Sie die verfügbaren Verknüpfungen unter xBrowserSync.</p>",
        "firefox": "<h4>Tastenkürzel verwenden!</h4><p>Um Ihre Lesezeichen schnell zu durchsuchen, verwenden Sie die Standard-Tastaturkürzel (Strg+Leerzeichen) um die Erweiterung zu aktivieren, drücken Sie dann die Eingabetaste um Ihre aktuellen Lesezeichen anzuzeigen oder tippen Sie zum Suchen ein.</p><p>Um die Verknüpfung zu ändern, gehen Sie zu about:addons, klicken Sie auf das Zahnradsymbol und dann auf \"Tastenkombinationen von Erweiterungen verwalten\" und aktualisieren Sie die verfügbaren Verknüpfungen unter xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Ihre Sync-ID</h4><p>xBrowserSync stellt Ihre Privatsphäre sicher, da keine persönlichen Daten erfasst werden und Ihre Browserdaten vor dem Synchronisieren verschlüsselt werden. Um Ihre synchronisierten Daten zu identifizieren, erhalten Sie eine anonyme Sync-ID, die zusammen mit Ihrem Passwort verwendet werden kann, um Ihre Daten auf anderen Browsern und Geräten zu synchronisieren.</p><p>Denken Sie daran, dass Ihre Sync-ID nur mit dem xBrowserSync-Dienst funktioniert, auf dem sie erstellt wurde, Wenn Sie zu einem anderen xBrowserSync-Dienst wechseln, müssen Sie eine neue Synchronisation erstellen oder eine vorhandene Sync-ID verwenden, die bei der vorherigen Synchronisierung mit diesem Dienst erstellt wurde.</p><p>Wann immer Sie synchronisiert werden, können Sie Ihre Sync-ID in den Einstellungen anzeigen. Klicken Sie darauf, um einen praktischen QR-Code anzuzeigen, der zum Synchronisieren auf mobilen Geräten gescannt werden kann.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Willkommen bei xBrowserSync!</h4><p>xBrowserSync ist eine kostenlose Open-Source-Alternative zu Browser-Sync-Diensten von Google, Mozilla, Opera und anderen. Sie respektiert Ihre Privatsphäre und gibt Ihnen vollständige Anonymität (lesen Sie die <a href='https://link.xbrowsersync.org/www' class='new-tab'>Website</a> für weitere Informationen).</p><p>Nimm dir einen Moment Zeit und lies diese Hilfeanleitung durch, um dich mit xBrowserSync vertraut zu machen. Klicke die nachstehenden Seitenlinks oder die Pfeiltasten, um zwischen den Seiten zu blättern.</p><p>Bitte beachten Sie: xBrowserSync synchronisiert derzeit nur Lesezeichen. Die Synchronisation zusätzlicher Browserdaten wird in zukünftigen Versionen hinzugefügt. Schauen Sie sich die <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>Roadmap</a> an, um zu sehen, was geplant ist.</p>",
        "android": "<h4>Willkommen bei xBrowserSync!</h4><p>xBrowserSync ist eine kostenlose Open-Source-Alternative zu Browser-Sync-Diensten von Google, Mozilla, Opera und anderen. Sie respektiert Ihre Privatsphäre und bietet Ihnen vollständige Anonymität (lesen Sie die <a href='https://link.xbrowsersync.org/www' class='new-tab'>Website</a> für weitere Informationen).</p><p>Nimm dir einen Moment Zeit und lies diese Hilfeanleitung durch, um dich mit xBrowserSync vertraut zu machen. Klicke die nachstehenden Seitenlinks oder die Pfeiltasten, um zwischen den Seiten zu blättern.</p><p>Bitte beachten Sie: xBrowserSync synchronisiert derzeit nur Lesezeichen. Die Synchronisation zusätzlicher Browserdaten wird in zukünftigen Versionen hinzugefügt. Schauen Sie sich die <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>Roadmap</a> an, um zu sehen, was geplant ist.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Benötigen Sie eine Sync-ID?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Laden Sie die Desktop-Browser-Erweiterung xBrowserSync herunter und erstellen Sie hier eine neue Synchronisation, um auf Ihre Lesezeichen zuzugreifen."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Passwort bestätigen"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Verschlüsselungspasswort eingeben"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Verschlüsselungspasswort"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Verschlüsselungspasswort eingeben"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Passwort anzeigen"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Mit Ihrer Synchronisation verbinden"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Öffnen Sie xBrowserSync auf Ihrem Desktop-Browser, gehen Sie in das Einstellungen-Fenster und klicken Sie auf Ihre Sync-ID, um einen QR-Code anzuzeigen, den Sie hier scannen können."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Code Scannen"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Sync-Details manuell eingeben"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "API-Version"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Synchronisieren mit diesem Dienst?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Standort"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Max. Sync-Größe"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Synchronisiere mit"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Status"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSync Dienst-URL"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Geben Sie die URL eines alternativen xBrowserSync-Dienstes an. Durchsuchen Sie die Liste von öffentlichen xBrowserSync-Diensten <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>hier</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Dienst wechseln"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "URL ist erforderlich"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Kein gültiger xBrowserSync-Dienst"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Keine gültige URL"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Keine Verbindung zum Dienst möglich"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Dieser Dienst benutzt eine nicht unterstützte API-Version"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Wichtig:</strong> xBrowserSync Dienste werden unabhängig von Freiwilligen betrieben. Der Dienst-Administrator übernimmt keine Verantwortung für Ihre Daten. Bitte denken Sie daher an regelmäßige Sicherungen Ihrer Daten."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Sind sie sicher?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync löscht alle lokalen Lesezeichendaten bevor die synchronisierten Lesezeichen wiederhergestellt werden. OK, um fortzufahren?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Lesezeichen-Sync-Tools deaktivieren"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Synchronisieren Ihrer Browserdaten mit xBrowserSync, während andere Lesezeichen-Sync-Tools (wie <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Firefox Sync</a>) aktiv sind, kann zu Duplikaten und möglicherweise zu Fehlern führen. Bitte deaktivieren Sie sie, bevor Sie fortfahren.",
            "brave": "Synchronisieren Ihrer Browserdaten mit xBrowserSync, während andere Lesezeichen-Sync-Tools (wie <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) aktiv sind, kann zu Duplizierung und möglicherweise zu Fehlern führen. Bitte deaktivieren Sie sie, bevor Sie fortfahren.",
            "edge": "Synchronisieren Ihrer Browserdaten mit xBrowserSync, während andere Lesezeichen-Sync-Tools (wie <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) aktiv sind, kann zu Duplikationen und möglicherweise zu Datenbeschädigungen führen. Bitte deaktivieren Sie sie, bevor Sie fortfahren.",
            "firefox": "Synchronisieren Ihrer Browserdaten mit xBrowserSync, während andere Lesezeichen-Sync-Tools (wie <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) aktiv sind, kann zu Duplikaten und möglicherweise zu Fehlern führen. Bitte deaktivieren Sie sie, bevor Sie fortfahren."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Synchronisiere"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Neue Synchronisation erstellen"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Bereit zum Aktualisieren der Synchronisierung?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Ihre Sync-ID muss aktualisiert werden, um mit dieser Version von xBrowserSync zu funktionieren. Nach der Aktualisierung können Sie nicht mehr mit früheren Versionen von xBrowserSync synchronisieren.</p><p>Stellen Sie sicher, dass Sie alle xBrowserSync-Apps aktualisiert haben, bevor Sie fortfahren. Fertig?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Synchronisation aktualisieren"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Ihre Synchronisation muss vor der Synchronisierung mit dieser Version von xBrowserSync aktualisiert werden.</p><p>Benutzen Sie die Desktop-Browser-Erweiterung xBrowserSync, um Ihre Synchronisation zu aktualisieren und versuchen Sie es erneut hier.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Ihre Sync-ID"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Haben Sie bereits eine Sync ID?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Keine gültige Sync ID"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Neue Sync ID"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Optionale Berechtigungen"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync reichert Lesezeichen, die mit der Schaltfläche \"Lesezeichen hinzufügen\" des Browsers angelegt werden automatisch mit verfügbaren Metadaten an. Um dies zu aktivieren, benötigt xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>zusätzliche Berechtigungen</a> um die besuchten Website-Daten lesen zu können.</p><p>Bitte erteilen Sie, wenn Sie aufgefordert werden, diese Berechtigungen, um diese Funktion zu nutzen. Sie können jederzeit die Berechtigungen im Einstellungsfenster hinzufügen oder entfernen.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Scannen Sie Ihren Sync ID QR-Code"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Licht ein/aus"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Lesezeichen-Ordner anzeigen"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Löschen"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Leerer Ordner"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Sie haben keine Lesezeichen, legen Sie welche an!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Keine Lesezeichen gefunden"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Drücke Enter oder suche nach Lesezeichen",
        "android": "Lesezeichen suchen"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Zum Synchronisieren herunterziehen"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Zum Synchronisieren freigeben"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Suchergebnisse anzeigen"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Sicherung und Wiederherstellung"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Automatische Sicherung"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Sicherungen automatisch nach einem Zeitplan herunterladen."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Sicherung läuft um"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "jedes"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "einzelnes"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "zwei"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "drei"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "vier"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "fünf"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "sechs"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "sieben"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "acht"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "neun"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "zehn"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "elf"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "zwölf"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "Tag(e)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "Woche(n)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "Monat(e)"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Um zu verhindern, dass der Dialog „Speichern unter...“ beim Herunterladen von Sicherungen angezeigt wird, deaktivieren Sie die Browser-Einstellung „Fragen, wo jede Datei vor dem Download gespeichert werden sollte“."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Sichern"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Sicherung herunterladen"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Lokale Browserdaten in einer Datei sichern."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Synchronisierte Daten in einer Datei sichern."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Wiederherstellen"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Sicherung wiederherstellen"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Lokale Browserdaten aus einer Sicherung wiederherstellen."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Da die Synchronisation derzeit deaktiviert ist, werden die wiederhergestellten Daten die lokalen Browserdaten überschreiben.</p><p>OK, um fortzufahren?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Synchronisierte Daten aus einem Backup wiederherstellen."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Da die Synchronisation derzeit aktiviert ist, werden die wiederhergestellten Daten die synchronisierten Daten überschreiben.</p><p>Um nur lokale Browserdaten wiederherzustellen deaktivieren Sie die Synchronisation vor der Wiederherstellung.</p><p>OK, um fortzufahren?</p>",
              "android": "<p>Die wiederhergestellten Daten werden Ihre synchronisierten Daten überschreiben.</p><p>OK, um fortzufahren?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Die Sicherung wurde wiederhergestellt."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Datei auswählen"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Wählen Sie die Sicherungsdatei, die wiederhergestellt werden soll"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Kopieren Sie den Inhalt einer Backup-Datei, um Daten wiederherzustellen."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Sicherungsdaten einfügen"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Daten wiederherstellen"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Ungültige xBrowserSync-Sicherungsdaten"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Wenn Sie fortfahren, wird die Synchronisation deaktiviert und Ihre lokalen Browserdaten werden auf den Stand zurückgesetzt, in dem sie waren als xBrowserSync am {date} installiert wurde.</p><p>OK, um fortzufahren?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Lokale Daten zurücksetzen"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Lokale Browserdaten wurden auf den ursprünglichen Installationszustand zurückgesetzt."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Installationsstatusdaten nicht verfügbar, Zurücksetzen nicht möglich."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Hilfe und Support"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Hilfe"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Haben Sie eine Frage oder ein Problem? Finden Sie Antworten in der Hilfeanleitung oder in den FAQs."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "FAQs anzeigen"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Support"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Benötigen Sie Unterstützung? Verwenden Sie die Problemverfolgung, um einen Fehler zu melden oder eine Funktion anzufordern."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Problemverfolgung anzeigen"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Anwendungsprotokoll"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Laden Sie das Anwendungsprotokoll herunter und fügen Sie es hinzu, wenn Sie einen Fehler melden."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Protokoll löschen"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Protokoll herunterladen"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Aktuelle Protokollgröße"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Optionale Berechtigungen"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Berechtigungen erteilen"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Zugelassen"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Nicht zugelassen"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Websitedaten lesen"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Wird benötigt, um automatisch Metadaten zu Lesezeichen hinzuzufügen, wenn Sie den Button „Lesezeichen hinzufügen“ des Browsers verwenden (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>Mehr Info</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Berechtigung(en) entfernen"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Lesezeichen-Metadaten automatisch abrufen"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Metadaten automatisch beim Hinzufügen eines Lesezeichens abrufen."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Nach Aktualisierungen suchen"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Benachrichtigung erhalten, wenn eine neue Version von xBrowserSync verfügbar ist."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Dunkles Design aktivieren"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideal für den Einsatz in Umgebungen mit wenig Beleuchtung."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Lesezeichen-Ordner anzeigen"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Lesezeichen-Ordner standardmäßig anzeigen."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Position der Suchleiste ändern"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Suchleiste unter den Ergebnissen anzeigen."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Lesezeichen-Symbolleiste synchronisieren"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Deaktivieren Sie diese Einstellung, um verschiedene Lesezeichen-Symbolleisten in synchronisierten Browsern anzuzeigen."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Durch das Aktivieren dieser Einstellung werden die Lesezeichen in der Lesezeichen-Symbolleiste durch Ihre synchronisierten Lesezeichen ersetzt.</p><p>OK, um fortzufahren?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Telemetrie aktivieren"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Senden Sie gelegentlich anonyme technische Daten, um xBrowserSync zu verbessern."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Einstellungen"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Synchronisation"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Synchronisation deaktivieren"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "Sync-ID"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Verwenden Sie Ihre Sync-ID, um sich mit Ihren synchronisierten Daten auf anderen Geräten zu verbinden (klicken Sie hier, um den QR-Code zu zeigen)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Datenverbrauch"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Welchen Datenverbrauch, den der Dienst zulässt, haben Sie."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Dienst"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Zuletzt synchronisiert {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Bereit zum Synchronisieren (geplant für {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Jetzt synchronisieren"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Scannen Sie diesen QR-Code mit der xBrowserSync Android-App, um sich mit Ihren synchronisierten Daten zu verbinden."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "QR-Code zeigen"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "ID in Zwischenablage kopieren"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Kopiert!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Einstellungen verfügbar, wenn die Synchronisation aktiviert ist."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Datei in Downloads gespeichert"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "xBrowserSync unterstützen"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "xBrowserSync unterstützen!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Wir wollen xBrowserSync zum Sync-Tool Nummer eins machen, aber es gibt noch viel zu tun:</p><ul><li>Hinzufügen von Browsertab- und Verlaufssynchronisierung </li><li>Unterstützung aller wichtigen Desktop-Browser</li><li>Übersetzung in andere Sprachen</li><li>Und <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>viel mehr</a>!</li></ul><p>Nur mit Ihrer Unterstützung können wir xBrowserSync weiter verbessern und sicherstellen, dass es weiterhin effektiv zum Schutz der Online-Privatsphäre und zur Verbesserung der Produktivität beiträgt.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Kryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Synchronisation nicht gefunden"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Ihr Sync konnte nicht gefunden werden und wurde möglicherweise aufgrund von Inaktivität entfernt.</p><p>Sie müssen eine neue Synchronisation erstellen, klicken Sie jedoch zuerst auf die Schaltfläche unten, um eine Sicherung Ihrer synchronisierten Daten herunterzuladen, die Sie dann wieder auf Ihre neue Synchronisation zurücksetzen können.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Anonyme Telemetrie senden?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync unterscheidet sich von herkömmlichen Apps, da es ein vollständig anonymes Tool ist, bei dem der Datenschutz an erster Stelle steht. Die Wartung eines solchen Tools ist eine Herausforderung, da wir keinen Zugriff auf Benutzerdaten haben, um festzustellen, wie wir unsere begrenzten Ressourcen am besten einsetzen. Daher bitten wir Sie um Ihre Erlaubnis, gelegentlich anonyme technische Daten zu senden, um uns bei der Verbesserung von xBrowserSync zu helfen.</p><p>Diese Telemetriedaten enthalten keine personenbezogenen oder identifizierenden Daten, noch enthalten sie Ihre verschlüsselten Synchronisierungsdaten und sind dies niemals mit Dritten geteilt werden (Sie können sich jederzeit im Einstellungsfeld an- oder abmelden).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Aktualisiert auf"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "xBrowserSync wurde auf die neuesten Funktionen und Korrekturen aktualisiert. Weitere Informationen zu den Änderungen in dieser Version finden Sie in den Versionshinweisen."
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Wird wiederhergestellt"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Setze zurück"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Wird synchronisiert"
      }
    }
  }
}
</file>

<file path="res/strings/en.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSync update available"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} is available to download. Click for more information.",
        "android": "xBrowserSync {version} is available to download."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Updated to"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync has been updated. Sync has been disabled, re-enable sync to complete the upgrade process."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Bookmark created"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Bookmark deleted"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Bookmark updated"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Fetching bookmark properties, touch to cancel."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Bookmark properties updated."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Go"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Browser syncing as it should be: secure, anonymous and free! Sync bookmarks across your browsers and devices, no sign up required."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Menu bookmarks"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Other bookmarks"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Toolbar bookmarks"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Add bookmark"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Back"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Cancel"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Close"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Yes"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Continue"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Delete bookmark"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "No"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Done"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Download backup"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Edit bookmark"
    },
    "Help": {
      "key": "Button_Help",
      "default": "View help guide"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Next"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "View release notes"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Saving"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Settings"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Share bookmark"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Undo"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Update"
    },
    "View": {
      "key": "Button_View",
      "default": "View"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Please avoid modifying [xbs] folders as it can cause sync issues."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "xBrowserSync folder changed"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Sync to an existing sync ID, switch to a different service or try again tomorrow."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Daily new sync limit reached"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "If the problem persists please <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>report the issue</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Something went wrong"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Backup failed"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Browse files failed"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "URL is invalid or webpage data could not be retrieved."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Couldn’t get bookmark properties"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Couldn’t retrieve updates"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "The backup data provided is not in an expected format."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Unable to restore data"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "You must be synced to add a bookmark"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Unable to retrieve shared bookmark URL"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Check your network connection and try again. If the issue persists, there could be a problem with the xBrowserSync service."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Sync failed"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Unable to find stored credentials. Re-enable sync and try again."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Missing credentials"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Check that your sync ID, password and service URL have been entered correctly."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Invalid credentials"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "The service URL is not a valid xBrowserSync service."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Invalid xBrowserSync service"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Possible corrupt browser profile, try creating a new profile as it may resolve the issue."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Unexpected bookmarks structure"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Local browser data has been refreshed, please reapply last change."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Sync error"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Check your network connection and try again."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Connection lost"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Ensure you have provided a valid xBrowserSync back up before restoring."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "No data to restore"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Switch to a different service or try again later."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Service not accepting new syncs"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Local data was out of sync and has now been refreshed. Please reapply last change."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Sync conflict detected"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Delete some bookmarks and try again or switch to a service with a larger sync limit."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Sync data limit exceeded"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Check permission has been granted and try again."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Scan failed"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "The xBrowserSync service is currently offline, try again later."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Service offline"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Share failed"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "The requested sync does not exist, it may have been removed due to inactivity."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Sync not found"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "The backup data cannot be restored by this version of xBrowserSync as it was created with a later version."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "This ID cannot be synced with this version of xBrowserSync as the sync has been upgraded to a later version."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Sync version not supported"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Sync has been disabled, re-enable sync to resume syncing."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Service request limit hit"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Changes will be synced once connection is restored."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Connection lost"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "This service is running an unsupported API version."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Service not supported"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Upgrade will be retried on restarting the app. If the problem persists please reinstall xBrowserSync.",
        "default": "Restart your browser to retry upgrade, if the problem persists please reinstall xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Upgrade failed"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Connection error"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Checking"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Not accepting new syncs"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Offline"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Online"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "not synced"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "synced"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "syncing"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Add bookmark"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Edit bookmark"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Title"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "URL has already been bookmarked"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "Not a valid URL"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "URL is required"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Description"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Tags"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "tag 1, tag 2, tag 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Clear tags"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Remove tag"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Delete"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Share"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Update bookmark properties"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "The value that was shared does not contain a valid URL."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Adding a bookmark</h4><p>Bookmark the current page by clicking on the bookmark icon in the Search panel. The bookmark’s properties will be populated for you automatically, otherwise add a description and some tags to ensure better search results.</p><p>Alternatively, simply click the browser’s “Bookmark this page” button as normal and xBrowserSync will automatically populate the bookmark’s properties (optional permissions must be granted for this to work, check the Settings panel).</p>",
        "android": "<h4>Adding a bookmark</h4><p>Add bookmarks easily by sharing to xBrowserSync from any apps that share URLs such as browsers, YouTube, Spotify and many more.</p><p>The bookmark’s properties will be fetched for you, otherwise add a description and some tags to ensure better search results.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Remember to back up</h4><p>When you use xBrowserSync your data is your responsibility so be smart and make sure to take backups.</p><p>Head over to the Settings panel and back up your unencrypted data to a local file which can be used to restore your data should you need to.</p><p>If your local browser data becomes corrupted and you don’t have any backups, you can at any time reset your data back to its original state from when xBrowserSync was installed.</p>",
        "android": "<h4>Remember to back up</h4><p>When you use xBrowserSync your data is your responsibility so be smart and make sure to take backups.</p><p>Head over to the Settings panel and back up your unencrypted data to a local file which can be used to restore your data should you need to.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Before you begin</h4><p>xBrowserSync modifies your local browser data so it’s a good idea to back up your bookmarks and other browser data just in case, and if you are using any other browser sync services or tools (such as <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) please disable them to avoid conflicts.</p>",
        "brave": "<h4>Before you begin</h4><p>xBrowserSync modifies your local browser data so it’s a good idea to back up your bookmarks and other browser data just in case, and if you are using any other browser sync services or tools (such as <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) please disable them to avoid conflicts.</p>",
        "edge": "<h4>Before you begin</h4><p>xBrowserSync modifies your local browser data so it’s a good idea to back up your bookmarks and other browser data just in case, and if you are using any other browser sync services or tools (such as <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) please disable them to avoid conflicts.</p>",
        "firefox": "<h4>Before you begin</h4><p>xBrowserSync modifies your local browser data so it’s a good idea to back up your bookmarks and other browser data just in case, and if you are using any other browser sync services or tools (such as <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) please disable them to avoid conflicts.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Syncing with your existing ID</h4><p>Click on “Already got a sync ID?” to enter your existing sync ID and password. If your sync ID was created on a service different to the one displayed then switch to that service before attempting to sync.</p><p>xBrowserSync will retrieve and decrypt your encrypted data using your locally stored password, then clear your local bookmarks before re-populating them from the decrypted data.</p><p>When synced, xBrowserSync checks in the background every fifteen minutes for updates to your synced data and will automatically update your local bookmarks when required. You can also manually sync available updates to your synced data in the Settings panel.</p>",
        "android": "<h4>Syncing with your existing ID</h4><p>Start by scanning the sync ID QR code in the Settings panel of the xBrowserSync desktop browser extension (click on your sync ID to reveal it). Make sure you enter the same encryption password used when creating the sync otherwise xBrowserSync will not be able to decrypt your data.</p><p>Also, if you are synced to a different xBrowserSync service make sure it is the active service configured in the Settings panel.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Syncing for the first time</h4><p>Before xBrowserSync can sync your browser data you will need to provide an encryption password. Be sure to make it strong but also memorable, there are no resets or reminders so if you forget it you won’t be able to access your synced data.</p><p>Your browser data will be encrypted using your password and saved to the active xBrowserSync service configured in the Settings panel.</p><p>Once synced, any changes you make to your local bookmarks will be synced automatically by xBrowserSync.</p>",
        "android": "<h4>Syncing for the first time</h4><p>xBrowserSync actively syncs your browser data between your desktop browsers (syncing to mobile browsers is not supported at this time), you can use this app to access your synced data on your Android mobile device.</p><p>If you have not already created a sync ID, head over to your desktop browser and <a href='https://link.xbrowsersync.org/download' class='new-tab'>download</a> the xBrowserSync extension. Once you have created a sync you can use your new sync ID within this app to access your data.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Further support</h4><p>You can find the answers to most common questions in the <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>FAQs</a>, also check the current <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>known issues</a> to see if your issue is listed there.</p><p>Alternatively, use the <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>issue tracker</a> to report an issue or request a new feature.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Go mobile</h4><p>Access your synced bookmarks on the move with the xBrowserSync Android app, available on <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> store, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> or <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>direct download</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Native features supported</h4><p>Feel free to continue using your browser’s native bookmarking features such as the bookmarks bar and bookmarks manager, any changes you make will be synced automatically in the background.</p><p>If you have organised your existing bookmarks into folders don’t worry, xBrowserSync will respect and maintain your existing bookmarks hierarchy.</p>",
        "firefox": "<h4>Native features supported</h4><p>Feel free to continue using your browser’s native bookmarking features such as the bookmarks toolbar and bookmarks library, any changes you make will be synced automatically in the background.</p><p>If you have organised your existing bookmarks into folders don’t worry, xBrowserSync will respect and maintain your existing bookmarks hierarchy.</p><p>Please note however, as Firefox’s bookmarks API does not yet support accessing native bookmark tags, any existing tags will be lost when syncing and tags added via xBrowserSync will not be saved as native tags.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Previous"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Searching your bookmarks</h4><p>Once synced, simply press Enter to display your recent bookmarks or type some keywords or a URL to search your bookmarks.</p><p>Toggle between search results and bookmark folders to browse the entire hierarchy.</p><p>To edit or delete a bookmark, hover over the bookmark and click the now visible edit icon next to the bookmark’s title.</p>",
        "android": "<h4>Searching your bookmarks</h4><p>Once synced, your bookmarks are displayed in chronological order when you open xBrowserSync. Type some keywords or a URL in the search box to search your bookmarks.</p><p>Toggle between search results and bookmark folders to browse the entire hierarchy.</p><p>Long pressing on a bookmark will allow you to directly share, modify or delete the bookmark.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Syncing to another service</h4><p>By default your data is synced to the <a href='https://link.xbrowsersync.org/api' class='new-tab'>official xBrowserSync service</a>, however if you would like to sync your data to an alternative xBrowserSync service you can switch the active service before syncing.</p><p>Check the list of available <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>public xBrowserSync services</a> or <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>run your own service</a>, either for private use for ultimate security and privacy, or for public use so that more people can enjoy xBrowserSync.</p><p><strong>Important:</strong> xBrowserSync services are run independently by volunteers. The service administrator takes no responsibility for your data so please remember to backup regularly.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Use shortcuts!</h4><p>To search your bookmarks quickly, use the default keyboard shortcut (Ctrl+Space) to activate the extension, then simply press Enter to view your recent bookmarks or start typing to search.</p><p>To change the shortcut, browse to chrome://extensions/shortcuts and update the available shortcuts under xBrowserSync.</p>",
        "brave": "<h4>Use shortcuts!</h4><p>To search your bookmarks quickly, use the default keyboard shortcut (Ctrl+Space) to activate the extension, then simply press Enter to view your recent bookmarks or start typing to search.</p><p>To change the shortcut, browse to brave://extensions/shortcuts and update the available shortcuts under xBrowserSync.</p>",
        "edge": "<h4>Use shortcuts!</h4><p>To search your bookmarks quickly, use the default keyboard shortcut (Ctrl+Space) to activate the extension, then simply press Enter to view your recent bookmarks or start typing to search.</p><p>To change the shortcut, browse to edge://extensions/shortcuts and update the available shortcuts under xBrowserSync.</p>",
        "firefox": "<h4>Use shortcuts!</h4><p>To search your bookmarks quickly, use the default keyboard shortcut (Ctrl+Space) to activate the extension, then simply press Enter to view your recent bookmarks or start typing to search.</p><p>To change the shortcut, browse to about:addons, click on “Manage Extension Shortcuts” in the Settings menu and update the available shortcuts under xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Your sync ID</h4><p>xBrowserSync ensures your privacy as no personal data is ever collected and your browser data is encrypted before being synced. To identify your synced data you are provided with an anonymous sync ID which can be used along with your password to sync your data on other browsers and devices.</p><p>Remember that your sync ID will only work with the xBrowserSync service on which it was created, if you switch to a different xBrowserSync service you must create a new sync or use an existing sync ID created when previously synced to that service.</p><p>Whenever you are synced you can view your sync ID in the Settings panel, click it to reveal a handy QR code to scan when syncing on mobile devices.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Welcome to xBrowserSync!</h4><p>xBrowserSync is a free and open-source alternative to browser sync services offered by Google, Mozilla, Opera and others, that respects your privacy and gives you complete anonymity (check out the <a href='https://link.xbrowsersync.org/www' class='new-tab'>website</a> for more info).</p><p>Take a moment to read through this help guide to familiarise yourself with xBrowserSync, using the paging links below or the arrow keys to move between pages.</p><p>Please note: xBrowserSync currently only syncs bookmarks. Syncing of additional browser data will be added in future versions, check out the development <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>roadmap</a> to see what’s planned.</p>",
        "android": "<h4>Welcome to xBrowserSync!</h4><p>xBrowserSync is a free and open-source alternative to browser sync services offered by Google, Mozilla, Opera and others, that respects your privacy and gives you complete anonymity (check out the <a href='https://link.xbrowsersync.org/www' class='new-tab'>website</a> for more info).</p><p>Take a moment to read through this help guide to familiarise yourself with xBrowserSync, using the paging links below or swiping to move between pages.</p><p>Please note: xBrowserSync currently only syncs bookmarks. Syncing of additional browser data will be added in future versions, check out the development <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>roadmap</a> to see what’s planned.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Need a sync ID?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Download the xBrowserSync desktop browser extension and create a new sync to access your bookmarks here."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Confirm password"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Your encryption password"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Encryption password"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Enter an encryption password"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Reveal password"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Connect to your sync"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Open xBrowserSync on your desktop browser, go to the Settings panel and click on your sync ID to display a QR code which you can scan here."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Scan code"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Enter sync details manually"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "API version"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Sync to this service?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Location"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Max sync size"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Syncing to"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Status"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSync service URL"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Enter the URL of an alternative xBrowserSync service. Browse the list of public xBrowserSync services <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>here</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Switch service"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "URL is required"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Not a valid xBrowserSync service"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Not a valid URL"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Unable to connect to the service"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "This service is running an unsupported API version"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Important:</strong> xBrowserSync services are run independently by volunteers. The service administrator takes no responsibility for your data so please remember to backup regularly."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Are you sure?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync will delete all local bookmarks data before restoring synced bookmarks. OK to proceed?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Disable bookmark sync tools"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Syncing your browser data with xBrowserSync whilst other bookmark sync tools (such as <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) are active can cause duplication and possibly corrupted data. Please disable them before continuing.",
            "brave": "Syncing your browser data with xBrowserSync whilst other bookmark sync tools (such as <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) are active can cause duplication and possibly corrupted data. Please disable them before continuing.",
            "edge": "Syncing your browser data with xBrowserSync whilst other bookmark sync tools (such as <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) are active can cause duplication and possibly corrupted data. Please disable them before continuing.",
            "firefox": "Syncing your browser data with xBrowserSync whilst other bookmark sync tools (such as <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) are active can cause duplication and possibly corrupted data. Please disable them before continuing."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Sync"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Create new sync"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Ready to upgrade sync?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Your sync must be upgraded before syncing with this version of xBrowserSync. After upgrading, you will no longer be able to sync with any previous versions of xBrowserSync.</p><p>Make sure to update xBrowserSync on all synced devices before continuing. Ready to proceed?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Upgrade sync"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Your sync must be upgraded before syncing with this version of xBrowserSync.</p><p>Use the xBrowserSync desktop browser extension to upgrade your sync and then retry syncing here.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Your sync ID"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Already got a sync ID?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Not a valid sync ID"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Get a sync ID"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Optional permissions"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync automatically enriches bookmarks added using the browser’s Add Bookmark button with available metadata. To enable this, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>requires additional permissions</a> to be able to read visited website data.</p><p>Please indicate if prompted if you are happy to grant these permissions, alternatively you can add or remove permissions at any time in the Settings panel.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Scan your sync ID QR code"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Toggle light"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "View bookmark folders"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Clear"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Folder empty"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "You have no bookmarks, go add some!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "No bookmarks found"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Hit Enter or search for bookmarks",
        "android": "Find bookmarks"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Pull down to sync"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Release to sync"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "View search results"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Back up and restore"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Auto back up"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Automatically download backups on a schedule."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Back up runs at"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "every"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "single"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "two"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "three"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "four"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "five"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "six"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "seven"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "eight"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "nine"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "ten"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "eleven"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "twelve"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "day(s)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "week(s)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "month(s)"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "To prevent “Save As...” dialog from showing when downloading backups, disable the browser setting “Ask where to save each file before downloading”."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Back up"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Download backup"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Back up local browser data to a file."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Back up synced data to a file."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Restore"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Restore from backup"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Restore local browser data from a backup."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>As sync is currently disabled, the data being restored will overwrite the local browser data.</p><p>OK to proceed?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Restore synced data from a backup."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>As sync is currently enabled, the data being restored will overwrite your synced data.</p><p>To restore data to the local browser only, disable sync before restoring.</p><p>OK to proceed?</p>",
              "android": "<p>The data being restored will overwrite your synced data.</p><p>OK to proceed?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Backup has been restored."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Select file"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Select a backup file to restore"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Copy the contents of a backup file to restore data."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Paste backup data"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Restore data"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Invalid xBrowserSync backup data"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>If you continue, sync will be disabled and your local browser data will be reset to when xBrowserSync was installed on {date}.</p><p>OK to proceed?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Reset local data"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Local browser data has been reset to initial installation state."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Installation state data not available, unable to reset."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Help and support"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Help guide"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Got a question or having an issue? Make sure to read through the help guide, otherwise the answer may be in the FAQs."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "View FAQs"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Support"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Need support? Use the issues tracker to report a bug or request a feature."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "View issues tracker"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Application log"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Download and include the application log when you log an issue."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Clear log"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Download log"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Current log size"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Optional permissions"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Grant permissions"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Granted"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Not granted"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Read website data"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Required to automatically add metadata to bookmarks when using the browser’s “Bookmark this page” button (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>more info</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Remove permissions"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Auto-fetch bookmark metadata"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Retrieve metadata automatically when adding a bookmark."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Check for app updates"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Be notified when a new version of xBrowserSync is available."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Enable dark mode"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideal for use in low-light environments."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Show bookmark folders"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Display bookmark folders by default."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Switch search bar position"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Show search bar beneath results."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Sync bookmarks toolbar"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Disable this setting to display different toolbar bookmarks across synced browsers."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Enabling this setting will replace the bookmarks currently in the bookmarks toolbar with your synced bookmarks.</p><p>OK to proceed?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Enable telemetry"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Occasionally send anonymous technical data to help improve xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Preferences"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Sync"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Disable sync"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "Sync ID"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Use your sync ID to connect to your synced data on other devices (click to reveal QR code)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Data usage"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "How much of the sync data allowed by the service are you using."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Service"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Last synced {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Ready to sync (scheduled for {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Sync now"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Scan this QR code using the xBrowserSync Android app to connect to your synced data."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Show QR code"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Copy sync ID to clipboard"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Copied!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Settings available when sync is enabled."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "File saved to Downloads"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Support xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Support xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>We want to make xBrowserSync the number one browser sync tool, but there’s still a lot to do:</p><ul><li>Add syncing of browser tabs and history</li><li>Support all major desktop browsers</li><li>Translate into other languages</li><li>And <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>much more</a>!</li></ul><p>Only with your support can we continue to improve xBrowserSync and ensure that it remains effective in protecting online privacy and enhancing productivity.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Cryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Sync not found"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Your sync could not be found and may have been removed due to inactivity.</p><p>You will need to create a new sync, but first click the button below to download a backup of your synced data which you can then restore to your new sync.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Send anonymous telemetry?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync is unlike traditional apps since it is a completely anonymous, privacy-first tool. Maintaining such a tool is challenging since we have no access to user data to help determine how best to deploy our limited resources. Therefore, we request your permission to occasionally send anonymous technical data to help us improve xBrowserSync.</p><p>This telemetry data does not include any personal or identifying data, nor does it include any of your encrypted sync data and is never shared with any third parties (you are able to opt in or out at any time in the Settings panel).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Updated to"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync has been updated with the latest features and fixes.</p><p>If sync was enabled it has now been disabled and your sync must first be upgraded before syncing with this version of xBrowserSync. Re-enable sync to complete the upgrade process.</p><p>For more details about the changes contained in this release, check out the release notes.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Restoring"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Resetting"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Syncing"
      }
    }
  }
}
</file>

<file path="res/strings/es.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "Actualización de xBrowserSync disponible"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} está disponible para su descarga. Pulse para obtener más información.",
        "android": "xBrowserSync {version} está disponible para su descarga."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Actualizado a"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync ha sido actualizado. La sincronización ha sido desactivada, rehabilítalala para completar el proceso de actualización."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Marcador creado"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Marcador borrado"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Marcador actualizado"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Recuperando propiedades del marcador, toque para cancelar."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Propiedades del marcador actualizadas."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Vamos"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "La sincronización de navegador como debería ser: ¡seguro, anónimo y gratis! Sincroniza los marcadores entre sus navegadores y dispositivos, no es necesario registrarse."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Marcadores"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Otros marcadores"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Marcadores barra de herramientas"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Agregar un marcador"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Volver atrás"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Cancelar"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Cerrar"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Sí"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Siguiente"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Borrar marcador"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "No"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Finalizado"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Descargar copia de seguridad"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Editar marcador"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Ver guía de ayuda"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Siguiente"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Ver notas de versión"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Guardando"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Preferencias"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Compartir marcador"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Deshacer"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Actualizar"
    },
    "View": {
      "key": "Button_View",
      "default": "Ver"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Por favor, evite modificar [xbs] carpetas ya que puede causar problemas de sincronización."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "Carpeta xBrowserSync modificada"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Sincronice con un ID de sincronización existente, cambie a un servicio diferente o vuelva a intentarlo mañana."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Límite diario de sincronización alcanzado"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Si el problema persiste, por favor <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>reporte el problema</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Algo ha ido mal"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "La copia de seguridad ha fallado"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Examinar archivos fallidos"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "La URL no es válida o los datos de la página web no pudieron ser recuperados."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "No se pudieron obtener las propiedades del marcador"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "No se pudieron recuperar las actualizaciones"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Los datos de copia de seguridad proporcionados no están en el formato esperado."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "No se pueden restaurar los datos"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Debe estar sincronizado para añadir un marcador"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "No se puede recuperar la URL del marcador compartido"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Verifique su conexión de red y vuelva a intentarlo. Si el problema persiste, podría haber un problema con el servicio xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Sincronización fallida"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "No se han podido encontrar las credenciales almacenadas. Vuelva a habilitar la sincronización y vuelva a intentarlo."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Faltan credenciales"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Compruebe que su ID de sincronización, contraseña y URL del servicio han sido introducidos correctamente."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Credenciales no válidas"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "La URL del servicio no es un servicio xBrowserSync válido."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Servicio xBrowserSync inválido"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Posible perfil corrupto del navegador, intente crear un perfil nuevo ya que puede resolver el problema."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Estructura de marcadores inesperada"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Los datos locales del navegador han sido actualizados, por favor vuelva a aplicar el último cambio."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Error de sincronización"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Comprueba tu conexión a internet y vuelve a intentarlo."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Conexión perdida"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Asegúrese de haber proporcionado una copia de seguridad de xBrowserSync válida antes de restaurar."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "No hay datos para restaurar"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Cambie a un servicio diferente o inténtelo de nuevo más tarde."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "El servicio no acepta nuevas sincronizaciones"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Los datos locales no estaban sincronizados y ahora han sido actualizados. Vuelva a aplicar el último cambio."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Conflicto de sincronización detectado"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Elimina algunos marcadores y vuelve a intentarlo o cambia a un servicio con un límite de sincronización mayor."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Límite de datos de sincronización excedido"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Compruebe que el permiso ha sido concedido e inténtelo de nuevo."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Error al escanear"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "El servicio xBrowserSync no responde, inténtalo de nuevo más tarde."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Servicio sin conexión"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Error al compartir"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "La sincronización solicitada no existe, puede haber sido eliminada por inactividad."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Sincronización no encontrada"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Los datos de la copia no pueden ser restaurados por esta versión de xBrowserSync ya que fueron creados con una versión posterior."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Este ID no puede ser sincronizado con esta versión de xBrowserSync ya que la sincronización se actualizó a una versión posterior."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "No se admite la versión de sincronizado"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "La sincronización ha sido deshabilitada, vuelve a habilitarla para reanudar la sincronización."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Límite de solicitud de servicio alcanzado"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Los cambios se sincronizarán una vez que se restablezca la conexión."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Conexión perdida"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Este servicio está ejecutando una versión de API no soportada."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Servicio no admitido"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "La actualización se reintentará al reiniciar la aplicación. Si el problema persiste, por favor reinstale xBrowserSync.",
        "default": "Reinicie su navegador para volver a intentar actualizar, si el problema persiste, por favor reinstale xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Error de actualización"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Error de conexión"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Comprobando"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "No se aceptan nuevas sincronizaciones"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Sin conexión"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Conectado"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "no sincronizado"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "sincronizado"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "sincronizando"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Agregar un marcador"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Editar marcador"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Título"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "Esta URL ya ha sido guardada como marcador"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "No es una URL válida"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "Se requiere la URL"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Descripción"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Etiquetas"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "etiqueta 1, etiqueta 2, etiqueta 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Borrar etiquetas"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Eliminar etiqueta"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Suprimir"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Compartir"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Actualizar propiedades del marcador"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "El valor que ha sido compartido no contiene una URL válida."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Añadir un marcador</h4><p>Marcar la página actual haciendo clic en el icono del marcador en el panel de búsqueda. Las propiedades del marcador, se rellenarán automáticamente. De lo contrario, agregue una descripción y algunas etiquetas para asegurar mejores resultados de búsqueda.</p><p>Alternativamente, haga clic en el botón “Marcar esta página” del navegador de manera habitual y xBrowserSync automáticamente rellenará las propiedades del marcador (se deben conceder permisos opcionales para que funcione, compruebe el panel de configuración).</p>",
        "android": "<h4>Añadir un marcador</h4><p>Añada marcadores fácilmente compartiendo a xBrowserSync desde cualquier aplicación que comparta URLs como un navegador, YouTube, Spotify y muchos más.</p><p>Las propiedades del marcador se buscarán para usted, de lo contrario añada una descripción y algunas etiquetas para asegurar mejores resultados de búsqueda.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Recuerde hacer una copia de seguridad</h4><p>Cuando utilice xBrowserSync sus datos son su responsabilidad, así que sea inteligente y asegúrese de hacer copias de seguridad.</p><p>Diríjase al panel de Ajustes y haga una copia de seguridad de sus datos no cifrados en un archivo local que puede utilizarse para restaurar sus datos si lo necesita.</p><p>Si los datos de su navegador local se corrompen y no tiene ninguna copia de seguridad, puede en cualquier momento revertir sus datos a su estado original desde la instalación de xBrowserSync.</p>",
        "android": "<h4>Recuerde hacer una copia de seguridad</h4><p>Cuando utilice xBrowserSync sus datos son su responsabilidad, así que sea inteligente y recuerde hacer copias de seguridad.</p><p>Diríjase al panel de Ajustes y haga una copia de seguridad de sus datos no cifrados en un archivo local que puede utilizarse para restaurar tus datos si lo necesita.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Antes de comenzar</h4><p>xBrowserSync modifica los datos locales de tu navegador por eso es buena idea realizar una copia de seguridad de tus marcadores y de otros datos del navegador por si acaso, y si estás usando cualquier otra herramienta o servicio de sincronización de navegador (como <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>), por favor deshabilítalas para evitar conflictos.</p>",
        "brave": "<h4>Antes de comenzar</h4><p>xBrowserSync modifica los datos locales de tu navegador por eso es buena idea realizar una copia de seguridad de tus marcadores y de otros datos del navegador por si acaso, y si estás usando cualquier otra herramienta o servicio de sincronización de navegador (como <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>), por favor deshabilítalas para evitar conflictos.</p>",
        "edge": "<h4>Antes de comenzar</h4><p>xBrowserSync modifica los datos locales de tu navegador por eso es buena idea realizar una copia de seguridad de tus marcadores y de otros datos del navegador por si acaso, y si estás usando cualquier otra herramienta o servicio de sincronización de navegador (como <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>), por favor deshabilítalas para evitar conflictos.</p>",
        "firefox": "<h4>Antes de comenzar</h4><p>xBrowserSync modifica los datos locales de tu navegador por eso es buena idea realizar una copia de seguridad de tus marcadores y de otros datos del navegador por si acaso, y si estás usando cualquier otra herramienta o servicio de sincronización de navegador (como <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>), por favor deshabilítalas para evitar conflictos.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Sincronizando con su ID existente</h4><p>Haga clic en \"¿Ya tiene un ID de sincronización?\" para introducir su ID de sincronización existente y su contraseña. Si su ID de sincronización fue creado en un servicio diferente al que se muestra, cambie a ese servicio antes de intentar la sincronización.</p><p>xBrowserSync recuperará y descifrará sus datos cifrados usando su contraseña almacenada localmente, luego limpiará sus marcadores locales antes de rellenarlos con los datos decifrados.</p><p>Cuando se sincroniza, xBrowserSync comprueba en segundo plano cada quince minutos las actualizaciones de los datos sincronizados y actualiza automáticamente los marcadores locales cuando es necesario. También puedes sincronizar manualmente las actualizaciones disponibles con tus datos sincronizados en el panel de Ajustes.</p>",
        "android": "<h4>Sincronizando con su ID existente</h4><p>Inicie escaneando el código QR de ID de sincronización en el panel de Ajustes de la extensión del navegador de escritorio xBrowserSync (haga clic en su ID de sincronización para revelarlo). Asegúrese de que introduce la misma contraseña de cifrado utilizada al crear la sincronización de lo contrario xBrowserSync no podrá descifrar sus datos.</p><p>Además, si está sincronizado con un servicio xBrowserSync diferente, asegúrese de que es el servicio activo configurado en el panel de ajustes.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Sincronización por primera vez</h4><p>Antes de que xBrowserSync pueda sincronizar los datos de su navegador, necesitará proporcionar una contraseña de cifrado. Asegúrate de hacerlo fuerte pero también memorable, no hay reinicios ni recordatorios, así que si lo olvidas no podrás acceder a tus datos sincronizados.</p><p>Los datos de su navegador serán cifrados usando su contraseña y guardados en el servicio activo xBrowserSync configurado en el panel de ajustes.</p><p>Una vez sincronizado, los cambios que realice en sus marcadores locales serán sincronizados automáticamente por xBrowserSync.</p>",
        "android": "<h4>Sincronización por primera vez</h4><p>xBrowserSync sincroniza activamente los datos de su navegador entre sus navegadores de escritorio (la sincronización con los navegadores móviles no es compatible en este momento), puedes usar esta aplicación para acceder a tus datos sincronizados en tu dispositivo móvil Android.</p><p>Si aún no has creado un ID de sincronización, diríjase a su navegador de escritorio y <a href='https://link.xbrowsersync.org/download' class='new-tab'>descargue</a> la extensión xBrowserSync. Una vez que hayas creado una sincronización, puedes usar tu nuevo ID de sincronización dentro de esta aplicación para acceder a tus datos.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Más ayuda</h4><p>Puedes encontrar las respuestas a las preguntas más comunes en las <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>Preguntas frecuentes</a>, también compruebe los <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>problemas conocidos actuales</a> para ver si su problema está listado allí.</p><p>Alternativamente, utilice el <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>gestor de incidencias</a> para reportar un problema o solicitar una nueva característica.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Vaya a móvil</h4><p>Acceda a sus marcadores sincronizados en movimiento con la aplicación xBrowserSync Android, disponible en la tienda de <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a>, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> o mediante <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>descarga directa</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Funciones nativas soportadas</h4><p>Siéntete libre de seguir usando las características nativas de marcadores de tu navegador como la barra de marcadores y el administrador de marcadores, los cambios que realices se sincronizarán automáticamente en segundo plano.</p><p>Si ha organizado sus marcadores existentes en carpetas no se preocupe, xBrowserSync respetará y mantendrá su jerarquía de marcadores existente.</p>",
        "firefox": "<h4>Funciones nativas soportadas</h4><p>Siéntete libre de seguir usando las características nativas de marcador de tu navegador como la barra de herramientas de marcadores y la biblioteca de marcadores, los cambios que realices se sincronizarán automáticamente en segundo plano.</p><p>Si ha organizado sus marcadores existentes en carpetas no se preocupe, xBrowserSync respetará y mantendrá su jerarquía de marcadores existente.</p><p>Tenga en cuenta, sin embargo, ya que la API de marcadores de Firefox aún no soporta el acceso a etiquetas nativas de marcadores, cualquier etiqueta existente se perderá cuando la sincronización y las etiquetas añadidas a través de xBrowserSync no se guardarán como etiquetas nativas.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Anterior"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Buscando sus marcadores</h4><p>Una vez sincronizado, simplemente pulse Enter para mostrar sus marcadores recientes o escriba algunas palabras clave o una URL para buscar sus marcadores.</p><p>Cambia entre los resultados de búsqueda y las carpetas de marcadores para navegar por toda la jerarquía.</p><p>Para editar o eliminar un marcador, pase el cursor sobre el marcador y haga clic en el icono de edición ahora visible junto al título del marcador.</p>",
        "android": "<h4>Buscando sus marcadores</h4><p>Una vez sincronizados, sus marcadores se mostrarán en orden cronológico cuando abra xBrowserSync. Escriba algunas palabras clave o una URL en el cuadro de búsqueda para buscar sus marcadores.</p><p>Cambia entre los resultados de búsqueda y las carpetas de marcadores para navegar por toda la jerarquía.</p><p>Manteniendo una pulsación larga en un marcador le permitirá compartir directamente, modificar o eliminar el marcador</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Sincronizando con otro servicio</h4><p>Por defecto sus datos se sincronizan con el <a href='https://link.xbrowsersync.org/api' class='new-tab'>servicio oficial xBrowserSync</a>, Sin embargo, si desea sincronizar sus datos con un servicio xBrowserSync alternativo, puede cambiar el servicio activo antes de sincronizar.</p><p>Compruebe la lista de los <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>servicios públicos xBrowserSync</a> o <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>ejecute su propio servicio</a>, ya sea para uso privado para la máxima seguridad y privacidad, o para uso público para que más personas puedan disfrutar de xBrowserSync.</p><p><strong>Importantes:</strong> los servicios de xBrowserSync son gestionados de forma independiente por voluntarios. El administrador del servicio no asume ninguna responsabilidad por sus datos, así que por favor recuerde realizar una copia de seguridad regular.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>¡Use atajos!</h4><p>Para buscar sus marcadores rápidamente, utilice el atajo de teclado por defecto (Ctrl+Espacio) para activar la extensión, simplemente pulse Enter para ver sus marcadores recientes o empezar a escribir para buscar.</p><p>Para cambiar el acceso directo, navegue a chrome://extensions/shortcuts y actualice los accesos directos disponibles en xBrowserSync.</p>",
        "brave": "<h4>¡Use atajos!</h4><p>Para buscar sus marcadores rápidamente, utilice el atajo de teclado por defecto (Ctrl+Espacio) para activar la extensión, simplemente pulse Enter para ver sus marcadores recientes o empezar a escribir para buscar.</p><p>Para cambiar el acceso directo, navegue a brave://extensions/shortcuts y actualice los accesos directos disponibles en xBrowserSync.</p>",
        "edge": "<h4>¡Use atajos!</h4><p>Para buscar sus marcadores rápidamente, utilice el atajo de teclado por defecto (Ctrl+Espacio) para activar la extensión, simplemente pulse Enter para ver sus marcadores recientes o empezar a escribir para buscar.</p><p>Para cambiar el acceso directo, navegue a edge://extensions/shortcuts y actualice los accesos directos disponibles en xBrowserSync.</p>",
        "firefox": "<h4>¡Use atajos!</h4><p>Para buscar sus marcadores rápidamente, utilice el atajo de teclado por defecto (Ctrl+Espacio) para activar la extensión, simplemente pulse Enter para ver sus marcadores recientes o empezar a escribir para buscar.</p><p>Para cambiar el acceso directo, navegue a about:addons, haga clic en “Administrar los accesos directos del complemento\" en el menú Configuración y actualice los accesos directos disponibles en xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Su ID de sincronización</h4><p>xBrowserSync asegura su privacidad ya que no se recopilan datos personales y los datos de su navegador son cifrados antes de ser sincronizados. Para identificar tus datos sincronizados tienes un ID de sincronización anónimo que puede ser usado junto con tu contraseña para sincronizar tus datos en otros navegadores y dispositivos.</p><p>Recuerda que tu ID de sincronización solo funcionará con el servicio xBrowserSync en el que fue creado, si cambia a un servicio xBrowserSync diferente, debe crear una nueva sincronización o utilizar un ID de sincronización existente creado cuando se sincroniza previamente con ese servicio.</p><p>Cuando esté sincronizado puede ver su ID de sincronización en el panel de configuración, haga clic en él para revelar un código QR práctico para escanear cuando se sincroniza en dispositivos móviles.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>¡Bienvenido a xBrowserSync!</h4><p>xBrowserSync es una alternativa gratuita y de código abierto a los servicios de sincronización del navegador ofrecidos por Google, Mozilla, Opera y otros, que respetan su privacidad y le dan anonimato completo (consulte el <a href='https://link.xbrowsersync.org/www' class='new-tab'>sitio web</a> para más información).</p><p>Tómese un momento para leer esta guía de ayuda para familiarizarse con xBrowserSync, usando los enlaces de paginación de abajo o las teclas de flecha para moverse entre páginas.</p><p>Nota: xBrowserSync actualmente sólo sincroniza marcadores. La sincronización de los datos adicionales del navegador se añadirá en versiones futuras, revisa el mapa de ruta <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>de desarrollo</a> para ver lo que está planeado.</p>",
        "android": "<h4>¡Bienvenido a xBrowserSync!</h4><p>xBrowserSync es una alternativa gratuita y de código abierto a los servicios de sincronización del navegador ofrecidos por Google, Mozilla, Opera y otros, que respetan su privacidad y le dan anonimato completo (consulte el <a href='https://link.xbrowsersync.org/www' class='new-tab'>sitio web</a> para más información).</p><p>Tómese un momento para leer esta guía de ayuda para familiarizarse con xBrowserSync, usando los enlaces de paginación de abajo o deslizando para moverse entre páginas.</p><p>Nota: xBrowserSync actualmente sólo sincroniza marcadores. La sincronización de los datos adicionales del navegador se añadirá en versiones futuras, revisa el mapa de ruta <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>de desarrollo</a> para ver lo que está planeado.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "¿Necesitas un ID de sincronización?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Descargue la extensión del navegador de escritorio xBrowserSync y cree una nueva sincronización para acceder a sus favoritos aquí."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Confirme la contraseña"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Su contraseña de cifrado"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Contraseña de cifrado"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Introduzca una contraseña de cifrado"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Mostrar contraseña"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Conectar a su cuenta"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Abra xBrowserSync en su navegador de escritorio, vaya al panel de Ajustes y haga clic en su ID de sincronización para mostrar un código QR que puede escanear aquí."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Escanear código"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Introduzca manualmente los detalles de la sincronización"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Versión de API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "¿Sincronizar con este servicio?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Ubicación"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Tamaño máximo de sincronización"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Sincronizando con"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Estado"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "URL del servicio xBrowserSync"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Introduzca la URL de un servicio xBrowserSync alternativo. Consulte la lista de servicios xBrowserSync públicos <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>aquí</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Cambiar de servicio"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "Se requiere la URL"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "No es un servicio xBrowserSync válido"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "No es una URL válida"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "No es posible conectar con el servicio"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Este servicio está ejecutando una versión de API no soportada"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Importante:</strong> los servicios xBrowserSync son gestionados de forma independiente por voluntarios. El administrador del servicio no asume ninguna responsabilidad por sus datos, así que por favor recuerde realizar una copia de seguridad regular."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "¿Estás seguro/a?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync eliminará todos los datos de marcadores locales antes de restaurar marcadores sincronizados. ¿Desea continuar?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Desactivar herramientas de sincronización de marcadores"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "La sincronización de los datos de su navegador con xBrowserSync mientras otras herramientas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) están activas puede causar duplicación y posiblemente corromper datos. Desactívalos antes de continuar.",
            "brave": "La sincronización de los datos de su navegador con xBrowserSync mientras otras herramientas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) están activas puede causar duplicación y posiblemente corromper datos. Desactívalos antes de continuar.",
            "edge": "La sincronización de los datos de su navegador con xBrowserSync mientras otras herramientas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) están activas puede causar duplicación y posiblemente corromper datos. Desactívalos antes de continuar.",
            "firefox": "La sincronización de los datos de su navegador con xBrowserSync mientras otras herramientas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) están activas puede causar duplicación y posiblemente corromper datos. Desactívalos antes de continuar."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Sincronizar"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Crear una nueva sincronización"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "¿Listo para actualizar la sincronización?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Debe actualizar su sincronización antes de sincronizar con esta versión de xBrowserSync. Tras actualizar, ya no podrá sincronizar con ninguna versión anterior de xBrowserSync.</p><p>Asegúrese de actualizar xBrowserSync en todos los dispositivos sincronizados antes de continuar. ¿Listo para continuar?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Actualizar sincronización"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Su sincronización debe actualizarse antes de sincronizar con esta versión de xBrowserSync.</p><p>Utilice la extensión del navegador de escritorio xBrowserSync para actualizar su sincronización y luego vuelva a intentar sincronizar aquí.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Su ID de sincronización"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "¿Ya tiene un ID de sincronización?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "ID de sincronización no válido"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Obtener un ID de sincronización"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Permisos opcionales"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync automáticamente añade marcadores con el botón Añadir marcador del navegador con los metadatos disponibles. Para habilitar esto, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>requiere permisos adicionales</a> para poder leer los datos del sitio web visitado.</p><p>Indique si desea conceder estos permisos, por favor. Alternativamente, puede agregar o eliminar permisos en cualquier momento en el panel de Ajustes.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Escanea tu código QR de ID de sincronización"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Alternar luz"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Ver carpetas de marcadores"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Limpiar"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Carpeta vacía"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "No tienes marcadores, ve a agregar algunos!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "No se encontraron marcadores"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Pulsa Enter o busca marcadores",
        "android": "Buscar marcadores"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Desliza hacia abajo para sincronizar"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Suelta para sincronizar"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Ver resultados de la búsqueda"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Respaldar y restaurar"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Copia de seguridad automática"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Descargue automáticamente copias de seguridad en un programa."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Copia de seguridad en"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "cada vez"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "solo uno"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "dos"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "tres"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "cuatro"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "cinco"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "seis"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "siete"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "ocho"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "nueve"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "diez"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "once"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "doce"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "día(s)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "semana(s)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "mes(es)"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Para evitar que el diálogo \"Guardar como...\" se muestre al descargar copias de seguridad, deshabilite la configuración del navegador \"Pregunte dónde guardar cada archivo antes de descargar\"."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Copia de seguridad"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Descargar copia de seguridad"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Copia de seguridad de los datos del navegador local a un archivo."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Copia de seguridad de datos sincronizados a un archivo."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Restaurar"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Restaurar desde una copia de seguridad"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Restaurar los datos del navegador local desde una copia de seguridad."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Como la sincronización está actualmente deshabilitada, los datos que se están restaurando sobreescribirán los datos locales del navegador.</p><p>¿Desea continuar?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Restaurar datos sincronizados desde una copia de seguridad."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Como la sincronización está activada, los datos que se están restaurando sobreescribirán sus datos sincronizados.</p><p>Para restaurar datos solo al navegador local, deshabilitar la sincronización antes de restaurar.</p><p>¿Desea continuar?</p>",
              "android": "<p>Los datos que se están restaurando sobrescribirán sus datos sincronizados.</p><p>¿Desea continuar?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Se ha restaurado la copia de seguridad."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Seleccionar archivo"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Selecciona un archivo de copia de seguridad para restaurar"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Copia el contenido de un archivo de copia de seguridad para restaurar los datos."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Pegar datos de copia de seguridad"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Restaurar datos"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Datos de copia de seguridad xBrowserSync inválidos"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Si continúa, cualquier sincronización activa se deshabilitará y sus datos locales se revertirán a cuando xBrowserSync fue instalado el {date}.</p><p>¿Seguro que quieres continuar?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Restablecer datos locales"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Los datos locales del navegador se han restablecido al estado inicial de instalación."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Datos de estado de instalación no disponibles, no se puede restablecer."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Ayuda y soporte"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Guía de ayuda"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "¿Tienes alguna pregunta o tienes un problema? Asegúrate de leer la guía de ayuda, de lo contrario la respuesta puede estar en las preguntas frecuentes."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Ver FAQs"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Soporte"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "¿Necesita soporte? Utilice el rastreador de problemas para reportar un error o solicitar una funcionalidad."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Ver Rastreador de Problemas"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Registros de aplicación"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Descargue e incluya el registro de la aplicación cuando registre un problema."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Limpiar registros"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Descargar registro"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Tamaño actual del log"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Permisos opcionales"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Otorgar permisos"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Otorgado"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "No otorgado"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Leer datos del sitio web"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Requerido para añadir automáticamente metadatos a marcadores al usar el botón \"Marcar esta página\" del navegador (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>más información</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Eliminar permisos"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Auto-recuperar metadatos de marcadores"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Recuperar metadatos automáticamente al añadir un marcador."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Buscar actualizaciones de la aplicación"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Ser notificado cuando una nueva versión de xBrowserSync esté disponible."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Habilitar el modo oscuro"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideal para su uso en ambientes de poca luz."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Mostrar carpetas de marcadores"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Mostrar carpetas de marcadores por defecto."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Cambiar la posición de la barra de búsqueda"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Mostrar la barra de búsqueda debajo de los resultados."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Sincronizar barra de herramientas de marcadores"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Deshabilita esta opción para mostrar diferentes marcadores de la barra de herramientas a través de navegadores sincronizados."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Habilitar esta configuración reemplazará los marcadores actualmente en la barra de herramientas de marcadores con sus marcadores sincronizados.</p><p>¿Está seguro de continuar?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Habilitar telemetría"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Ocasionalmente, envíe datos técnicos anónimos para ayudar a mejorar xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Preferencias"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Sincronizar"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Desactivar sincronización"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID de sincronización"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Usa tu ID de sincronización para conectarte a tus datos sincronizados en otros dispositivos (haz clic para revelar código QR)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Uso de datos"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Cuántos de los datos de sincronización permitidos por el servicio está utilizando."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Servicio"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Última sincronización {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Listo para sincronizar (programado para {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Sincronizar ahora"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Escanee este código QR usando la aplicación xBrowserSync Android para conectarse a sus datos sincronizados."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Mostrar código QR"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Copiar ID de sincronización al portapapeles"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "¡Copiado!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Ajustes disponibles cuando la sincronización está activada."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Archivo guardado en Descargas"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Soporte a xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "¡Soporte a xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Queremos hacer de xBrowserSync la herramienta de sincronización número uno, pero todavía queda mucho por hacer:</p><ul><li>Añadir sincronización de las pestañas del navegador e historial</li><li>Soporte a todos los navegadores de escritorio principales</li><li>Traducir a otros idiomas</li><li>Y <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>mucho más</a>!</li></ul><p>Sólo con su apoyo podremos seguir mejorando xBrowserSync y asegurarnos de que siga siendo una herramienta eficaz para proteger nuestra privacidad y productividad frente al deterioro de la tecnología!</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Cryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Sincronización no encontrada"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>No se pudo encontrar su sincronización y puede que se haya eliminado por inactividad.</p><p>Necesitará crear una nueva sincronización, pero primero haga clic en el botón de abajo para descargar una copia de seguridad de sus datos sincronizados que puede restaurar a su nueva sincronización.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "¿Enviar telemetría anónima?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync es diferente a las aplicaciones tradicionales, ya que es una herramienta completamente anónima que prioriza la privacidad. Mantener una herramienta de este tipo es un desafío, ya que no tenemos acceso a los datos de los usuarios para ayudar a determinar la mejor manera de implementar nuestros recursos limitados. Por lo tanto, solicitamos su permiso para enviar ocasionalmente datos técnicos anónimos para ayudarnos a mejorar xBrowserSync.</p><p>Estos datos de telemetría no incluyen ningún dato personal o de identificación, ni incluyen ninguno de sus datos de sincronización cifrados y nunca compartido con terceros (puede optar por participar o no en cualquier momento en el panel de Configuración).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Actualizado a"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "xBrowserSync has been updated with the latest features and fixes. For more details about the changes contained in this release, check out the release notes."
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Restaurando"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Reiniciando"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Sincronizando"
      }
    }
  }
}
</file>

<file path="res/strings/fi.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSynciin on saatavilla päivitys"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} on ladattavissa. Klikkaa saadaksesi lisätietoja.",
        "android": "xBrowserSync {version} on ladattavissa."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Päivitetty versioon"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync on päivitetty ja synkronointi on poistettu käytöstä. Viimeistele päivitys ottamalla synkronointi uudelleen käyttöön."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Kirjanmerkki luotu"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Kirjanmerkki poistettu"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Kirjanmerkki päivitetty"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Noudetaan kirjanmerkin ominaisuuksia, kosketa peruuttaaksesi."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Kirjanmerkin ominaisuudet päivitetty."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Mene"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Selainsynkronointi oikein: turvallisesti, nimettömästi ja ilmaiseksi! Synkronoi kirjanmerkit selainten ja laitteiden välillä, ilman rekisteröitymistä."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Kirjanmerkkivalikko"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Muut kirjanmerkit"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Kirjanmerkkipalkki"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Lisää kirjanmerkki"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Takaisin"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Peruuta"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Sulje"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Kyllä"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Jatka"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Poista kirjanmerkki"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Ei"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Valmis"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Lataa varmuuskopio"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Muokkaa kirjanmerkkiä"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Käyttöopas"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Seuraava"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Näytä julkaisutiedot"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Tallennetaan"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Asetukset"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Jaa kirjanmerkki"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Kumoa"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Päivitä"
    },
    "View": {
      "key": "Button_View",
      "default": "Näytä"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Älä muokkaa [xbs]-kansioita, koska se voi aiheuttaa synkronointiongelmia."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "xBrowserSync-kansio muuttunut"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Synkronoi olemassa olevalla synkronointitunnuksella, vaihda toiseen palveluun tai yritä huomenna uudelleen."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Päivittäinen uusien synkronointien raja saavutettu"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Jos ongelma jatkuu, <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>ilmoita ongelmasta</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Jokin meni pieleen"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Varmuuskopiointi epäonnistui"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Tiedostojen selaus epäonnistui"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "URL-osoite on virheellinen tai verkkosivun tietojen nouto epäonnistui."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Kirjanmerkin tietojen nouto epäonnistui"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Päivitysten nouto epäonnistui"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Varmuuskopion tiedot eivät ole odotetussa muodossa."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Tietojen palautus epäonnistui"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Synkronoinin on oltava ajan tasalla kirjanmerkin lisäystä varten"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Jaetun kirjanmerkin URL-osoitteen nouto epäonnistui"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Tarkista verkkoyhteytesi ja yritä uudelleen. Jos ongelma jatkuu, ongelma saattaa olla xBrowserSync-palvelussa."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Synkronointi epäonnistui"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Tallennettuja tunnistetietoja ei löytynyt. Ota synkronointi uudelleen käyttöön ja yritä uudelleen."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Tunnistetiedot puuttuvat"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Tarkista, että synkronointitunnus, salasana ja palvelun URL-osoite on syötetty oikein."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Virheelliset tunnistetiedot"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "URL-osoite ei ole kelvollinen xBrowserSync-palvelu."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Virheellinen xBrowserSync-palvelu"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Selaimen profiili on mahdollisesti vioittunut. Uuden profiilin luonti saattaa korjata ongelman."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Odottamaton kirjanmerkkien rakenne"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Paikalliset tiedot on päivitetty. Tee viimeisin muutos uudelleen."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Synkronointivirhe"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Tarkista verkkoyhteys ja yritä uudelleen."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Yhteys katkennut"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Varmista, että olet antanut oikean xBrowserSync-varmuuskopion ennen palautusta."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Palautettavia tietoja ei ole"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Vaihda toiseen palveluun tai yritä myöhemmin uudelleen."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Palvelu ei salli uusia synkronointeja"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Paikalliset tiedot eivät olleet synkronoituneet ja ne on nyt päivitetty. Tee viimeisin muutos uudelleen."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Havaittiin synkronointiristiriita"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Poista kirjanmerkkejä ja yritä uudelleen tai vaihda palveluun, joka sallii enemmän synkronoitavia tietoja."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Synkronointitietojen raja on ylitetty"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Tarkista, että käyttöoikeus on myönnetty ja yritä uudelleen."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Skannaus epäonnistui"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "xBrowserSync-palvelu ei ole tällä hetkellä tavoitettavissa. Yritä myöhemmin uudelleen."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Palvelu ei ole tavoitettavissa"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Jako epäonnistui"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "Synkronointia ei ole olemassa. Se on saatettu poistaa käyttämättömänä."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Synkronointia ei löydy"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Varmuuskopion palautus ei ole mahdollista tällä xBrowserSync-versiolla, koska se on luotu uudemmalla versiolla."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Tunnuksen synkronointi ei ole mahdollista tällä xBrowserSync-versiolla, koska se on päivitetty uudempaan versioon."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Synkronoinnin versiota ei tueta"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Synkronointi on poistettu käytöstä. Ota se uudelleen käyttöön jatkaaksesi synkronointia."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Palvelupyyntöjen raja saavutettu"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Muutokset synkronoidaan kun yhteys on palautettu."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Yhteys katkennut"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Palvelu käyttää rajapinnan versiota, jota ei tueta."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Palvelua ei tueta"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Päivitystä yritetään uudelleen sovelluksen käynnistyessä. Jos ongelma jatkuu, asenna xBrowserSync uudelleen.",
        "default": "Yritä päivitystä uudestaan käynnistämällä selain uudelleen. Jos ongelma jatkuu, asenna xBrowserSync uudelleen."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Päivitys epäonnistui"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Yhteysvirhe"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Tarkistetaan"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Uusia synkronointeja ei sallita"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Ei yhteyttä"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Yhdistetty"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "ei synkronoitu"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "synkronoitu"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "synkronoidaan"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Lisää kirjanmerkki"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Muokkaa kirjanmerkkiä"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Nimi"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "URL-osoite on jo kirjanmerkeissä"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "Virheellinen URL-osoite"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL-osoite"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "URL-osoite vaaditaan"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Kuvaus"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Tunnisteet"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "tunniste 1, tunniste 2, tunniste 3, jne."
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Tyhjennä tunnisteet"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Poista tunniste"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Poista"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Jaa"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Päivitä kirjanmerkin tiedot"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "Jaettu arvo ei sisällä kelvollista URL-osoitetta."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Kirjanmerkin lisäys</h4><p>Lisää nykyinen sivu klikkaamalla kirjanmerkin kuvaketta hakupaneelissa. Kirjanmerkin ominaisuudet täydennetään puolestasi automaattisesti, muuten lisää kuvaus ja joitakin tunnisteita varmistaaksesi paremmat hakutulokset.</p><p>Vaihtoehtoisesti, klikkaa selaimen “Lisää kirjanmerkki” -painiketta normaalisti, niin xBrowserSync täydentää kirjanmerkin ominaisuudet (jotta tämä toimii, on laajennukselle myönnettävä asetuksista käyttöoikeus).</p>",
        "android": "<h4>Kirjanmerkin lisäys</h4><p>Lisää kirjanmerkkejä helposti jakamalla xBrowserSync:iin sovelluksista, joilla voi jakaa URL-osoitteita, kuten selaimista, YouTubesta, Spotifysta ja monesta muusta.</p><p>Kirjanmerkkien ominaisuudet täydennetään puolestasi automaattisesti, muuten lisää kuvaus ja joitakin tunnisteita varmistaaksesi paremmat hakutulokset.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Muista varmuuskopiointi</h4><p>Kun käytät xBrowserSyncia, tietosi ovat omalla vastuullasi, joten ole fiksu ja varmuuskopioi.</p><p>Siirry asetuksiin ja varmuuskopioi salaamattomat tietosi paikalliseen tiedostoon, josta ne on helppo tarvittaessa palauttaa.</p><p>Jos selaimesi paikalliset tiedot vaurioituvat eikä sinulla ole varmuuskopioita, voit milloin tahansa palauttaa tietosi takaisin alkuperäiseen, xBrowserSyncin asennusta edeltävään tilaan.</p>",
        "android": "<h4>Muista varmuuskopiointi</h4><p>Kun käytät xBrowserSyncia tietosi ovat omalla vastuullasi, joten ole fiksu ja varmuuskopioi.</p><p>Siirry asetuspaneeliin ja varmuuskopioi salaamattomat tiedot paikalliseen tiedostoon, jota voidaan käyttää tietojen palauttamiseen, jos tarvetta ilmenee.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Ennen kuin aloitat</h4><p>xBrowserSync muokkaa selaimen tietoja, joten on hyvä idea varmuuskopioida kirjamerkit ja muut selaimen tiedot varmuuden vuoksi. Ja jos käytät muita selaimen synkronointipalveluita tai -työkaluja (kuten <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chromen synkronointia</a>), ole hyvä ja poista ne käytöstä ristiriitojen välttämiseksi.</p>",
        "brave": "<h4>Ennen kuin aloitat</h4><p>xBrowserSync muokkaa selaimen tietoja, joten on hyvä idea varmuuskopioida kirjamerkit ja muut selaimen tiedot varmuuden vuoksi. Ja jos käytät muita selaimen synkronointipalveluita tai -työkaluja (kuten <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Braven synkronointia</a>), ole hyvä ja poista ne käytöstä ristiriitojen välttämiseksi.</p>",
        "edge": "<h4>Ennen kuin aloitat</h4><p>xBrowserSync muokkaa selaimen tietoja, joten on hyvä idea varmuuskopioida kirjamerkit ja muut selaimen tiedot varmuuden vuoksi. Ja jos käytät muita selaimen synkronointipalveluita tai -työkaluja (kuten <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edgen synkronointia</a>), ole hyvä ja poista ne käytöstä ristiriitojen välttämiseksi.</p>",
        "firefox": "<h4>Ennen kuin aloitat</h4><p>xBrowserSync muokkaa selaimen tietoja, joten on hyvä idea varmuuskopioida kirjamerkit ja muut selaimen tiedot varmuuden vuoksi. Ja jos käytät muita selaimen synkronointipalveluita tai -työkaluja (kuten <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefoxin synkronointia</a>), ole hyvä ja poista ne käytöstä ristiriitojen välttämiseksi.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Synkronointi olemassa olevalla synkronointitunnuksella</h4><p>Klikkaa “Oletko jo saanut synkronointitunnuksen?” syöttääksesi nykyisen tunnuksenn ja salasanan. Jos tunnuksesi on luotu eri synkronointipalveluun kuin näytettävään palveluun, vaihda palvelu ennen synkronointia.</p><p>xBrowserSync noutaa ja purkaa salatut tietosi käyttäen paikallisesti tallennettua salasanaa. Tyhjennä paikalliset kirjanmerkit ennen kuin ne täydennetään uudelleen puretuista tiedosta.</p><p>Synkronoinnin jälkeen xBrowserSync tarkistaa taustalla 15 minuutin välein onko tietoihin tullut muutoksia ja päivittää paikalliset kirjanmerkit tarvittaessa. Voit synkronoida saatavilla olevat päivitykset asetuksista myös manuaalisesti.</p>",
        "android": "<h4>Synkronointi olemassa olevalla synkronointitunnuksella</h4><p>Aloita skannaamalla tunnuksen QR-koodi työpöytäselaimesi xBrowserSync-laajennuksen asetuspaneelista (klikkaa tunnusta paljastaaksesi sen). Varmista, että syötät saman salasanan, jota käytettiin synkronoinnin luonnissa tai xBrowserSync ei voi purkaa tietojasi.</p><p>Lisäksi, jos olet synkronoinut tietosi eri xBrowserSync-palveluun, varmista, että se on asetuksissa määritetty aktiiviseksi palveluksi.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Ensimmäinen synkronointi</h4><p>Ennen kuin xBrowserSync voi synkronoida selaimesi tiedot, sinun täytyy määrittää salasana salausta varten. Varmista, että se on vahva ja muistat sen, sillä käytettävissäsi ei ole palautustoimintoja tai muistutuksia, joten jos unohdat sen, et voi käyttää synkronoituja tietoja.</p><p>Selaimesi tiedot salataan salasanalla ja tallennetaan aktiiviseen xBrowserSync-palveluun, joka on määritetty asetuksissa.</p><p>Kun synkronointi on suoritettu, kaikki paikallisiin kirjanmerkkeihin tekemäsi muutokset synkronoidaan automaattisesti xBrowserSyncin toimesta.</p>",
        "android": "<h4>Ensimmäinen synkronointi</h4><p>xBrowserSync synkronoi selaimesi tiedot aktiivisesti työpöytäselainten välillä (synkronointia mobiiliselaimiin ei tueta tällä hetkellä) ja voit käyttää tätä sovellusta päästäksesi käsiksi synkronoituihin tietoihin Android-mobiililaitteessasi.</p><p>Jos et ole vielä luonut synkronointitunnusta, siirry työpöytäselaimeesi ja <a href='https://link.xbrowsersync.org/download' class='new-tab'>lataa</a> xBrowserSync-laajennus. Kun olet luonut synkronoinnin, voit käyttää uutta synkronointitunnustasi tässä sovelluksessa päästäksesi käsiksi tietoihisi.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Lisää tukea</h4><p>Löydät vastaukset yleisimpiin kysymyksiin <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>usein kysytyistä kysymyksistä</a> ja tarkista myös nykyiset <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>tunnetut ongelmat</a> nähdäksesi, onko ongelma listattu siellä.</p><p>Vaihtoehtoisesti, käytä <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>tikettijärjestelmää</a> ilmoittaaksesi ongelmasta tai ehdottaaksesi uusia ominaisuuksia.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Lähde liikkeelle</h4><p>Käytä synkronoituja kirjanmerkkejä liikkeessä xBrowserSyncin Android-sovelluksella, saatavilla <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> kaupasta, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droidista</a> tai <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>suoralla latauksella</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Tukee natiiveja ominaisuuksia</h4><p>Voit jatkaa selaimesi natiivien kirjanmerkkitoimintojen, kuten kirjanmerkkipalkin ja kirjanmerkkien hallinnan käyttöä ja kaikki tekemäsi muutokset synkronoidaan automaattisesti taustalla.</p><p>Jos olet järjestänyt olemassa olevat kirjanmerkit kansioihin, xBrowserSync kunnioittaa ja ylläpitää olemassa olevaa kirjanmerkkihierarkiaasi.</p>",
        "firefox": "<h4>Tukee natiiveja ominaisuuksia</h4><p>Voit jatkaa selaimesi natiivien kirjanmerkkitoimintojen, kuten kirjanmerkkipalkin ja kirjanmerkkien hallinnan käyttöä ja kaikki tekemäsi muutokset synkronoidaan automaattisesti taustalla.</p><p>Jos olet järjestänyt olemassa olevat kirjanmerkit kansioihin, kunnioittaa ja ylläpitää xBrowserSync olemassa olevaa kirjanmerkkihierarkiaasi.</p><p>Huomioithan, että Firefoxin kirjanmerkkirajapinta ei tue vielä selaimen natiivien tunnisteiden käyttöä ja tunnisteet menetetään synkronoinnin yhteydessä, eikä xBrowserSyncin kautta lisättyjä tunnisteita tallenneta natiiveina tunnisteina.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Edellinen"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Etsi kirjanmerkkejäsi</h4><p>Synkronoituasi, paina Enter-näppäintä näyttääksesi viimeisimmät kirjanmerkit tai kirjoita joitakin avainsanoja tai URL-osoite etsiäksesi kirjanmerkkejä.</p><p>Vaihda hakutulosten ja kirjanmerkkikansioiden välillä selataksesi koko hierarkiaa.</p><p>Muokataksesi tai poistaaksesi kirjanmerkin, osoita kirjanmerkkiä ja klikkaa kirjanmerkin nimen viereen ilmestyvää muokkauskuvaketta.</p>",
        "android": "<h4>Etsi kirjanmerkkejäsi</h4><p>Synkronoituasi, näytetään kirjanmerkkisi aikajärjestyksessä kun avaat xBrowserSyncin. Kirjoita hakukenttään joitakin avainsanoja tai URL-osoite etsiäksesi kirjanmerkkejä.</p><p>Vaihda hakutulosten ja kirjanmerkkikansioiden välillä selataksesi koko hierarkiaa.</p><p>Painamalla kirjanmerkkiä pitkään, voit jakaa, muokata tai poistaa sen.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Synkronointi toiseen palveluun</h4><p>Oletusarvoisesti tietosi synkronoidaan <a href='https://link.xbrowsersync.org/api' class='new-tab'>viralliseen xBrowserSync-palveluun</a>, mutta halutessasi voit synkronoida tietosi toiseen xBrowserSync-palveluun vaihtamalla aktiivisen palvelun ennen synkronointia.</p><p>Katso lista saatavilla olevista <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>julkisista xBrowserSync-palveluista</a> tai <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>luo oma palvelusi</a> äärimmäisen turvallisuuden ja tietosuojan takaamiseksi tai jaa se julkisesti, jotta useammat ihmiset voivat nauttia xBrowserSyncistä.</p><p><strong>Tärkeää:</strong> xBrowserSync-palveluiden ylläpitäjät ovat riippumattomia vapaaehtoisia, eivätkä he ota vastuuta tiedoistasi, joten muistathan varmuuskopioida ne säännöllisesti.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Käytä pikanäppäimiä!</h4><p>Etsiäksesi kirjanmerkkejä nopeasti, käytä oletusnäppäinyhdistelmää (Ctrl+Space) aktivoidaksesi laajennuksen ja paina sitten vain Enter tarkastellaksesi viimeaikaisia kirjanmerkkejä tai aloittaaksesi haun kirjoituksen.</p><p>Muuttaaksesi näppäinyhdistelmää, avaa osoite chrome://extension/shortcuts ja muuta xBrowserSyncin alla olevia näppäinyhdistelmiä.</p>",
        "brave": "<h4>Käytä pikanäppäimiä!</h4><p>Etsiäksesi kirjanmerkkejä nopeasti, käytä oletusnäppäinyhdistelmää (Ctrl+Space) aktivoidaksesi laajennuksen ja paina sitten vain Enter tarkastellaksesi viimeaikaisia kirjanmerkkejä tai aloittaaksesi haun kirjoituksen.</p><p>Muuttaaksesi näppäinyhdistelmää, avaa osoite brave://extensions/shortcuts ja muuta xBrowserSyncin alla olevia näppäinyhdistelmiä.</p>",
        "edge": "<h4>Käytä pikanäppäimiä!</h4><p>Etsiäksesi kirjanmerkkejä nopeasti, käytä oletusnäppäinyhdistelmää (Ctrl+Space) aktivoidaksesi laajennuksen ja paina sitten vain Enter tarkastellaksesi viimeaikaisia kirjanmerkkejä tai aloittaaksesi haun kirjoituksen.</p><p>Muuttaaksesi näppäinyhdistelmää, avaa osoite edge://extensions/shortcuts ja muuta xBrowserSyncin alla olevia näppäinyhdistelmiä.</p>",
        "firefox": "<h4>Käytä pikanäppäimiä!</h4><p>Etsiäksesi kirjanmerkkejä nopeasti, käytä oletusnäppäinyhdistelmää (Ctrl+Space) aktivoidaksesi laajennuksen ja paina sitten vain Enter tarkastellaksesi viimeaikaisia kirjanmerkkejä tai aloittaaksesi haun kirjoituksen.</p><p>Muuttaaksesi näppäinyhdistelmää, avaa osoite about:addons, napsauttamalla asetusvalikosta (kulman rataskuvake) “Hallitse laajennusten pikänäppäimiä” ja muuta xBrowserSyncin alla olevia näppäinyhdistelmiä.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Synkronointitunnuksesi</h4><p>xBrowserSync takaa yksityisyytesi, koska henkilökohtaisia tietoja ei koskaan kerätä ja selaimesi tiedot salataan jo ennen synkronointia. Synkronoidut tiedot tunnistetaan saamallasi nimettömällä synkronointitunnuksella, jota voidaan käyttää yhdessä salasanan kanssa tietojen synkronointiin muiden selainten ja laitteiden välillä.</p><p>Muista, että tunnuksesi toimii vain sen xBrowserSync-palvelun kanssa, jolle se on luotu ja jos vaihdat toiseen xBrowserSync-palveluun sinun on luotava uusi synkronointi tai käytettävä olemassa olevaa tunnusta, jota olet aiemmin käyttänyt kyseisen palvelun kanssa.</p><p>Aina kun synkronointi on käytössä, voit tarkastella tunnustasi asetuksissa. Klikkaa sitä paljastaaksesi kätevän QR-koodin, jonka voit skannata synkronoidaksesi mobiililaitteita.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Tervetuloa xBrowserSynciin!</h4><p>xBrowserSync on ilmainen avoimen lähdekoodin vaihtoehto Googlen, Mozillan, Operan ja muiden tarjoamille selaimen synkronointipalveluille. xBrowserSync kunnioittaa yksityisyyttäsi ja antaa sinulle täydellisen anonymiteetin (tutustu <a href='https://link.xbrowsersync.org/www' class='new-tab'>sivustoon</a> saadaksesi lisätietoja).</p><p>Käytä hetki lukeaksesi tämä opas läpi tutustuaksesi xBrowserSync-palveluun. Käytä alla olevia hakulinkkejä tai nuolinäppäimiä liikkuaksesi sivujen välillä.</p><p>Huomaa: xBrowserSync synkronoi tällä hetkellä vain kirjanmerkkejä. Selaimen muiden tietojen synkronointi lisätään tulevaisuudessa, tutustu <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>kehityssuunnitelmaan</a> nähdäksesi mitä on tulossa.</p>",
        "android": "<h4>Tervetuloa xBrowserSynciin!</h4><p>xBrowserSync on ilmainen ja avoimen lähdekoodin vaihtoehto Googlen, Mozillan, Operan ja muiden tarjoamille selaimen synkronointipalveluille. xBrowserSync kunnioittaa yksityisyyttäsi ja antaa sinulle täydellisen anonymiteetin (tutustu <a href='https://link.xbrowsersync.org/www' class='new-tab'>sivustoon</a> saadaksesi lisätietoja).</p><p>Käytä hetki lukeaksesi tämä opas läpi tutustuaksesi xBrowserSynciin. Käytä alla olevia linkkejä tai pyyhkäise näyttöä liikkuaksesi sivujen välillä.</p><p>Huomaa: xBrowserSync synkronoi tällä hetkellä vain kirjanmerkkejä. Selainten muiden tietojen synkronointi lisätään tulevaisuudessa, tutustu <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>kehityssuunnitelmaan</a> nähdäksesi mitä on tulossa.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Tarvitsetko synkronointitunnuksen?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Käyttääksesi kirjanmerkkejäsi täällä, lataa xBrowserSync-laajennus työpöytäselaimeesi ja luo uusi synkronointi."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Vahvista salasana"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Salasanasi"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Salasana"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Syötä salasana"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Näytä salasana"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Yhdistä synkronointiisi"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Avaa xBrowserSync työpöytäselaimessa, siirry sen asetuksiin ja klikkaa synkronointitunnustasi näyttääksesi QR-koodin, jonka voit skannata tässä."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Skannaa koodi"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Syötä synkronointitiedot itse"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "API-versio"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Synkronoi tähän palveluun?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Sijainti"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Synkronoinnin maksimikoko"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Palveluun"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Tila"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSync-palvelun URL"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Syötä vaihtoehtoisen xBrowserSync-palvelun URL-osoite. Selaa luetteloa julkisista xBrowserSync-palveluista <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>täällä</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Vaihda palvelua"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "URL-osoite vaaditaan"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Virheellinen xBrowserSync-palvelu"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Virheellinen URL-osoite"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Palveluun ei saatu yhteyttä"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Palvelu käyttää API-versiota, jota ei tueta"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Tärkeää:</strong> xBrowserSync-palveluiden ylläpitäjät ovat riippumattomia vapaaehtoisia, eivätkä he ota vastuuta tiedoistasi, joten muistathan varmuuskopioida ne säännöllisesti."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Oletko varma?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync poistaa kaikki paikalliset kirjanmerkit ennen synkronoitujen tietojen palauttamista. Jatketaanko?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Poista kirjanmerkkien synkronointityökalut käytöstä"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Selaimesi tietojen synkronointi xBrowserSyncin kanssa muiden synkronointityökalujen (kuten <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chromen synkronointi</a>) ollessa aktiivisena saattaa aiheuttaa ristiriitoja ja mahdollisesti vaurioituneita tietoja. Poista ne käytöstä ennen kuin jatkat.",
            "brave": "Selaimesi tietojen synkronointi xBrowserSyncin kanssa muiden synkronointityökalujen (kuten <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Braven synkronointi</a>) ollessa aktiivisena saattaa aiheuttaa ristiriitoja ja mahdollisesti vaurioituneita tietoja. Poista ne käytöstä ennen kuin jatkat.",
            "edge": "Selaimesi tietojen synkronointi xBrowserSyncin kanssa muiden synkronointityökalujen (kuten <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Edgen synkronointi</a>) ollessa aktiivisena saattaa aiheuttaa ristiriitoja ja mahdollisesti vaurioituneita tietoja. Poista ne käytöstä ennen kuin jatkat.",
            "firefox": "Selaimesi tietojen synkronointi xBrowserSyncin kanssa muiden synkronointityökalujen (kuten <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefoxin synkronointi</a>) ollessa aktiivisena saattaa aiheuttaa ristiriitoja ja mahdollisesti vaurioituneita tietoja. Poista ne käytöstä ennen kuin jatkat."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Synkronoi"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Luo uusi synkronointi"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Valmis päivittämään synkronoinnin?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Synkronointisi on päivitettävä ennen kuin sitä voidaan käyttää tämän xBrowserSync-version kanssa. Päivityksen jälkeen et enää voi synkronoida aiempien versioiden kanssa.</p><p>Varmista, että olet päivittänyt kaikki xBrowserSync asennuksesi ennen kuin jatkat. Jatketaanko?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Päivitä synkronointi"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Synkronointi on päivitettävä ennen kuin sitä voidaan käyttää tämän xBrowserSync-version kanssa.</p><p>Päivitä synkronointi käyttäen työpöytäselaimen xBrowserSync-laajennusta ja yritä synkronointia sitten täällä uudelleen.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Synkronointitunnuksesi"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Onko sinulla jo synkronointitunnus?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Virheellinen synkronointitunnus"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "Synkronointitunnus"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Hanki tunnus"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Valinnaiset käyttöoikeudet"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync täydentää selaimen \"Lisää kirjanmerkki\" -painikkeella lisättyjä kirjanmerkkejä automaattisesti käytettävissä olevilla metatiedoilla. Tämän ottamiseksi käyttöön xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>tarvitsee lisää käyttöoikeuksia</a>, jotta se voi lukea vierailtujen sivustojen tietoja.</p><p>Jos haluat, hyväksy nämä oikeudet pyydettäessä tai vaihtoehtoisesti voit milloin tahansa lisätä ja poistaa käyttöoikeuksia asetuksista.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Skannaa synkronointitunnuksesi QR-koodi"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Kytke valo"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Näytä kirjanmerkkikansiot"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Tyhjennä"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Kansio on tyhjä"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Sinulla ei ole kirjanmerkkejä, joten lisää muutama!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Kirjanmerkkejä ei löytynyt"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Paina Enter tai etsi kirjanmerkkejä",
        "android": "Etsi kirjanmerkkejä"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Vedä alas synkronoidaksesi"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Vapauta synkronoidaksesi"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Näytä hakutulokset"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Varmuuskopiointi ja palautus"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Automaattinen varmuuskopiointi"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Lataa varmuuskopiot automaattisesti ajoitetusti."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Varmuuskopiointi suoritetaan"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "joka"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "yksi"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "toinen"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "kolmas"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "neljäs"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "viides"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "kuudes"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "seitsemäs"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "kahdeksas"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "yhdeksäs"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "kymmenes"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "yhdestoista"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "kahdestoista"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "päivä"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "viikko"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "kuukausi"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Estääksesi “Tallenna nimellä...” -ikkunan näytön ladattaessa varmuuskopioita, poista käytöstä selaimen “Kysy aina tiedoston tallennuskansio” -asetus."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Varmuuskopiointi"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Lataa varmuuskopio"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Varmuuskopioi selaimen paikalliset tiedot tiedostoon."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Varmuuskopioi synkronoidut tiedot tiedostoon."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Palautus"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Palauta varmuuskopiosta"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Palauta selaimen paikalliset tiedot varmuuskopiosta."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Koska synkronointi ei ole tällä hetkellä käytössä, palautettavat tiedot korvaavat selaimen paikalliset tiedot.</p><p>Jatketaanko?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Palauta synkronoidut tiedot varmuuskopiosta."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Koska synkronointi on tällä hetkellä käytössä, palautettavat tiedot korvaavat synkronoidut tiedot.</p><p>Palauttaaksesi tiedot vain paikalliseen selaimeen, poista synkronointi käytöstä ennen palautusta.</p><p>Jatketaanko?</p>",
              "android": "<p>Palautettavat tiedot korvaavat synkronoidut tiedot.</p><p>Jatketaanko?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Varmuuskopio on palautettu."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Valitse tiedosto"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Valitse palautettava tiedosto"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Kopioi varmuuskopiotiedoston sisältö palauttaaksesi tiedot."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Liitä varmuuskopion tiedot"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Palauta tiedot"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Virheelliset xBrowserSync-varmuuskopion tiedot"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Jos jatkat, synkronointi poistetaan käytöstä ja selaimesi tiedot palautetaan xBrowserSyncin alkuperäiseen asennuspäivään {date}.</p>\n<p>Jatketaanko?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Palauta paikalliset tiedot"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Selaimen paikalliset tiedot on palautettu alkuperäiseen asennustilaan."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Asennuksen tilasta ei ole tietoa, eikä palautus onnistu."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Ohje ja tuki"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Käyttöopas"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Onko sinulla kysymyksiä tai ongelmia? Tutustu käyttöoppaaseen tai etsi vastausta usein kysytyistä kysymyksistä."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "UKK"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Tuki"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Tarvitsetko tukea? Ongelmaseurannassa voit tehdä virheilmoituksia tai kehitysehdotuksia."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Ongelmaseuranta"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Sovelluksen loki"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Lataa ja sisällytä sovelluksen loki kun ilmoitat ongelmasta."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Tyhjennä"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Lataa loki"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Lokitietojen koko"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Valinnaiset käyttöoikeudet"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Myönnä oikeudet"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Myönnetty"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Ei myönnetty"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Lue sivuston tiedot"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Vaaditaan automaattista kirjanmerkkien metatietojen täyttöä varten käytettäessä selaimen “Lisää kirjanmerkkeihin” -painiketta (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>lisätietoja</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Poista oikeudet"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Nouda kirjanmerkkien metatiedot automaattisesti"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Nouda metatiedot automaattisesti kun kirjanmerkki lisätään."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Tarkista päivitykset"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Ilmoita kun uusi xBrowserSync-versio on saatavilla."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Tumma teema"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ihanteellinen heikosti valaistuissa olosuhteissa."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Kirjanmerkkikansiot"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Näytä kirjanmerkkikansiot oletuksena."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Vaihda hakupalkin sijaintia"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Näytä hakupalkki tulosten alla."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Synkronoi kirjanmerkkipalkki"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Poista tämä asetus käytöstä näyttääksesi synkronoitujen selainten kirjanmerkkipalkeissa selainkohtaiset kirjanmerkit."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Tämän asetuksen käyttöönotto korvaa kirjanmerkit, jotka ovat tällä hetkellä kirjanmerkkipalkissasi.</p><p>Jatketaanko?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Käytä telemetriaa"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Lähetä toisinaan nimettömiä teknisiä tietoja xBrowserSyncin parantamiseksi."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Asetukset"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Synkronointi"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Poista käytöstä"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "Synkronointitunnus"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Käytä synkronointitunnustasi yhdistääksesi muiden laitteiden synkronoituihin tietoihin (klikkaa näyttääksesi QR-koodin)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Tilan käyttö"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Kuinka paljon palvelun sallimasta tallennuskapasiteetista on käytössäsi."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Palvelu"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Sykronoitu viimeksi {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Valmis synkronointiin (ajastettu päivälle {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Synkronoi nyt"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Skannaa tämä QR-koodi xBrowserSyncin Android-sovelluksesta yhdistääksesi synkronoituihin tietoihisi."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Näytä QR-koodi"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Kopioi synkronointitunnus leikepöydälle"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Kopioitu!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Asetukset ovat käytettävissä synkronoinnin ollessa käytössä."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Tiedosto tallennettiin latauskansioon"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Tue xBrowserSynciä"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Tue xBrowserSynciä!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Haluamme tehdä xBrowserSyncistä parhaan selaimen synkronointityökalun, mutta tämä vaatii vielä paljon lisättävää:</p><ul><li>Selaimen välilehtien ja historian synkronointi</li><li>Tuki merkittävimmille työpöytäselaimille</li><li>Käännökset muille kielille</li><li>Ja <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>paljon muuta</a>!</li></ul><p>Vain sinun tuellasi voimme jatkaa xBrowserSyncin kehitystä ja varmistamme, että se on jatkossakin tehokas työkalu yksityisyyden suojaukseen sekä tuottavuuden parantamiseen!</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Kryptovaluutat"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Synkronointia ei löydy"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Synkronointiasi ei löydy ja se on saatettu poistaa käyttämättömänä.</p><p>Sinun on luotava uusi synkronointi. Jos haluat säilyttää tietosi, tallenna varmuuskopio synkronoiduista tiedoistasi klikkaamalla alla olevaa painiketta ja lopuksi palauta varmuuskopio uuteen synkronointiisi.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Lähetetäänkö anonyymiä telemetriaa?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync on toisin kuin perinteiset sovellukset, koska se on täysin anonyymi, yksityisyyden etusijalla oleva työkalu. Tällaisen työkalun ylläpito on haastavaa, koska meillä ei ole pääsyä käyttäjätietoihin, jotka auttaisivat määrittämään, kuinka rajalliset resurssit voidaan parhaiten hyödyntää. Siksi pyydämme lupaasi lähettää ajoittain nimettömiä teknisiä tietoja auttaaksemme meitä parantamaan xBrowserSynciä.</p><p>Nämä telemetriatiedot eivät sisällä henkilökohtaisia tai tunnistavia tietoja, eivätkä ne sisällä mitään salattuja synkronointitietojasi, eikä niitä koskaan ole. jaettu kolmansien osapuolten kanssa (voit ottaa käyttöön tai poistaa sen käytöstä milloin tahansa Asetukset-paneelissa).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Päivitetty versioon"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync on päivitetty uusimmilla ominaisuuksilla ja korjauksilla.</p></p>Jos synkronointi oli käytössä, on se nyt poistettu käytöstä ja ennen synkronointia tämän xBrowserSync-version kanssa, on synkronointisi päivittettävä. Kytke synkronointi uudelleen käyttöön viimeistelläksesi päivityksen.</p><p>Jos haluat lisätietoja tämän julkaisun muutoksista, tutustu julkaisutietoihin.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Palautetaan"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Palautetaan"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Synkronoidaan"
      }
    }
  }
}
</file>

<file path="res/strings/fr.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "Mise à jour xBrowserSync disponible"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} est disponible. Cliquez pour plus d'informations.",
        "android": "xBrowserSync {version} est disponible."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Mise à jour vers"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xbrowserSync a été mis à jour. La synchronisation a été désactivé, réactivez la pour terminer le processus de mise à jour."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Favori créé"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Favori supprimé"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Favori mis à jour"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Récupération des propriétés du favori, appuyez pour annuler."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Propriétés du favori mises à jour."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Aller à"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Synchronisation du navigateur telle qu'elle devrait être : sécurisée, anonyme et gratuite ! Synchronisez les favoris à travers vos navigateurs et appareils. Pas d'inscription."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Menu des favoris"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Autres favoris"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Favoris de la barre d'outils"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Ajouter un marque-page"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Retour"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Annuler"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Fermer"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Oui"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Continuer"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Supprimer le marque-page"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Non"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Effectué"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Télécharger une sauvegarde"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Modifier le marque-page"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Voir le guide d'aide"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Suivant"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Voir les notes de version"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Enregistrement"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Réglages"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Partager le favori"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Annuler"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Mise à jour"
    },
    "View": {
      "key": "Button_View",
      "default": "Afficher"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Veuillez éviter de modifier les dossiers [xbs]; cela peut causer des problèmes de synchronisation."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "Le dossier xBrowserSync a été modifié"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Synchroniser avec un identifiant existant, basculer vers un autre service ou réessayer demain."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Limite de synchronisation quotidienne atteinte"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Si le problème persiste, veuillez <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>signaler le problème</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Une erreur s’est produite"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Échec de la sauvegarde"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Échec de la navigation dans les fichiers"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "L'URL est invalide ou les données de la page Web n'ont pu être récupérées."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Impossible d'obtenir les propriétés du favori"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Impossible de récupérer les mises à jour"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Les données de sauvegarde fournies ne sont pas au format attendu."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Restauration des données impossible"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Vous devez être synchronisé pour ajouter un favori"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Impossible de récupérer l'URL du favori partagé"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Vérifiez votre connexion réseau et réessayez. Si le problème persiste, il pourrait y avoir un problème avec le service xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Échec de la synchronisation"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Impossible de trouver les identifiants enregistrés. Réactivez la synchronisation et réessayez."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Identifiants manquants"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Vérifiez que votre identifiant, votre mot de passe et l'URL du service ont été saisis correctement."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Identifiants non valides"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "L'URL de service n'est pas un service xBrowserSync valide."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Service xBrowserSync non valide"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Le profil du navigateur est peut-être corrompu. Un nouveau profil peut résoudre le problème."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Structure des favoris imprévue"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Les données locales du navigateur ont été actualisées, merci de renouveler votre dernière modification."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Erreur de synchronisation"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Vérifiez votre connexion réseau et réessayez."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Connexion perdue"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Assurez-vous d'avoir fourni une sauvegarde xBrowserSync valide avant de restaurer."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Aucune donnée à restaurer"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Passez à un autre service ou réessayez plus tard."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Service n'acceptant pas de nouvelles synchronisations"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Les données locales étaient désynchronisées et ont été actualisées. Veuillez réappliquer le dernier changement."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Conflit détecté"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Supprimez des marque-pages et réessayez ou sélectionnez un service avec une plus grande limite de synchronisation."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Limite de synchronisation des données dépassée"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Vérifiez les autorisations et réessayez."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Échec de l'analyse"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "Le service xBrowserSync est actuellement hors-ligne. Veuillez réessayer plus tard."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Service hors ligne"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Échec du partage"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "La synchronisation demandée n'existe pas. Elle a peut-être été supprimée pour inactivité."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Synchronisation introuvable"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "La sauvegarde ne peut pas être restaurée par cette version de xBrowserSync car elle a été créée avec une version ultérieure."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Cet ID ne peut pas être synchronisé avec cette version de xBrowserSync car la synchronisation a été mise à jour vers une version plus récente."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Version de synchronisation non prise en charge"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "La synchronisation a été désactivée. Réactivez-la pour reprendre la reprendre."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Limite de requête de service atteinte"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Les modifications seront synchronisées une fois la connexion rétablie."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Connexion perdue"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Ce service exécute une version d'API non prise en charge."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Service non pris en charge"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "La mise à jour sera retentée au redémarrage de l’application. Si le problème persiste, veuillez alors réinstaller xBrowserSync.",
        "default": "Redémarrez votre navigateur pour réessayer la mise à jour. Si le problème persiste, veuillez réinstaller xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Échec de la mise à jour"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Erreur de connexion"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Vérification"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Nouvelles synchronisations non acceptées"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Déconnecté"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Connecté"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "non synchronisé"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "synchronisé"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "synchronisation en cours"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Ajouter un marque-page"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Modifier le marque-page"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Titre"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "L'URL a déjà un marque-pages"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "URL non valide"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "Une URL est requise"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Description"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Tags"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "tag 1, tag 2, tag 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Effacer les tags"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Supprimer le tag"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Effacer"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Partager"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Mettre à jour les propriétés du favori"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "La valeur partagée ne contient pas d'URL valide."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Ajout d'un signet</h4><p>Sauvegardez la page actuelle en cliquant sur l'icône de signet dans le panneau de recherche. Les propriétés du favori seront remplies automatiquement pour vous, sinon ajoutez une description et quelques balises pour assurer de meilleurs résultats de recherche.</p><p>Sinon, cliquez simplement sur le bouton “Marquer cette page” du navigateur comme normal et xBrowserSync remplira automatiquement les propriétés du signet (les autorisations facultatives doivent être accordées pour que cela fonctionne, vérifiez le panneau Paramètres).</p>",
        "android": "<h4>Ajout d'un signet</h4><p>Ajoutez facilement des signets en partageant sur xBrowserSync à partir de toutes les applications qui partagent des URL tels que navigateurs, YouTube, Spotify et bien plus encore.</p><p>Les propriétés du favori seront récupérées pour vous, sinon ajoutez une description et quelques balises pour assurer de meilleurs résultats de recherche.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>N'oubliez pas de faire des sauvegardes</h4><p>Lorsque vous utilisez xBrowserSync vos données sont de votre responsabilité, alors soyez vigilant et assurez-vous de faire des sauvegardes.</p><p>Rendez-vous sur le panneau Paramètres et sauvegardez vos données non chiffrées dans un fichier local qui peut être utilisé pour restaurer vos données si vous en avez besoin.</p><p>Si les données de votre navigateur local sont corrompues et que vous n'avez aucune sauvegarde, vous pouvez à tout moment rétablir l'état d'origine de vos données depuis l'installation de xBrowserSync.</p>",
        "android": "<h4>N'oubliez pas de faire une sauvegarde</h4><p>Lorsque vous utilisez xBrowserSync, vos données sont de votre responsabilité, alors soyez intelligent et assurez-vous de faire des sauvegardes.</p><p>Rendez-vous dans les Paramètres et sauvegardez vos données dans un fichier local non chiffrées qui peut être utilisé pour restaurer vos données si vous en avez besoin.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Avant de commencer</h4><p>xBrowserSync modifie les données de votre navigateur local, c'est donc une bonne idée de sauvegarder vos signets et autres données de navigateur au cas où, et si vous utilisez d'autres services ou outils de synchronisation de navigateur (comme <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>La synchronisation de Google Chrome</a>), veuillez les désactiver pour éviter les conflits.</p>",
        "brave": "<h4>Avant de commencer</h4><p>xBrowserSync modifie les données de votre navigateur local, c'est donc une bonne idée de sauvegarder vos signets et autres données de navigateur au cas où, et si vous utilisez d'autres services ou outils de synchronisation de navigateur (comme <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) veuillez les désactiver pour éviter les conflits.</p>",
        "edge": "<h4>Avant de commencer</h4> <p> xBrowserSync modifie les données de votre navigateur local, c'est donc une bonne idée de sauvegarder vos signets et autres données de navigateur au cas où, et si vous utilisez d'autres services ou outils de synchronisation de navigateur (comme <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>la synchronisation de Microsoft Edge</a>) veuillez les désactiver pour éviter les conflits.</p>",
        "firefox": "<h4>Avant de commencer</h4> <p>xBrowserSync modifie les données de votre navigateur local, c'est donc une bonne idée de sauvegarder vos signets et autres données de navigateur au cas où, et si vous utilisez d'autres services ou outils de synchronisation de navigateur (comme <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'> Firefox Sync</a>), veuillez les désactiver pour éviter les conflits.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "Synchronisation avec votre identifiant Cliquez sur \"J'ai déjà un ID\" pour vous connecter avec vos identifiants. Si vos identifiants ont été créé via un service différent a celui affiché, alors changez pour ce service avant d'essayer de synchroniser vos données. xBrowserSync va essayer de retrouver et décrypter vos données cryptées en utilisant votre mot de passe stocké localement. Quand la synchronisation est terminée, xBrowserSync vérifie toutes les quinze minutes vos données et synchronise automatiquement vos favoris locaux si nécessaire. Vous pouvez aussi manuellement synchroniser vos données dans le menu Paramètres",
        "android": "Synchronisation avec votre ID. Commencez par scanner le QR code dans le menu Paramètres de votre extension de navigateur (Cliquez sur votre ID pour l'afficher). Assurez vous d'inscrire le même mot de passe crypté utilisé lors de la création de la synchronisation sinon xBrowserSync ne sera pas capable de décrypter vos données. Par ailleurs, si vous êtes synchronisé avec un service xBrowserSync différent, assurez vous de choisir le service actif dans le menu Paramètres"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "Première synchronisation. Avant que xBrowserSync puisse synchroniser vos données vous devez choisir un mot de passe. Assurez vous qu'il soit fort mais mémorisable, il n'y a pas de réinitialisation de mot de passe ni d'aide, par conséquent, si vous perdez votre mot de passe, vous perdrez l'accès à vos données synchronisées. Vos données de navigateur seront cryptées et sauvegardées sur le serveur choisi dans le menu Paramètres. Une fois synchronisé, chaque changement que vous ferez dans votre navigateur sera synchronisé automatiquement par xBrowserSync",
        "android": "<h4>Première synchronisation</h4><p>xBrowserSync synchronise activement les données de votre navigateur entre vos navigateurs de bureau (la synchronisation avec les navigateurs mobiles n'est pas prise en charge pour le moment), vous pouvez utiliser cette application pour accéder à vos données synchronisées sur votre appareil mobile Android.</p><p>Si vous n'avez pas déjà créé d'ID, rendez-vous sur votre navigateur de bureau et <a href='https://link.xbrowsersync.org/download' class='new-tab'>téléchargez</a> l'extension xBrowserSync. Une fois que vous avez créé une synchronisation, vous pouvez utiliser votre nouvel ID de synchronisation dans cette application pour accéder à vos données.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Assistance supplémentaire</h4><p>Vous pouvez trouver les réponses aux questions les plus courantes dans la <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>FAQ</a>, vérifiez également les <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>problèmes connus</a> actuels pour voir s'il y est répertorié.</p><p>Sinon, utilisez le <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>gestionnaire de tickets</a> pour signaler un problème ou demander une nouvelle fonctionnalité.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Passez au mobile </h4><p>Accédez à vos favoris synchronisés lors de vos déplacements avec l'application xBrowserSync Android, disponible sur <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> store, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> ou en <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>téléchargement direct</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Fonctionnalités natives prises en charge</h4> <p>N'hésitez pas à continuer à utiliser les fonctionnalités natives de création de favoris de votre navigateur, telles que la barre de favoris et le gestionnaire de favoris, toutes les modifications que vous apportez seront automatiquement synchronisées en arrière-plan.</p><p>Si vous avez organisé vos signets existants dans des dossiers, ne vous inquiétez pas, xBrowserSync respectera et maintiendra votre hiérarchie de signets existante.</p>",
        "firefox": "<h4>Fonctionnalités natives prises en charge</h4><p>N'hésitez pas à continuer à utiliser les fonctionnalités de favoris natifs de votre navigateur, telles que la barre d'outils et la bibliothèque de favoris, les modifications que vous apporterez seront automatiquement synchronisées en arrière-plan.</p><p>Si vous avez organisé vos favoris existants en dossiers, ne vous inquiétez pas, xBrowserSync respectera et maintiendra votre hiérarchie de existante.</p><p>Veuillez toutefois noter que l'API de Firefox ne supporte pas encore l'accès aux favoris natifs, toutes les balises existantes seront perdues lors de la synchronisation et les balises ajoutées via xBrowserSync ne seront pas enregistrées comme balises natives.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Précédent"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Recherche de vos favoris</h4><p>Une fois synchronisés, appuyez simplement sur Entrée pour afficher vos favoris récents ou tapez quelques mots-clés ou une URL pour rechercher vos favoris.</p><p>Basculer entre les résultats de recherche et les répertoires de favoris pour naviguer dans toute la hiérarchie.</p><p>Pour modifier ou supprimer un favoris, survolez-le et cliquez sur l'icône d'édition maintenant visible à côté du titre du favori.</p>",
        "android": "<h4>Recherche dans vos favoris</h4><p>Une fois synchronisés, vos favoris sont affichés dans l'ordre chronologique lorsque vous ouvrez xBrowserSync. Tapez des mots-clés ou une URL dans la zone de recherche pour rechercher vos signets.</p><p>Basculer entre les résultats de recherche et les répertoires de favoris pour naviguer dans la hiérarchie entière.</p><p>Un appui long sur un favori vous permettra de partager, modifier ou supprimer directement le favori</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Synchronisation vers un autre service</h4><p>Par défaut, vos données sont synchronisées au <a href='https://link.xbrowsersync.org/api' class='new-tab'>service officiel xBrowserSync</a>, Cependant, si vous souhaitez synchroniser vos données avec un autre service xBrowserSync vous pouvez changer le service actif avant de synchroniser.</p><p>Vérifiez la liste des <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>services publics xBrowserSync</a> ou <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>exécutez votre propre service</a>, soit pour un usage privé pour une sécurité et une confidentialité ultimes, soit pour une utilisation publique afin que plus de personnes puissent profiter de xBrowserSync.</p><p><strong>Important :</strong> les services xBrowserSync sont gérés de façon indépendante par des volontaires. L'administrateur du service n'assume aucune responsabilité pour vos données alors n'oubliez pas de sauvegarder régulièrement.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Utilisez des raccourcis !</h4><p>Pour rechercher vos favoris rapidement, utilisez le raccourci clavier par défaut (Ctrl+Espace) pour activer l'extension, puis appuyez simplement sur Entrée pour voir vos signets récents ou commencez à taper pour rechercher.</p><p>Pour changer le raccourci, naviguez sur chrome://extensions/raccourcis et mettez à jour les raccourcis disponibles sous xBrowserSync.</p>",
        "brave": "<h4>Utilisez des raccourcis !</h4><p>Pour rechercher vos favoris rapidement, utilisez le raccourci clavier par défaut (Ctrl+Espace) pour activer l'extension, puis appuyez simplement sur Entrée pour voir vos favoris récents ou commencez à taper pour rechercher.</p><p>Pour changer le raccourci, naviguez jusqu'à brave://extensions/raccourcis et mettez à jour les raccourcis disponibles sous xBrowserSync.</p>",
        "edge": "<h4>Utilisez des raccourcis !</h4><p>Pour rechercher vos favoris rapidement, utilisez le raccourci clavier par défaut (Ctrl+Espace) pour activer l'extension, puis appuyez simplement sur Entrée pour voir vos favoris récents ou commencez à taper pour rechercher.</p><p>Pour changer le raccourci, naviguez jusqu'à edge://extensions/raccourcis et mettez à jour les raccourcis disponibles sous xBrowserSync.</p>",
        "firefox": "<h4>Utilisez des raccourcis !</h4><p>Pour rechercher vos favoris rapidement, utilisez le raccourci clavier par défaut (Ctrl+Espace) pour activer l'extension, puis appuyez simplement sur Entrée pour voir vos signets récents ou commencez à taper pour rechercher.</p><p>Pour modifier le raccourci, naviguez sur about:addons, cliquez sur « Gérer les raccourcis d'extension » dans le menu Paramètres et mettez à jour les raccourcis disponibles sous xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Votre ID de synchronisation</h4><p>xBrowserSync garantit votre vie privée car aucune donnée personnelle n'est jamais collectée et les données de votre navigateur sont chiffrées avant d'être synchronisées. Pour identifier vos données synchronisées, vous disposez d'un identifiant de synchronisation anonyme qui peut être utilisé avec votre mot de passe pour synchroniser vos données sur d'autres navigateurs et appareils.</p><p>N'oubliez pas que votre ID de synchronisation ne fonctionnera qu'avec le service xBrowserSync sur lequel il a été créé, si vous passez à un service xBrowserSync différent, vous devez créer une nouvelle synchronisation ou utiliser un ID de synchronisation existant créé lors de la dernière synchronisation avec ce service.</p><p>À chaque fois que vous êtes synchronisé, vous pouvez voir votre ID de synchronisation dans le panneau Paramètres, cliquez dessus pour révéler un code QR pratique à scanner lors de la synchronisation sur les appareils mobiles.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Bienvenue dans xBrowserSync!</h4><p>xBrowserSync est une alternative gratuite et open-source aux services de synchronisation de navigateur offerts par Google, Mozilla, Opera et autres, qui respecte votre vie privée et vous donne un anonymat complet (consultez le<a href='https://link.xbrowsersync.org/www' class='new-tab'> site Web </a>pour plus d'informations).</p><p>Prenez un moment pour lire le guide d'aide pour vous familiariser avec xBrowserSync, en utilisant les liens ci-dessous ou les touches fléchées pour vous déplacer entre les pages. </p> <p> Remarque: xBrowserSync ne synchronise actuellement que les signets. La synchronisation des données supplémentaires du navigateur sera ajoutée dans les versions futures, consultez la<a href='https://link.xbrowsersync.org/roadmap' class='new-tab'> roadmap</a> pour voir ce qui est prévu .</p>",
        "android": "<h4>Bienvenue dans xBrowserSync!</h4><p> xBrowserSync est une alternative gratuite et open-source aux services de synchronisation de navigateur offerts par Google, Mozilla, Opera et autres, qui respecte votre vie privée et vous donne un anonymat complet (consultez le<a href='https://link.xbrowsersync.org/www' class='new-tab'> site Web </a>pour plus d'informations).</p><p>Prenez un moment pour lire le guide d'aide pour vous familiariser avec xBrowserSync, en utilisant les liens ci-dessous ou en glissant pour vous déplacer entre les pages. </p><p> Remarque: XbrowserSync ne synchronise actuellement que les signets. La synchronisation des données supplémentaires du navigateur sera ajoutée dans les versions futures, consultez la<a href='https://link.xbrowsersync.org/roadmap' class='new-tab'> roadmap</a> de développement pour voir ce qui est prévu .</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Besoin d'un identifiant ?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Téléchargez xBrowserSync pour navigateur de bureau et créez une nouvelle synchronisation pour accéder à vos favoris ici."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Confirmer le mot de passe"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Votre mot de passe de chiffrement"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Mot de passe de chiffrement"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Saisissez un mot de passe de chiffrement"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Afficher le mot de passe"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Accès au compte"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Ouvrir xBrowserSync sur votre navigateur de bureau, allez dans le panneau Paramètres et cliquez sur votre identifiant de synchronisation pour afficher un code QR."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Scanner le code"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Saisir les détails de la synchronisation manuellement"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Version de l'API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Synchroniser avec ce service ?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Emplacement"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Taille maximale de synchronisation"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Synchronisation vers"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Statut"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "URL du service xBrowserSync"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Entrez l'URL d'un autre service xBrowserSync. Parcourez la liste des services xBrowserSync publics <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>ici</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Changer de service"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "Une URL est requise"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Ce n'est pas un service xBrowserSync valide"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "URL non valide"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Impossible de se connecter au service"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Ce service exécute une version d'API non prise en charge"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Important:</strong> xBrowserSync est géré indépendamment par des bénévoles. L'administrateur du service n'assume aucune responsabilité pour vos données, alors n'oubliez pas de les sauvegarder régulièrement."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Êtes-vous certain ?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync supprimera toutes les données locales liées aux marque-pages avant de restaurer les marque-pages synchronisés. Voulez-vous continuer ?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Désactiver les outils de synchronisation des marque-pages"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Synchroniser les données de votre navigateur avec xBrowserSync alors que d'autres outils de synchronisation (comme <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) sont actifs peut dupliquer les données, et potentiellement les corrompre. Veuillez désactiver vos autres outils avant de continuer.",
            "brave": "Synchroniser les données de votre navigateur avec xBrowserSync alors que d'autres outils de synchronisation (comme <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) sont actifs peut dupliquer les données, et potentiellement les corrompre. Veuillez désactiver vos autres outils avant de continuer.",
            "edge": "Synchroniser les données de votre navigateur avec xBrowserSync alors que d'autres outils de synchronisation (comme <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) sont actifs peut dupliquer les données, et potentiellement les corrompre. Veuillez désactiver vos autres outils avant de continuer.",
            "firefox": "Synchroniser les données de votre navigateur avec xBrowserSync alors que d'autres outils de synchronisation (comme <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) sont actifs peut dupliquer les données, et potentiellement les corrompre. Veuillez désactiver vos autres outils avant de continuer."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Synchro"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Créer une nouvelle synchro"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Prêt à mettre la synchro à jour ?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Votre synchronisation doit être mise à niveau avant la synchronisation avec cette version de xBrowserSync. Après la mise à niveau, vous ne pourrez plus vous synchroniser avec les versions précédentes de xBrowserSync. </p><p>Assurez-vous de mettre à jour xBrowserSync sur tous les appareils synchronisés avant de continuer. Prêt à continuer ?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Mettre à jour la synchronisation"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Votre synchronisation doit être mise à niveau avant de la synchroniser avec cette version de XbrowserSync.</p><p>Utilisez l'extension de navigateur pour mettre à niveau votre synchronisation, puis réessayez la synchronisation ici.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Votre ID de synchro"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Vous avez déjà un ID de synchro ?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "ID de synchro invalide"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Obtenez un ID de synchro"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Permissions optionnelles"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync enrichit automatiquement les signets ajoutés en utilisant le bouton Ajouter un signet avec les métadonnées disponibles. Pour activer ceci, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>nécessite des autorisations supplémentaires</a> pour pouvoir lire les données du site visité.</p><p>Veuillez indiquer si vous y êtes invité si vous êtes heureux d'accorder ces autorisations. Vous pouvez ajouter ou supprimer des autorisations à tout moment dans le panneau Paramètres.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Scannez votre code QR de synchro"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Activer la lumière"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Afficher les dossiers de favoris"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Effacer"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Dossier vide"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Vous n'avez pas de favoris, ajoutez en !"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Aucun favori trouvé"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Tapez sur Entrée ou cherchez des marque-pages",
        "android": "Trouver des marque-pages"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Tirer vers le bas pour synchroniser"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Relâcher pour synchroniser"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Afficher les résultats de recherche"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Sauvegarde et restauration"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Sauvegarde automatique"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Téléchargez automatiquement les sauvegardes selon un calendrier."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "La sauvegarde s'exécute à"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "tous"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "seul"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "deux"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "trois"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "quatre"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "cinq"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "six"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "sept"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "huit"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "neuf"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "dix"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "onze"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "douze"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "jour(s)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "semaine(s)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "mois"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Afin de prévenir le message\"Enregistrer sous...\" lorsque vous téléchargez vos sauvegardes, désactivez le paramètre \"Demander ou télécharger chaque fichier pour chaque téléchargement\"."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Sauvegarder"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Télécharger une sauvegarde"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Sauvegarder les données locales du navigateur dans un fichier."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Sauvegarder les données synchronisées dans un fichier."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Restaurer"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Restaurer à partir d'une sauvegarde"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Restaurer les données locales du navigateur depuis une sauvegarde."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>La synchronisation étant désactivée, les données en cours de restauration écraseront les données du navigateur local.</p><p>OK pour continuer ?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Restaurer les données synchronisées depuis une sauvegarde."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Puisque la synchronisation est activée, les données restaurées écraseront vos données synchronisées.</p><p>Pour restaurer les données uniquement dans le navigateur local, désactivez la synchronisation avant la restauration.</p><p>Voulez-vous continuer ?</p>",
              "android": "<p>Les données restaurées vont écraser vos données synchronisées.</p><p>Voulez-vous continuer ?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Votre sauvegarde a été restaurée."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Choisir un fichier"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Sélectionnez un fichier de sauvegarde à restaurer"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Copiez les contenus d'un fichier de sauvegarde pour restaurer les données."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Copier les données de sauvegarde"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Restaurer les données"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Données de sauvegarde xBrowserSync invalides"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Si vous continuez, les données de ce navigateur vont être désactivées et réinitialisées depuis le jour ou xBrowserSync a été installé le {date}.</p><p>Êtes vous sûr de vouloir poursuivre?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Réinitialiser les données locales"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Les données de ce navigateur ont été réinitialisées à leur état d'installation initial."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "L'état de l'installation n'est pas disponible, impossible à réinitialiser."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Aide et assistance"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Centre d'aide"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Vous avez une question ou vous rencontrez un problème ? Lisez notre guide d'aide. Sinon, vous trouverez peut-être la réponse dans nos FAQs."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Voir les FAQs"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Assistance"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Besoin d'assistance? Utilisez le gestionnaire de tickets pour signaler un bug ou demander une fonctionnalité."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Voir le suivi des bugs"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Journal d'application"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Télécharger et inclure le journal d'application lorsque du signalement d'un problème."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Effacer le journal"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Télécharger le journal"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Taille actuelle du journal"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Permissions optionnelles"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Accorder les autorisations"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Accordé"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Non accordé"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Lire les données du site"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Requis pour ajouter automatiquement des métadonnées aux signets lorsque vous utilisez le bouton « Marquer cette page» du navigateur (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>plus d'infos</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Supprimer les permissions"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Récupération automatique des métadonnées du signet"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Récupérer automatiquement les métadonnées lors de l'ajout d'un signet."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Vérifier les mises à jour"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Être averti quand une nouvelle version de xBrowserSync est disponible."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Activer le mode nuit"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Idéal pour les environnements à faible luminosité."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Afficher les dossiers de marque-pages"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Afficher les dossiers de marque-pages par défaut."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Changer la position de la barre de recherche"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Afficher la barre de recherche en-dessous des résultats."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Synchronisation de la barre de favoris"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Désactivez ce paramètre pour afficher des barres de favoris différentes selon les navigateurs synchronisés."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Activer ce paramètre remplacera les marque-pages actuellement dans la barre de favoris avec vos marque-pages synchronisés.</p><p>Voulez-vous continuer ?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Activer la télémétrie"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Envoyer occasionnellement des données techniques anonymes pour aider à améliorer xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Préférences"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Synchro"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Désactiver la synchro"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID de synchro"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Utilisez votre ID de synchronisation pour vous connecter à vos données synchronisées sur vos autres appareils (cliquez pour afficher le code QR)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Utilisation des données"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Quantité de données de synchronisation autorisées par le service utilisées."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Service"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Dernière synchro le {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Prêt à synchroniser (prévu pour le {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Synchroniser maintenant"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Scannez ce code QR avec l'application Android xBrowserSync pour vous connecter à vos données synchronisées."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Afficher le code QR"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Copier l'ID de synchro dans le presse‐papiers"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Copié!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Paramètres disponibles lorsque la synchronisation est activée."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Fichier enregistré dans Téléchargements"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Soutenir xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Soutenir xBrowserSync !"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "Nous voulons que xBrowserSync devienne le numéro un des outils de synchronisation de navigateurs mais il y a toujours beaucoup à faire. Ajouter la synchronisation des onglets et de l'historique. Prendre en charge tout les navigateurs majeurs. Traduire d'autres langues. Et bien plus. C'est seulement avec votre soutien que nous pourrons coutinuer d'améliorer xBrowserSync et s'assurer qu'il reste efficace dans la protection de la vie privée en ligne et l'amélioration de la productivité"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Crypto-monnaies"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Synchronisation introuvable"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Votre synchronisation n'a pas pu être trouvée et peut avoir été supprimée pour cause d'inactivité.</p><p>Vous devrez créer une nouvelle synchronisation, mais cliquez d'abord sur le bouton ci-dessous pour télécharger une sauvegarde de vos données synchronisées que vous pourrez ensuite restaurer à votre nouvelle synchronisation.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Envoyer la télémétrie anonyme ?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync est différent des applications traditionnelles car c'est un outil totalement anonyme et confidentiel. Maintenir un tel outil est un défi car nous n'avons pas accès aux données utilisateur pour nous aider à déterminer comment déployer au mieux des ressources limitées. Par conséquent, nous vous demandons votre permission d'envoyer occasionnellement des données techniques anonymes pour nous aider à améliorer xBrowserSync.</p><p>Ces données de télémétrie n'incluent aucune donnée personnelle ou d'identification et n'inclut aucune de vos données de synchronisation chiffrées et n'est jamais partagée avec des tierces parties (vous êtes en mesure de vous inscrire ou de vous retirer à tout moment dans le panneau Paramètres).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Mis à jour vers"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync a été mis à jour avec les dernières fonctionnalités et correctifs.</p><p>Si la synchronisation était activée, elle a été désactivée et votre synchronisation doit d'abord être mise à jour avant de se synchroniser avec cette version de xBrowserSync. Réactivez la synchronisation pour terminer le processus de mise à jour.</p><p>Pour plus de détails sur les modifications contenues dans cette version, consultez les notes de publication.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Restauration en cours"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Réinitialisation"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Synchronisation en cours"
      }
    }
  }
}
</file>

<file path="res/strings/gl.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "Dispoñible actualización de xBrowserSync"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} está dispoñible para descarga. Pincha para máis información.",
        "android": "{version} de xBrowserSync está dispoñible para descarga."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Actualizado a"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync foi actualizado. Sync foi deshabilitado, re-activa sync para completar o proceso de actualización."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Creado marcador"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Borrado marcador"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Favorito actualizado"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Recollendo propiedades de Marcadores, toca para cancelar."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Actualizadas propiedades de marcadores."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Ir"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "A sincronización do navegador como debería ser: segura, anónima e libre! Sincronizar marcadores en varios navegadores e dispositivos, sen rexistro previo."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Menu de marcadores"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Outros marcadores"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Barra de marcadores"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Engadir marcador"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Atrás"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Cancelar"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Pechar"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Si"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Continuar"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Eliminar marcador"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Non"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Feito"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Descargar copia de seguridade"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Editar marcador"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Ver guía de axuda"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Seguinte"
    },
    "OK": {
      "key": "Button_OK",
      "default": "Feito"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Ver notas da versión"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Gardando"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Axustes"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Compartir marcador"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Desfacer"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Actualizar"
    },
    "View": {
      "key": "Button_View",
      "default": "Ver"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Por favor, evite modificar [xbs] cartafoles xa que pode causar problemas de sincronización."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "Cambiado directorio de xBrowserSync"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Sicnroniza cun ID existente, cambia a outro servizo ou téntao de novo mañá."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Acadado o límite diario de sincronizacións"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Se o problema persiste faga o favor de <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>reportar esta incidencia</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Algo foi mal"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Erro na copia de seguridade"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Erro percorrendo ficheiros"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "A URL é inválida ou os datos da web non se puideron recoller."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Non se puideron obter as propiedades dos marcadores"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Non se puideron recoller actualizacións"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Os datos da copia de seguridade indicados non están no formato agardado."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Non se puideron restaurar os datos"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Debes sincronizar para engadir un marcador"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Non se puido recoller a URL compartida dos marcadores"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Comproba a túa conexión de rede e téntao de novo. Se o problema persiste, pode haber un problema co servizo xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Fallou a sincronización"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Non foi posible atopar credencias almacenadas. Volve a habilitar a sincronización e téntao de novo."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Credenciais perdidas"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Comproba que introduciches correctamente a túa ID de sincronización, contrasinal e URL de servizo."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Credenciais non válidas"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "A URL indicada non é un servizo xBrowserSync válido."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Servizo inválido de xBrowserSync"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Probablemente Perfil de navegador inválido, tenta crear un novo perfil porque pode resolvelo problema."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Estructura de marcadores inesperada"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Os datos locais do navegador foron actualizados, podes tentar aplicar o último cambio."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Erro ao sincronizar"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Comproba a túa conexión de rede e téntao de novo."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Perdeuse a conexión"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Asegúrate que indicaches unha copia de seguridade válida de xBrowserSync antes de restaurar."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Sen datos que restaurar"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Cambia a un servizo diferente ou téntao de novo."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Non se aceptan novas sincronizacións"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Os datos locais non estaban sincronizados e foron actualizados. Volve aplicar o último cambio."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Detectado conflicto de sincronización"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Borra algúns marcadores e téntao de novo ou cambia a un servizo cun límite maior."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Límite de datos de sincronización superado"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Comproba que foi concedido o permiso e téntao de novo."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Erro ao escanear"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "O servizo de xBrowserSync está actualmente desconectado, téntao de novo nun anaco."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Servizo sen conexión"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Erro ao compartir"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "A sincronización pedida non existe, pode que se borrara por inactividade."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Non se atopou sincronización"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Os datos da copia de seguridade non poden ser restaurados con esta versión de xBrowserSync porque foron creados cunha versión posterior."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Ese ID non pode sincronizarse con esta versión de xBrowserSync xa que actualizouse a unha versión posterior."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Versión de sincronización non soportada"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "A sincronización foi deshabilitada, re-habilita a sincronización para reanudar a sincronización."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Límite de solicitude de servizo alcanzado"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Os cambios sincronizaranse cando a conexión se restaure."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Perdeuse a conexión"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Este servizo está funcionando cunha versión de API non soportada."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Servizo non soportado"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "A actualizació reintentaras ao reiniciar a aplicación. Se o problema persiste, por favor reinstale xBrowserSync.",
        "default": "Reinicia o teu navegador para reintentar actualizar, se o problema persiste reinstala xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Erro ao actualizar"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Erro de conexión"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Comprobando"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Non se aceptan novas sincronizacións"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Sen conexión"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Conectado"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "sen sincronizar"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "sincronizado"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "sincronizando"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Engadir marcador"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Editar marcador"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Título"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "A URL xa foi engadida a marcadores"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "URL non válido"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "Requírese URL"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Descrición"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Etiquetas"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "etiqueta 1, etiqueta2, etiqueta 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Limpar etiquetas"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Eliminar etiqueta"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Borrar"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Compartir"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Actualizar propiedades de marcadores"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "O valor que compartiches non contén unha URL válida."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Engadir un marcador</h4><p>Marca a páxina actual pinchando no icono de marcador no panel de Búsqueda. As propiedades do marcador encheranse automaticamente. Do contrario, agreg unha descripción e algunhas etiquetas para asegurar mellores resultados de búsqueda.</p><p>Alternativamente, simplemente pincha no botón de “Engadir esta páxina a marcadores” como de xeito habitual e xBrowserSync encherá as propiedades do marcador de xeito automático (quizais requira permisos adicionais, revisa o panel de Preferencias).</p>",
        "android": "<h4>Engadir un marcador</h4><p>Engade marcadores de xeito doado compartindo xBrowserSync desde calquera aplicación que comparta URLs como un navegador, YouTube, Spotify e moitas máis.</p><p>As propiedades do marcador buscaranse por ti, do contrario engade unha descripción e algunhas etiquetas para asegurar mellores resultados de búsqueda.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Lembra facer copias de seguridade</h4><p>Cando usas xBrowserSync os teus datos son a túa responsabilidade así que sé intelixente e asegúrate de facer copias de seguridade.</p><p>Diríxete ao panel de Preferencias e fai copia dos datos sen cifrar a un ficheiro local que poida ser empregado para restaurar a información en caso de necesitala.</p><p>Se os teus datos locais se corrompen e non tes copias de seguridade, en calquera momento podes resetear a túa data ao seu estado orixinal, cando instalaches xBrowserSync.</p>",
        "android": "<h4>Lembra facer copias de seguridade</h4><p>Cando usas xBrowserSync os teus datos son a túa responsabilidade así que sé intelixente e asegúrate de facer copias de seguridade.</p><p>Diríxete ao panel de Preferencias e fai copia dos datos sen cifrar a un ficheiro local que poida ser empregado para restaurar a información en caso de necesitala.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Antes de comezar</h4><p>xBrowserSync modifica os datos do teu navegador local polo que é unha boa idea facer unha copia de seguridade dos teus marcadores e outros datos do navegador por si acaso, e se empregas outro servizo ou utilidade de sincronización do navegador (como <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) por favor desactívaos para evitar conflictos.</p>",
        "brave": "<h4>Antes de comezar</h4><p>xBrowserSync modifica os datos do teu navegador local polo que é unha boa idea facer unha copia de seguridade dos teus marcadores e outros datos do navegador por si acaso, e se empregas outro servizo ou utilidade de sincronización do navegador (como <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) por favor desactívaos para evitar conflictos.</p>",
        "edge": "<h4>Antes de comezar</h4><p>xBrowserSync modifica os datos do teu navegador local polo que é unha boa idea facer unha copia de seguridade dos teus marcadores e outros datos do navegador por si acaso, e se empregas outro servizo ou utilidade de sincronización do navegador (como <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) por favor desactívaos para evitar conflictos.</p>",
        "firefox": "<h4>Antes de comezar</h4><p>xBrowserSync modifica os datos do teu navegador local polo que é unha boa idea facer unha copia de seguridade dos teus marcadores e outros datos do navegador por si acaso, e se empregas outro servizo ou utilidade de sincronización do navegador (como <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) por favor desactívaos para evitar conflictos.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Sincronizando co teu ID</h4><p>Pincha en “Tes unha ID de sincronización previa?” para introducir o teu ID de sincronización e contrasinal. Se o teu ID de sincronización foi creado nun servizo diferente ao amosado cambia a ese servizo antes de sincronizar.</p><p>xBrowserSync recollerá e descifrará os teus datos cifrados usando o teu contrasinal almaceado localmente, despois borrará os teus marcadores locais antes de reenchelos cos datos descifrados..</p><p>Cando sincroniza, xBrowserSync comproba en segundo plano cada 15 minutos as actualizacións dos teus datos sincronizados e automaticamente actualizará os marcadores locais se fixera falla. Tamén podes sincronizar manualmente actualizacións existentes cos teus datos no panel de Preferencias.</p>",
        "android": "<h4>Sincronizando co teu ID</h4><p>Comeza escanenado o código QR da túa ID no panel de Preferencias da extensión de navegador de escritorio xBrowserSync (pincha na túa ID de sincronización para amosalo). Asegúrate que introduces o mesmo contrasinal de cifrado empregado cando creaches a sincronización, ou doutro xeito xBrowserSync non ha ser capaz de descifrar os teus datos.</p><p>Asemade, se estás sincronizando a un servizo de xBrowserSync diferente asegúrate que é o servizo configurado no panel de Preferencias.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Sincronizando por primeira vez</h4><p>Antes de que xBrowserSync poida sincronizar os teus datos necesitas darlle o contrasinal de cifrado. Asegúrate que sexa forte pero tamén doado de lembrar, non hai reseteos de contrasinal ou recordatorios polo que se o esqueces non poderás acceder aos teus datos sincronizados.</p><p>Os datos do teu navegador serán cifrados empregando o teu contrasinal e gardados no servizo xBrowserSync activo configurado no panel de Preferencias.</p><p>Unha vez sincronizado, calquera cambio que fagas nos teus marcadores locais sincronizarase automaticamente con xBrowserSync.</p>",
        "android": "<h4>Sincronizando por primeira vez</h4><p>xBrowserSync sincroniza activamente os datos do teu navegado entre navegadores de escritorio (sincronizar navegadores de móviles non está soportado agora mesmo), podes empregar esta aplicación para acceder aos teus datos sincronizados no teu dispositivo Android mobile.</p><p>Se todavía non creaches un ID de sincronización, vai ao teu navegador de escritorio e <a href='https://link.xbrowsersync.org/download' class='new-tab'>descarga</a> a extensión xBrowserSync. Unha vez crees unha sincronización podes usar o teu novo ID de sincronización con esta app para acceder aos teus datos.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Máis axuda</h4><p>Podes atopar respostas ás preguntas máis frecuentes nas <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>FAQs</a>, tamén podes revisar nos <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>problemas coñecidos</a> para ver se o teu problema está listado aí.</p><p>Finalmente, emprega o <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>xestor de incidencias</a> para reportar unha incidencia ou pedir unha nova característica.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Emprega o móbil</h4><p>Acede aos teus marcadores sincronizados en movemento coa aplicación Android xBrowserSync, dispoñible na tenda de <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a>, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> ou con <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>descarga directa</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Funcións nativas soportadas</h4><p>Non te preocupes de empregar as características de marcadores nativas do teu navegador como marcadores ou xestor de marcadores, calquera cambio que fagas será sincronizado automaticamente en segundo plano.</p><p>Se organizas os teus marcadores en directorios non te preocupes, xBrowserSync respectará e manterá a túa xerarquía de marcadores existente.</p>",
        "firefox": "<h4>Funcións nativas soportadas</h4><p>Non te preocupes de empregar as características de marcadores nativas do teu navegador como marcadores ou xestor de marcadores, calquera cambio que fagas será sincronizado automaticamente en segundo plano.</p><p>Se organizas os teus marcadores en directorios non te preocupes, xBrowserSync respectará e manterá a túa xerarquía de marcadores existente.</p><p>Sen embargo, ten en conta que a API de marcadores de Firefox aínda non soporta o acceso a etiquetas nativas de marcadores, calquera etiqueta existente perderase cando a sincronización e as etiquetas engadidas via xBrowserSync non se gardarán como etiquetas nativas.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Anterior"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Buscando nos teus marcadores</h4><p>Unha vez sincronizados, simplemente presiona Enter para amosar os teus marcadores recentes ou teclea algunhas palabras chave ou unha URL para buscar nos teus marcadores.</p><p>Cambia entre resultados de búsqueda e directorios de marcadores para navegar a xerarquía completa.</p><p>Para editar ou borrar un marcador, colócate por riba do marcador e pincha o agora visible icono de editar ao carón do título do marcador.</p>",
        "android": "<h4>Buscando nos teus marcadores</h4><p>Unha vez sincronizados, os teus marcadores amósanse de en orde cronoloxica cando abres xBrowserSync. Teclea algunhas palabras chave ou unha URL na caixa de búsqueda para buscar nos teus marcadores.</p><p>TCambia entre resultados de búsqueda e directorios de marcadores para navegar a xerarquía completa.</p><p>Mantendo unha pulsación longa nun marcador poderás compartilo, modificalo ou borralo.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Sincronizando con outro servizo</h4><p>Por defecto os teus datos sincronizanse co <a href='https://link.xbrowsersync.org/api' class='new-tab'>servizo oficial xBrowserSync</a>. Sen embargo, se queres sincronizar os teus datos cun servizo xBrowserSync alternativo, podes mudar o servizo activo antes de sincronizar.</p><p>Comproba a lista dos <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>servizos públicos xBrowserSync</a> ou <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>executa o teu propio servizo</a>, xa sexa para uso privado para a máxima seguridade e privacidade, ou para uso público para que máis persoas poidan desfrutar de xBrowserSync.</p><p><strong>Importante:</strong> os servizos de xBrowserSync son xestionados de forma independente por voluntarios/as. O administrador do servizo non asume nengunha responsabilidade polos teus datos, así que por favor lembra realizar unha copia de seguridade de xeito regular.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Usa atallos!</h4><p>Para buscar nos teus marcadores rapidamente, emprega o atallo de teclado por defecto (Ctrl+Space) para activa a extensión, despois simplemente presiona Enter para ver os teus marcadores recenteds ou teclea para buscar.</p><p>Para cambiar o atallo, navega a chrome://extensions/shortcuts e actualiza os atallos dispoñibles para xBrowserSync.</p>",
        "brave": "<h4>Usa atallos!</h4><p>Para buscar nos teus marcadores rapidamente, emprega o atallo de teclado por defecto (Ctrl+Space) para activa a extensión, despois simplemente presiona Enter para ver os teus marcadores recenteds ou teclea para buscar.</p><p>Para cambiar o atallo, navega a brave://extensions/shortcuts e actualiza os atallos dispoñibles para xBrowserSync.</p>",
        "edge": "<h4>Usa atallos!</h4><p>Para buscar nos teus marcadores rapidamente, emprega o atallo de teclado por defecto (Ctrl+Space) para activa a extensión, despois simplemente presiona Enter para ver os teus marcadores recenteds ou teclea para buscar.</p><p>Para cambiar o atallo, navega a edge://extensions/shortcuts e actualiza os atallos dispoñibles para xBrowserSync.</p>",
        "firefox": "<h4>Usa atallos!</h4><p>Para buscar nos teus marcadores rapidamente, emprega o atallo de teclado por defecto (Ctrl+Space) para activa a extensión, despois simplemente presiona Enter para ver os teus marcadores recenteds ou teclea para buscar.</p><p>Para cambiar o atallo, navega a about:addons, pincha en “Administrar atallos de Extensións” no menu de Preferencias e actualiza os atallos dispoñibles para xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>A túa ID de sincronización</h4><p>xBrowserSync asegura a túa privacidade xa que non se recopilan datos persoais e os datos do teu navegador son cifrados antes de ser sincronizados. Para identificar os teus datos sincronizados tes unha ID de sincronización anónima que pode ser empregada xunto co teu contrasinal para sincronizar os teus datos noutros navegadores e dispositivos.</p><p>Lembra que o teu ID de sincronización só funcionará co servizo xBrowserSync no que foi creado, se cambias a un servizo xBrowserSync diferente, debes crear unha nova sincronización ou empregar unha ID de sincronización existente creada sincronizada previamente con ese servizo.</p><p>Cando estexa sincronizado poderás ver a túa ID de sincronización no panel de Preferencias, facendo clic nela para revelar un código QR para escanear cando se sincroniza en dispositivos móviles.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Benvida/o a xBrowserSync!</h4><p>xBrowserSync é unha alternativa gratuita e de código aberto aos servizos de sincronización do navegador ofrecidos por Google, Mozilla, Opera e outros, que respeta a túa privacidad e dá un anonimato completo (consulta o <a href='https://link.xbrowsersync.org/www' class='new-tab'>sitio web</a> para máis información).</p><p>Le esta guía de axuda para familiarizarte con xBrowserSync, empregando as ligazóns de paxinación de abaixo ou as teclas de frechas para moverte entre páxinas.</p><p>Nota: xBrowserSync actualmente só sincroniza marcadores. A sincronización dos datos adicionais do navegador engadiranse en versións futuras, revisa o mapa de ruta <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>de desenvolvemento</a> para ver o que está planeado.</p>",
        "android": "<h4>Benvida/o a xBrowserSync!</h4><p>xBrowserSync é unha alternativa gratuita e de código aberto aos servizos de sincronización do navegador ofrecidos por Google, Mozilla, Opera e outros, que respeta a túa privacidad e dá un anonimato completo (consulta o <a href='https://link.xbrowsersync.org/www' class='new-tab'>sitio web</a> para máis información).</p><p>Le esta guía de axuda para familiarizarte con xBrowserSync, empregando as ligazóns de paxinación de abaixo ou deslizando para moverte entre páxinas.</p><p>Nota: xBrowserSync actualmente só sincroniza marcadores. A sincronización dos datos adicionais do navegador engadiranse en versións futuras, revisa o mapa de ruta <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>de desenvolvemento</a> para ver o que está planeado.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Necesitas un ID de sincronización?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Descarga a extensión de navegador de escritorio de xBrowserSync e crea unha nova sincronización para acceder aos teus marcadores aquí."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Confirma o contrasinal"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Establecer contrasinal do cifrado"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Contrasinal do cifrado"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Establecer contrasinal do cifrado"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Amosar contrasinal"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Conecta á túa sincronización"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "ABre xBrowserSync no teu navegador de escritorio, vai ao Panel de Preferencias e pincha no teu ID de sincronización para amosar o código QR que podes escanear aquí."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Escanea código"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Introduce manualmente os detalles de sincronización"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Versión de API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Sincronizar este servizo?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Localización"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Tamaño máximo de sincronización"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Sincronizando"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Estado"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "URL de servizo de xBrowserSync"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Introduce a URL dun servizo alternativa de xBrowserSync. Navega a lista de servizo públicos de xBrowserSync <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>aquí</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Cambio de servizo"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "Requírese URL"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Servizo inválido de xBrowserSync"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "URL non válido"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Non é posible conectarse ao servizo"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Este servizo está funcionando cunha versión de API non soportada"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Importante:</strong> Os servizos de xBrowserSync funcionan independentemente rexidos por voluntarios/as. O administrador do servizo non ten nengunha responsabilidade sobre os teus datos polo que lembra facer copia de seguridade de xeito habitual."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Está seguro?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync borrará todos os teus marcadores locais antes de restaurar cos da sincronizacións. Desexas continuar?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Deshabilitar ferramentas de sincronización de marcadores"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Sincronizar os datos do teu navegador con xBrowserSync mentres outras ferramentas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) están activas pode causar duplicacións e posibilidade de corrupción de datos. Por favor desactívaa antes de continuar.",
            "brave": "Sincronizar os datos do teu navegador con xBrowserSync mentres outras ferramentas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) están activas pode causar duplicacións e posibilidade de corrupción de datos. Por favor desactívaa antes de continuar.",
            "edge": "Sincronizar os datos do teu navegador con xBrowserSync mentres outras ferramentas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) están activas pode causar duplicacións e posibilidade de corrupción de datos. Por favor desactívaa antes de continuar.",
            "firefox": "Sincronizar os datos do teu navegador con xBrowserSync mentres outras ferramentas de sincronización de marcadores (como <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) están activas pode causar duplicacións e posibilidade de corrupción de datos. Por favor desactívaa antes de continuar."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Sincronizar"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Crear nova sincronización"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Preparado para actualizar sincronización?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>A túa sincronización debe actualizarse antes de sincronizar con esta versión de xBrowserSync. Despois de actualizar, non poderás sincronizar con nengunha versión previa de xBrowserSync.</p><p>Asegúrate de actualizar xBrowserSync en todos os dispositivos sincronizados antes de continuar. Preparado para continuar?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Actualizar sincronización"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>A túa sincronización debe actualizarse antes de sincronizarse con esta versión de xBrowserSync.</p><p>Usa a extensión de navegador de escritorio de xBrowserSync para actualizar a túa sincronización e tenta sincronizar de novo aquí.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "O teu ID de sincronización"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Tes unha ID de sincronización previa?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "ID de sincronización non válida"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Consegue un ID de sincronización"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Permisos opcionais"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync automaticamente engade marcadores co botón Engadir marcador do navegador cos metadatos dispoñibles. Para habilitar isto, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>require permisos adicionais</a> para poder ler os datos do sitio web visitado.</p><p>Indica se desexas conceder estes permisos. Alternativamente, podes agregar o eliminar permisos en calquera momento no panel de Preferencias.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Escanea o código QR da túa ID de sincronización"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Alternar luz"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Amosar directorios de marcadores"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Limpar"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Cartafol baleiro"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Non tes marcadores, introduce algún!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Sen marcadores"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Pulsa Enter ou busca marcadores",
        "android": "Buscar marcadores"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Deslizar cara abaixo para sincronizar"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Soltar para sincronizar"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Ver resultados da búsqueda"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Copia de seguridade e restauración"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Copia de seguridade automática"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Descargar automaticamente copias de seguridade programadas."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Copias de seguridade ás"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "cada"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "único"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "dous"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "tres"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "catro"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "cinco"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "seis"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "sete"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "oito"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "nove"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "dez"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "once"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "doce"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "día(s)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "semana(s)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "mes(es)"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Para previr que apareza a ventá “Gardar como...” na descarga de copias de seguridade, deshabilita a preferencia do navegador “Preguntar onde gardo cada ficheiro antes de descargalo”."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Copia de seguridade"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Descargar copia de seguridade"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Copia de seguridade de datos locais a un ficheiro."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Copia de seguridade de datos sincronizados a un ficheiro."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Restaurar"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Restaurar desde a copia de seguridade"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Restaurar datos do navegador local desde unha copia de seguridade."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Como a sincronización está deshabilitada, os datos que se van restaurar sobreescribirán os datos locais do navegador.</p><p>Desexas continuar?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Restaurar datos sicnronizados desde unha copia de seguridade."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Como a sincronización está activada, os datos que se están a restaurar sobreescribirán os teus datos sincronizados.</p><p>Para restaurar datos só no navegador local, deshabilita a sincronización antes de restaurar.</p><p>Desexas continuar?</p>",
              "android": "<p>Os datos que se restauren sobreescribirán os datos sincronizados.</p><p>Desexas continuar?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "A copia de seguridade foi restaurada."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Seleccionar ficheiro"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Seleccionar unha copia para restaurar"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Copia os contidos dun ficheiro de copia de seguridade para restaurar."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Pegar datos de copia de seguridade"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Restaurar datos"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Datos de copia de seguridade de xBrowserSync inválidos"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Se continuas, a sincronización deshabilitarase e os teus datos locais resetearanse a cando xBrowserSync foi instalada con data {date}.</p><p>Desexas continuar?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Resetear datos locais"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Datos locais do navegador foron restaurados ao estado inicial da instalación."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Datos de instalación non dispoñibles, non se puido resetear."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Axuda e soporte"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Guía de axuda"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Tes algunha pregunta ou algún problema que comunicar? Asegúrate de ler a Guía de axuda, pode que a túa resposta tamén se atope nas FAQs."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Ver FAQs"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Soporte"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Necesitas soporte? Emprega o Rastrexador de Problemas para reportar un erro ou pedir unha funcionalidade."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Ver Rastrexador de Problemas"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Rexistros de aplicación"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Baixa e inclúe o rexistro da aplicación cando rexistres un problema."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Limpar rexistro"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Descarga rexistro"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Tamaño de rexistro actual"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Permisos opcionais"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Conceder permisos"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Permitir"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Non permitir"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Le datos da web"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Requerido para engadir metadados automaticamente aos marcadores cando se emprega o botón “Engadir esta páxina a marcadores” (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>máis información</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Eliminar permisos"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Auto-recoller metadata de marcadores"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Recuperar metadatos automaticamente ao engadir un marcador."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Comprobar actualizacións"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Notificarme cando unha nova versión de xBrowserSync estea dispoñible."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Activa o tema escuro"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideal para empregar en entornos con pouca luminosidade."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Amosar directorios de marcadores"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Amosar directorio de marcadores por defecto."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Cambiar posición de barra de búsqueda"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Amosar a barra de búsqueda debaixo dos resultados."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Sincronizar barra de marcadores"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Desactiva esta preferencia para amosar diferentes barras de marcadores en diferentes navegadores sincronizados."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Activando esta preferencia reemprazaranse os marcadores actuais cos marcadores sincronizados.</p><p>Dacordo en continuar?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Activa a telemetría"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Envía ocasionalmente datos técnicos anónimos para axudar a mellorar xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Preferencias"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Sincronizar"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Deshabilitar sincronización"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID de sincronización"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Emprega a túa ID de sincronización para conectar coa túa data sincronizada noutros dispositivos (pincha para ver o código QR)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Uso de datos"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Cantos datos sincronizados permitidos polo servizo estás a empregar."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Servizo"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Última sincronización {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Preparado para sincronizar (programada para {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Sincronizar agora"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Escanea este código QR usando a app de Android de xBrowserSync para conectar cos teus datos sincronizados."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Mostrar código QR"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Copiar ID de sincronización ao portapapeis"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Copiado!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "As preferencias están dispoñibles cando a sincronización estea activada."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Arquivo gardado en \"Descargas\""
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Apoio a xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Apoio a xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Queremos facer de xBrowserSync a ferramenta de sincronización número un, pero aínda queda moito por facer:</p><ul><li>Engadir sincronización das pestañas do navegador e historial</li><li>Soporte a tódolos navegadores de escritorio principais</li><li>Traducir a outros idiomas</li><li>E <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>moito máis</a>!</li></ul><p>Só co teu apoio poderemos seguir mellorando xBrowserSync e asegurarnos de que siga sendo unha ferramenta eficaz para protexer a nosa privacidade e productividade frente ao deterioro da tecnoloxía!</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Cryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Non se atopou sincronización"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>A túa sincronización non se atopou e pode que fora eliminar por inactividade.</p><p>Necesitas crear unha nova sincronización, pero primeiro pincha no botón de abaixo para descargar unha copia de seguridade dos teus datos sincronizados que poderás empregar para restaurar na túa nova sincronización.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Queres enviar telemetría anónima?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync é a diferenza das aplicacións tradicionais xa que é unha ferramenta completamente anónima que se centra en a privacidade. Manter unha ferramenta deste tipo é un reto xa que non temos acceso aos datos dos usuarios para axudar a determinar a mellor forma de implantar os nosos recursos limitados. Polo tanto, solicitamos o teu permiso para enviar ocasionalmente datos técnicos anónimos para axudarnos a mellorar xBrowserSync.</p><p>Estes datos de telemetría non inclúen ningún dato persoal ou de identificación, nin tampouco ningún dos teus datos de sincronización cifrados e nunca compartida con terceiros (podes activar ou desactivar en calquera momento no panel de Configuración).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Actualizado a"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync foi actualizado coas últimas características e coreccións.</p><p>Si a sincronización estaba activada, agora foi desactivada e a túa sincronización debe actualizarse antes de sincronizarse con esta versión de xBrowserSync. Rehabilita a sincronización para completar o proceso de actualización.</p><p>Para máis detalles acerca dos cambios contidos nesta versión, revisa as notas de lanzamento.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Restaurando"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Reseteando"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Sincronizando"
      }
    }
  }
}
</file>

<file path="res/strings/id.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "Pembaruan xBrowserSync tersedia"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} tersedia untuk diunduh. Klik untuk informasi lebih lanjut.",
        "android": "xBrowserSync {version} tersedia untuk diunduh."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Diperbarui ke"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync telah diperbarui. Sinkronisasi telah dimatikan, aktifkan kembali sinkronisasi untuk menyelesaikan proses peningkatan."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Markah dibuat"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Markah dihapus"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Markah diperbarui"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Mengambil properti markah, sentuh untuk membatalkan."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Properti markah diperbarui."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Pergi"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Sinkronisasi peramban sebagaimana mestinya: aman, awanama, dan bebas dan gratis! Sinkronisasi markah antar peramban dan perangkat Anda, pendaftaran tidak diperlukan."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Menu markah"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Markah lain-lain"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Markah bilah alat"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Tambahkan markah"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Kembali"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Batal"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Tutup"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Ya"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Lanjut"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Hapus markah"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Tidak"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Selesai"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Unduh cadangan"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Sunting markah"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Lihat panduan pembantu"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Berikutnya"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Lihat catatan rilis"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Menyimpan"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Pengaturan"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Bagikan markah"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Urungkan"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Pembaruan"
    },
    "View": {
      "key": "Button_View",
      "default": "Lihat"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Mohon menghindari mengubah folder [xbs] karena bisa mengakibatkan masalah sinkronisasi."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "Folder xBrowserSync diubah"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Sinkronisasi ke ID Sinkronisasi yang telah ada, beralih ke layanan yang berbeda, atau coba kembali esok hari."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Batas harian sinkronisasi baru tercapai"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Jika masalah terus terjadi, mohon untuk <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>melaporkan isu tersebut</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Terjadi galat"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Pencadangan gagal"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Gagal menjelajahi berkas"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "URL tidak valid atau data situs tidak dapat didapatkan."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Tidak dapat mengambil properti markah"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Tidak bisa mendapatkan pembaruan"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Data cadangan yang diberikan tidak dalam format yang diharapkan."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Tidak dapat memulihkan data"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Anda harus tersinkronisasi untuk menambahkan markah"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Tidak dapat mengambil URL markah yang dibagikan"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Periksa koneksi jaringan Anda dan coba lagi. Jika isu ini terus terjadi, mungkin ada masalah dengan layanan xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Sinkronisasi gagal"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Tidak dapat mencari kredensial tersimpan. Nyalakan kembali sinkronisasi dan coba lagi."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Kredensial tidak ada"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Periksa ID Sinkronisasi, kata sandi, dan URL layanan Anda sudah dimasukkan dengan benar."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Kredensial tidak valid"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "URL layanan ini bukan layanan xBrowserSync yang valid."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Bukan layanan xBrowserSync yang valid"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Kemungkinan profil peramban rusak, coba buat profil baru karena kemungkinan itu bisa menyelesaikan isunya."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Struktur markah tidak terduga"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Data peramban lokal telah dimuat ulang, silakan masukkan kembali perubahan terakhir."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Gagal menyinkronkan"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Periksa koneksi internet Anda dan coba lagi."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Koneksi terputus"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Pastikan Anda sudah memberikan cadangan xBrowserSync yang valid sebelum memulihkan."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Tidak ada data untuk dipulihkan"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Beralih ke layanan yang berbeda atau coba lagi nanti."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Layanan ini tidak menerima sinkronisasi baru"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Data lokal tidak tersinkronisasi dan sekarang telah dimuat ulang. Silakan masukkan kembali perubahan terakhir."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Konflik sinkronisasi terdeteksi"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Hapus beberapa markah dan coba lagi atau beralih ke layanan dengan batas sinkronisasi lebih besar."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Batas data sinkronisasi terlampaui"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Periksa izin telah diberikan dan coba lagi."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Gagal memindai"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "Layanan xBrowserSync ini sedang luring, coba lagi nanti."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Layanan sedang luring"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Gagal membagikan"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "Sinkronisasi yang diminta tidak ada, mungkin sudah dihapus karena ketidakaktifan."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Sinkronisasi tidak ditemukan"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Data cadangan tidak bisa dipulihkan dengan xBrowserSync versi ini karena cadangan tersebut dibuat oleh versi terdahulu."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "ID ini tidak bisa disinkronisasikan dengan xBrowserSync versi ini karena sinkronisasi sudah ditingkatkan ke versi yang lebih baru."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Versi sinkronisasi tidak didukung"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Sinkronisasi telah dimatikan, aktifkan kembali sinkronisasi untuk melanjutkan penyinkronan."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Batas permintaan layanan tercapai"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Perubahan akan disinkronisasi ketika sambungan terpulihkan."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Koneksi terputus"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Layanan ini menjalankan versi API yang tidak didukung."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Layanan tidak didukung"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Peningkatan akan diulangi ketika memulai ulang aplikasi. Jika masalah ini terus terjadi, mohon untuk memasang ulang xBrowserSync.",
        "default": "Mulai ulang peramban Anda untuk mengulangi peningkatan, jika masalah ini terus terjadi, mohon untuk memasang ulang xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Peningkatan gagal"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Koneksi gagal"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Memeriksa"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Tidak menerima sinkronisasi baru"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Luring"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Daring"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "tidak disinkronkan"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "tersinkronisasi"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "menyinkronkan"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Tambahkan markah"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Sunting markah"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Judul"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "URL sudah dimarkahkan"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "URL tidak valid"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "URL diperlukan"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Deskripsi"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Tanda"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "tanda 1, tanda 2, tanda 3, dst."
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Bersihkan tanda"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Hapus tanda"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Hapus"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Bagikan"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Perbarui properti markah"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "Yang dibagikan tidak memiliki URL yang valid."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Menambahkan sebuah markah</h4><p>Markahi halaman saat ini dengan mengklik ikon markah di panel Pencarian. Properti markah akan diisi untuk Anda secara otomatis, atau tidak, tambahkan deskripsi dan beberapa tanda untuk menjamin hasil pencarian yang lebih baik.</p><p>Atau cukup klik tombol \"Markahi laman ini\" di peramban seperti biasanya dan xBrowserSync akan secara otomatis mengisi properti markah (izin opsional harus diberikan untuk ini bisa bekerja, perikas panel Pengaturan).</p>",
        "android": "<h4>Menambahkan sebuah markah</h4><p>Tambahkan markah dengan mudah dengan membagikan ke xBrowserSync dari aplikasi yang membagikan URL seperti peramban, YouTube, Spotify, dan banyak lainnya.</p><p>Properti markah akan diambil untuk Anda, atau tidak tambahkan deskripsi dan beberapa tanda untuk menjamin hasil pencarian yang lebih baik.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Ingat untuk mencadangkan</h4><p>Ketika Anda menggunakan xBrowserSync, data Anda merupakan tanggung jawab Anda, jadilah pintar dan pastikan untuk membuat cadangan.</p><p>Pergi ke panel Pengaturan dan cadangkan data tak terenkripsi Anda ke berkas lokal yang akan bisa digunakan untuk memulihkan data Anda jika anda perlu.</p><p>Jika data peramban lokal Anda jadi rusak dan Anda tidak punya cadangan apa pun, Anda bisa kapan pun mengatur ulang data Anda ke kondisi awal ketika xBrowserSync dipasang.</p>",
        "android": "<h4>Ingat untuk mencadangkan</h4><p>Ketika Anda menggunakan xBrowserSync, data Anda merupakan tanggung jawab Anda, jadilah pintar dan pastikan untuk membuat cadangan.</p><p>Pergi ke panel Pengaturan dan cadangkan data tak terenkripsi Anda ke berkas lokal yang akan bisa digunakan untuk memulihkan data Anda jika anda perlu.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Sebelum Anda memulai</h4><p>xBrowserSync memodifikasi data peramban lokal, jadi merupakan ide yang bagus untuk mencadangkan markah dan data peramban Anda lainnya, dan jika Anda menggunakan layanan atau alat sinkronisasi peramban lainnya (seperti <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>), mohon untuk matikan mereka untuk menghidari konflik.</p>",
        "brave": "<h4>Sebelum Anda memulai</h4><p>xBrowserSync memodifikasi data peramban lokal, jadi merupakan ide yang bagus untuk mencadangkan markah dan data peramban Anda lainnya, dan jika Anda menggunakan layanan atau alat sinkronisasi peramban lainnya (seperti <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>), mohon untuk matikan mereka untuk menghidari konflik.</p>",
        "edge": "<h4>Sebelum Anda memulai</h4><p>xBrowserSync memodifikasi data peramban lokal, jadi merupakan ide yang bagus untuk mencadangkan markah dan data peramban Anda lainnya, dan jika Anda menggunakan layanan atau alat sinkronisasi peramban lainnya (seperti <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>), mohon untuk matikan mereka untuk menghidari konflik.</p>",
        "firefox": "<h4>Sebelum Anda memulai</h4><p>xBrowserSync memodifikasi data peramban lokal, jadi merupakan ide yang bagus untuk mencadangkan markah dan data peramban Anda lainnya, dan jika Anda menggunakan layanan atau alat sinkronisasi peramban lainnya (seperti <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>), mohon untuk matikan mereka untuk menghidari konflik.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Sinkronisasi dengan ID yang telah ada</h4><p>Klik pada \"Sudah punya ID sinkronisasi?\" untuk memasukkan ID sinkronisasi yang ada dan kata sandi. Jika ID sinkronisasi Anda dibuat dengan layanan yang berbeda dengan apa yang ditampilkan, maka ganti ke layanan tersebut sebelum mencoba untuk menyinkronkan.</p><p>xBrowserSync akan mengambil dan mendekripsikan data terenkripsi Anda menggunakan kata sandi lokal tersimpan Anda, kemudian bersihkan markah lokal Anda sebelum mengisi kembali mereka dari data terdekripsi.</p><p>Ketika menyinkronkan, xBrowserSync memeriksa di latar belakang setiap lima belas menit untuk memperbarui data tersinkron Anda dan akan secara otomatis memperbarui markah lokal Anda jika diperlukan. Anda juga bisa secara manual menyinkron pembaruan yang tersedia ke data tersinkron Anda di panel Pengaturan.</p>",
        "android": "<h4>Sinkronisasi dengan ID yang telah ada</h4><p>Mulai dengan memindai kode QR ID sinkronisasi di panel Pengaturan dari ekstensi xBrowserSync peramban komputer (klik pada ID sinkronisasi Anda untuk mengungkapnya). Pastikan Anda memasukkan kata sandi enkripsi yang sama dengan ketika membuat sinkronisasi, kalau tidak xBrowserSync tidak akan bisa mendekripsi data Anda.</p><p>Juga, ketika Anda sedang tersinkron ke layanan xBrowserSync yang berbeda, pastikan bahwa itu merupakan layanan aktif yang terkonfigurasi di panel Pengaturan.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Sinkronisasi untuk pertama kali</h4><p>Sebelum xBrowserSync bisa menyinkronkan data peramban Anda, Anda harus memberikannya kata sandi terenkripsi. Pastikan untuk membuatnya kuat tapi juga gampang diingat, tidak ada setel ulang atau pengingat, jadi ketika Anda lupa itu Anda tidak dapat mengakses data tersinkron Anda.</p><p>Data peramban Anda akan dienkripsi menggunakan kata sandi Anda dan disimpan ke layanan xBrowserSync aktif yang terkonfigurasi di panel Pengaturan.</p><p>Setelah disinkronkan, perubahan apa pun yang Anda buat ke markah lokal Anda akan disinkronisasi secara otomatis oleh xBrowserSync.</p>",
        "android": "<h4>Sinkronisasi untuk pertama kali</h4><p>xBrowserSync secara aktif menyinkronkan data peramban Anda antara peramban komputer Anda (menyinkronkan ke peramban ponsel tidak didukung untuk saat ini), Anda bisa menggunakan aplikasi ini untuk mengakses data tersinkron Anda di perangkat ponsel Android Anda.</p><p>Jika Anda belum membuat ID sinkronisasi, pergilah ke peramban komputer Anda dan <a href='https://link.xbrowsersync.org/download' class='new-tab'>unduh</a> ekstensi xBrowserSync. Setelah Anda membuat sebuah sinkronisasi, Anda bisa menggunakan ID sinkronisasi baru Anda dalam aplikasi ini untuk mengakses data Anda.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Dukungan lebih lanjut</h4><p>Anda bisa mencari jawaban untuk pertanyaan yang sering ditanyakan di<a href='https://link.xbrowsersync.org/faqs' class='new-tab'>SSD (FAQ)</a>, juga periksa <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>isu yang diketahui</a> saat ini untuk melihat apakah isu Anda sudah ada di sana.</p><p>Anda juga bisa menggunakan <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>pelacak isu</a> untuk melaporkan sebuah isu atau permintaan fitur baru.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Mobilitas</h4><p>Akses markah tersinkron Anda dalam perjalanan dengan aplikasi xBrowserSync Android, tersedia di<a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play Store</a>, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a>, atau <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>unduhan langsung</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Fitur baku didukung</h4><p>Jangan ragu untuk terus menggunakan fitur pemarkahan baku peramban Anda seperti bilah markah dan pengelola markah, perubahan apa pun yang Anda buat akan disinkronkan otomatis di latar belakang.</p><p>Jika Anda telah mengorganisir markah telah ada Anda ke folder, jangan khawatir, xBrowserSync akan menghormati dan memelihara hierarki markah telah ada Anda.</p>",
        "firefox": "<h4>Fitur baku didukung</h4><p>Jangan ragu untuk terus menggunakan fitur pemarkahan baku peramban Anda seperti bilah alat markah dan pustaka markah, perubahan apa pun yang Anda buat akan disinkronkan otomatis di latar belakang.</p><p>Jika Anda telah mengorganisir markah telah ada Anda ke folder, jangan khawatir, xBrowserSync akan menghormati dan memelihara hierarki markah telah ada Anda.</p><p>Namun tolong dicatat, karena API markah Firefox belum mendukung mengakses tanda markah baku, tanda yang telah ada akan hilang ketika menyinkronkan dan tanda yang ditambahkan lewat xBrowserSync tidak akan disimpan sebagai tanda baku.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Sebelumnya"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Mencari markah Anda</h4><p>Setelah tersinkron, hanya tekan Enter untuk memperlihatkan markah baru-baru ini Anda atau ketik beberapa kata kunci atau sebuah URL untuk mencari markah Anda.</p><p>Alih antara hasil pencarian dan folder markah untuk menjelajahi seluruh hierarki.</p><p>Untuk menyunting atau menghapus sebuah markah, arahkan kursor ke markah dan klik pada ikon sunting yang baru terlihat di sebelah judul markah.</p>",
        "android": "<h4>Mencari markah Anda</h4><p>Setelah tersinkron, markah Anda akan ditampilkan dalam urutan kronologis ketika Anda membuka xBrowserSync. Ketik beberapa kata kunci atau sebuah URL di kotak pencarian untuk mencari markah Anda.</p><p>Alih antara hasil pencarian dan folder markah untuk menjelajagi seluruh hierarki.</p><p>Pencet panjang pada sebuah markah yang akan mengizinkan Anda untuk membagikan, modifikasi, atau menghapus markahnya secara langsung.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Sinkronisasi ke layanan berbeda</h4><p>Secara baku, data Anda disinkronkan ke <a href='https://link.xbrowsersync.org/api' class='new-tab'>layanan resmi xBrowserSync</a>, namun jika Anda ingin menyinkronkan data Anda ke layanan xBrowserSync lainnya, Anda bisa mengganti layanan aktif sebelum menyinkronkan.</p><p>Periksa daftar <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>layanan xBrowserSync publik</a> yang tersedia atau <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>jalankan layanan Anda sendiri</a>, entah untuk penggunaan pribadi untuk keamanan dan privasi tertinggi atau untuk penggunaan publik agar makin banyak orang bisa menikmati xBrowserSync.</p><p><strong>Penting:</strong> layanan xBrowserSync dijalankan secara mandiri oleh sukarelawan. Administrator layanan tidak bertanggung jawab atas data Anda, jadi harap ingat untuk membuat cadangan secara teratur.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Gunakan pintasan!</h4><p>Untuk mencari markah Anda secara cepat, gunakan pintasan papan tik baku (Ctrl+Spasi) untuk mengaktifkan ekstensi, kemudian hanya pencet Enter untuk melihat markah baru-baru ini atau mulai mengetik untuk mencari.</p><p>Untuk mengganti pintasan, jelajahi chrome://extensions/shortcuts dan perbarui pintasan yang ada di bawah xBrowserSync.</p>",
        "brave": "<h4>Gunakan pintasan!</h4><p>Untuk mencari markah Anda secara cepat, gunakan pintasan papan tik baku (Ctrl+Spasi) untuk mengaktifkan ekstensi, kemudian hanya pencet Enter untuk melihat markah baru-baru ini atau mulai mengetik untuk mencari.</p><p>Untuk mengganti pintasan, jelajahi brave://extensions/shortcuts dan perbarui pintasan yang ada di bawah xBrowserSync.</p>",
        "edge": "<h4>Gunakan pintasan!</h4><p>Untuk mencari markah Anda secara cepat, gunakan pintasan papan tik baku (Ctrl+Spasi) untuk mengaktifkan ekstensi, kemudian hanya pencet Enter untuk melihat markah baru-baru ini atau mulai mengetik untuk mencari.</p><p>Untuk mengganti pintasan, jelajahi edge://extensions/shortcuts dan perbarui pintasan yang ada di bawah xBrowserSync.</p>",
        "firefox": "<h4>Gunakan pintasan!</h4><p>Untuk mencari markah Anda secara cepat, gunakan pintasan papan tik baku (Ctrl+Spasi) untuk mengaktifkan ekstensi, kemudian hanya pencet Enter untuk melihat markah baru-baru ini atau mulai mengetik untuk mencari.</p><p>Untuk mengganti pintasan, jelajahi about:addons, klik pada \"Kelola Pintasan Ekstensi\" di menu Pengaturan dan perbarui pintasan yang ada di bawah xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>ID sinkronisasi Anda</h4><p>xBrowserSync menjamin privasi Anda karena tidak ada data pribadi yang dikumpulkan selamanya dan data peramban Anda dienkripsi sebelum disinkronisasi. Untuk mengidentifikasi data tersinkron yang Anda berikan dengan ID sinkronisasi awanama yang bisa digunakan dengan kata sandi Anda untuk menyinkronikan data Anda di peramban dan perangkat lainnya.</p><p>Perlu diingat bahwa ID sinkronisasi Anda hanya akan bekerja pada layanan xBrowserSync dimana ia dibuat, jika Anda ganti ke layanan xBrowserSync yang berbeda, Anda harus membuat sebuah sinkronisasi baru atau gunakan ID sinkronisasi yang telah dibuat ketika sebelumnya sinkronisasi dengan layanan tersebut.</p><p>Kapan pun Anda tersinkron, Anda bisa melihat ID sinkronisasi Anda di panel Pengaturan, klik panel tersebut untuk mengungkap sebuah kode QR untuk dipindai ketika tersinkron di perangkat ponsel.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Selamat datang ke xBrowserSync!</h4><p>xBrowserSync merupakan alternatif yang bebas dan gratis dan sumber terbuka untuk layanan sinkronisasi peramban yang ditawarkan oleh Google, Mozilla, Opera, dan lainnya, yang menghormati privasi Anda dan memberikan Anda awanama yang penuh (periksa <a href='https://link.xbrowsersync.org/www' class='new-tab'>situs web</a> untuk informasi lebih lanjut).</p><p>Luangkan waktu sejenak untuk membaca panduan bantuan ini untuk membiasakan diri Anda dengan xBrowserSync, gunakan tautan halaman di bawah atau tombol panah untuk berpindah antar halaman.</p><p>Mohon dicatat: xBrowserSync saat ini hanya menyinkronkan markah. Sinkronisasi data peramban tambahan akan ditambahkan pada versi yang akan datang, periksa <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>peta rencana</a> pengembangan untuk melihat apa yang direncanakan.</p>",
        "android": "<h4>Selamat datang ke xBrowserSync!</h4><p>xBrowserSync merupakan alternatif yang bebas dan gratis dan sumber terbuka untuk layanan sinkronisasi peramban yang ditawarkan oleh Google, Mozilla, Opera, dan lainnya, yang menghormati privasi Anda dan memberikan Anda awanama yang penuh (periksa <a href='https://link.xbrowsersync.org/www' class='new-tab'>situs web</a> untuk informasi lebih lanjut).</p><p>Luangkan waktu sejenak untuk membaca panduan bantuan ini untuk membiasakan diri Anda dengan xBrowserSync, gunakan tautan halaman di bawah atau geser untuk berpindah antar halaman.</p><p>Mohon dicatat: xBrowserSync saat ini hanya menyinkronkan markah. Sinkronisasi data peramban tambahan akan ditambahkan pada versi yang akan datang, periksa <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>peta rencana</a> pengembangan untuk melihat apa yang direncanakan.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Memerlukan ID Sinkronisasi?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Unduh ekstensi xBrowserSync di peramban komputer dan buat sinkronisasi baru untuk mengakses markah Anda di sini."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Konfirmasi kata sandi"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Kata sandi enkripsi Anda"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Kata sandi enkripsi"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Masukkan sebuah kata sandi enkripsi"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Ungkap kata sandi"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Hubungkan ke sinkronisasi Anda"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Buka xBrowserSync di peramban komputer Anda, pergi ke panel Pengaturan dan klik di ID Sinkronisasi Anda untuk menamplikan Kode QR yang mana Anda pindai."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Pindai kode"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Masukkan detail sinkronisasi secara manual"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Versi API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Sinkronkan ke layanan ini?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Lokasi"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Ukuran maksimal sinkronisasi"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Menyinkronkan ke"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Status"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "URL layanan xBrowserSync"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Masukkan URL dari layanan alternatif xBrowserSync. Browse the list of public xBrowserSync servicesJelajahi daftar layanan publik xBrowserSync <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>disini</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Pindah layanan"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "URL diperlukan"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Bukan layanan xBrowserSync yang valid"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Bukan URL yang valid"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Tidak dapat terhubung ke layanan"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Layanan ini menjalankan versi API yang tidak didukung"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Penting:</strong> layanan xBrowserSync dijalankan secara mandiri oleh sukarelawan. Administrator layanan tidak bertanggung jawab atas data Anda, jadi harap ingat untuk membuat cadangan secara teratur."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Apakah Anda yakin?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync akan menghapus seluruh data markah lokal sebelum memulihkan markah yang tersinkronisasi. OK untuk lanjut?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Matikan alat sinkronisasi markah"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Menyinkronkan data peramban Anda dengan xBrowserSync ketika alat penyinkronan markah (seperti <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) aktif bisa menimbulkan duplikasi dan kemungkinan data rusak. Mohon untuk mematikannya sebelum melanjutkan.",
            "brave": "Menyinkronkan data peramban Anda dengan xBrowserSync ketika alat penyinkronan markah (seperti <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) aktif bisa menimbulkan duplikasi dan kemungkinan data rusak. Mohon untuk mematikannya sebelum melanjutkan.",
            "edge": "Menyinkronkan data peramban Anda dengan xBrowserSync ketika alat penyinkronan markah (seperti <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) aktif bisa menimbulkan duplikasi dan kemungkinan data rusak. Mohon untuk mematikannya sebelum melanjutkan.",
            "firefox": "Menyinkronkan data peramban Anda dengan xBrowserSync ketika alat penyinkronan markah (seperti <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) aktif bisa menimbulkan duplikasi dan kemungkinan data rusak. Mohon untuk mematikannya sebelum melanjutkan."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Sinkronisasi"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Buat sinkronisasi baru"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Siap untuk meningkatkan sinkronisasi?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Sinkronisasi Anda harus ditingkatkan terlebih dahulu sebelum menyinkronkan dengan xBrowserSync versi ini. Setelah peningkatan, Anda tidak bisa lagi menyinkronkan dengan versi xBrowserSync sebelumnya .</p><p>Pastikan sudah memperbarui xBrowserSync di semua perangkat tersinkron sebelum melanjutkan. Siap untuk melanjutkan?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Tingkatkan sinkronisasi"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Sinkronisasi Anda harus ditingkatkan sebelum sinkronisasi dengan xBrowserSync versi ini.</p><p>Gunakan ekstensi xBrowserSync peramban komputer untuk meningkatkan sinkronisasi Anda, kemudian coba kembali sinkronisasi di sini.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "ID sinkronisasi Anda"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Sudah punya ID sinkronisasi?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "ID sinkronisasi tidak valid"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Dapatkan ID sinkronisasi"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Izin opsional"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync secara otomatis memperkaya markah yang ditambahkan menggunakan tombol Tambah Markah peramban dengan metadata yang tersedia. Untuk mengaktifkan ini, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>memerlukan izin tambahan</a> untuk bisa membaca data situs web yang dikunjungi.</p><p>Mohon tunjukkan jika diminta jika Anda senang untuk memberikan izin tersebut, atau Anda bisa menambah atau menghapus izin kapan saja di panel Pengaturan.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Pindai kode QR ID sinkronisasi Anda"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Alihkan terang"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Lihat folder markah"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Bersihkan"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Folder kosong"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Anda tidak mempunyai markah, tambahkan beberapa!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Tidak ada markah yang ditemukan"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Tekan Enter atau cari markah",
        "android": "Cari markah"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Tarik ke bawah untuk menyinkronkan"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Lepas untuk menyinkronkan"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Lihat hasil pencarian"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Cadangkan dan Pulihkan"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Otomatis Cadangkan"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Otomatis mengunduh cadangan sesuai jadwal."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Pencadangan berjalan"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "setiap"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "satu"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "dua"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "tiga"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "empat"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "lima"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "enam"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "tujuh"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "delapan"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "sembilan"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "sepuluh"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "sebelas"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "dua belas"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "hari"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "minggu"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "bulan"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Untuk menghindari dialog \"Simpan Sebagai...\" tampil sebelum mengunduh cadangan, matikan pengaturan peramban \"Tanyakan selalu tempat menyimpan berkas\"."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Cadangkan"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Unduh cadangan"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Cadangkan data peramban lokal ke sebuah berkas."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Cadankan data tersinkron ke sebuah berkas."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Pulihkan"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Pulihkan dari cadangan"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Pulihkan data peramban lokal dari sebuah cadangan."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Karena saat ini sinkronisasi dimatikan, data yang sedang dipulihkan akan menimpa data peramban lokal.</p><p>OK untuk lanjut?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Pulihkan data tersinkron dari sebuah cadangan."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Karena saat ini sinkronisasi sedang diaktifkan, data yang sedang dipulihkan akan menimpa data yang tersinkron Anda.</p><p>Untuk memulihkan data ke peramban lokal saja, matikan sinkronisasi sebelum memulihkan.</p><p>OK untuk lanjut?</p>",
              "android": "<p>Data yang sedang dipulihkan akan menimpa data tersinkron Anda.</p><p>OK untuk lanjut?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Cadangan telah dipulihkan."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Pilih berkas"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Pilih sebuah berkas cadangan untuk memulihkan"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Salin konten dari berkas cadangan untuk memulihkan data."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Tempel data cadangan"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Pulihkan data"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Data cadangan xBrowserSync tidak valid"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Jika Anda melanjutkan, sinkronisasi akan dimatikan dan data peramban lokal Anda akan diatur ulang ke ketika xBrowserSync dipasang pada {date}.</p><p>OK untuk lanjut?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Atur ulang data lokal"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Data peramban lokal sudah diatur ulang ke kondisi pemasangan awal."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Data kondisi pemasangan tidak tersedia, tidak bisa untuk mengatur ulang."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Bantuan dan dukungan"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Panduan bantuan"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Punya pertanyaan atau memiliki isu? Pastikan untuk membaca panduan bantuan, atau jawabannya mungkin ada di SSD (FAQ)."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Lihat SSD (FAQ)"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Dukungan"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Perlu dukungan? Gunakan pelacak isu untuk melaporkan sebuah galat atau permintaan fitur."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Lihat pelacak isu"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Log aplikasi"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Unduh dan ikutkan log aplikasi ketika Anda log sebuah isu."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Bersihkan log"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Unduh log"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Ukuran log saat ini"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Izin opsional"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Berikan izin"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Diberikan"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Tidak diberikan"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Baca data situs web"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Diperlukan untuk secara otomatis menambahkan metadata ke markah ketika menggunakan tombol \"Markahi laman ini\" di peramban (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>info lebih lanjut</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Hapus izin"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Ambil otomatis metadata markah"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Ambil metadata secara otomatis ketika menambahkan sebuah markah."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Periksa pembaruan aplikasi"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Diingatkan ketika versi baru xBrowserSync tersedia."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Aktifkan mode gelap"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideal untuk penggunaan pada lingkungan kurang cahaya."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Perlihatkan folder markah"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Secara baku perlihatkan folder markah."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Pindah posisi bilah pencarian"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Perlihatkan bilah pencarian di bawah hasil."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Sinkronisasi bilah alat markah"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Mematikan pengaturan ini untuk memperlihatkan bilah alat markah yang berbeda antara peramban yang tersinkron."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Mengaktifkan pengaturan ini akan mengganti markah yang saat ini berada di bilah alat pemarkahan dengan markah tersinkron Anda.</p><p>OK untuk lanjut?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Aktifkan telemetri"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Sesekali kirim data teknis anonim untuk membantu meningkatkan xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Preferensi"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Sinkronisasi"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Matikan sinkronisasi"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID Sinkronisasi"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Gunakan ID Sinkronisasi Anda untuk menghubungkan ke data tersinkronisasi di perangkat lainnya (klik untuk mengungkap Kode QR)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Penggunaan data"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Berapa banyak data sinkronisasi yang diperbolehkan oleh layanan yang Anda gunakan."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Layanan"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Sinkronisasi terakhir {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Siap untuk disinkronkan (dijadwalkan untuk {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Sinkronkan sekarang"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Pindai Kode QR ini menggunakan aplikasi Android xBrowserSync untuk menghubungkan dengan data tersinkron Anda."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Perlihatkan Kode QR"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Salin ID Sinkronisasi ke papan klip"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Disalin!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Pengaturan tersedia ketika sinkronisasi diaktifkan."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Berkas disimpan ke Unduhan"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Dukung xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Dukung xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Kami ingin membuat xBrowserSync ala sinkronisasi peramban nomor satu, tapi masih banyak yang harus dilakukan:</p><ul><li>Menambahkan sinkronisasi tab dan riwayat peramban</li><li>Mendukung seluruh peramban komputer umum</li><li>Menerjemahkan ke bahasa lain</li><li>Dan <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>banyak lainnya</a>!</li></ul><p>Hanya dengan dukungan Anda kami bisa melanjutkan pengembangan xBrowserSync dan menjamin akan tetap efektif melindungi privasi daring dan meningkatkan produktivitas.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Kripto"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Sinkronisasi tidak ditemukan"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Sinkronisasi Anda tidak dapat ditemukan dan mungkin sudah dihapus karena ketidakaktifan.</p><p>Anda harus membuat sinkronisasi yang baru, tapi pertama-tama klik tombol di bawah ini untuk mengunduh cadangan data tersinkron Anda yang dimana selanjutnya Anda bisa memulihkannya ke sinkronisasi yang baru.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Kirim telemetri anonim?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync tidak seperti aplikasi tradisional karena ini adalah alat yang sepenuhnya anonim dan mengutamakan privasi. Mempertahankan alat semacam itu merupakan tantangan karena kami tidak memiliki akses ke data pengguna untuk membantu menentukan cara terbaik untuk menerapkan sumber daya kami yang terbatas. Oleh karena itu, kami meminta izin Anda untuk sesekali mengirim data teknis anonim untuk membantu kami meningkatkan xBrowserSync.</p><p>Data telemetri ini tidak menyertakan data pribadi atau identitas apa pun, juga tidak menyertakan data sinkronisasi terenkripsi Anda dan tidak pernah dibagikan dengan pihak ketiga mana pun (Anda dapat memilih ikut serta atau keluar kapan saja di panel Pengaturan).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Diperbarui ke"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync telah diperbarui dengan fitur dan perbaikan terbaru.</p><p>Jika sinkronisasi diaktifkan sebelumnya maka telah dimatikan dan sinkronisasi Anda harus ditingkatkan terlebih dahulu sebelum menyinkronkan dengan xBrowserSync versi ini. Aktifkan kembali sinkronisasi untuk menyelesaikan proses peningkatan.</p><p>Untuk detail lebih lanjut tentang perubahan yang ada di rilis ini, silakan periksa catatan rilis.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Memulihkan"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Atur Ulang"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Menyinkronkan"
      }
    }
  }
}
</file>

<file path="res/strings/it.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSync aggiornamento disponibile"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} è disponibile per il download. Clicca per ulteriori informazioni.",
        "android": "xBrowserSync {version} è disponibile per il download."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Aggiornato a"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync è stato aggiornato. La sincronizzazione è stata disattivata, riattiva la sincronizzazione per completare il processo di aggiornamento."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Segnalibro creato"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Segnalibro eliminato"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Segnalibro aggiornato"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Recupero delle proprietà del segnalibro, tocca per annullare."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Proprietà del segnalibro aggiornate."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Vai"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "La sincronizzazione del browser come dovrebbe essere: sicura, anonima e gratuita! Sincronizza i segnalibri attraverso i tuoi browser e dispositivi, non è richiesta alcuna registrazione."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Menu segnalibri"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Altri segnalibri"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Segnalibri barra degli strumenti"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Aggiungi segnalibro"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Indietro"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Annulla"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Chiudi"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Si"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Continua"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Elimina segnalibro"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "No"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Fatto"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Scarica Backup"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Modifica segnalibro"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Visualizza guida"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Successivo"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Visualizza note di rilascio"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Salvataggio in corso"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Impostazioni"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Condividi segnalibro"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Annulla"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Aggiorna"
    },
    "View": {
      "key": "Button_View",
      "default": "Visualizza"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Si prega di evitare di modificare le cartelle [xbs] in quanto possono causare problemi di sincronizzazione."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "Cartella xBrowserSync cambiata"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Sincronizza con un ID di sincronizzazione esistente, passa a un altro server o riprova domani."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Raggiunto un nuovo limite di sincronizzazione giornaliero"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Se il problema persiste, <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>segnala il problema</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Qualcosa è andato storto"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Backup non riuscito"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Sfoglia file non riuscita"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "L'URL non è valido o i dati della pagina web non possono essere recuperati."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Impossibile ottenere le proprietà del segnalibro"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Impossibile recuperare gli aggiornamenti"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "I dati di backup forniti non sono in un formato previsto."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Impossibile ripristinare i dati"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Devi essere sincronizzato per aggiungere un segnalibro"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Impossibile recuperare l'URL del segnalibro condiviso"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Controlla la tua connessione di rete e riprova. Se il problema persiste, potrebbe esserci un problema con il servizio xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Sincronizzazione non riuscita"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Impossibile trovare le credenziali memorizzate. Riattiva la sincronizzazione e riprova."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Credenziali mancanti"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Verificare che l'ID di sincronizzazione, la password e l'URL del server siano stati inseriti correttamente."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Credenziali non valide"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "L'URL del server non è un server xBrowserSync valido."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Server xBrowserSync non valido"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Possibile profilo del browser danneggiato, provare a creare un nuovo profilo in quanto potrebbe risolvere il problema."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Struttura dei segnalibri inattesa"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "I dati del browser locale sono stati aggiornati, si prega di riaggiungere l'ultima modifica."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Errore di sincronizzazione"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Controllare la connessione di rete e riprovare."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Collegamento perso"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Assicurati di aver fornito un backup xBrowserSync valido prima del ripristino."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Nessun dato da ripristinare"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Passa a un server diverso o riprova più tardi."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Server che non accetta nuove sincronizzazioni"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "I dati locali non sono sincronizzati e sono stati aggiornati. Si prega di riapplicare l'ultima modifica."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Rilevato conflitto di sincronizzazione"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Elimina alcuni segnalibri e riprova o passa a un server con un limite di sincronizzazione più grande."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Limite dati sincronizzati superato"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "È stata concessa l'autorizzazione di verifica e riprova."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Fallita scansione"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "Il server xBrowserSync è attualmente non in linea, riprova più tardi."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Server non in linea"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Fallita condivisione"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "La sincronizzazione richiesta non esiste, potrebbe essere stata rimossa a causa di inattività."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Sincronizzazione non trovata"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "I dati di backup non possono essere ripristinati da questa versione di xBrowserSync in quanto sono stati creati con una versione successiva."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Questo ID non può essere sincronizzato con questa versione di xBrowserSync perché la sincronizzazione è stata aggiornata a una versione successiva."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Versione di sincronizzazione non supportata"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "La sincronizzazione è stata disattivata, riabilita la sincronizzazione per riprendere la sincronizzazione."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Limite richieste di server raggiunto"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Le modifiche verranno sincronizzate una volta ripristinata la connessione."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Collegamento perso"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Questo server sta eseguendo una versione API non supportata."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Server non supportato"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "L'aggiornamento verrà riprovato al riavvio dell'app. Se il problema persiste, reinstalla xBrowserSync.",
        "default": "Riavvia il tuo browser per riprovare l'aggiornamento, se il problema persiste reinstalla xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Aggiornamento non riuscito"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Errore di connessione"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Controllo in corso"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Non accettare nuove sincronizzazioni"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Non in linea"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "In linea"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "non sincronizzato"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "sincronizzato"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "sincronizzazione"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Aggiungi segnalibro"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Modifica segnalibro"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Titolo"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "L'URL è già stato contrassegnato come segnalibro"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "URL non valido"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "L'URL è obbligatorio"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Descrizione"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Etichette"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "etichetta 1, etichetta 2, etichetta 3, eccetera"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Cancella etichette"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Rimuovi etichetta"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Elimina"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Condividi"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Aggiorna proprietà del segnalibro"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "Il valore condiviso non contiene un URL valido."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Aggiunta di un segnalibro</h4><p>Aggiungi un segnalibro alla pagina corrente facendo clic sull'icona del segnalibro nel pannello di ricerca. Le proprietà del segnalibro saranno generate automaticamente per te, altrimenti aggiungi una descrizione e alcuni tag per garantire migliori risultati di ricerca.</p><p>In alternativa, semplicemente fai clic sul pulsante “Aggiungi un segnalibro a questa pagina” del browser come normale e xBrowserSync genererà automaticamente le proprietà del segnalibro (permessi opzionali devono essere concessi per funzionare, controllare il pannello Impostazioni).</p>",
        "android": "<h4>Aggiunta di un segnalibro</h4><p>Aggiungi facilmente i segnalibri condividendo xBrowserSync da tutte le applicazioni che condividono URL come i browser, YouTube, Spotify e molti altri.</p><p>Le proprietà del segnalibro saranno recuperate per te, altrimenti aggiungi una descrizione e alcuni tag per garantire risultati di ricerca migliori.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Ricordati di eseguire il backup</h4><p>Quando utilizzi xBrowserSync i tuoi dati sono di tua responsabilità, quindi sii intelligente e assicurati di fare dei backup.</p><p>Vai al pannello Impostazioni e esegui il backup dei dati non crittografati in un file locale che può essere utilizzato per ripristinare i tuoi dati in caso di necessità.</p><p>Se i dati del tuo browser locale vengono corrotti e non hai alcun backup, è possibile in qualsiasi momento ripristinare i dati allo stato originale da quando xBrowserSync è stato installato.</p>",
        "android": "<h4>Ricordati di eseguire il backup</h4><p>Quando utilizzi xBrowserSync i tuoi dati sono di tua responsabilità, quindi sii intelligente e assicurati di fare dei backup.</p><p>Vai al pannello Impostazioni e esegui il backup dei dati non crittografati in un file locale che può essere utilizzato per ripristinare i tuoi dati in caso di necessità.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Prima di iniziare</h4><p>xBrowserSync modifica i dati locali del tuo browser quindi è una buona idea fare un backup dei tuoi segnalibri e degli altri dati del browser nel caso, e se stai usando altri servizi o strumenti di sincronizzazione del browser (come <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) disabilitali per evitare conflitti.</p>",
        "brave": "<h4>Prima di iniziare</h4><p>xBrowserSync modifica i dati locali del tuo browser quindi è una buona idea fare un backup dei tuoi segnalibri e degli altri dati del browser nel caso, e se stai usando altri servizi o strumenti di sincronizzazione del browser (come <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) disabilitali per evitare conflitti.</p>",
        "edge": "<h4>Prima di iniziare</h4><p>xBrowserSync modifica i dati locali del tuo browser quindi è una buona idea fare un backup dei tuoi segnalibri e degli altri dati del browser nel caso, e se stai usando altri servizi o strumenti di sincronizzazione del browser (come <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) disabilitali per evitare conflitti.</p>",
        "firefox": "<h4>Prima di iniziare</h4><p>xBrowserSync modifica i dati locali del tuo browser quindi è una buona idea fare un backup dei tuoi segnalibri e degli altri dati del browser nel caso, e se stai usando altri servizi o strumenti di sincronizzazione del browser (come <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) disabilitali per evitare conflitti.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Sincronizzazione con il tuo ID esistente</h4><p>Clicca su “Hai già un ID di sincronizzazione?” per inserire il tuo ID di sincronizzazione esistente e la tua password. Se l'ID di sincronizzazione è stato creato su un server diverso da quello visualizzato, passare al server prima di tentare di sincronizzare.</p><p>xBrowserSync recupererà e decrittograferà i dati crittografati utilizzando la password memorizzata localmente, poi cancella i tuoi segnalibri locali prima di generarli con i dati decrittografati.</p><p>Quando sincronizzato, xBrowserSync controlla in background ogni quindici minuti per aggiornare i tuoi dati sincronizzati e aggiornerà automaticamente i tuoi segnalibri locali quando necessario. Puoi anche sincronizzare manualmente gli aggiornamenti disponibili per i tuoi dati sincronizzati nel pannello Impostazioni.</p>",
        "android": "<h4>Sincronizzazione con il tuo ID esistente</h4><p>Inizia scansionando il codice QR ID di sincronizzazione nel pannello Impostazioni dell'estensione del browser desktop xBrowserSync (clicca sul tuo ID di sincronizzazione per rivelarlo). Assicurati di inserire la stessa password di crittografia utilizzata per creare la sincronizzazione altrimenti xBrowserSync non sarà in grado di decifrare i tuoi dati.</p><p>Inoltre, se si è sincronizzati con un altro server xBrowserSync assicurarsi che sia il server attivo configurato nel pannello Impostazioni.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Sincronizzazione per la prima volta</h4><p>Prima che xBrowserSync possa sincronizzare i dati del browser è necessario fornire una password di cifratura. Assicurarsi di rendere forte ma anche ricordabile, non ci sono reset o promemoria quindi se lo dimentichi non potrai accedere ai tuoi dati sincronizzati.</p><p>I dati del browser verranno crittografati utilizzando la password e salvati nel server xBrowserSync attivo configurato nel pannello Impostazioni.</p><p>Una volta sincronizzato, qualsiasi modifica apportata ai segnalibri locali verrà sincronizzata automaticamente da xBrowserSync.</p>",
        "android": "<h4>Sincronizzazione per la prima volta</h4><p>xBrowserSync sincronizza attivamente i dati del browser tra i tuoi browser desktop (la sincronizzazione con i browser mobile non è supportata in questo momento), puoi utilizzare questa app per accedere ai tuoi dati sincronizzati sul tuo dispositivo mobile Android.</p><p>Se non hai già creato un ID di sincronizzazione, vai al tuo browser desktop e <a href='https://link.xbrowsersync.org/download' class='new-tab'>scarica</a> l'estensione xBrowserSync. Una volta creata una sincronizzazione puoi utilizzare il tuo nuovo ID di sincronizzazione all'interno di questa app per accedere ai tuoi dati.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Ulteriore supporto</h4><p>Puoi trovare le risposte alle domande più comuni nelle <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>Domande Frequenti</a>, controlla anche gli attuali <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>problemi conosciuti</a> per vedere se il tuo problema è elencato.</p><p>In alternativa, utilizza il <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>issue tracker</a> per segnalare un problema o richiedere una nuova funzionalità.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Vai su cellulare</h4><p>Accedi ai segnalibri sincronizzati in giro con l'app xBrowserSync Android, disponibile su <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> store, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> o <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>download diretto</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Funzionalità native supportate</h4><p>Sentiti libero di continuare a utilizzare le funzionalità di segnalibri nativi del tuo browser, come la barra dei segnalibri e il gestore dei segnalibri, qualsiasi modifica apportata verrà sincronizzata automaticamente in background.</p><p>Se hai organizzato i segnalibri esistenti in cartelle non ti preoccupare, xBrowserSync rispetterà e manterrà la gerarchia dei segnalibri esistenti.</p>",
        "firefox": "<h4>Funzionalità native supportate</h4><p>Sentiti libero di continuare a utilizzare le funzionalità di segnalibri nativi del tuo browser, come la barra degli strumenti dei segnalibri e la libreria dei segnalibri, qualsiasi modifica apportata verrà sincronizzata automaticamente in background.</p><p>Se hai organizzato i segnalibri esistenti in cartelle non ti preoccupare, xBrowserSync rispetterà e manterrà la gerarchia dei segnalibri esistenti.</p><p>Si prega di notare tuttavia, come l'API dei segnalibri di Firefox non supporta ancora l'accesso ai tag dei segnalibri nativi, eventuali tag esistenti verranno persi quando la sincronizzazione e i tag aggiunti tramite xBrowserSync non verranno salvati come tag nativi.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Precedente"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Ricerca dei segnalibri</h4><p>Una volta sincronizzata, basta premere Invio per visualizzare i segnalibri recenti o digitare alcune parole chiave o un URL per cercare i segnalibri.</p><p>Commuta tra i risultati della ricerca e le cartelle dei segnalibri per sfogliare l'intera gerarchia.</p><p>Per modificare o eliminare un segnalibro, passa sopra il segnalibro e fai clic sull'icona di modifica ora visibile accanto al titolo del segnalibro.</p>",
        "android": "<h4>Ricerca dei segnalibri</h4><p>Una volta sincronizzati, i segnalibri vengono visualizzati in ordine cronologico quando apri xBrowserSync. Digita alcune parole chiave o un URL nella casella di ricerca per cercare i segnalibri.</p><p>Commuta tra i risultati della ricerca e le cartelle dei segnalibri per sfogliare l'intera gerarchia.</p><p>Una pressione prolungata su un segnalibro ti permetterà di condividere, modificare o eliminare direttamente il segnalibro.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Sincronizzazione con un altro server</h4><p>Per impostazione predefinita i dati vengono sincronizzati con il server <a href='https://link.xbrowsersync.org/api' class='new-tab'>ufficiale xBrowserSync</a>, tuttavia, se si desidera sincronizzare i dati con un server xBrowserSync alternativo è possibile cambiare il server attivo prima della sincronizzazione.</p><p>Controlla l'elenco dei server <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>pubblici xBrowserSync</a> o <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>esegui il tuo server</a>, sia per uso privato per la massima sicurezza e privacy, o per uso pubblico in modo che più persone possano godere di xBrowserSync.</p><p><strong>Importante:</strong> i server xBrowserSync sono gestiti indipendentemente da volontari. L'amministratore del server non si assume alcuna responsabilità per i tuoi dati, quindi ti ricordatii di eseguire regolarmente il backup.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Usa le scorciatoie!</h4><p>Per cercare rapidamente i segnalibri, usa la scorciatoia da tastiera (Ctrl+Space) per attivare l'estensione, poi basta premere Invio per visualizzare i segnalibri recenti o iniziare a digitare per la ricerca.</p><p>Per cambiare la scorciatoia, cerca di chrome://extensions/shortcuts e aggiorna le scorciatoie disponibili sotto xBrowserSync.</p>",
        "brave": "<h4>Usa le scorciatoie!</h4><p>Per cercare rapidamente i segnalibri, usa la scorciatoia da tastiera (Ctrl+Space) per attivare l'estensione, poi basta premere Invio per visualizzare i segnalibri recenti o iniziare a digitare per la ricerca.</p><p>Per cambiare la scorciatoia, cerca di brave://extensions/shortcuts e aggiorna le scorciatoie disponibili sotto xBrowserSync.</p>",
        "edge": "<h4>Usa le scorciatoie!</h4><p>Per cercare rapidamente i segnalibri, usa la scorciatoia da tastiera (Ctrl+Space) per attivare l'estensione, poi basta premere Invio per visualizzare i segnalibri recenti o iniziare a digitare per la ricerca.</p><p>Per cambiare la scorciatoia, cerca di edge://extensions/shortcuts e aggiorna le scorciatoie disponibili sotto xBrowserSync.</p>",
        "firefox": "<h4>Usa le scorciatoie!</h4><p>Per cercare rapidamente i segnalibri, usa la scorciatoia da tastiera (Ctrl+Space) per attivare l'estensione, poi basta premere Invio per visualizzare i segnalibri recenti o iniziare a digitare per la ricerca.</p><p>Per cambiare la scorciatoia, vai su about:addons, clicca su “Gestisci le scorciatoie di estensione” nel menu Impostazioni e aggiorna le scorciatoie disponibili sotto xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Il tuo ID di sincronizzazione</h4><p>xBrowserSync garantisce la tua privacy poiché nessun dato personale viene mai raccolto e i dati del tuo browser vengono crittografati prima di essere sincronizzati. Per identificare i tuoi dati sincronizzati ti viene fornito un ID di sincronizzazione anonimo che può essere utilizzato insieme alla tua password per sincronizzare i tuoi dati su altri browser e dispositivi.</p><p>Ricorda che il tuo ID di sincronizzazione funzionerà solo con il server xBrowserSync su cui è stato creato, se si passa a un altro seerver xBrowserSync è necessario creare una nuova sincronizzazione o utilizzare un ID di sincronizzazione esistente creato quando precedentemente sincronizzato con quel servizio.</p><p>Ogni volta che si è sincronizzati è possibile visualizzare l'ID di sincronizzazione nel pannello Impostazioni, fare clic su di esso per rivelare un pratico codice QR per eseguire la scansione durante la sincronizzazione su dispositivi mobili.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Benvenuto su xBrowserSync!</h4><p>xBrowserSync è un'alternativa gratuita e open-source ai servizi di sincronizzazione del browser offerti da Google, Mozilla, Opera e altri, che rispetta la tua privacy e ti dà totale anonimato (consulta il sito <a href='https://link.xbrowsersync.org/www' class='new-tab'></a> per maggiori informazioni).</p><p>Prenditi un momento per leggere questa guida di aiuto per familiarizzarti con xBrowserSync, utilizzando i link di paginazione qui sotto o i tasti freccia per spostarsi tra le pagine.</p><p>Si prega di notare: xBrowserSync attualmente sincronizza solo i segnalibri. La sincronizzazione dei dati aggiuntivi del browser sarà aggiunta nelle versioni future, controlla il <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>piano d'azione</a> per vedere cosa è previsto.</p>",
        "android": "<h4>Benvenuto su xBrowserSync!</h4><p>xBrowserSync è un'alternativa gratuita e open-source ai servizi di sincronizzazione del browser offerti da Google, Mozilla, Opera e altri, che rispetta la tua privacy e ti dà totale anonimato (consulta il sito <a href='https://link.xbrowsersync.org/www' class='new-tab'></a> per maggiori informazioni).</p><p>Prenditi un momento per leggere questa guida di aiuto per familiarizzarti con xBrowserSync, utilizzando i link di paginazione qui sotto o scorrendo per spostarsi tra le pagine.</p><p>Si prega di notare: xBrowserSync attualmente sincronizza solo i segnalibri. La sincronizzazione dei dati aggiuntivi del browser sarà aggiunta nelle versioni future, controlla il <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>piano d'azione</a> per vedere cosa è previsto.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Hai bisogno di un ID di sincronizzazione?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Scarica l'estensione del browser desktop xBrowserSync e crea una nuova sincronizzazione per accedere ai segnalibri qui."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Conferma password"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Tua password di cifratura"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Password di cifratura"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Inserire password di cifratura"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Mostra password"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Connettiti alla tua sincronizzazione"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Apri xBrowserSync sul tuo browser desktop, vai al pannello di impostazioni e clicca sul tuo ID di sincronizzazione per visualizzare il codice QR che puoi scansionare qui."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Scansiona codice"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Inserire manualmente dettagli di sincronizzazione"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Versione API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Sincronizzare con questo server?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Luogo"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Dimensione massima della sincronizzazione"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Sincronizzazione in"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Stato"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSync server URL"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Inserisci l'URL di un server alternativo xBrowserSync. Sfoglia l'elenco dei server pubblici xBrowserSync <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>qui</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Cambia server"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "L'URL è obbligatorio"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Server xBrowserSync non valido"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "URL non valido"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Non è possibile connettersi al server"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Questo server sta eseguendo una versione API non supportata"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Importante:</strong> I server xBrowserSync sono eseguiti indipendentemente dai volontari. L'amministratore del server non si assume alcuna responsabilità per i tuoi dati, quindi ricorda di eseguire il backup regolarmente."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Sei sicuro?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync eliminerà tutti i dati dei segnalibri locali prima di ripristinare i segnalibri sincronizzati. OK per procedere?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Disabilita strumenti di sincronizzazione dei segnalibri"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Sincronizza i dati del browser con xBrowserSync mentre altri strumenti di sincronizzazione dei segnalibri (come <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) sono attivi può causare duplicazioni e forse dati danneggiati. Per favore, disabilitali prima di continuare.",
            "brave": "Sincronizza i dati del browser con xBrowserSync mentre altri strumenti di sincronizzazione dei segnalibri (come <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) sono attivi può causare duplicazioni e forse dati danneggiati. Per favore, disabilitali prima di continuare.",
            "edge": "Sincronizza i dati del browser con xBrowserSync mentre altri strumenti di sincronizzazione dei segnalibri (come <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) sono attivi può causare duplicazioni e forse dati danneggiati. Per favore, disabilitali prima di continuare.",
            "firefox": "Sincronizza i dati del browser con xBrowserSync mentre altri strumenti di sincronizzazione dei segnalibri (come <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) sono attivi può causare duplicazioni e forse dati danneggiati. Per favore, disabilitali prima di continuare."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Sincronizzazione"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Creare nuova sincronizzazione"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Sei pronto ad aggiornare la sincronizzazione?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>La sincronizzazione deve essere aggiornata prima di sincronizzare con questa versione di xBrowserSync. Dopo l'aggiornamento, non sarai più in grado di sincronizzare con le versioni precedenti di xBrowserSync.</p><p>Assicurati di aggiornare xBrowserSync su tutti i dispositivi sincronizzati prima di continuare. Sei pronto a procedere?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Aggiorna sincronizzazione"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>La sincronizzazione deve essere aggiornata prima di sincronizzare con questa versione di xBrowserSync.</p><p>Usa l'estensione del browser desktop xBrowserSync per aggiornare la sincronizzazione e riprovare la sincronizzazione qui.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Il tuo ID di sincronizzazione"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Hai già un ID di sincronizzazione?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "ID di sincronizzazione non valido"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Ottieni un ID di sincronizzazione"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Permessi opzionali"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync arricchisce automaticamente i segnalibri aggiunti utilizzando il pulsante Aggiungi segnalibro del browser con i metadati disponibili. Per abilitare questa funzione, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>richiede permessi aggiuntivi</a> per poter leggere i dati del sito web visitato.</p><p>Si prega di indicare se siete felici di concedere questi permessi, in alternativa è possibile aggiungere o rimuovere i permessi in qualsiasi momento nel pannello Impostazioni.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Scansiona il codice QR del tuo ID di sincronizzazione"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Accendi/spegni luce"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Visualizza le cartelle dei segnalibri"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Cancella"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "La cartella è vuota"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Non hai segnalibri, aggiungine qualcuno!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Nessun segnalibro trovato"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Premi Invio o cerca segnalibri",
        "android": "Trova segnalibri"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Trascina in basso per sincronizzare"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Rilascia per sincronizzare"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Visualizza i risultati della ricerca"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Backup e ripristino"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Backup automatico"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Scarica automaticamente i backup in modo programmato."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Backup in esecuzione a"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "tutti"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "singolo"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "due"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "tre"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "quattro"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "cinque"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "sei"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "sette"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "otto"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "nove"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "dieci"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "undici"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "dodici"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "giorno/i"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "settimana/e"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "mese/i"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Per evitare la finestra di dialogo “Salva come...” da mostrare durante il download di backup, disabilitare l'impostazione del browser “Chiedi dove salvare ogni file prima di scaricare”."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Backup"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Scarica Backup"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Esegui il backup dei dati del browser locale su un file."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Backup dei dati sincronizzati su file."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Ripristina"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Ripristino Da Backup"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Ripristina i dati locali del browser da un backup."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Poiché la sincronizzazione è attualmente disabilitata, i dati ripristinati sovrascriveranno i dati del browser locale.</p><p>OK per procedere?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Ripristina i dati sincronizzati da un backup."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Poiché la sincronizzazione è attualmente abilitata, i dati ripristinati sovrascriveranno i dati sincronizzati.</p><p>Per ripristinare i dati solo nel browser locale, disabilitare la sincronizzazione prima del ripristino.</p><p>OK per procedere?</p>",
              "android": "<p>I dati ripristinati sovrascriveranno i dati sincronizzati.</p><p>OK per procedere?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Backup ripristinato."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Seleziona file"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Selezionare il file di backup da ripristinare"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Copia i contenuti di un file di backup per ripristinare i dati."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Ripristina i dati di backup"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Ripristino dati"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Dati di backup xBrowserSync non validi"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Se continui, la sincronizzazione sarà disabilitata e i dati del browser locale verranno ripristinati quando xBrowserSync è stato installato il {date}.</p><p>OK per procedere?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Ripristina Dati Locali"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "I dati del browser locali sono stati ripristinati allo stato di installazione iniziale."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Stato dei dati di installazione non disponibili, impossibile reimpostare."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Aiuto e assistenza"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Guida di aiuto"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Hai una domanda o un problema? Assicurati di leggere la guida di aiuto, altrimenti la risposta potrebbe essere nelle Domande Frequenti."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Visualizza Domande Frequenti"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Assistenza"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Hai bisogno di assistenza? Utilizza il tracker dei problemi per segnalare un bug o richiedere una funzionalità."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Visualizza Tracker Dei Problemi"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Registro dell'applicazione"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Scarica e includi il registro delle applicazioni quando si registra un problema."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Svuota registro"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Scarica registro"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Dimensione registro attuale"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Permessi opzionali"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Concedi permessi"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Concesso"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Non concesso"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Leggi dati del sito"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Richiesto per aggiungere automaticamente metadati ai segnalibri quando si utilizza il pulsante “Aggiungi questa pagina” del browser (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>ulteriori informazioni</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Rimuovi i permessi"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Recupero automatico metadati dei segnalibri"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Recupera automaticamente i metadati quando si aggiunge un segnalibro."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Controlla nuovi aggiornamenti app"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Ricevi una notifica quando è disponibile una nuova versione di xBrowserSync."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Attiva modalità scura"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideale per l'uso in ambienti a bassa luminosità."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Mostra la barra dei preferiti"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Visualizza le cartelle dei segnalibri in modo predefinito."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Cambia posizione barra di ricerca"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Mostra la barra di ricerca sotto i risultati."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Sincronizza barra dei segnalibri"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Disabilita questa impostazione per visualizzare diversi segnalibri nella barra degli strumenti attraverso i browser sincronizzati."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Abilitare questa impostazione sostituirà i segnalibri attualmente presenti nella barra dei segnalibri con i segnalibri sincronizzati.</p><p>OK per procedere?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Abilita la telemetria"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Invia occasionalmente dati tecnici anonimi per migliorare xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Preferenze"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Sincronizzazione"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Disabilita sincronizzazione"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID sincronizzazione"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Usa il tuo ID di sincronizzazione per connetterti ai tuoi dati sincronizzati su altri dispositivi (clicca per rivelare il codice QR)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Utilizzo dati"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Quanti dei dati di sincronizzazione consentiti dal servizio stai utilizzando."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Servizio"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Ultima sincronizzazione {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Pronto per la sincronizzazione (pianificata per {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Sincronizza Ora"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Scansiona questo codice QR utilizzando l'app xBrowserSync Android per connetterti ai tuoi dati sincronizzati."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Mostra codice QR"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Copia ID sincronizzazione negli appunti"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Copiato!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Impostazioni disponibili quando la sincronizzazione è abilitata."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "File salvato negli scaricamenti"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Supporta xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Supporta xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Vogliamo fare xBrowserSync lo strumento di sincronizzazione numero uno del browser, ma c'è ancora molto da fare:</p><ul><li>Aggiungere la sincronizzazione delle schede del browser</li><li>Supportare tutti i principali browser desktop</li><li>Tradurre in altre lingue</li><li>E <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>molto altro</a>!</li></ul><p>Solo con il tuo supporto possiamo continuare a migliorare xBrowserSync e assicurarci che rimanga efficace nel proteggere la privacy online e migliorare la produttività.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Criptovalute"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Sincronizzazione non trovata"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>La sincronizzazione non è stata trovata e potrebbe essere stata rimossa a causa dell'inattività.</p><p>Dovrai creare una nuova sincronizzazione, ma prima fare clic sul pulsante qui sotto per scaricare un backup dei dati sincronizzati che è possibile quindi ripristinare alla nuova sincronizzazione.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Inviare telemetria anonima?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync è diverso dalle app tradizionali poiché è uno strumento completamente anonimo e al primo posto per la privacy. Mantenere uno strumento di questo tipo è impegnativo poiché non abbiamo accesso ai dati degli utenti per determinare il modo migliore per distribuire le nostre risorse limitate. Pertanto, chiediamo la tua autorizzazione per inviare occasionalmente dati tecnici anonimi per aiutarci a migliorare xBrowserSync.</p><p>Questi dati di telemetria non includono dati personali o identificativi, né includono nessuno dei tuoi dati di sincronizzazione crittografati e non sono mai condivisi con terze parti (puoi attivare o disattivare in qualsiasi momento nel pannello Impostazioni).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Aggiornato il"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync è stato aggiornato con le ultime funzionalità e correzioni.</p><p>Se la sincronizzazione è stata attivata, è stata disattivata e la sincronizzazione deve essere aggiornata prima di sincronizzare con questa versione di xBrowserSync. Riattiva la sincronizzazione per completare il processo di aggiornamento.</p><p>Per maggiori dettagli sulle modifiche contenute in questa versione, consulta le note di rilascio.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Ripristino in corso"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Reimpostando"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Sincronizzazione in corso"
      }
    }
  }
}
</file>

<file path="res/strings/ja.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSync の更新があります"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} はダウンロード可能です。詳細はクリックしてください。",
        "android": "xBrowserSync {version} をダウンロードできます。"
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "次のバージョンに更新します"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync が更新されました。同期は無効になりました。アップグレードプロセスを完了するには同期を再度有効にしてください。"
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "ブックマークが作成 されました"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "ブックマークが削除 されました"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "ブックマークが 更新されました"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "ブックマークのプロパティを取得しています。 クリックしてキャンセルします。"
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "ブックマークのプロパティを更新しました。 "
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "進む！"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "本来あるべきブラウザの同期は「安全かつ匿名で無料」です。 ブラウザやデバイス間でブックマークを同期します。サインアップは必要ありません。 "
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync "
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "ブックマークのメニュー "
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "その他のブックマーク"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "ツールバーのブックマーク"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "ブックマークを追加"
    },
    "Back": {
      "key": "Button_Back",
      "default": "戻る"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "キャンセル"
    },
    "Close": {
      "key": "Button_Close",
      "default": "閉じる"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "はい！"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "続ける"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "ブックマークを削除"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "いいえ"
    },
    "Done": {
      "key": "Button_Done",
      "default": "完了！"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "バックアップをダウンロード"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "ブックマークを編集"
    },
    "Help": {
      "key": "Button_Help",
      "default": "ヘルプガイドを見る"
    },
    "Next": {
      "key": "Button_Next",
      "default": "次へ"
    },
    "OK": {
      "key": "Button_OK",
      "default": "決定"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "リリースノートを見る"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "保存中..."
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Syncの設定"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "ブックマークを共有"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "元に戻す"
    },
    "Update": {
      "key": "Button_Update",
      "default": "アップデート"
    },
    "View": {
      "key": "Button_View",
      "default": "表示"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "同期が壊れる可能性があるため、[xbs] フォルダの変更はしないでください"
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "xBrowserSync はフォルダを変更しました"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "お使いの同期 ID を利用するか、別のサーバに切り替えるか再試行してください"
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "今日の同期可能数の上限に達しました。"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "問題が解決しない場合は、 <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>問題</a> を報告してください。"
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "問題が発生しました"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "バックアップに失敗しました"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "ファイルの閲覧に失敗しました"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "URLが無効またはWebページデータを取得できませんでした。"
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "ブックマークのプロパティを取得できませんでした"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "更新情報を取得できませんでした"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "提供されるバックアップデータは、対応している形式ではありません。 "
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "ファイルを復元することができません。 "
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "ブックマークを追加するには同期する必要があります"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "共有ブックマークのURLを取得できません"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "ネットワーク接続を確認して、再試行してください。 問題が解決しない場合は、xBrowserSyncサービスに問題がある可能性があります。"
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "同期に失敗しました"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "保存された資格情報が見つかりません。同期を再度有効にして再度お試し下さい。"
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "資格情報がありません"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "同期ID、パスワード、サーバのURLが正しく入力されていることを確認してください。"
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "無効なログイン情報"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "このサーバのURLは有効なxBrowserSyncサービスではありません。"
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "無効なxBrowserSyncサービス"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "ブラウザプロファイルが破損している可能性があります。問題が解決する可能性があるため、新しいプロファイルを作成してみてください。"
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "ブックマークの構造の読み取りができません"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "ローカルブラウザのデータが更新されました。最後の変更を再度適用してください。"
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "同期エラー"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "ネットワーク接続を確認し、もう一度お試しください"
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "接続切断"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "復元する前に、現在有効な同期のバックアップしていることを確認してください。"
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "復元するファイルがありません。"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "別のサーバに切り替えるか、後でもう一度お試しください。"
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "サーバが新しい同期を受け付けていません"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "ローカルデータは同期されていないため、更新されました。最後の変更を再度適用してください。"
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "同期の競合を検出しました！"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "ブックマークを削除し、再度やり直すか、同期可能容量の大きいサーバに変更してください"
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "同期可能容量の上限を超えました"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Syncに権限が付与されているか確認して再試行してください"
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "スキャンに失敗しました"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "xBrowserSyncサービスは現在オフラインです。後でもう一度お試しください。"
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "サービスはオフラインです"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "共有に失敗しました"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "要求された同期は存在しません。非アクティブのため削除されている可能性があります。"
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "同期が見つかりません"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "このバージョンの xBrowserSync では、バックアップデータを復元することはできません。"
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "同期が以降のバージョンにアップグレードされたため、この ID はこの xBrowserSync のバージョンと同期できません。"
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "サポートされていない API バージョンです。"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "同期が無効になりました。同期を再開するには再度同期を有効にしてください。"
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "サーバへのリクエストの上限に達しました"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "ネットワークに接続された場合、変更が同期されます。"
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "接続切断"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "このサーバはサポートされていないAPIバージョンを実行しています。"
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "このサーバはサポートされていません"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "アプリの再起動時にアップグレードが再試行されます。問題が解決しない場合は、xBrowserSync を再インストールしてください。",
        "default": "アップグレードを再試行するためにブラウザを再起動してください。問題が解決しない場合は、xBrowserSync を再インストールしてください。"
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "アップグレードできませんでした"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "ネットワークのエラー..."
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "チェック中..."
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "サーバが新しい同期を受け付けていません"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "オフライン"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "オンライン"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "同期していません"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "同期済み"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "同期中..."
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "ブックマークを追加"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "ブックマークを編集"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "タイトル"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "このURL は既にブックマークされています"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "有効な URL ではありません。"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "URLが必要です。"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "概要"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "タグ"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "タグ 1, タグ 2, タグ 3, その他"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "タグをクリア"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "タグを削除"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "削除"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "共有"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "ブックマークのプロパティを更新"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "共有された値は有効な URL を含んでいません。"
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>ブックマークを追加する</h4><p> 検索パネルのブックマーク アイコンをクリックして、現在のページをブックマークに追加します。ブックマークのプロパティは自動的に入力されますが、より良い検索結果を得るために、説明といくつかのタグを追加してください。</p><p> 別の方法として、通常どおりブラウザの「このページをブックマーク」ボタンをクリックするだけで、xBrowserSync がブックマークのプロパティを自動的に入力します (これを動作させるには、追加の許可が必要です。設定パネルを確認してください)。</p>",
        "android": "<h4>ブックマークの追加</h4><p>ブラウザ、YouTube、Spotifyなど、URLを共有するすべてのアプリからxBrowserSyncに共有することで、簡単にブックマークを追加できます。</p><p>ブックマークのプロパティはあなたのために取得されますが、より良い検索結果を得るために、説明といくつかのタグを追加してください。</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>バックアップすることを忘れないでください</h4> <p> xBrowserSyncを使用する場合、データはあなたの責任ですので、賢く、必ずバックアップを取ってください。</p> <p>設定パネルに移動して、バックアップしてください。 暗号化されていないデータをローカルファイルに保存します。必要に応じてデータを復元できます。</p> <p>ローカルブラウザのデータが破損し、バックアップがない場合は、いつでもデータをリセットできます。 xBrowserSyncは初期状態に戻ります。</p>",
        "android": "<h4>バックアップすることを忘れないでください</h4> <p> xBrowserSyncを使用する場合、データ管理はあなたの義務ですので、必ずバックアップを取ってください。</p> <p>設定パネルに移動して、バックアップしてください。 暗号化されていないデータをローカルファイルに保存します。このファイルを使用して、必要に応じてデータを復元できます。</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>始める前に</h4> <p> xBrowserSyncはローカルブラウザデータを変更するため、万が一の場合や、他のブラウザ同期サービスやツールを使用している場合は、ブックマークや他のブラウザデータをバックアップすることをお勧めします（ <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'> Google Chromeの同期</a>など）競合を避けるために無効にしてください。</p>",
        "brave": "<h4>始める前に</h4> <p> xBrowserSyncはローカルブラウザデータを変更するため、万が一の場合や、他のブラウザ同期サービスやツールを使用している場合は、ブックマークや他のブラウザデータをバックアップすることをお勧めします（ <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'> Braveの同期</a>など）競合を避けるために無効にしてください。</p>",
        "edge": "<h4>始める前に</h4> <p> xBrowserSyncはローカルブラウザデータを変更するため、万が一の場合や、他のブラウザ同期サービスやツールを使用している場合は、ブックマークや他のブラウザデータをバックアップすることをお勧めします（ <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'> Edgeの同期</a>など）競合を避けるために無効にしてください。</p>",
        "firefox": "<h4>始める前に</h4> <p> xBrowserSyncはローカルブラウザデータを変更するため、万が一の場合や、他のブラウザ同期サービスやツールを使用している場合は、ブックマークや他のブラウザデータをバックアップすることをお勧めします（ <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'> Firefoxの同期</a>など）競合を避けるために無効にしてください。</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>既存のIDで同期する</h4><p>「すでに同期IDをお持ちの方はこちら」をクリックして、既存の同期IDとパスワードを入力します。</p><p>xBrowserSyncは、ローカルに保存されたパスワードを使用して暗号化されたデータを取得して復号化し、復号化されたデータから再入力する前にローカルブックマークを消去します。</p><p>同期されると、xBrowserSyncは15分ごとにバックグラウンドで同期データの更新をチェックし、必要に応じてローカルブックマークを自動的に更新します。また、同期されたデータの利用可能な更新を設定パネルで手動で同期することもできます</p>。",
        "android": "<h4>既存のIDで同期する</h4><p>まず、xBrowserSyncデスクトップ・ブラウザ拡張機能の設定パネルにある同期IDのQRコードをスキャンします（同期IDをクリックすると表示されます）。</p><p>また、別のxBrowserSyncサービスに同期している場合は、それが設定パネルで設定されたアクティブなサービスであることを確認してください。</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Syncing for first time</h4><p>xBrowserSync がブラウザ データを同期する前に、暗号化パスワードを提供する必要があります。リセットやリマインダーはありませんので、忘れてしまうと同期されたデータにアクセスできなくなります。</p><p>あなたのブラウザ データはパスワードで暗号化され、設定パネルで設定されたアクティブな xBrowserSync サービスに保存されます。</p><p>同期されると、ローカルのブックマークに加えた変更は、xBrowserSyncによって自動的に同期されます。</p>",
        "android": "<h4>同期する前に</h4></p><p>xBrowserSync は、デスクトップ ブラウザ間でブラウザ データを積極的に同期します (モバイル ブラウザへの同期は現時点ではサポートされていません)。</p><p>まだ同期 ID を作成していない場合は、デスクトップ ブラウザで <a href='https://link.xbrowsersync.org/download' class='new-tab'>ダウンロード</a>してください。シンクを作成したら、このアプリで新しいシンクIDを使ってデータにアクセスできます</p>。"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>その他のサポート</h4><p> <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>FAQ</a>では、最も一般的な質問に対する答えを見つけることができます。また、現在の<a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>known issues</a>をチェックして、あなたの問題がそこに記載されているかどうかを確認してください。</p><p>あるいは、<a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>issue tracker</a>を使用して、問題を報告したり、新しい機能を要求したりしてください。</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>モバイル化</h4> <p> xBrowserSync Androidアプリを使用して、移動中に同期されたブックマークにアクセスします。このアプリは、<a href = 'https：//link.xbrowsersync.org/download-android' class = 'newで入手できます。 -tab '> Google Play </a>ストア、<a href='https://link.xbrowsersync.org/fdroid' class='new-tab'> F-Droid </a>または<a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>直接ダウンロード</a></p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>サポートされているネイティブ機能</h4> <p>ブックマークバーやブックマークマネージャーなど、ブラウザのネイティブブックマーク機能を引き続き使用してください。行った変更はすべてバックグラウンドで自動的に同期されます。</p> <p>既存のブックマークをフォルダに整理している場合でも心配はいりません。xBrowserSyncは既存のブックマーク階層を尊重して維持します。</p>",
        "firefox": "<h4>サポートされているネイティブ機能</h4> <p>ブックマークツールバーやブックマークライブラリなど、ブラウザのネイティブブックマーク機能を引き続き使用してください。行った変更はすべてバックグラウンドで自動的に同期されます。</p> <p>既存のブックマークをフォルダに整理している場合でも心配はいりません。xBrowserSyncは既存のブックマーク階層を尊重して維持します。</p> <p>ただし、FirefoxのブックマークAPIはネイティブブックマークタグへのアクセスをまだサポートしていないため、 同期時に既存のタグは失われ、xBrowserSyncを介して追加されたタグはネイティブタグとして保存されません。</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "戻る"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>ブックマークの検索</h4> <p>同期したら、Enterキーを押して最近のブックマークを表示するか、キーワードまたはURLを入力してブックマークを検索します。</p> <p>検索結果とブックマークフォルダを切り替えます。 階層全体を参照します。</p> <p>ブックマークを編集または削除するには、ブックマークにカーソルを合わせ、ブックマークのタイトルの横に表示されている編集アイコンをクリックします。</p>",
        "android": "<h4>ブックマークの検索</h4> <p>同期すると、xBrowserSyncを開いたときにブックマークが時系列で表示されます。 検索ボックスにキーワードまたはURLを入力して、ブックマークを検索します。</p> <p>検索結果とブックマークフォルダを切り替えて、階層全体を参照します。</p> <p>ブックマークを長押しすると、ブックマークを長押しできます。 ブックマークを直接共有、変更、または削除します。</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>別のサービスとの同期</h4> <p>デフォルトでは、データは<a href='https://link.xbrowsersync.org/api'class='new-tab'>公式xBrowserSyncサービスに同期されます </a>ただし、データを別のxBrowserSyncサービスに同期する場合は、同期する前にアクティブなサービスを切り替えることができます。</p> <p>利用可能な<a href='https://link.xbrowsersync.org/service-list' class='new-tab'> public xBrowserSync services </a>または<a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>独自のサービスを実行</a>して、究極のセキュリティとプライバシーのためにプライベートで使用するか、より多くの人がxBrowserSyncを楽しめるようにパブリックで使用します。</p> <p> <strong>重要：</strong> xBrowserSync サービスはボランティアによって独立して運営されています。 サービス管理者はデータに対して責任を負わないため、定期的にバックアップすることを忘れないでください。</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>ショートカットを使用してください！</h4> <p>ブックマークをすばやく検索するには、デフォルトのキーボードショートカット（Ctrl + Space）を使用して拡張機能をアクティブにし、Enterキーを押して最近のブックマークを表示するか、入力を開始して検索します。</p> <p>ショートカットを変更するには、chrome://extensions/shortcutsにアクセスし、xBrowserSyncで使用可能なショートカットを更新します。</p>",
        "brave": "<h4>ショートカットを使用してください！</h4> <p>ブックマークをすばやく検索するには、デフォルトのキーボードショートカット（Ctrl + Space）を使用して拡張機能をアクティブにし、Enterキーを押して最近のブックマークを表示するか、入力を開始して検索します。</p> <p>ショートカットを変更するには、brave://extensions/shortcutsにアクセスし、xBrowserSyncで使用可能なショートカットを更新します。</p>",
        "edge": "<h4>ショートカットを使用してください！</h4> <p>ブックマークをすばやく検索するには、デフォルトのキーボードショートカット（Ctrl + Space）を使用して拡張機能をアクティブにし、Enterキーを押して最近のブックマークを表示するか、入力を開始して検索します。</p> <p>ショートカットを変更するには、edge://extensions/shortcutsにアクセスし、xBrowserSyncで使用可能なショートカットを更新します。</p>",
        "firefox": "<h4>ショートカットを使用!</h4><p>ブックマークをすばやく検索するには、デフォルトのキーボードショートカット(Ctrl + Space)を使用して拡張機能を有効にし、Enterキーを押して最近のブックマークを表示するか、検索を開始します。</p><p>ショートカットを変更するには、about:addonsを参照し、[設定]メニューの[拡張ショートカットの管理]をクリックし、xBrowserSyncの下で利用可能なショートカットを更新します。</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>同期ID </h4> <p> xBrowserSyncは、個人データが収集されることはなく、同期される前にブラウザデータが暗号化されるため、プライバシーを保護します。 同期されたデータを識別するために、パスワードと一緒に使用して他のブラウザやデバイスでデータを同期できる匿名の同期IDが提供されます。</p> <p>同期IDはxBrowserSyncサービスでのみ機能することに注意してください。 それが作成された場所で、別のxBrowserSyncサービスに切り替える場合は、新しい同期を作成するか、以前にそのサービスに同期したときに作成した既存の同期IDを使用する必要があります。</p> <p>同期するたびに、同期を表示できます [設定] パネルのIDをクリックしてクリックすると、モバイルデバイスで同期するときにスキャンする便利なQRコードが表示されます。</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4> xBrowserSyncへようこそ！</h4> <p> xBrowserSyncは、Google、Mozilla、Operaなどが提供するブラウザ同期サービスに代わる無料のオープンソースの代替手段であり、プライバシーを尊重し、完全な匿名性を提供します（ 詳細については、<a href='https://link.xbrowsersync.org/www' class='new-tab'>ウェブサイト</a>をご覧ください。</p> <p>このヘルプをお読みください。 以下のページングリンクまたは矢印キーを使用してページ間を移動し、xBrowserSyncに慣れるためのガイド。</p> <p>注意：xBrowserSyncは現在、ブックマークのみを同期します。 追加のブラウザデータの同期は将来のバージョンで追加される予定です。開発中の <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>ロードマップ</a>をチェックして、計画内容を確認してください。</p>",
        "android": "<h4> xBrowserSyncへようこそ！</h4> <p> xBrowserSyncは、Google、Mozilla、Operaなどが提供するブラウザ同期サービスに代わる無料のオープンソースの代替手段であり、プライバシーを尊重し、完全な匿名性を提供します（ 詳細については、<a href='https://link.xbrowsersync.org/www' class='new-tab'>ウェブサイト</a>をご覧ください。</p> <p>このヘルプをお読みください。 以下のページングリンクまたは矢印キーを使用してページ間を移動し、xBrowserSyncに慣れるためのガイド。</p> <p>注意：xBrowserSyncは現在、ブックマークのみを同期します。 追加のブラウザデータの同期は将来のバージョンで追加される予定です。開発中の <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>ロードマップ</a>をチェックして、計画内容を確認してください。</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "同期IDが必要ですか？"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "xBrowserSyncデスクトップブラウザ拡張機能をダウンロードし、ここでブックマークにアクセスするための新しい同期を作成します。"
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "パスワードをもう一度入力"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "暗号化パスワードを入力"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "暗号化パスワード"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "暗号化パスワードを入力"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "パスワードを表示"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "同期に接続します"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "デスクトップブラウザでxBrowserSyncを開き、[設定] パネルに移動し、同期IDをクリックして、ここでスキャンできるQRコードを表示します。"
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "QRコードをスキャン"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "手動で情報を入力する"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "APIのバージョン"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "このサーバに同期しますか？"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "同期先の場所"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "最大の同期可能容量"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "同期先"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "サーバの状態"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSyncの同期先のサーバのURL"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "代替の xBrowserSync サーバの URL を入力します。xBrowserSync サービスの <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>リスト</a> を参照します。"
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "サービスを切り替える"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "URLが必要です。"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "有効な xBrowserSync サービスではありません"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "有効な URL ではありません。"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "サーバーに接続できませんでした。"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "このサーバはサポートされていないAPIバージョンを実行しています。"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>重要:</strong> xBrowserSync サービスはボランティアによって独立して実行されます。サービス管理者はあなたのデータに対して一切責任を負いませんので、定期的にバックアップすることを忘れないでください。"
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "本当によろしいですか？"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync は同期ブックマークを復元する前にすべての現在のブラウザのブックマークを削除します。続行しますか？"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "ブックマーク同期ツールを無効にします"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "他のブックマーク同期ツール ( <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>など) がアクティブな間、ブラウザーデータを xBrowserSync と同期すると、重複やデータが破損する可能性があります。 続行する前にChrome Syncを無効にしてください。",
            "brave": "他のブックマーク同期ツール ( <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>など) がアクティブな間、ブラウザーデータを xBrowserSync と同期すると、重複やデータが破損する可能性があります。 続行する前にBrave Syncを無効にしてください。",
            "edge": "他のブックマーク同期ツール ( <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Edgeの同期機能</a>など) がアクティブな間、ブラウザーデータを xBrowserSync と同期すると、重複やデータが破損する可能性があります。 続行する前にEdgeの同期を無効にしてください。",
            "firefox": "他のブックマーク同期ツール ( <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefoxの同期</a>など) がアクティブな間、ブラウザーデータを xBrowserSync と同期すると、重複やデータが破損する可能性があります。 続行する前にFirefoxの同期を無効にしてください。"
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "同期"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "新しい同期の作成"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "同期をアップグレードする準備はできましたか？"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>このバージョンの xBrowserSync と同期する前に、同期をアップグレードする必要があります。 アップグレード後、xBrowserSync の以前のバージョンと同期することができなくなります。</p><p>続行する前にすべての同期デバイスで xBrowserSync を更新してください。続行する準備ができましたか？</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "同期をアップグレード"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>このバージョンの xBrowserSync と同期する前に、同期をアップグレードする必要があります。 </p><p>xBrowserSync デスクトップブラウザ拡張機能を使用して同期をアップグレードし、ここで同期を再試行してください。</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "ご利用中の同期ID"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "すでに同期IDを持っていますか？"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "有効な同期IDではありません"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "同期IDを取得"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "オプションの権限"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSyncは、ブラウザの「ブックマークの追加」ボタンで追加されたブックマークに、利用可能なメタデータを自動的に付与します。この機能を有効にするために、xBrowserSyncは<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>訪問したウェブサイトのデータを読み取れるようにするための追加の権限</a>を必要とします。</p><p>これらの権限を許可するかどうか、プロンプトが表示されたら指示してください。</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "利用中の同期IDのQRコードをスキャンする"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "トグルライト"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "ブックマークフォルダを表示"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "クリア"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "フォルダが空です"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "ブックマークがありません。追加しましょう！"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "ブックマークが追加されていません"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "ブックマークを検索",
        "android": "ブックマークを探す"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "同期を引き下げる"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "リリースで同期します"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "検索結果を表示"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "バックアップと復元"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "自動バックアップ"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "自動的にバックアップをダウンロードします。"
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "バックアップ日時"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "日時または時刻の指定"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "１"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "2"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "3"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "4"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "5"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "6"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "7"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "8"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "9"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "10"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "11"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "12"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "日ごと"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "週ごと"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "月ごと"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "バックアップのダウンロード時に「名前を付けて保存...」ダイアログが表示されないようにするには、ブラウザの設定「ダウンロードする前に各ファイルをどこに保存するか確認」を無効にしてください。"
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "バックアップの設定 "
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "バックアップをダウンロード"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "ローカルブラウザのデータをお使いのデバイスにバックアップします。"
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "同期されたデータをお使いのデバイスにバックアップします。"
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "復元"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "バックアップから復元"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "バックアップからローカルブラウザデータを復元します。"
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>同期が現在無効になっているため、復元中のデータはローカルブラウザデータを上書きします。</p><p>よろしいですか？</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "バックアップからローカルブラウザデータを復元します。"
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>現在同期が有効になっているため、復元中のデータは同期データを上書きします。 </p><p>ローカルブラウザのみにデータを復元するには、復元する前に同期を無効にしてください。</p><p>続行してよろしいですか？</p>",
              "android": "<p>復元中のデータは同期されたデータを上書きします。</p><p>続行してよろしいですか？</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "バックアップが復元されました。"
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "ファイルを選択"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "復元するバックアップ ファイルを選択します。"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "バックアップファイルの内容をコピーしてデータを復元します。"
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "バックアップデータを復元"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "データを復元する"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "xBrowserSync のバックアップデータが無効です"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>続行すると、同期が無効になり、ローカルブラウザのデータが{date}にxBrowserSyncがインストールされたときにリセットされます。</p> <p>続行しますか？</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "同期データをリセット！"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "ローカルブラウザのデータが初期インストール状態にリセットされました。"
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "初期状態のデータが利用できません。リセットできません。"
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "ヘルプとサポート"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "ヘルプガイド"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "質問がありますか？または、問題がありますか? ヘルプガイドを読んでください。そうでなければ、答えはFAQにあります。"
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "FAQを確認"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "サポート"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "サポートが必要ですか？課題トラッカーを使用してバグを報告するか、機能をリクエストしてください。"
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "プロセストラッカーを表示"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "アプリのログ"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "問題をログに記録するときに、アプリケーションログをダウンロードして含めます。"
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "ログをクリア"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "ログをダウンロード"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "現在のフォントサイズ"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "追加の権限"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "アクセス許可を付与"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "許可"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "許可しない"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "ウェブサイトデータの読み取り"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "ブラウザーの「このページをブックマーク」ボタンを使用する場合、自動的にブックマークにメタデータを追加するために必要です (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>詳細情報</a>)。"
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "権限の削除"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "ブックマークメタデータの自動取得"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "ブックマークを追加するときに自動的にメタデータを取得します。"
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "アップデートの確認"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "xBrowserSync の新しいバージョンが利用可能になったときに通知されます。"
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "ダークモードを有効にする"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "暗い場所での使用に最適です。"
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "ブックマークフォルダを表示"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "既定でブックマークフォルダを表示します。"
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "検索バーの位置を変更"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "結果の下に検索バーを表示します。"
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "ブックマークツールバーを同期"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "この設定を無効にすると、同期ブラウザ間で異なるツールバーブックマークを表示できます。"
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>この設定を有効にすると、現在ブックマークツールバーにあるブックマークが同期ブックマークに置き換えられます。</p><p>続行しますか？</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "テレメトリーを有効にする"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "xBrowserSyncの改善に役立てるために、匿名の技術データを送信することがあります。"
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "環境設定"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "同期"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "無効化する"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "同期ID"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "同期IDを使用して、他のデバイス上の同期データに接続します（クリックしてQRコードを表示）"
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "使用済みの使用量"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "サーバで利用可能な容量うち以下の容量を利用しています"
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "サーバ"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "前回同期した日は {date} です"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "次の同期は {date} に予定されいます"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "今すぐ同期"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "同期データに接続するには、xBrowserSync Androidアプリを使用してこのQRコードをスキャンしてください。"
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "QR コードを表示"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "クリップボードに ID をコピー"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "コピーしました!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "同期が有効になっているときに利用できる設定です。"
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "ファイルが「ダウンロード」に保存されました"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "xBrowserSync をサポート"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "xBrowserSync をサポート!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>私たちはxBrowserSyncを1番のブラウザ同期ツールにしたいと考えていますが、まだまだやるべきことはたくさんあります。</p><ul><li>ブラウザのタブと履歴の同期を追加する</li><li> <li>すべての主要なデスクトップブラウザをサポートする</li><li> <li>他の言語に翻訳する</li><li>そして <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>その他</a>！</li></ul><p>皆様のサポートがあってこそ、xBrowserSyncを継続的に改善し、オンラインプライバシーの保護と生産性の向上に効果的であり続けることができます。</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "仮想通貨(Bitcoin)"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "同期が見つかりません"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>あなたの同期が見つかりませんでした。最近使用されていないために削除された可能性があります。</p><p>新しい同期を作成する必要がありますが、まず下のボタンをクリックして同期データのバックアップをダウンロードし、新しい同期に復元してください。"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "匿名のテレメトリを送信しますか？"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p> xBrowserSyncは、完全に匿名のプライバシー第一のツールであるため、従来のアプリとは異なります。 限られたリソースを最適に展開する方法を決定するのに役立つユーザーデータにアクセスできないため、このようなツールを維持することは困難です。 したがって、xBrowserSyncの改善に役立てるために、匿名の技術データをときどき送信する許可をお願いします。</ p> <p>このテレメトリデータには、個人データや識別データは含まれていません。また、暗号化された同期データも含まれていません。 サードパーティと共有します（[設定]パネルでいつでもオプトインまたはオプトアウトできます）。</ p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "次のバージョンに更新しました！"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync は最新の機能と修正で更新されました。</p><p>同期が有効になっていた場合、現在は無効になっており、このバージョンの xBrowserSync と同期する前に、まず同期をアップグレードする必要があります。</p><p>このリリースに含まれる変更点の詳細については、リリースノートをご覧ください。</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "復元中..."
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "リセット中..."
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "同期中..."
      }
    }
  }
}
</file>

<file path="res/strings/nl.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSync-update beschikbaar"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} is beschikbaar om te downloaden. Klik voor meer informatie.",
        "android": "xBrowserSync {version} is beschikbaar om te downloaden."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Bijgewerkt naar"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync is bijgewerkt. In verband hiermee is synchronisatie uitgeschakeld. Schakel synchronisatie opnieuw in om het upgradeproces te voltooien."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Bladwijzer aangemaakt"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Bladwijzer verwijderd"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Bladwijzer bijgewerkt"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Bladwijzereigenschappen worden opgehaald, tik om te annuleren."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Bladwijzereigenschappen bijgewerkt."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Gaan"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Browsersynchronisatie zoals het hoort: veilig, anoniem en gratis! Synchroniseer bladwijzers tussen uw browsers en apparaten, geen aanmelding vereist."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Bladwijzermenu"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Andere bladwijzers"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Bladwijzers op de werkbalk"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Bladwijzer toevoegen"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Terug"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Annuleren"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Sluiten"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Ja"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Doorgaan"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Bladwijzer verwijderen"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Nee"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Gereed"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Back-up downloaden"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Bladwijzer bewerken"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Help-gids bekijken"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Volgende"
    },
    "OK": {
      "key": "Button_OK",
      "default": "Ok"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Bekijk de release notes"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Opslaan"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Instellingen"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Bladwijzer delen"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Ongedaan maken"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Bijwerken"
    },
    "View": {
      "key": "Button_View",
      "default": "Weergave"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Probeer a.u.b. geen wijzigen aan [xbs]-mappen te maken, omdat dit synchronisatieproblemen kan veroorzaken."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "xBrowserSync-map gewijzigd"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Synchroniseer met een bestaande synchronisatie-ID, schakel over naar een andere dienst of probeer het morgen opnieuw."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Dagelijkse nieuwe synchronisatielimiet bereikt"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Als het probleem zich blijft voordoen, ga dan naar <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>om het probleem te melden</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Er is iets fout gegaan"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Back-up mislukt"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Doorbladeren van bestanden mislukt"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "URL is ongeldig of de webpaginagegevens konden niet worden opgehaald."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Kon geen bladwijzereigenschappen ophalen"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Kon geen updates ophalen"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "De verstrekte back-upgegevens zijn niet in een verwacht formaat."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Gegevens kunnen niet worden hersteld"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Er moet gesynchroniseerd worden om een bladwijzer toe te voegen"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Kan de gedeelde bladwijzer-URL niet ophalen"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Controleer uw netwerkverbinding en probeer het opnieuw. Als het probleem aanhoudt, is er mogelijk een probleem met de xBrowserSync-service."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Synchronisatie mislukt"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Kan opgeslagen inloggegevens niet vinden. Schakel synchronisatie opnieuw in en probeer het opnieuw."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Inloggegevens ontbreken"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Controleer of je synchronisatie-ID, wachtwoord en service-URL correct zijn ingevoerd."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Ongeldige inloggegevens"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "De service-URL is geen geldige xBrowserSync-service."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Ongeldige xBrowserSync-service"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Mogelijk beschadigd browserprofiel. Probeer een nieuw profiel te maken, aangezien dit het probleem kan oplossen."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Onverwachte bladwijzerstructuur"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Lokale browsergegevens werden vernieuwd, pas de laatste wijziging opnieuw aan."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Synchronisatiefout"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Controleer de netwerkverbinding en probeer het opnieuw."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Verbinding verbroken"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Zorg ervoor dat er een geldige xBrowserSync-back-up is opgegeven voordat je herstelt."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Geen gegevens om te herstellen"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Schakel over naar een andere service of probeer het later opnieuw."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Service accepteert geen nieuwe synchronisaties"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Lokale gegevens waren niet gesynchroniseerd en zijn nu vernieuwd. Pas de laatste wijziging opnieuw toe."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Synchronisatieconflict gedetecteerd"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Verwijder enkele bladwijzers en probeer het opnieuw of schakel over naar een service met een grotere synchronisatielimiet."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Synchronisatiedatalimiet overschreden"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Controleer of toestemming is verleend en probeer het opnieuw."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Scan is mislukt"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "De xBrowserSync-service is momenteel offline, probeer het later opnieuw."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Service offline"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Delen mislukt"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "De opgevraagde synchronisatie bestaat niet, het kan zijn verwijderd vanwege inactiviteit."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Synchronisatie niet gevonden"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "De back-upgegevens kunnen niet worden hersteld door deze versie van xBrowserSync, omdat deze zijn aangemaakt met een latere versie."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Deze ID kan niet worden gesynchroniseerd met deze versie van xBrowserSync, omdat de synchronisatie is bijgewerkt naar een latere versie."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Synchronisatieversie niet ondersteund"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Synchronisatie is uitgeschakeld, schakel deze opnieuw in om te hervatten."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Limiet voor serviceaanvraag"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Wijzigingen zullen gesynchroniseerd worden zodra de verbinding hersteld is."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Verbinding verbroken"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Deze service gebruikt een niet-ondersteunde API-versie."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Service wordt niet ondersteund"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Upgrade zal opnieuw worden geprobeerd bij het herstarten van de app. Als het probleem zich blijft voordoen, installeer dan xBrowserSync opnieuw.",
        "default": "Herstart uw browser om opnieuw te upgraden, als het probleem zich blijft voordoen, installeer xBrowserSync opnieuw."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Upgrade mislukt"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Verbindingsfout"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Controleren"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Nieuwe synchronisaties worden niet geaccepteerd"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Offline"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Online"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "niet gesynchroniseerd"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "gesynchroniseerd"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "synchronisatie"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Bladwijzer toevoegen"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Bladwijzer bewerken"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Titel"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "De URL is reeds al bladwijzer toegevoegd"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "Geen geldige URL"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "URL is vereist"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Beschrijving"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Labels"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "label 1, label 2, label 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Labels wissen"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Label verwijderen"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Verwijderen"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Delen"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Bladwijzereigenschappen bijwerken"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "De waarde die werd gedeeld bevat geen geldige URL."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Een bladwijzer toevoegen</h4><p>Maak een bladwijzer voor de huidige pagina door te klikken op het bladwijzerpictogram in het zoekvenster. De eigenschappen van de bladwijzer worden automatisch ingevuld, of voeg anders een beschrijving en enkele labels toe om verzekerd te zijn betere zoekresultaten.</p><p>Als alternatief. Klik eenvoudig normaal op de browserknop \"Bladwijzer deze pagina\" en xBrowserSync zal de eigenschappen van de bladwijzer automatisch vullen (optionele machtigingen moeten worden verleend om dit te laten werken. Vink dit aan in het instellingenpaneel).</p>",
        "android": "<h4>Een bladwijzer toevoegen</h4><p>Voeg eenvoudig bladwijzers toe door het te delen met xBrowserSync vanuit apps die URL's delen zoals browsers, YouTube, Spotify en nog veel meer.</p><p>De eigenschappen van de bladwijzer worden voor je opgehaald, of voeg zelf een beschrijving en enkele labels toe om verzekerd te zijn van betere zoekresultaten.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Vergeet niet om een back-up te maken van</h4><p>Als je xBrowserSync gebruikt, zijn je gegevens jouw verantwoordelijkheid. Wees verstandig en zorg ervoor dat je back-ups maakt.</p><p>Ga naar het instellingenpaneel en maak een back-up van je niet-versleutelde gegevens naar een lokaal bestand dat gebruikt kan worden om uw gegevens te herstellen als dat nodig is.</p><p>Als je lokale browsergegevens beschadigd raken en je geen back-ups hebt, kun je op elk moment je gegevens terugzetten naar de originele toestand van het moment dat xBrowserSync werd geïnstalleerd.</p>",
        "android": "<h4>Vergeet niet om een back-up te maken</h4><p>Als je xBrowserSync gebruikt, zijn jouw gegevens jouw verantwoordelijkheid. Daarom is het verstandig dat je back-ups maakt.</p><p>Ga naar het instellingenpaneel en maak een back-up van je niet-versleutelde gegevens naar een lokaal bestand dat gebruikt kan worden om je gegevens te herstellen als dat nodig is.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Voordat je begint</h4><p>xBrowserSync wijzigt jouw lokale browsergegevens en daarom is het een goed idee om een back-up te maken van je bladwijzers en andere browsergegevens, voor het geval dat. Wanneer je een andere browser synchronisatiediensten of tools gebuikt (zoals <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>), schakel deze dan uit om conflicten te voorkomen.</p>",
        "brave": "<h4>Voordat je begint</h4><p>xBrowserSync wijzigt jouw lokale browsergegevens en daarom is het een goed idee om een back-up te maken van je bladwijzers en andere browsergegevens, voor het geval dat. Wanneer je een andere browser synchronisatiediensten of tools gebuikt (zoals <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>), schakel deze dan uit om conflicten te voorkomen.</p>",
        "edge": "<h4>Voordat je begint</h4><p>xBrowserSync wijzigt jouw lokale browsergegevens en daarom is het een goed idee om een back-up te maken van je bladwijzers en andere browsergegevens, voor het geval dat. Wanneer je een andere browser synchronisatiediensten of tools gebuikt (zoals <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>), schakel deze dan uit om conflicten te voorkomen.</p>",
        "firefox": "<h4>Voordat je begint</h4><p>xBrowserSync wijzigt jouw lokale browsergegevens en daarom is het een goed idee om een back-up te maken van je bladwijzers en andere browsergegevens, voor het geval dat. Wanneer je een andere browser synchronisatiediensten of tools gebuikt (zoals <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>), schakel deze dan uit om conflicten te voorkomen.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Synchroniseren met uw bestaande ID</h4><p>Klik op \"Heb je al een synchronisatie-ID?\" om je bestaande synchronisatie-ID en wachtwoord in te voeren. Als je synchronisatie-ID is aangemaakt op een service die verschilt van die welke wordt weergegeven, schakel dan over naar die service voordat je probeert te synchroniseren.</p><p>xBrowserSync zal je versleutelde gegevens ophalen en ontsleutelen met het lokaal opgeslagen wachtwoord, en wis vervolgens uw lokale bladwijzers voordat ze opnieuw gevuld worden door de ontsleutelde gegevens.</p><p>Eenmaal gesynchroniseerd, controleert xBrowserSync elke vijftien minuten in de achtergrond voor updates aan uw gesynchroniseerde gegevens en zal zo nodig je lokale bladwijzers automatisch bijwerken. Je kan ook handmatig beschikbare updates synchroniseren met je gesynchroniseerde gegevens in het instellingenvenster.</p>",
        "android": "<h4>Synchroniseren met je bestaande ID </h4><p>Begin met het scannen van de QR-code van de synchronisatie-ID in het paneel Instellingen van de xBrowserSync-desktopbrowser-extensie (klik op je synchronisatie-ID om deze weer te geven). Zorg ervoor dat je hetzelfde versleutelingswachtwoord invoert als bij het aanmaken van de synchronisatie, anders kan xBrowserSync je gegevens niet ontsleutelen.</p><p>Wanneer er gesynchroniseerd wordt met een andere xBrowserSync-service, zorg er dan voor dat dit de actieve service is die is geconfigureerd in het instellingenpaneel. </p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>De eerste keer synchroniseren</h4><p>Voordat xBrowserSync jouw browsergegevens kan synchroniseren, moet je een coderingswachtwoord opgeven. Zorg ervoor dat je het sterk maar ook memorabel maakt, er zijn geen resets of herinneringen, dus als je het vergeet, verlies je de toegang tot tot je gesynchroniseerde gegevens.</p><p>Jouw browsergegevens worden versleuteld met je wachtwoord en opgeslagen in de actieve xBrowserSync-service die is geconfigureerd in het paneel Instellingen.</p><p>Eenmaal gesynchroniseerd, worden alle wijzigingen die je aanbrengt in je lokale bladwijzers door xBrowserSync automatisch gesynchroniseerd.</p>",
        "android": "<h4>De eerste keer synchroniseren</h4><p>xBrowserSync synchroniseert actief jouw browsergegevens tussen je desktopbrowsers (synchronisatie met mobiele browsers wordt momenteel niet ondersteund). Je kunt deze app gebruiken om toegang te krijgen tot je gesynchroniseerde gegevens op je Android mobiel apparaat.</p><p>Als je nog geen synchronisatie-ID hebt aangemaakt, ga dan naar je desktopbrowser en <a href='https://link.xbrowsersync.org/download' class='new- tab '>download</a> de xBrowserSync-extensie. Wanneer je een synchronisatie heeft gemaakt, kun je je nieuwe synchronisatie-ID binnen deze app gebruiken om toegang te krijgen tot je gegevens. </p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Verdere ondersteuning</h4><p>Je kunt de antwoorden op vaak gestelde vragen vinden in de <a href='https://link.xbrowsersync.org/faqs' class='new-tab'> FAQs</a>. Controleer ook de huidige <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>bekende problemen</a> om te zien of jouw probleem daar wordt vermeld.</p><p>Je kunt ook de <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>issue tracker</a> gebruiken om een probleem te melden of verzoek om een nieuwe functie te doen.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Ga mobiel</h4><p>Krijg onderweg toegang tot je gesynchroniseerde bladwijzers met de xBrowserSync Android-app, beschikbaar op <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> winkel, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'> F-Droid</a> of <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'> directe download</a>. </p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Standaardfuncties worden ondersteund</h4><p>Voel je vrij om gebruik te blijven maken van de originele bladwijzerfunctie van je browser zoals de bladwijzerbalk en bladwijzerbeheer. Wijzigingen die je aanbrengt worden automatisch op de achtergrond gesynchroniseerd.</p><p>Als je je bestaande bladwijzers in mappen hebt georganiseerd, zal xBrowserSync je bestaande hiërarchie respecteren en onderhouden.</p>",
        "firefox": "<h4>Standaardfuncties ondersteund</h4><p>Voel je vrij om gebruik te blijven maken van de originele bladwijzerfunctie van je browser zoals de bladwijzerwerkbalk en bladwijzerbibliotheek. Wijzigingen die je aanbrengt worden automatisch op de achtergrond gesynchroniseerd.</p><p>Als je je bestaande bladwijzers in mappen hebt georganiseerd, zal xBrowserSync je bestaande bladwijzerhiërarchie respecteren en onderhouden.</p><p>Houd er echter rekening mee dat Firefox's bladwijzer-API de toegang tot oorspronkelijke bladwijzerlabels nog niet ondersteunt. Bestaande labels zullen verloren gaan bij het synchroniseren en labels toegevoegd via xBrowserSync zullen niet worden opgeslagen als standaard-labels.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Vorige"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Bladwijzers doorzoeken</h4><p>Druk na synchronisatie op Enter om je recente bladwijzers weer te geven of typ enkele trefwoorden of een URL om je bladwijzers te doorzoeken.</p><p>Schakel tussen zoekresultaten en bladwijzermappen om door de hele hiërarchie te bladeren.</p><p>Om een bladwijzer te bewerken of te verwijderen, beweeg je de muisaanwijzer over de bladwijzer en klik je op het dan zichtbare bewerkingspictogram naast de titel van de bladwijzer.</p>",
        "android": "<h4>Bladwijzers doorzoeken</h4><p>Na synchronisatie worden je bladwijzers in chronologische volgorde weergegeven wanneer je xBrowserSync opent. Typ enkele trefwoorden of een URL in het zoekvak om je bladwijzers te doorzoeken.</p><p>Schakel tussen zoekresultaten en bladwijzermappen om door de hele hiërarchie te bladeren.</p><p>Door lang op een bladwijzer te drukken, kun je deze rechtstreeks delen, wijzigen of verwijderen.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Synchronisatie met een andere service</h4><p>Standaard worden je gegevens gesynchroniseerd met de <a href='https://link.xbrowsersync.org/api' class='new-tab'> officiële xBrowserSync-service</a>, maar als je je gegevens wilt synchroniseren met een alternatieve xBrowserSync-service, kun je de actieve service wijzigen voordat u synchroniseert.</p><p>Controleer de lijst met beschikbare <a href='https://link.xbrowsersync.org/service-list' class='new-tab '> openbare xBrowserSync-services </a> of <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'> draai je eigen service </a>, hetzij voor privégebruik voor ultieme veiligheid en privacy, of voor openbaar gebruik zodat meer mensen kunnen genieten van xBrowserSync.</p><p><strong>Belangrijk:</strong> xBrowserSync diensten worden onafhankelijk gerund door vrijwilligers. De servicebeheerder is niet verantwoordelijk voor jouw gegevens, dus vergeet niet om regelmatig een back-up te maken.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Gebruik snelkoppelingen!</h4><p>Gebruik de standaard sneltoets om je bladwijzers snel te doorzoeken (Ctrl+Space) om de extensie te activeren, druk vervolgens op Enter om je recente bladwijzers te bekijken of begin met typen om te zoeken.</p><p>Als je de snelkoppeling wilt wijzigen, blader naar chrome://extensions/shortcuts en update de beschikbare snelkoppelingen onder xBrowserSync.</p>",
        "brave": "<h4>Gebruik snelkoppelingen!</h4><p>Gebruik de standaard sneltoets om je bladwijzers snel te doorzoeken (Ctrl+Space) om de extensie te activeren, druk vervolgens op Enter om je recente bladwijzers te bekijken of begin met typen om te zoeken.</p><p>Als je de snelkoppeling wilt wijzigen, blader naar brave://extensions/shortcuts en update de beschikbare snelkoppelingen onder xBrowserSync.</p>",
        "edge": "<h4>Gebruik snelkoppelingen!</h4><p>Gebruik de standaard sneltoets om je bladwijzers snel te doorzoeken (Ctrl+Space) om de extensie te activeren, druk vervolgens op Enter om je recente bladwijzers te bekijken of begin met typen om te zoeken.</p><p>Als je de snelkoppeling wilt wijzigen, blader naar edge://extensions/shortcuts en update de beschikbare snelkoppelingen onder xBrowserSync.</p>",
        "firefox": "<h4>Gebruik snelkoppelingen!</h4><p>Gebruik de standaard sneltoets om je bladwijzers snel te doorzoeken (Ctrl+Space) om de extensie te activeren, druk vervolgens op Enter om uw recente bladwijzers te bekijken of te beginnen met typen om te zoeken.</p><p>Als je de snelkoppeling wilt wijzigen, blader naar extra:extensies, Klik op \"Extensie Snelkoppelingen beheren\" in het menu Instellingen en werk de beschikbare sneltoetsen bij onder xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Jouw synchronisatie-ID</h4><p>xBrowserSync verzekert jouw privacy omdat er nooit persoonlijke gegevens worden verzameld en je browsergegevens worden versleuteld voordat ze worden gesynchroniseerd. Om jouw gesynchroniseerde gegevens te identificeren, wordt je een anonieme synchronisatie-ID verstrekt die samen met jouw wachtwoord kan worden gebruikt om je gegevens op andere browsers en apparaten te synchroniseren.</p><p>Vergeet niet dat jouw sync-ID alleen werkt met de xBrowserSync-service waarop deze is aangemaakt. Als je overschakelt naar een andere xBrowserSync-service moet je een nieuwe sync aanmaken of een bestaande sync ID gebruiken die aangemaakt is toen deze service eerder gesynchroniseerd werd.</p><p>Wanneer je gesynchroniseerd bent, kun je je synchronisatie-ID bekijken in het Instellingen paneel, klik erop om een handige QR-code te tonen om te scannen bij het synchroniseren op mobiele apparaten.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Welkom bij xBrowserSync!</h4><p>xBrowserSync is een gratis en open-source alternatief voor browsersynchronisatiediensten van Google, Mozilla, Opera en anderen die je privacy respecteert en je volledige anonimiteit geeft (bekijk de <a href='https://link.xbrowsersync.org/www' class='new-tab'>website</a> voor meer informatie).</p><p>Neem even de tijd om deze snelgids door te lezen om jezelf vertrouwd te maken met xBrowserSync, gebruik de pagina-snelkoppelingen hieronder of de pijltjestoetsen om tussen pagina's te bewegen.</p><p>Let op: xBrowserSync synchroniseert momenteel alleen bladwijzers. Synchronisatie van aanvullende browsergegevens zal worden toegevoegd in toekomstige versies, bekijk de ontwikkeling <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>roadmap</a> om te zien wat er gepland is.</p>",
        "android": "<h4>Welkom bij xBrowserSync!</h4><p>xBrowserSync is een gratis en open-source alternatief voor browsersynchronisatiediensten van Google, Mozilla, Opera en anderen die je privacy respecteert en je volledige anonimiteit geeft (bekijk de <a href='https://link.xbrowsersync.org/www' class='new-tab'>website</a> voor meer informatie).</p><p>Neem even de tijd om deze snelgids door te lezen om jezelf vertrouwd te maken met xBrowserSync, gebruik de pagina-snelkoppelingen hieronder of veeg om tussen pagina's te bewegen.</p><p>Let op: xBrowserSync synchroniseert momenteel alleen bladwijzers. Synchronisatie van aanvullende browsergegevens zal worden toegevoegd in toekomstige versies, bekijk de ontwikkeling <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>roadmap</a> om te zien wat er gepland is.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Een synchronisatie-ID nodig?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Download de xBrowserSync-desktopbrowser-extensie en maak een nieuwe synchronisatie om hier toegang te krijgen tot je bladwijzers."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Wachtwoord bevestigen"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Je versleutelingswachtwoord"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Versleutelingswachtwoord"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Voer een encryptiewachtwoord in"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Wachtwoord tonen"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Maak verbinding met je synchronisatie"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Open xBrowserSync in je desktopbrowser, ga naar het paneel Instellingen en klik op je synchronisatie-ID om een QR-code weer te geven die je hier kunt scannen."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Scan code"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Synchronisatiegegevens handmatig invoeren"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "API-versie"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Synchroniseren met deze service?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Locatie"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Maximale synchronisatiegrootte"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Synchroniseren met"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Status"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "URL van xBrowserSync-service"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Voer de URL in van een alternatieve xBrowserSync-service. Blader <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>hier</a> door de lijst met openbare xBrowserSync-services."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Wissel van service"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "URL is vereist"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Geen geldige xBrowserSync-service"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Geen geldige URL"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Kan geen verbinding maken met de service"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Deze service gebruikt een niet-ondersteunde API-versie"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Belangrijk:</strong> xBrowserSync-diensten worden onafhankelijk uitgevoerd door vrijwilligers. De beheerder neemt geen verantwoordelijkheid voor jouw gegevens, dus vergeet niet regelmatig een back-up te maken."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Weet u het zeker?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync zal alle lokale bladwijzergegevens verwijderen voordat je gesynchroniseerde bladwijzers herstelt. OK om verder te gaan?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Bladwijzersynchronisatieprogramma's uitschakelen"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Het synchroniseren van je browsergegevens met xBrowserSync terwijl andere bladwijzersynchronisatie-tools (zoals <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) actief zijn, kan dubbel werken en mogelijk beschadigde gegevens veroorzaken. Schakel deze uit voordat je verder gaat.",
            "brave": "Het synchroniseren van je browsergegevens met xBrowserSync terwijl andere bladwijzersynchronisatie-tools (zoals <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) actief zijn, kan dubbel werken en mogelijk beschadigde gegevens veroorzaken. Schakel deze uit voordat je verder gaat.",
            "edge": "Het synchroniseren van je browsergegevens met xBrowserSync terwijl andere bladwijzersynchronisatie-tools (zoals <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) actief zijn, kan dubbel werken en mogelijk beschadigde gegevens veroorzaken. Schakel deze uit voordat je verder gaat.",
            "firefox": "Het synchroniseren van je browsergegevens met xBrowserSync terwijl andere bladwijzersynchronisatie-tools (zoals <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) actief zijn, kan dubbel werken en mogelijk beschadigde gegevens veroorzaken. Schakel deze uit voordat je verder gaat."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Synchronisatie"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Nieuwe synchronisatie aanmaken"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Klaar om synchronisatie te upgraden?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Jouw synchronisatiegegevens moeten worden vernieuwd voordat je deze versie van xBrowserSync kunt gebruiken. Na de upgrade is het niet meer mogelijk om te synchroniseren met oudere versies van xBrowserSync.</p><p>Zorg ervoor dat xBrowserSync op alle gesynchroniseerde apparaten wordt bijgewerkt. Klaar om verder te gaan?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Synchronisatie opwaarderen"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Uw synchronisatie moet worden opgewaardeerd voordat deze versie van xBrowserSync kan worden gebruikt.</p><p>Gebruik de xBrowserSync desktop browserextensie om de synchronisatie bij te werken en probeer dan opnieuw om hier te synchroniseren.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Jouw synchronisatie-ID"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Heb je al een synchronisatie-ID?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Geen geldige synchronisatie-ID"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Een synchronisatie-ID verkrijgen"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Optionele machtigingen"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync voegt automatisch bladwijzers toe met behulp van de browserknop Bladwijzers toevoegen met beschikbare metadata. Om dit in te schakelen, vereist xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>extra rechten</a> om bezochte website-gegevens te kunnen lezen.</p><p>Geef aan of je deze machtigingen wilt verlenen, daarbij kan je op elk gewenst moment machtigingen toevoegen of verwijderen in het instellingenpaneel.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Scan je synchronisatie-ID QR-code"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Lamp aan/uit"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Bladwijzermappen bekijken"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Wissen"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Map is leeg"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Je hebt geen bladwijzers, voeg er een toe!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Geen bladwijzers gevonden"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Druk op Enter of Bladwijzers zoeken",
        "android": "Bladwijzers zoeken"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Trek naar beneden om te synchroniseren"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Loslaten om te synchroniseren"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Zoekresultaten bekijken"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Back-up maken en herstellen"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Automatische back-up"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Back-ups automatisch downloaden volgens schema."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Back-up maken op"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "elke"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "enkele"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "twee"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "drie"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "vier"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "vijf"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "zes"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "zeven"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "acht"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "negen"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "tien"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "elf"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "twaalf"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "dag(en)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "we(e)k(en)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "maand(en)"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Om te voorkomen dat het dialoogvenster \"Opslaan als...\" bij het downloaden van back-ups wordt weergegeven, schakel je de browserinstelling \"Vraag waar je elk bestand wilt opslaan voordat je het downloadt\"."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Back-up"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Back-up downloaden"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Maak een back-up van lokale browsergegevens naar een bestand."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Maak een back-up van je gesynchroniseerde gegevens naar een bestand."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Herstellen"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Back-up terugzetten"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Lokale browsergegevens herstellen vanuit een back-up."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Aangezien synchronisatie momenteel is uitgeschakeld, overschrijven de gegevens die worden hersteld de lokale browsergegevens.</p><p>OK om door te gaan?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Herstel gesynchroniseerde gegevens vanuit een back-up."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Aangezien synchronisatie momenteel is ingeschakeld, zullen de gegevens die worden hersteld jouw gesynchroniseerde gegevens overschrijven.</p><p>Om gegevens alleen te herstellen naar de lokale browser, moet je synchronisatie uitschakelen voordat je herstelt.</p><p>OK om verder te gaan?</p>",
              "android": "<p>De gegevens die worden hersteld zullen jouw gesynchroniseerde gegevens overschrijven.</p><p>OK om verder te gaan?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Back-up is teruggezet."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Selecteer bestand"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Selecteer een back-upbestand om te herstellen"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Kopieer de inhoud van een back-upbestand om gegevens te herstellen."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Back-upgegevens plakken"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Gegevens terugzetten"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Ongeldige xBrowserSync back-upgegevens"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Als je doorgaat, wordt de synchronisatie uitgeschakeld en de lokale browsergegevens worden teruggezet naar de situatie toen xBrowserSync is geïnstalleerd op {date}.</p><p>OK om verder te gaan?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Lokale gegevens herstellen"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Lokale browsergegevens zijn teruggezet naar de eerste installatiestatus."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Installatiestatusgegevens niet beschikbaar en kunnen niet worden teruggezet."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Hulp en ondersteuning"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Helpgids"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Heb je een vraag of een probleem? Zorg ervoor dat je de helpgids doorleest, anders kan het antwoord in de FAQ staan."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Veelgestelde vragen bekijken"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Ondersteuning"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Hulp nodig? Gebruik de issues-tracker om een probleem te melden of een functie aan te vragen."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Bekijk Issues tracker"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Toepassingslogboek"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Download het toepassingslogboek en voeg het toe wanneer je een probleem meldt."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Logboek wissen"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Logboek downloaden"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Huidige loggrootte"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Optionele machtigingen"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Toestemming geven"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Verleend"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Niet verleend"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Websitegegevens lezen"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Vereist om automatisch metadata toe te voegen aan bladwijzers bij het gebruik van de browserknop \"Bladwijzer deze pagina\" (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>meer info</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Machtigingen verwijderen"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Automatisch bladwijzergegevens ophalen"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Metadata automatisch ophalen bij het toevoegen van een bladwijzer."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Controleer op app-updates"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Krijg een melding wanneer er een nieuwe versie van xBrowserSync beschikbaar is."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Donkere modus inschakelen"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideaal voor gebruik bij weinig licht."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Toon bladwijzermappen"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Standaard bladwijzermappen weergeven."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Positie van zoekbalk wisselen"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Zoekbalk onder resultaten weergeven."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Synchroniseer bladwijzerwerkbalk"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Schakel deze instelling uit om verschillende bladwijzers in de werkbalk weer te geven in gesynchroniseerde browsers."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Het inschakelen van deze instelling zal de huidige bladwijzers in de bladwijzerwerkbalk vervangen door je gesynchroniseerde bladwijzers.</p><p>OK om door te gaan?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Telemetrie inschakelen"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Stuur af en toe anonieme technische gegevens om xBrowserSync te helpen verbeteren."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Voorkeuren"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Synchroniseren"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Synchronisatie uitschakelen"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "Synchronisatie-ID"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Gebruik je synchronisatie-ID om verbinding te maken met je gesynchroniseerde gegevens op andere apparaten (klik om de QR-code te tonen)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Gegevensgebruik"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Hoeveel van de door de service toegestane synchronisatiegegevens gebruikt u."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Service"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Laatste synchronisatie {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Klaar om te synchroniseren (gepland voor {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Nu synchroniseren"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Scan deze QR-code met behulp van de xBrowserSync Android-app om verbinding te maken met jouw gesynchroniseerde gegevens."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Toon QR-code"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Kopieer de synchronisatie-ID naar het klembord"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Gekopieerd!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Instellingen beschikbaar wanneer synchronisatie is ingeschakeld."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Bestand opgeslagen in Downloads"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Steun xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Steun xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>We willen xBrowserSync de nummer één synchronisatietool maken, maar er is nog veel te doen:</p><ul><li>Synchronisatie van browsertabbladen en geschiedenis toevoegen</li><li>Alle grote desktop browsers ondersteunen</li><li>Vertaling in andere talen</li><li>en <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>veel meer</a>!</li></ul><p>Alleen met jouw steun kunnen we xBrowserSync blijven verbeteren en ervoor zorgen dat het effectief blijft bij het beschermen van online privacy en het verhogen van de productiviteit.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Cryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Synchronisatie niet gevonden"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Je synchronisatie kon niet worden gevonden en is mogelijk verwijderd door inactiviteit.</p><p>Je moet een nieuwe synchronisatie aanmaken, maar klik eerst op de knop hieronder om een back-up van je gesynchroniseerde gegevens te downloaden die je vervolgens kunt terugzetten naar je nieuwe synchronisatie.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Anonieme telemetrie versturen?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync is anders dan traditionele apps, omdat het een volledig anonieme, privacy-first tool is. Het onderhouden van een dergelijke tool is een uitdaging omdat we geen toegang hebben tot gebruikersgegevens om te helpen bepalen hoe we onze beperkte middelen het beste kunnen inzetten. Daarom vragen we uw toestemming om af en toe anonieme technische gegevens te verzenden om ons te helpen xBrowserSync te verbeteren.</p><p>Deze telemetriegegevens bevatten geen persoonlijke of identificerende gegevens, noch uw versleutelde synchronisatiegegevens en zijn nooit gedeeld met derden (u kunt zich op elk moment aan- of afmelden in het instellingenpaneel).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Bijgewerkt naar"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "xBrowserSync has been updated with the latest features and fixes. For more details about the changes contained in this release, check out the release notes."
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Herstellen"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Herstellen"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Synchroniseren"
      }
    }
  }
}
</file>

<file path="res/strings/pl.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "Dostępna jest aktualizacja xBrowserSync"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} jest dostępny do pobrania. Kliknij, aby uzyskać więcej informacji.",
        "android": "xBrowserSync {version} jest dostępny do pobrania."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Zaktualizowano do"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync został zaktualizowany. Synchronizacja została wyłączona, włącz synchronizację, aby zakończyć proces aktualizacji."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Zakładka utworzona"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Zakładka usunięta"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Zakładka zaktualizowana"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Pobieranie właściwości zakładki, naciśnij aby anulować."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Zaktualizowano właściwości zakładki."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Dalej"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Synchronizacja przeglądarki: bezpieczna, anonimowa i darmowa! Synchronizuj zakładki przez przeglądarki i urządzenia, rejestracja nie jest wymagana."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Menu zakładki"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Inne zakładki"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Pasek zakładek"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Dodaj do zakładek"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Wstecz"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Przerwij"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Zamknij"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Tak"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Dalej"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Usuń zakładkę"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Nie"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Gotowe"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Pobierz kopię zapasową"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Edytuj zakładkę"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Zobacz poradnik pomocy"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Następny"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Zobacz informacje o wydaniu"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Zapisuję"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Ustawienia"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Udostępnij zakładkę"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Cofnij"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Odśwież"
    },
    "View": {
      "key": "Button_View",
      "default": "Widok"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Proszę unikać modyfikacji [xbs] folderów, ponieważ może to powodować problemy z synchronizacją."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "Folder xBrowserSync został zmieniony"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Synchronizuj z istniejącym ID synchronizacji, przełącz na inną usługę lub spróbuj ponownie jutro."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Osiągnięto dzienny limit synchronizacji"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Jeśli problem będzie się powtarzał, <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>zgłoś problem</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Ups! Coś poszło nie tak."
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Tworzenie kopii zapasowej nie powiodło się"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Przeglądanie plików nie powiodło się"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "Adres URL jest nieprawidłowy lub nie można pobrać danych strony."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Nie można uzyskać właściwości zakładki"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Nie można pobrać aktualizacji"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Dostarczone dane kopii zapasowej nie są w oczekiwanym formacie."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Nie można zaimportować danych"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Musisz być zsynchronizowany, aby dodać zakładkę"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Nie można pobrać widoku z adresu URL"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Sprawdź połączenie sieciowe i spróbuj ponownie. Jeśli problem będzie się powtarzał, może to oznaczać problem z usługą xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Synchronizacja nie powiodła się"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Nie można znaleźć zapisanych poświadczeń. Włącz ponownie synchronizację i spróbuj ponownie."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Brakujące poświadczenia"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Sprawdź, czy ID synchronizacji, hasło i adres URL usługi zostały wprowadzone poprawnie."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Nieprawidłowe dane logowania"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "Adres URL usługi nie jest poprawną usługą xBrowserSync."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Nieprawidłowa usługa xBrowserSync"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Prawdopodobnie uszkodzony profil przeglądarki, spróbuj utworzyć nowy profil, ponieważ może to rozwiązać problem."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Nieoczekiwana struktura zakładek"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Dane lokalne zostały odświeżone, proszę ponownie zastosować ostatnią zmianę."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Błąd synchronizacji"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Sprawdź swoje połączenie sieciowe i spróbuj ponownie."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Utracono połączenie"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Przed przywróceniem upewnij się, że masz prawidłową kopię zapasową xBrowserSync."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Brak danych do przywrócenia"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Przełącz na inną usługę lub spróbuj ponownie później."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Usługa nie akceptuje nowych synchronizacji"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Lokalne dane nie były synchronizowane i zostały odświeżone. Proszę ponownie zastosować ostatnią zmianę."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Wykryto konflikt synchronizacji"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Usuń niektóre zakładki i spróbuj ponownie lub przełącz na usługę z większym limitem synchronizacji."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Limit danych synchronizacji przekroczony"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Sprawdź, czy pozwolenie zostało przyznane i spróbuj ponownie."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Skanowanie nie powiodło się"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "Usługa xBrowserSync jest obecnie offline, spróbuj ponownie później."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Usługa w trybie offline"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Udostępnienie nie powiodło się"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "Żądana synchronizacja nie istnieje, mogła zostać usunięta ze względu na brak aktywności."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Synchronizacja nie została znaleziona"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Kopia zapasowa nie może zostać przywrócona przez tę wersję xBrowserSync, ponieważ została utworzona z nowszą wersją."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Ten identyfikator nie może być zsynchronizowany z tą wersją xBrowserSync, ponieważ synchronizacja została zaktualizowana do nowszej wersji."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Nieobsługiwana wersja serwera"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Synchronizacja została wyłączona, włącz ponownie ją ponownie, aby wznowić synchronizację."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Limit żądań usługi został przekroczony"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Zmiany zostaną zsynchronizowane po przywróceniu połączenia."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Utracono połączenie"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Ta usługa działa w nieobsługiwanej wersji API."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Usługa nie jest obsługiwana"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Aktualizacja zostanie ponownie wykonana po ponownym uruchomieniu aplikacji. Jeśli problem będzie się powtarzał, zainstaluj ponownie xBrowserSync.",
        "default": "Zrestartuj przeglądarkę, aby ponowić próbę uaktualnienia, jeśli problem będzie się powtarzał, zainstaluj ponownie xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Aktualizacja nie powiodła się"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Błąd połączenia"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Sprawdzanie"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Usługa nie akceptuje nowych synchronizacji"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Tryb offline"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Online"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "nie zsynchronizowano"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "zsynchronizowano"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "synchronizacja"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Dodaj do zakładek"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Edytuj zakładkę"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Nazwa"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "Adres URL został już dodany do zakładek"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "To nie jest prawidłowy adres URL"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "Adres URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "Adres URL jest wymagany"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Opis"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Tagi"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "tag 1, tag 2, tag 3 itp"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Wyczyść tagi"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Usuń tag"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Usuń"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Udostępnij"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Zaktualizuj właściwości zakładki"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "Wartość, która została udostępniona, nie zawiera prawidłowego adresu URL."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Dodawanie zakładki</h4><p>Dodaj do zakładek bieżącą stronę klikając ikonę zakładki w panelu wyszukiwania. Właściwości zakładki zostaną automatycznie wypełnione, w przeciwnym razie dodaj opis i niektóre tagi, aby zapewnić lepsze wyniki wyszukiwania.</p><p>Alternatywnie, po prostu kliknij przycisk \"Dodaj tę stronę\" do zakładki jako normalny, a xBrowserSync automatycznie wypełni właściwości zakładki (należy przyznać uprawnienia opcjonalne do działania, sprawdź panel ustawień).</p>",
        "android": "<h4>Dodawanie zakładki</h4><p>Dodaj zakładki poprzez udostępnianie do xBrowserSync z aplikacji udostępniających adresy URL, takie jak przeglądarki, YouTube, Spotify i wiele innych.</p><p>Właściwości zakładki zostaną pobrane dla Ciebie, w przeciwnym razie dodaj opis i niektóre tagi, aby zapewnić lepsze wyniki wyszukiwania.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Pamiętaj, aby wykonać kopię zapasową</h4><p>Kiedy korzystasz z xBrowserSync, twoja odpowiedzialność spoczywa na Ciebie, więc bądź przezorny i upewnij się, że wykonasz kopie zapasowe.</p><p>Przejdź do panelu ustawień i utwórz kopię zapasową niezaszyfrowanych danych do pliku lokalnego, który może być użyty do przywrócenia Twoich danych w razie potrzeby.</p><p>Jeśli lokalne dane przeglądarki staną się uszkodzone i nie masz żadnych kopii zapasowych, możesz w każdej chwili przywrócić swoje dane z powrotem do oryginalnego stanu, z którego został zainstalowany xBrowserSync.</p>",
        "android": "<h4>Pamiętaj, aby wykonać kopię zapasową</h4><p>Kiedy korzystasz z xBrowserSync, twoja odpowiedzialność spoczywa na Ciebie, więc bądź przezorny i upewnij się, że wykonujeszkopie zapasowe.</p><p>Przejdź do panelu ustawień i utwórz kopię zapasową niezaszyfrowanych danych do pliku lokalnego, który może być użyty do przywrócenia Twoich danych w razie potrzeby.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Zanim zaczniesz</h4><p>xBrowserSync zmodyfikuje dane Twojej lokalnej przeglądarki, więc utworzenie kopii zapasowej zakładek i innych danych przeglądarki jest dobrym pomysłem na wszelki wypadek, i jeśli używasz innych usług lub narzędzi synchronizacji przeglądarki (takich jak <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) proszę wyłączyć je, aby uniknąć konfliktów.</p>",
        "brave": "<h4>Zanim zaczniesz</h4><p>xBrowserSync zmodyfikuje dane Twojej lokalnej przeglądarki, więc utworzenie kopii zapasowej zakładek i innych danych przeglądarki jest dobrym pomysłem na wszelki wypadek, i jeśli używasz innych usług lub narzędzi synchronizacji przeglądarki (takich jak <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) proszę wyłączyć je, aby uniknąć konfliktów.</p>",
        "edge": "<h4>Zanim zaczniesz</h4><p>xBrowserSync zmodyfikuje dane Twojej lokalnej przeglądarki, więc utworzenie kopii zapasowej zakładek i innych danych przeglądarki jest dobrym pomysłem na wszelki wypadek, i jeśli używasz innych usług lub narzędzi synchronizacji przeglądarki (takich jak <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) proszę wyłączyć je, aby uniknąć konfliktów.</p>",
        "firefox": "<h4>Zanim zaczniesz</h4><p>xBrowserSync zmodyfikuje dane Twojej lokalnej przeglądarki, więc utworzenie kopii zapasowej zakładek i innych danych przeglądarki jest dobrym pomysłem na wszelki wypadek, i jeśli używasz innych usług lub narzędzi synchronizacji przeglądarki (takich jak <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) proszę wyłączyć je, aby uniknąć konfliktów.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Synchronizacja z istniejącym ID</h4><p>Kliknij na \"Już masz ID synchronizacji\", aby móc wprowadzić istniejące ID synchronizacji i hasło. Jeśli Twój identyfikator synchronizacji został utworzony w serwisie innym niż wyświetlany, przełącz się na tę usługę przed próbą synchronizacji.</p><p>xBrowserSync odzyska i odszyfruje Twoje zaszyfrowane dane przy użyciu lokalnego hasła, następnie wyczyść lokalne zakładki przed ponownym załadowaniem ich z odszyfrowanych danych.</p><p>Po synchronizacji, xBrowserSync sprawdza w tle co piętnaście minut aktualizacje zsynchronizowanych danych i automatycznie aktualizuje lokalne zakładki. Możesz również ręcznie zsynchronizować dostępne aktualizacje z synchronizowanymi danymi w panelu Ustawień.</p>",
        "android": "<h4>Synchronizacja z istniejącym ID</h4><p>Zacznij od skanowania kodu QR synchronizacji w panelu ustawień rozszerzenia xBrowserSync na pulpicie przeglądarki (kliknij na ID synchronizacji, aby go pokazać). Upewnij się, że podczas tworzenia synchronizacji wprowadziłeś to samo hasło szyfrowania, w przeciwnym razie xBrowserSync nie będzie w stanie odszyfrować Twoich danych.</p><p>Ponadto, jeśli jesteś zsynchronizowany z inną usługą xBrowserSync, upewnij się, że jest to usługa aktywna skonfigurowana w panelu Ustawień.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Synchronizacja po raz pierwszy</h4><p>Zanim xBrowserSync będzie mógł zsynchronizować dane przeglądarki musisz podać hasło szyfrowania. Upewnij się, że jest silne, ale również łatwe do zapamiętania, nie ma resetów ani przypomnień hasła, więc jeśli je zapomnisz nie będziesz mógł uzyskać dostępu do synchronizowanych danych.</p><p>Twoje dane przeglądarki zostaną zaszyfrowane przy użyciu hasła i zapisane w aktywnej usłudze xBrowserSync skonfigurowanej w panelu Ustawienia.</p><p>Po zsynchronizowaniu wszystkie zmiany wprowadzone w lokalnych zakładkach zostaną automatycznie zsynchronizowane przez xBrowserSync.</p>",
        "android": "<h4>Synchronizacja po raz pierwszy</h4><p>xBrowserSync aktywnie synchronizuje dane przeglądarki pomiędzy przeglądarkami komputerowymi (synchronizacja z przeglądarkami mobilnymi nie jest obecnie obsługiwana), możesz użyć tej aplikacji, aby uzyskać dostęp do zsynchronizowanych danych na urządzeniu mobilnym Android.</p><p>Jeśli nie utworzyłeś jeszcze ID synchronizacji, przejdź do przeglądarki na pulpicie i <a href='https://link.xbrowsersync.org/download' class='new-tab'>pobierz</a> rozszerzenie xBrowserSync. Po utworzeniu synchronizacji możesz użyć nowego ID synchronizacji w tej aplikacji, aby uzyskać dostęp do danych.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Dalsze wsparcie</h4><p>Odpowiedzi na najczęściej zadawane pytania znajdziesz w <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>FAQ</a>, sprawdź również bieżące <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>znane problemy</a>, aby sprawdzić, czy problem jest tam wymieniony.</p><p>Alternatywnie, użyj <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>trackera problemów</a>, aby zgłosić problem lub poprosić o nową funkcję.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Przejdź na komórkę</h4><p>Uzyskaj dostęp do zsynchronizowanych zakładek z aplikacją xBrowserSync Android dostępną w sklepie <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a>, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> lub <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>bezpośrednie pobranie</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Obsługiwane funkcje natywne</h4><p>Możesz nadal korzystać z natywnych funkcji zakładek w przeglądarce, takich jak pasek zakładek i menedżer zakładek, wszelkie wprowadzone zmiany zostaną automatycznie zsynchronizowane w tle.</p><p>Jeśli zorganizowałeś swoje istniejące zakładki w foldery nie martw się, xBrowserSync będzie respektował i utrzymywał istniejącą hierarchię zakładek.</p>",
        "firefox": "<h4>Obsługiwane funkcje natywne</h4><p>Możesz nadal korzystać z natywnych funkcji zakładek w przeglądarce, takich jak pasek narzędzi zakładek i biblioteka zakładek, wszelkie wprowadzone zmiany zostaną automatycznie zsynchronizowane w tle.</p><p>Jeśli zorganizowałeś swoje istniejące zakładki w folderach nie martw się, xBrowserSync będzie respektował i utrzymywał istniejącą hierarchię zakładek.</p><p>Pamiętaj, że API zakładek Firefox nie obsługuje jeszcze dostępu do natywnych znaczników zakładek, wszystkie istniejące tagi zostaną utracone podczas synchronizacji, a tagi dodane przez xBrowserSync nie będą zapisywane jako natywne tagi.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Wróć"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Wyszukiwanie zakładek</h4><p>Po zsynchronizowaniu, po prostu naciśnij Enter, aby wyświetlić Twoje ostatnie zakładki lub wpisz słowa kluczowe lub adres URL, aby wyszukać zakładki.</p><p>Przełącz pomiędzy wynikami wyszukiwania i folderami zakładek, aby przeglądać całą hierarchię.</p><p>Aby edytować lub usunąć zakładkę, najedź na zakładkę i kliknij teraz widoczną ikonę edycji obok tytułu zakładki.</p>",
        "android": "<h4>Wyszukiwanie zakładek</h4><p>Po zsynchronizowaniu, zakładki są wyświetlane w porządku chronologicznym po otwarciu xBrowserSync. Wpisz niektóre słowa kluczowe lub adres URL w polu wyszukiwania, aby wyszukać zakładki.</p><p>Przełączaj się pomiędzy wynikami wyszukiwania i folderami zakładek, aby przeglądać całą hierarchię.</p><p>Długie naciśnięcie zakładki pozwoli Ci bezpośrednio udostępniać, modyfikować lub usuwać zakładkę.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Synchronizacja z inną usługą</h4><p>Domyślnie Twoje dane są zsynchronizowane z <a href='https://link.xbrowsersync.org/api' class='new-tab'>oficjalną usługą xBrowserSync</a>, jeśli chcesz zsynchronizować swoje dane z alternatywną usługą xBrowserSync możesz przełączyć aktywną usługę przed synchronizacją.</p><p>Sprawdź listę dostępnych <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>publicznych usług xBrowserSync</a> lub <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>uruchom własną usługę</a>do użytku prywatnego w celu zapewnienia bezpieczeństwa i prywatności, lub do użytku publicznego, tak aby więcej osób mogło cieszyć się xBrowserSync.</p><p><strong>Ważne:</strong> usługi xBrowserSync są wykonywane niezależnie przez wolontariuszy. Administrator serwisu nie ponosi odpowiedzialności za Twoje dane, więc pamiętaj, aby regularnie wykonywać kopie zapasowe.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Użyj skrótów!</h4><p>Aby szybko wyszukać zakładki, użyj domyślnego skrótu klawiszowego (Ctrl+Space), aby aktywować rozszerzenie, następnie po prostu naciśnij Enter, aby wyświetlić ostatnie zakładki lub zacznij pisać aby wyszukać.</p><p>Aby zmienić skrót, przejdź do chrome://extensions/shortcuts i zaktualizuj dostępne skróty w xBrowserSync.</p>",
        "brave": "<h4>Użyj skrótów!</h4><p>Aby szybko wyszukać zakładki, użyj domyślnego skrótu klawiszowego (Ctrl+Space), aby aktywować rozszerzenie, następnie po prostu naciśnij Enter, aby wyświetlić ostatnie zakładki lub zacznij pisać aby wyszukać.</p><p>Aby zmienić skrót, przejdź do brave://extensions/shortcuts i zaktualizuj dostępne skróty w xBrowserSync.</p>",
        "edge": "<h4>Użyj skrótów!</h4><p>Aby szybko wyszukać zakładki, użyj domyślnego skrótu klawiszowego (Ctrl+Space), aby aktywować rozszerzenie, następnie po prostu naciśnij Enter, aby wyświetlić ostatnie zakładki lub zacznij pisać aby wyszukać.</p><p>Aby zmienić skrót, przejdź do edge://extensions/shortcuts i zaktualizuj dostępne skróty w xBrowserSync.</p>",
        "firefox": "<h4>Użyj skrótów!</h4><p>Aby szybko wyszukać zakładki, użyj domyślnego skrótu klawiszowego (Ctrl+Space), aby aktywować rozszerzenie, następnie po prostu naciśnij Enter, aby wyświetlić ostatnie zakładki lub zacznij pisać aby wyszukać.</p><p>Aby zmienić przypisany skrót klawiszowy, przejdź do about:addons, wybierz z menu Opcji \"Zarządzaj skrótami rozszerzeń\" i zaktualizuj dostępne skróty dla xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Twój identyfikator synchronizacji</h4><p>xBrowserSync zapewnia Twoją prywatność, ponieważ żadne dane osobowe nie są gromadzone a dane przeglądarki są szyfrowane przed synchronizacją. Aby zidentyfikować zsynchronizowane dane, otrzymujesz anonimowy identyfikator synchronizacji, który może być używany wraz z hasłem do synchronizacji danych na innych przeglądarkach i urządzeniach.</p><p>Pamiętaj, że Twój identyfikator synchronizacji będzie działać tylko z usługą xBrowserSync, na której został utworzony, jeśli przełączysz się na inną usługę xBrowserSync musisz utworzyć nową synchronizację lub użyć istniejącego ID synchronizacji utworzonego podczas poprzedniej synchronizacji z tą usługą.</p><p>Za każdym razem, gdy synchronizujesz się możesz wyświetlić ID synchronizacji w panelu ustawień, kliknij go, aby pokazać poręczny kod QR do skanowania podczas synchronizacji na urządzeniach mobilnych.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Witamy w xBrowserSync!</h4><p>xBrowserSync jest darmową i otwartą alternatywą dla usług synchronizacji przeglądarki oferowanych przez Google, Mozillę, Opera i inne, która szanuje Twoją prywatność i zapewnia pełną anonimowość (sprawdź stronę <a href='https://link.xbrowsersync.org/www' class='new-tab'></a>, aby uzyskać więcej informacji).</p><p>Poświęć chwilę, aby przeczytać ten przewodnik pomocy, aby zapoznać się z xBrowserSync, za pomocą linków do stronicowania poniżej lub klawiszy strzałek, aby poruszać się między stronami.</p><p>Uwaga: xBrowserSync obecnie synchronizuje tylko zakładki. Synchronizacja dodatkowych danych przeglądarki zostanie dodana w przyszłych wersjach, sprawdź mapę drogową <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'></a>, aby zobaczyć co jest planowane.</p>",
        "android": "<h4>Witamy w xBrowserSync!</h4><p>xBrowserSync jest darmową i otwartą alternatywą dla usług synchronizacji przeglądarki oferowanych przez Google, Mozillę, Opera i inne, która szanuje Twoją prywatność i zapewnia pełną anonimowość (sprawdź stronę <a href='https://link.xbrowsersync.org/www' class='new-tab'></a>, aby uzyskać więcej informacji).</p><p>Poświęć chwilę, aby przeczytać ten przewodnik pomocy, aby zapoznać się z xBrowserSync, za pomocą linków do stronicowania poniżej lub klawiszy strzałek, aby poruszać się między stronami.</p><p>Uwaga: xBrowserSync obecnie synchronizuje tylko zakładki. Synchronizacja dodatkowych danych przeglądarki zostanie dodana w przyszłych wersjach, sprawdź mapę drogową <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'></a>, aby zobaczyć co jest planowane.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Czy potrzebujesz ID synchronizacji?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Pobierz rozszerzenie xBrowserSync dla przeglądarki desktop i utwórz nową synchronizację, aby uzyskać dostęp do jej zakładek."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Potwierdź hasło"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Twoje hasło szyfrowania"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Hasło szyfrowania"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Ustaw hasło do szyfrowania"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Pokaż hasło"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Połącz z synchronizacją"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Otwórz xBrowserSync w przeglądarce komputera, przejdź do panelu ustawień i kliknij na ID synchronizacji, aby wyświetlić kod QR, który możesz zeskanować tutaj."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Skanuj kod QR"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Wprowadź dane synchronizacji ręcznie"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Wersja API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Zsynchronizować z tą usługą?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Lokalizacja"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Maksymalny rozmiar synchronizacji"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Synchronizacja z"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Status"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSync URL synchronizacji"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Wprowadź adres URL alternatywnej usługi xBrowserSync. Przeglądaj listę publicznych usług xBrowserSync <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>tutaj</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Przełącz usługę"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "Adres URL jest wymagany"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Nieprawidłowa usługa xBrowserSync"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "To nie jest prawidłowy adres URL"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Nie można połączyć się z serwerem"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Ta usługa działa w nieobsługiwanej wersji API"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Ważne:</strong> usługi xBrowserSync są wykonywane niezależnie przez wolontariuszy. Administrator usługi nie ponosi odpowiedzialności za Twoje dane, więc pamiętaj, aby regularnie wykonywać kopie zapasowe."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Czy na pewno?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync usunie wszystkie lokalne zakładki przed przywróceniem synchronizowanych zakładek. OK, aby kontynuować?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Wyłącz narzędzia synchronizacji zakładek"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Synchronizowanie danych przeglądarki z xBrowserSync, podczas gdy inne narzędzia synchronizacji zakładek (takie jak <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) są aktywne, mogą spowodować duplikację i być może uszkodzenie danych. Proszę je wyłączyć przed kontynuowaniem.",
            "brave": "Synchronizowanie danych przeglądarki z xBrowserSync, podczas gdy inne narzędzia synchronizacji zakładek (takie jak <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) są aktywne, mogą spowodować duplikację i być może uszkodzenie danych. Proszę je wyłączyć przed kontynuowaniem.",
            "edge": "Synchronizowanie danych przeglądarki z xBrowserSync, podczas gdy inne narzędzia synchronizacji zakładek (takie jak <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) są aktywne, mogą spowodować duplikację i być może uszkodzenie danych. Proszę je wyłączyć przed kontynuowaniem.",
            "firefox": "Synchronizowanie danych przeglądarki z xBrowserSync, podczas gdy inne narzędzia synchronizacji zakładek (takie jak <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) są aktywne, mogą spowodować duplikację i być może uszkodzenie danych. Proszę je wyłączyć przed kontynuowaniem."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Synchronizacja"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Utwórz nową synchronizację"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Gotowy do aktualizacji synchronizacji?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Twoja synchronizacja musi zostać zaktualizowana przed synchronizacją z tą wersją xBrowserSync. Po aktualizacji nie będziesz już w stanie synchronizować z poprzednimi wersjami xBrowserSync.</p><p>Upewnij się, że chcesz zaktualizować xBrowserSync na wszystkich zsynchronizowanych urządzeniach przed kontynuowaniem. Czy chcesz kontynuować?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Aktualizuj synchronizację"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Twoja synchronizacja musi zostać zaktualizowana przed synchronizacją z tą wersją xBrowserSync.</p><p>Użyj rozszerzenia przeglądarki xBrowserSync do aktualizacji synchronizacji, a następnie spróbuj ponownie tutaj.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Twój identyfikator synchronizacji"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Masz już identyfikator synchronizacji?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Nieprawidłowy identyfikator synchronizacji"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Uzyskaj identyfikator synchronizacji"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Uprawnienia opcjonalne"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync automatycznie wzbogaca dodane zakładki za pomocą przycisku Dodaj zakładkę do przeglądarki z dostępnymi metadanymi. Aby to włączyć, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>wymaga dodatkowych uprawnień</a>, aby móc odczytywać dane odwiedzanych stron internetowych.</p><p>Proszę wskazać, czy zostaniesz poproszony czy chętnie udzielisz tych uprawnień, alternatywnie możesz dodać lub usunąć uprawnienia w dowolnym momencie w panelu Ustawienia.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Zeskanuj kod QR synchronizacji"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Przełącz tryb wyświetlania"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Zobacz foldery zakładek"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Wyczyść"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Folder jest pusty"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Nie masz żadnych zakładek, idź i dodaj coś nowego!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Nie znaleziono zakładek"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Wciśnij Enter lub wyszukaj zakładki",
        "android": "Znajdź zakładki"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Przeciągnij w dół, aby zsynchronizować"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Puść aby zsynchronizować"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Zobacz wyniki wyszukiwania"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Kopia zapasowa i przywracanie"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Automatyczna kopia zapasowa"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Automatycznie pobieraj kopie zapasowe w harmonogramie."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Kopia zapasowa uruchamiana"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "co"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "jeden raz"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "dwa"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "trzy"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "cztery"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "pięć"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "sześć"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "siedem"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "osiem"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "dziewięć"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "ten"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "jedenaście"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "dwanaście"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "dzień (dni)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "tygodni"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "miesięcy"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Aby zapobiec wyświetlaniu okna dialogowego „Zapisz jako...” podczas pobierania kopii zapasowych, wyłącz ustawienie „Zapytaj gdzie zapisać każdy plik przed pobraniem”."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Kopia zapasowa"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Pobierz kopię zapasową"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Kopia zapasowa lokalnych danych przeglądarki do pliku."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Kopia zapasowa zsynchronizowanych danych do pliku."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Przywróć"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Przywróć z kopii zapasowej"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Przywróć dane przeglądarki z kopii zapasowej."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Ponieważ synchronizacja jest obecnie wyłączona, przywrócone dane nadpiszą lokalne dane przeglądarki.</p><p>OK, aby kontynuować?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Przywróć zsynchronizowane dane z kopii zapasowej."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Ponieważ synchronizacja jest obecnie włączona, przywrócone dane nadpiszą Twoje zsynchronizowane dane.</p><p>Aby przywrócić dane tylko do lokalnej przeglądarki, wyłącz synchronizację przed przywróceniem.</p><p>OK, aby kontynuować?</p>",
              "android": "<p>Przywracane dane nadpiszą Twoje zsynchronizowane dane.</p><p>Czy chcesz kontynuować?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Kopia została przywrócona."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Wybierz plik"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Wybierz kopię zapasową do przywrócenia"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Skopiuj zawartość pliku kopii zapasowej, aby przywrócić dane."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Wklej dane kopii zapasowej"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Przywróć dane"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Nieprawidłowe dane kopii zapasowej xBrowserSync"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Jeśli kontynuujesz, każda aktywna synchronizacja zostanie wyłączona, a Twoje dane lokalne zostaną przywrócone po zainstalowaniu xBrowserSync na {date}.</p><p>Czy chcesz kontynuować?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Zastąp Dane Lokalne"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Twoje dane zostały przywrócone do początkowego stanu instalacji."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Dane stanu instalacji są niedostępne, nie można zresetować."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Pomoc i wsparcie"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Przewodnik pomocy"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Masz pytanie lub problem? Upewnij się, że przeczytałeś poradnik pomocy, jeśli nie znalazłeś odpowiedzi na swoje pytania sprawdź FAQ."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Zobacz FAQ"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Wsparcie"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Potrzebujesz wsparcia? Użyj trackera problemów aby zgłosić błąd lub poprosić o funkcję."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Przeglądaj śledzenie zgłoszeń"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Logi aplikacji"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Pobierz i dołącz dziennik aplikacji podczas logowania problemu."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Wyczyść Logi"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Pobierz logi"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Bieżący rozmiar loga"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Uprawnienia opcjonalne"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Przyznaj uprawnienia"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Przyznane"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Nieprzyznane"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Odczyt danych witryny"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Wymagane do automatycznego dodawania metadanych do zakładek podczas korzystania z przycisku \"Dodaj tę stronę\" w przeglądarce (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>więcej informacji</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Usuń uprawnienie"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Automatyczne pobieranie metadanych zakładek"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Pobierz metadane automatycznie podczas dodawania zakładki."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Sprawdź dostępność aktualizacji"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Zostań powiadomiony, gdy nowa wersja xBrowserSync jest dostępna."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Włącz tryb ciemny"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Idealne do stosowania w środowiskach o niskim poziomie oświetlenia."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Pokaż foldery zakładek"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Domyślnie wyświetlaj foldery zakładek."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Zmień pozycję paska wyszukiwania"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Pokaż pasek wyszukiwania pod wynikami."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Synchronizuj pasek zakładek"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Wyłącz to ustawienie, aby wyświetlić różne zakładki paska narzędzi w przeglądarkach zsynchronizowanych."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Włączenie tego ustawienia zastąpi zakładki znajdujące się obecnie w pasku zakładek twoimi zsynchronizowanymi zakładkami.</p><p>OK, aby kontynuować?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Włącz telemetrię"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Od czasu do czasu wysyłaj anonimowe dane techniczne, aby pomóc ulepszyć xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Ustawienia"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Synchronizacja"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Wyłącz synchronizację"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID synchronizacji"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Użyj ID synchronizacji, aby połączyć się z synchronizowanymi danymi na innych urządzeniach (kliknij, aby wyświetlić kod QR)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Użycie danych"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Ile danych synchronizacji dozwolonych przez usługę używasz."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Usługa"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Ostatnia synchronizacja {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Gotowy do synchronizacji (zaplanowany na {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Synchronizuj teraz"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Zeskanuj ten kod QR używając aplikacji xBrowserSync Android, aby połączyć się z twoimi zsynchronizowanymi danymi."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Pokaż kod QR"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Skopiuj ID do schowka"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Skopiowano!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Ustawienia dostępne tylko gdy synchronizacja jest włączona."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Plik zapisany do Pobierz"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Wspomóż xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Wspomóż xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Chcemy sprawić, by xBrowserSync był narzędziem synchronizacji przeglądarki numer jeden, ale wciąż pozostaje wiele do zrobienia:</p><ul><li>Dodaj synchronizację kart przeglądarki i historii</li><li>Wesprzyj wszystkie główne przeglądarki komputerów stacjonarnych</li><li>Przetłumacz na inne języki</li><li>i <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>więcej</a>!</li></ul><p>Tylko przy twoim wsparciu możemy kontynuować ulepszanie xBrowserSync i zapewnić jego skuteczność w ochronie prywatności w Internecie i zwiększaniu wydajności.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Kryptowaluta"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Synchronizacja nie została znaleziona"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Twoja synchronizacja nie została znaleziona i mogła zostać usunięta z powodu braku aktywności.</p><p>Będziesz musiał utworzyć nową synchronizację, ale najpierw kliknij na poniższy przycisk, aby pobrać kopię zapasową zsynchronizowanych danych, którą możesz następnie przywrócić do nowej synchronizacji.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Wysłać anonimową telemetrię?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync różni się od tradycyjnych aplikacji, ponieważ jest całkowicie anonimowym narzędziem zapewniającym prywatność. Utrzymanie takiego narzędzia jest trudne, ponieważ nie mamy dostępu do danych użytkowników, aby pomóc określić, jak najlepiej wykorzystać nasze ograniczone zasoby. Dlatego prosimy o pozwolenie na okazjonalne wysyłanie anonimowych danych technicznych, które pomogą nam ulepszyć xBrowserSync.</p><p>Te dane telemetryczne nie zawierają żadnych danych osobowych ani identyfikujących, ani żadnych zaszyfrowanych danych synchronizacji i nigdy nie są. udostępniane stronom trzecim (możesz wyrazić zgodę lub zrezygnować w dowolnym momencie w panelu Ustawienia).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Zaktualizowano do"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "xBrowserSync został zaktualizowany najnowszymi funkcjami i poprawkami. Aby uzyskać więcej informacji o zmianach zawartych w tej wersji, sprawdź informacje o wydaniu."
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Odzyskiwanie"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Resetowanie"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Synchronizacja"
      }
    }
  }
}
</file>

<file path="res/strings/pt.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "Atualização do xBrowserSync disponível"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} está disponível para download. Clique para maiores informações.",
        "android": "xBrowserSync {version} está disponível para download."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Atualizado para"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "O xBrowserSync foi atualizado. A sincronização foi desativada, reative a sincronização para completar o processo de atualização."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Favorito criado"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Favorito excluído"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Favorito atualizado"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Buscando propriedades dos favoritos, toque para cancelar."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Propriedades de favoritos atualizadas."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Prosseguir"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Sincronização de navegadores como deve ser: segura, anônima e gratuita! Sincronize favoritos entre os seus navegadores e dispositivos sem precisar fazer registro."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Favoritos do menu"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Outros favoritos"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Barra de favoritos"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Adicionar ao favoritos"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Voltar"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Cancelar"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Fechar"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Sim"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Continuar"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Excluir favorito"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Não"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Concluído"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Baixar o Backup"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Editar favoritos"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Ver o guia de ajuda"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Próximo"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Ver notas de lançamento"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Salvando"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Configurações"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Compartilhar favorito"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Desfazer"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Atualizar"
    },
    "View": {
      "key": "Button_View",
      "default": "Exibir"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Por favor, evite modificar as pastas [xbs] pois elas podem causar problemas de sincronização."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "A pasta xBrowserSync foi alterada"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Sincronize com um ID de sincronização existente, ou altere para um serviço diferente ou tente novamente mais tarde"
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Limite diário de sincronização atingido"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Se o problema persistir, por favor <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>reporte o problema</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Houve algum problema"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "O backup falhou"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Falha na navegação de arquivos"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "A URL é inválida ou os dados da página da Web não puderam ser recuperados."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Não foi possível obter as propriedades dos favoritos"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Não foi possível obter atualizações"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Os dados de backup fornecidos não estão em um formato esperado."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Não é possível importar os dados"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Você deve estar sincronizado para adicionar um favorito"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Não foi possível recuperar a URL do favorito compartilhado"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Verifique sua conexão de rede e tente novamente. Se o problema persistir, pode haver um problema com o serviço xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Sincronização falhou"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Não foi possível encontrar as credenciais armazenadas. Reative a sincronização e tente novamente."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Credenciais faltando"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Verifique se o seu ID de sincronização, senha e URL de serviço foram inseridos corretamente."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Credenciais inválidas"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "A URL do serviço não é um serviço xBrowserSync válido."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Serviço xBrowserSync inválido"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Possível perfil de navegador corrompido, tente criar um novo perfil, para tentar resolver o problema."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Estrutura de favoritos inesperada"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Os dados locais foram atualizados. Por favor, reaplique a última alteração."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Erro de sincronização"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Verifique sua conexão de internet e tente novamente."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Conexão perdida"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Certifique-se de ter fornecido um backup do xBrowserSync válido antes de restaurá-lo."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Sem dados para restaurar"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Alterne para um serviço diferente ou tente novamente mais tarde."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Serviço não aceita novas sincronizações"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Os dados locais estavam fora de sincronia e agora foram atualizados. Por favor, reaplique a última alteração."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Conflito de sincronização detectado"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Exclua alguns favoritos e tente novamente ou mude para um serviço com um limite de sincronização maior."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Limite de dados sincronizados atingido"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Verifique se a permissão foi concedida e tente novamente."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Escaneamento falhou"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "O serviço xBrowserSync está offline no momento, tente novamente mais tarde."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Serviço offline"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Falha ao compartilhar"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "A sincronização solicitada não existe, ela pode ter sido removida devido a inatividade."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Sincronização não encontrada"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Os dados de backup não podem ser restaurados por esta versão do xBrowserSync pois foram criados com uma versão posterior."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Esta ID não pode ser sincronizada com a versão atual do xBrowserSync pois a sincronização foi atualizada para uma versão posterior."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Versão da sincronização não suportada"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "A sincronização foi desativada, reative-a para retomar a sincronização."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Limite de solicitação de serviço atingido"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "As alterações serão sincronizadas quando a conexão for restaurada."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Conexão perdida"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Este serviço está executando uma versão de API não suportada."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Serviço não suportado"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "A atualização será reiniciada ao reiniciar o aplicativo. Se o problema persistir, por favor reinstale xBrowserSync.",
        "default": "Reinicie seu navegador para tentar fazer a atualização novamente, se o problema persistir, reinstale o xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Falha na atualização"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Problema na conexão"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Verificando"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Serviço não aceita novas sincronizações"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Desconectado"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Conectado"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "não sincronizado"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "sincronizado"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "sincronizando"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Adicionar ao favoritos"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Editar favoritos"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Título"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "A URL já foi adicionada aos favoritos"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "URL inválida"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "Uma URL é necessária"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Descrição"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Marcadores"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "marcador 1, marcador 2, marcador 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Limpar tags"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Remover marcador"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Excluir"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Compartilhar"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Atualizar propriedades dos favoritos"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "O valor que foi compartilhado não contém uma URL válida."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Adicionando um favorito</h4><p>Marque a página atual clicando no ícone do marcador no painel de pesquisa. As propriedades dos favoritos serão preenchidas automaticamente, caso contrário, adicione uma descrição e tag para garantir melhores resultados de pesquisa.</p><p>Alternativamente, basta clicar no botão \"Adicionar página aos favoritos\" do navegador como normal e o xBrowserSync preencherá automaticamente as propriedades do favorito (permissões opcionais devem ser concedidas para que isto funcione, verifique o painel de configurações).</p>",
        "android": "<h4>Adicionando um favorito</h4><p>Adicione favoritos facilmente compartilhando o xBrowserSync de todos os aplicativos que compartilhem URLs como navegadores, YouTube, Spotify e muito mais.</p><p>As propriedades dos favoritos serão buscadas para você, caso contrário, adicione uma descrição e algumas tags para garantir melhores resultados de pesquisa.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Lembre-se de fazer backup</h4><p>Quando você usa o xBrowserSync, seus dados são sua responsabilidade, então seja esperto e certifique-se de fazer backups.</p><p>Vá para o painel de configurações e faça backup dos seus dados não criptografados em um arquivo local, que depois pode ser usado para restaurar seus dados sempre que você precisar.</p><p>Se os dados do seu navegador local ficarem corrompidos e você não tiver backups, a qualquer momento você pode reverter seus dados para seu estado original no momento em que o xBrowserSync foi instalado.</p>",
        "android": "<h4>Lembre-se de fazer backup de</h4><p>Quando você usa xBrowserSync é de sua responsabilidade e interessante certificar de fazer backups.</p><p>Vá para o painel de configurações e faça backup dos seus dados não criptografados em um arquivo local que pode ser usado para restaurar seus dados se você precisar.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Antes de começar o</h4><p>xBrowserSync modifica os dados do seu navegador local para que seja uma boa ideia fazer o backup dos seus favoritos e de outros dados do navegador para o caso, e se você estiver usando qualquer outro navegador de sincronização ou ferramentas (como o <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>), desative-os para evitar conflitos.</p>",
        "brave": "<h4>Antes de começar</h4><p> O xBrowserSync modifica os dados do navegador, por isso é inteeressante efetuar um backup de seus favoritos e outros dados do navegador, caso esteja usando qualquer outro serviço ou ferramenta de sincronização do navegador ( como <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'> Brave Sync </a>) desative-os para evitar conflitos. </p>",
        "edge": "<h4>Antes de começar</h4><p> O xBrowserSync modifica os dados do navegador, por isso é inteeressante efetuar um backup de seus favoritos e outros dados do navegador, caso esteja usando qualquer outro serviço ou ferramenta de sincronização do navegador ( como <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'> Microsoft Edge</a>) desative-os para evitar conflitos. </p>",
        "firefox": "<h4>Antes de começar o</h4><p>xBrowserSync modifica os dados do seu navegador local para que seja uma boa ideia fazer o backup dos seus favoritos e de outros dados do navegador para o caso, e se você estiver usando qualquer outro navegador de sincronização ou ferramentas (como o <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>), desative-os para evitar conflitos.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Sincronizando com seu ID existente</h4><p>Clique em \"Já tem um ID de sincronização?\" para inserir seu ID e senha de sincronização existentes. Se o seu ID de sincronização foi criado em um serviço diferente do exibido, então mude para esse serviço antes de tentar sincronizar.</p><p>xBrowserSync irá recuperar e descriptografar seus dados criptografados usando sua senha armazenada localmente, então limpe seus favoritos locais antes de repreenchê-los a partir dos dados descriptografados.</p><p>Quando sincronizado, O xBrowserSync verifica em segundo plano a cada quinze minutos atualizações dos seus dados sincronizados e atualizará automaticamente seus favoritos locais quando necessário. Você também pode sincronizar manualmente as atualizações disponíveis para os seus dados sincronizados no painel de Configurações.</p>",
        "android": "<h4>Sincronizando com seu ID existente</h4><p>Comece digitalizando o código QR do ID de sincronização no painel de configurações da extensão do navegador xBrowserSync desktop (clique no seu ID de sincronização para revelá-lo). Certifique-se de inserir a mesma senha de criptografia usada ao criar a sincronização, caso contrário, o xBrowserSync não será capaz de descriptografar seus dados.</p><p>Além disso, se você estiver sincronizado com um serviço xBrowserSync diferente certifique-se de que o serviço ativo esteja configurado no painel de Configurações.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Sincronizando pela primeira vez</h4><p>Antes de xBrowserSync pode sincronizar os dados do seu navegador, você precisará fornecer uma senha de criptografia. Certifique-se de torná-lo forte, mas também memorável, não há redefinições ou lembretes, então se você esquecer que você não será capaz de acessar seus dados sincronizados.</p><p>Os dados do seu navegador serão criptografados usando sua senha e salvos no serviço xBrowserSync ativo configurado no painel Configurações.</p><p>Depois de sincronizado, as alterações que você fizer nos seus favoritos locais serão sincronizadas automaticamente pelo xBrowserSync.</p>",
        "android": "<h4>Sincronizar pela primeira vez</h4><p>xBrowserSync sincroniza ativamente os dados do seu navegador entre os navegadores do computador (sincronizar com navegadores do computador não é suportado no momento), você pode usar este app para acessar seus dados sincronizados no seu dispositivo móvel Android.</p><p>Se você não tiver criado um ID de sincronização, Acesse seu navegador e <a href='https://link.xbrowsersync.org/download' class='new-tab'>faça o download</a> da extensão xBrowserSync. Depois de criar uma sincronização, você pode usar seu novo ID de sincronização dentro deste aplicativo para acessar seus dados.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Suporte adicional</h4><p>Você pode encontrar as respostas para as perguntas mais comuns nas <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>Perguntas Frequentes</a>, também verifique os <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>problemas conhecidos atuais</a> para ver se seu problema está listado lá.</p><p>Alternativamente, use o <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>rastreador de problemas</a> para relatar um problema ou solicitar um novo recurso.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Vá para o celular</h4><p>Acesse seus favoritos sincronizados em movimento com o aplicativo xBrowserSync para Android, disponível na <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>loja Google Play</a> , <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> ou <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>baixar direto</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Os recursos nativos são suportados</h4><p>Sinta-se à vontade para continuar usando os recursos nativos de favoritos do seu navegador, como a barra de favoritos e o gerenciador de favoritos, qualquer alteração que você fizer será sincronizada automaticamente em segundo plano.</p><p>Se você tiver organizado seus favoritos existentes em pastas não se preocupe, o xBrowserSync respeitará e manterá sua hierarquia de favoritos existente.</p>",
        "firefox": "<h4>Funcionalidades nativas suportadas</h4><p>Sinta-se à vontade para continuar usando recursos de favoritos nativos do seu navegador, como a barra de favoritos e a biblioteca de favoritos, qualquer alteração que você fizer será sincronizada automaticamente em segundo plano.</p><p>Se você tiver organizado seus favoritos existentes em pastas não se preocupe, o xBrowserSync respeitará e manterá sua hierarquia de favoritos existente.</p><p>Note no entanto, os favoritos do Firefox ainda não suportam acessar as tags nativas, quaisquer tags existentes serão perdidas quando a sincronização e tags adicionadas via xBrowserSync não serão salvas como tags nativas.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Anterior"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4> Pesquisando seus favoritos </h4> <p> Depois de sincronizado, basta pressionar Enter para exibir seus favoritos recentes ou digitar algumas palavras-chave ou alguma URL para pesquisar seus favoritos. </p> <p> Alternar entre resultados de pesquisa e pastas de favoritos para navegar por toda a hierarquia. </p> <p> Para editar ou excluir um favorito, passe o mouse sobre o favorito e clique no ícone de edição agora visível ao lado do título do favorito. </p>",
        "android": "<h4>Procurando seus favoritos</h4><p>Uma vez sincronizado, seus favoritos são exibidos em ordem cronológica quando você abre o xBrowserSync. Digite algumas palavras-chave ou uma URL na caixa de pesquisa para pesquisar os favoritos.</p><p>Alterne entre os resultados da pesquisa e as pastas de favoritos para procurar por toda a hierarquia.</p><p>Pressionar e segurar em um marcador lhe permitirá compartilhar, modificar ou apagar diretamente o favorito.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Sincronizando com outro serviço</h4><p>Por padrão, seus dados são sincronizados com o <a href='https://link.xbrowsersync.org/api' class='new-tab'>serviço oficial xBrowserSync</a>, no entanto se você quiser sincronizar seus dados para um serviço alternativo xBrowserSync, você pode alternar o serviço ativo antes de sincronizar.</p><p>Verifique a lista de disponíveis <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>serviços públicos xBrowserSync</a> ou <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>executar o seu próprio serviço</a>, seja para uso privado em segurança máxima e privacidade, ou para uso público, para que mais pessoas possam desfrutar do xBrowserSync.</p><p><strong>Importantes:</strong> xBrowserSync serviços são executados independentemente por voluntários. O administrador do serviço não assume nenhuma responsabilidade sobre seus dados, por isso, lembre-se de fazer backup regularmente.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Utilize atalhos!</h4><p>Para procurar os favoritos rapidamente, use o atalho de teclado padrão (Ctrl+Espaço) para ativar a extensão, então simplesmente pressione Enter para ver seus favoritos recentes ou comece a digitar para pesquisar.</p><p>Para alterar o atalho, navegue para chrome://extensions/shortcuts e atualize os atalhos disponíveis sob xBrowserSync.</p>",
        "brave": "<h4>Utilize atalhos!</h4><p>Para procurar os favoritos rapidamente, use o atalho de teclado padrão (Ctrl+Espaço) para ativar a extensão, então simplesmente pressione Enter para ver seus favoritos recentes ou comece a digitar para pesquisar.</p><p>Para alterar o atalho, procure em brave://extensions/shortcuts e atualize os atalhos disponíveis sob xBrowserSync.</p>",
        "edge": "<h4>Utilize atalhos!</h4><p>Para procurar os favoritos rapidamente, use o atalho de teclado padrão (Ctrl+Espaço) para ativar a extensão, então simplesmente pressione Enter para ver seus favoritos recentes ou comece a digitar para pesquisar.</p><p>Para alterar o atalho, navegue para edge://extensions/shortcuts e atualize os atalhos disponíveis no xBrowserSync.</p>",
        "firefox": "<h4>Utilize atalhos!</h4><p>Para procurar os favoritos rapidamente, use o atalho de teclado padrão (Ctrl+Espaço) para ativar a extensão, então simplesmente pressione Enter para ver seus favoritos recentes ou comece a digitar para pesquisar.</p><p>Para alterar o atalho, navegue para about:addons, clique em \"Gerenciar Atalhos de Extensões\" no menu Configurações e atualize os atalhos disponíveis no xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Seu ID de sincronização</h4><p>xBrowserSync garante sua privacidade, pois nenhum dado pessoal será coletado e os dados do seu navegador serão criptografados antes de serem sincronizados. Para identificar seus dados sincronizados, você recebe um ID de sincronização anônimo que pode ser usado juntamente com sua senha para sincronizar seus dados em outros navegadores e dispositivos.</p><p>Lembre-se de que o seu ID de sincronização só funcionará com o serviço xBrowserSync no qual ele foi criado, se você alternar para um serviço diferente xBrowserSync. você deve criar uma nova sincronização ou usar um ID de sincronização existente criado quando sincronizado anteriormente para esse serviço.</p><p>Sempre que você estiver sincronizado, você pode ver seu ID de sincronização no painel Configurações, clique nele para revelar um código QR útil para escanear ao sincronizar em dispositivos móveis.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Bem vindo ao xBrowserSync!</h4><p>xBrowserSync é uma alternativa gratuita e de código aberto para os serviços de sincronização oferecidos pelo Google, Mozilla, Opera e outros, que respeitam a sua privacidade e oferecem anonimato total (confira o <a href='https://link.xbrowsersync.org/www' class='new-tab'>site</a> para mais informações).</p><p>Reserve um momento para ler este guia de ajuda para familiarizar-se com xBrowserSync, usando os links de paginação abaixo ou as setas do teclado para se mover entre as páginas.</p><p>Por favor, note: xBrowserSync atualmente só sincroniza favoritos. A sincronização de dados adicionais do navegador será adicionada em versões futuras, verifique o roteiro de desenvolvimento <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'></a> para ver o que é planejado. <h4></p>",
        "android": "<h4>Bem-vindo ao xBrowserSync!</h4><p>xBrowserSync é uma alternativa gratuita e de código aberto para os serviços de sincronização do navegador oferecidos pelo Google, Mozilla, Opera e outros, que respeitam a sua privacidade e lhe dão total anonimato (confira o <a href='https://link.xbrowsersync.org/www' class='new-tab'>site</a> para mais informações).</p><p>Reserve um momento para ler este guia de ajuda para se familiarizar com xBrowserSync, usando os links de paginação abaixo ou as setas do teclado para se mover entre páginas.</p><p>Por favor, note: xBrowserSync atualmente apenas sincroniza favoritos. A sincronização de dados adicionais do navegador será adicionada em versões futuras, confira o roteiro de desenvolvimento <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'></a> para ver o que é planejado.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Precisa de um ID de sincronização?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Faça o download da extensão de navegador para desktop xBrowserSync e crie uma nova sincronização para acessar seus favoritos aqui."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Confirmar senha"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Digitar a senha de criptografia"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Senha de criptografia"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Digite a senha criptografada"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Mostrar senha"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Conectar-se a sua conta"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Abra o xBrowserSync no seu navegador desktop, vá para o painel de configurações e clique no seu ID de sincronização para exibir um código QR que você pode escanear aqui."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Escanear código QR"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Inserir detalhes da sincronização manualmente"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Versão da API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Sincronizar com este serviço?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Localização"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Tamanho máximo de sincronização"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Sincronização com"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Status"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "URL de serviço xBrowserSync"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Digite a URL de um serviço alternativo xBrowserSync. Navegue pela lista de serviços públicos xBrowserSync <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>aqui</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Trocar serviço"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "Uma URL é necessária"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Não é um serviço válido do xBrowserSync"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Não é uma URL válida"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Não é possível conectar ao servidor"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Este serviço está executando uma versão de API não suportada"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Importante:</strong> os serviços xBrowserSync são executados de forma independente por voluntários. O administrador do serviço não assume responsabilidade por seus dados, então lembre-se de fazer backup regularmente."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Você tem certeza?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync irá apagar todos os dados locais dos favoritos antes de restaurar os favoritos sincronizados. OK para continuar?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Desabilitar ferramentas de sincronização de favoritos"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "A sincronização dos dados do seu navegador com o xBrowserSync enquanto outras ferramentas de sincronização de favoritos (como o <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) estão ativas pode causar duplicação e possivelmente corrompidos. Por favor, desative-os antes de continuar.",
            "brave": "A sincronização dos dados do seu navegador com o xBrowserSync enquanto outras ferramentas de sincronização de favoritos (como <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) estiverem ativas pode causar duplicação e possivelmente pode corromper os dados. Por favor, desative-os antes de continuar.",
            "edge": "A sincronização dos dados do seu navegador com o xBrowserSync enquanto outras ferramentas de sincronização de favoritos (como <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>o Microsoft Edge Sync</a>) estiverem ativas pode causar duplicação e possivelmente pode corromper os dados. Por favor, desative-os antes de continuar.",
            "firefox": "A sincronização dos dados do seu navegador com o xBrowserSync enquanto outras ferramentas de sincronização de favoritos (como o <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) estão ativas pode causar duplicação e possivelmente corrompidos. Por favor, desative-os antes de continuar."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Sincronizar"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Criar nova sincronização"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Pronto para atualizar a sincronização?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Este ID de sincronização deve ser atualizado para sincronizar com esta versão do xBrowserSync. Após a atualização, você não poderá sincronizar com versões anteriores do xBrowserSync.</p><p>Certifique-se de ter atualizado o xBrowserSync em todos os dispositivos sincronizados antes de continuar. Pronto para prosseguir?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Atualizar a sincronização"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Sua sincronização deve ser atualizada antes de ser sincronizada com esta versão do xBrowserSync.</p><p>Use a extensão de navegador xBrowserSync desktop para atualizar sua sincronização e então tente sincronizar novamente aqui.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Seu ID de sincronização"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Já possui um ID de sincronização?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Não é uma ID de sincronização válida"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Obter um ID de sincronização"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Permissões opcionais"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync enriquece automaticamente os favoritos adicionados usando o botão Adicionar Favorito do navegador com os metadados disponíveis. Para ativar isso, o xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>requer permissões adicionais</a> para poder ler os dados dos sites visitados.</p><p>indique se solicitado se você quer conceder estas permissões Como alternativa, você pode adicionar ou remover permissões a qualquer momento no painel de Configurações.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Escanear o código QR do seu ID de sincronização"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Ativar/desativar lâmpada"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Visualizar pastas dos favoritos"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Limpar"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "A pasta está vazia"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Você não possui nenhum favorito, vá e adicione alguns!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Nenhum favorito encontrado"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Pressione Enter ou pesquise por favoritos",
        "android": "Procurar favoritos"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Puxe para baixo para sincronizar"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Solte para sincronizar"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Visualizar resultados da pesquisa"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Fazer backup e restaurar"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Fazer backup automático"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Agendar download automático de backups."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Rodar o backup às"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "a cada"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "único"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "dois"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "três"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "quatro"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "cinco"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "seis"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "sete"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "oito"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "nove"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "dez"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "onze"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "doze"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "dia(s)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "semana(s)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "mês(es)"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Para evitar que a caixa de diálogo \"Salvar como...\" seja exibida quando baixar os backups, desabilite a configuração do navegador \"Pergunte onde salvar cada arquivo antes de baixar\"."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Backup"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Baixar o Backup"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Fazer backup dos dados do navegador local para um arquivo."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Fazer backup dos dados sincronizados para um arquivo."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Restaurar"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Restaurar backup"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Restaurar dados do navegador local de um backup."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Como a sincronização está atualmente desativada, os dados sendo restaurados sobrescreverão os dados do navegador local.</p><p>OK para continuar?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Restaurar dados sincronizados de um backup."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Como a sincronização está ativada no momento, os dados restaurados substituirão seus dados sincronizados.</p><p>Para restaurar dados apenas para o navegador local, desative a sincronização antes de restaurar.</p><p>OK para prosseguir?</p>",
              "android": "<p>Os dados a ser restaurados substituirão os seus dados sincronizados.</p><p>OK para prosseguir?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "O backup foi restaurado."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Selecione o arquivo"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Selecione um arquivo de backup para restaurar"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Copie o conteúdo de um arquivo de backup para restaurar os dados."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Colar dados de backup"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Restaurar dados"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Dados de backup xBrowserSync inválidos"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Se você continuar, qualquer sincronização ativa será desativada e seus dados locais serão revertidos para seu estado em no {date}, data em que o xBrowserSync foi instalado.</p><p>Deseja prosseguir?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Reiniciar dados locais"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Os dados do navegador local foram redefinidos para o estado inicial da instalação."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Dados de estado de instalação indisponíveis, impossível reverter."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Ajuda e suporte"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Guia de ajuda"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Tem uma pergunta ou tem algum problema? Não deixe de ler o guia de ajuda, caso contrário, a resposta pode estar nas FAQs."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Ver perguntas frequentes"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Suporte"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Precisa de suporte? Use o rastreador de problemas para relatar um bug ou solicitar um recurso."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Ver rastreamento de processo"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Logs de aplicação"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Fazer download e incluir o registro da aplicação quando você registrar um problema."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Limpar registos"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Baixar log"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Tamanho atual do log"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Permissões opcionais"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Conceder permissões"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Concedido"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Não concedido"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Ler dados do site"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Necessário para adicionar automaticamente metadados aos favoritos ao usar o botão \"Adicionar marcador nesta página\" do navegador (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>mais informações</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Remover permissões"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Auto-buscar metadados dos favoritos"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Recuperar metadados automaticamente ao adicionar um favorito."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Procurar atualizações"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Seja notificado(a) quando uma nova versão do xBrowserSync estiver disponível."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Ativar o modo escuro"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Ideal para uso em ambientes com pouca luz."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Visualizar pastas dos favoritos"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Exibir pastas padrão dos favoritos."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Alternar posição da barra de pesquisa"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Mostrar barra de pesquisa abaixo dos resultados."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Sincronizar barra de favoritos"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Desativar esta configuração para exibir diferentes favoritos da barra de ferramentas entre navegadores sincronizados."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Ativar essa configuração substituirá os marcadores que estão na barra de ferramentas de favoritos com os seus favoritos sincronizados.</p><p>OK para prosseguir?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Ativar telemetria"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Ocasionalmente, envie dados técnicos anônimos para ajudar a melhorar o xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Preferências"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Sincronizar"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Desativar a sincronização"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID de sincronização"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Use seu ID de sincronização para se conectar aos seus dados sincronizados em outros dispositivos (clique para revelar o código QR)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Utilização de dados"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Quanto dos dados de sincronização permitidos pelo serviço você está usando."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Serviço"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Última sincronização em {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Pronto para sincronizar (agendado para {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Sincronizar Agora"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Leia este código QR usando o app xBrowserSync para se conectar aos seus dados sincronizados."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Mostrar código QR"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Copiar ID para área de transferência"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Copiado!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Configurações disponíveis quando a sincronização está ativada."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Arquivo salvo em Downloads"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Apoie xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Apoie xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Queremos fazer o xBrowserSync a ferramenta de sincronização do navegador número um, mas ainda há muito a fazer:</p><ul><li>Adicionar sincronização de abas e histórico do navegador</li><li>Suportar todos os principais navegadores desktop</li><li>Traduzir para outras línguas</li><li>e <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>muito mais</a>!</li></ul><p>Somente com seu apoio, podemos continuar a melhorar o xBrowserSync e garantir que ele permaneça eficaz na proteção da privacidade on-line e no aprimoramento da produtividade.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Cryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Sincronização não encontrada"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Sua sincronização não foi encontrada e pode ter sido removida devido a inatividade.</p><p>É preciso criar uma nova sincronização, mas primeiro clique no botão abaixo para baixar um backup dos seus dados sincronizados que você pode então restaurar para a sua nova sincronização.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Enviar telemetria anônima?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync é diferente dos aplicativos tradicionais, pois é uma ferramenta totalmente anônima e que prioriza a privacidade. Manter essa ferramenta é um desafio, pois não temos acesso aos dados do usuário para ajudar a determinar a melhor forma de implantar nossos recursos limitados. Portanto, solicitamos sua permissão para enviar ocasionalmente dados técnicos anônimos para nos ajudar a melhorar o xBrowserSync.</p><p>Esses dados de telemetria não incluem dados pessoais ou de identificação, nem incluem seus dados de sincronização criptografados e nunca são compartilhado com terceiros (você pode ativar ou desativar a qualquer momento no painel Configurações).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Atualizado para"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "xBrowserSync foi atualizado com os recursos e correções mais recentes. Para mais detalhes sobre as mudanças contidas nesta versão, confira as notas de lançamento."
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Restaurando"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Redefinindo"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Sincronizando"
      }
    }
  }
}
</file>

<file path="res/strings/ru.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "Доступно обновление xBrowserSync"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} доступна для скачивания. Нажмите для получения дополнительной информации.",
        "android": "xBrowserSync {version} доступен для загрузки."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Обновлено до"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync был обновлен. Синхронизация была отключена, включите синхронизацию для завершения процесса обновления."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Закладка создана"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Закладка удалена"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Закладка обновлена"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Получение свойств закладки, нажмите для отмены."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Свойства закладки обновлены."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Далее"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Синхронизация браузера как она должна быть: безопасная, анонимная и бесплатная! Синхронизируйте закладки между браузерами и устройствами, без регистрации."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Закладки в меню"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Другие закладки"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Панель закладок"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Добавить закладку"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Назад"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Отмена"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Закрыть"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Да"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Продолжить"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Удалить закладку"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Нет"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Готово"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Скачать резервную копию"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Редактировать закладку"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Посмотреть руководство"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Далее"
    },
    "OK": {
      "key": "Button_OK",
      "default": "ОК"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Посмотреть примечания к выпуску"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Сохранение"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Настройки"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Поделиться закладкой"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Отменить"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Обновить"
    },
    "View": {
      "key": "Button_View",
      "default": "Просмотр"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Пожалуйста, избегайте изменения [xbs] папок, так как это может вызвать проблемы синхронизации."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "Папка xBrowserSync изменена"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Синхронизируйте с существующим sync ID, переключитесь на другую службу или повторите попытку завтра."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Достигнут суточный лимит синхронизации"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Если проблема сохраняется, пожалуйста, <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>сообщите о проблеме</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Что-то пошло не так"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Не удалось выполнить резервное копирование"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Не удалось просмотреть файлы"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "URL-адрес недействителен или данные веб-страницы не могут быть получены."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Не удалось получить свойства закладки"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Не удалось получить обновления"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Представленные данные резервного копирования, в другом формате."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Невозможно восстановить данные"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Вы должны быть синхронизированы, чтобы добавить закладку"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Не удалось получить URL общей закладки"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Проверьте подключение к сети и попробуйте еще раз. Если проблема не исчезнет, возможно, проблема связана со службой xBrowserSync."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Ошибка синхронизации"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Не удалось найти сохраненные учетные данные. Включите синхронизацию повторно и повторите попытку."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Отсутствуют учетные данные"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Убедитесь, что ваш sync ID, пароль и URL-адрес сервиса были введены правильно."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Неверные учетные данные"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "URL-адрес службы не является допустимым сервисом xBrowserSync."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Некорректный xBrowserSync сервис"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Возможна ошибка в профиле браузера, попробуйте создать новый профиль, это может решить проблему."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Неправильная структура закладки"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Локальные данные были обновлены, пожалуйста, примените последнее изменение."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Ошибка синхронизации"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Проверьте сетевое подключение и попробуйте снова."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Соединение потеряно"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Убедитесь, что вы предоставили правильную резервную копию xBrowserSync перед восстановлением."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Нет данных для восстановления"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Переключитесь на другую службу или повторите попытку позже."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Служба не принимает новые синхронизации"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Локальные данные не синхронизированы и были обновлены. Пожалуйста, примените повторно последние изменения."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Обнаружен конфликт синхронизации"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Удалите несколько закладок и попробуйте еще раз или переключитесь на службу с большим лимитом синхронизации."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Превышен лимит синхронизации данных"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Проверьте, что разрешение было предоставлено и попробуйте снова."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Ошибка сканирования"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "Служба xBrowserSync в настоящее время недоступна, повторите попытку позже."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Служба оффлайн"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Не удалось поделиться"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "Запрошенная синхронизация не существует, возможно она была удалена из-за неактивности."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Синхронизация не найдена"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Данные резервного копирования не могут быть восстановлены этой версией xBrowserSync, поскольку они были созданы в более поздней версии."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Этот ID не может быть синхронизирован с этой версией xBrowserSync, так как синхронизация была обновлена до более поздней версии."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Версия синхронизации не поддерживается"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Синхронизация была отключена, включите повторную синхронизацию для возобновления синхронизации."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Достигнут лимит запросов к службе"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Изменения будут синхронизированы после восстановления соединения."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Соединение потеряно"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Эта служба использует неподдерживаемую версию API."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Служба не поддерживается"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Обновление будет повторено при перезапуске приложения. Если проблема не устранена, пожалуйста, переустановите xBrowserSync.",
        "default": "Перезапустите браузер для повторного обновления, если проблема не устранена, пожалуйста, переустановите xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Ошибка обновления"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Ошибка соединения"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Проверка"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Не принимает новые синхронизации"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Оффлайн"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Онлайн"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "не синхронизировано"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "синхронизировано"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "синхронизация"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Добавить закладку"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Редактировать закладку"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Заголовок"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "URL-адрес уже был добавлен в закладки"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "Недействительная ссылка"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "Требуется URL-адрес"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Описание"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Теги"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "тег 1, тег 2, тег 3, и т.д."
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Удалить теги"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Удалить тег"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Удалить"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Поделиться"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Обновить свойства закладки"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "Значение, которым поделились, содержит недопустимый URL."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Добавление закладки</h4><p>Сохраните текущую страницу, нажав на значок закладки в панели поиска. Свойства закладки будут заполнены автоматически, или добавьте описание и теги, чтобы обеспечить лучший результат при поиске.</p><p>Как вариант, нажмите на кнопку «Сохранить эту страницу» как обычно, и xBrowserSync автоматически заполнит свойства закладки (должны быть предоставлены дополнительные разрешения на панели Настроек).</p>",
        "android": "<h4>Добавление закладки</h4><p>Просто добавьте закладки, поделившись в xBrowserSync с любого приложения, которые отправляют URL-адреса, такими как браузеры, YouTube, Spotify и многие другие.</p><p>Свойства закладки будут загружены для вас, как вариант, добавьте описание и теги, чтобы гарантировать лучшие результаты поиска.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Не забудьте создать резервную копию</h4><p>При использовании xBrowserSync Ваши данные являются предметом Вашей ответственности, поэтому будьте ответственными и не забывайте создавать резервные копии.</p><p>Зайдите в Панель настроек и сделайте резервную копию незашифрованных данных в локальный файл, который можно использовать для восстановления Ваших данных.</p><p>Если данные локального браузера повреждены и у Вас нет резервных копий, в любое время Вы можете вернуть данные в исходное состояние на момент установки xBrowserSync.</p>",
        "android": "<h4>Не забудьте создать резервную копию</h4><p>При использовании xBrowserSync ваши данные являются предметом вашей ответственности, поэтому будьте ответственными и не забывайте создавать резервные копии</p><p>Зайдите на Панель настроек и сделайте резервную копию незашифрованных данных в локальный файл, который можно использовать для восстановления ваших данных.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Прежде чем вы начнете</h4><p>xBrowserSync изменяет данные текущего браузера, поэтому лучше создать резервную копию закладок и других данных браузера, на всякий случай, и если вы используете другие службы синхронизации браузера (например, <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>), отключите их, чтобы избежать конфликтов.</p>",
        "brave": "<h4>Прежде чем вы начнете</h4><p>xBrowserSync изменяет данные текущего браузера, поэтому лучше создать резервную копию закладок и других данных браузера, на всякий случай, и если вы используете другие службы синхронизации браузера (например, <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>), отключите их, чтобы избежать конфликтов.</p>",
        "edge": "<h4>Прежде чем вы начнете</h4><p>xBrowserSync изменяет данные текущего браузера, поэтому лучше создать резервную копию закладок и других данных браузера, на всякий случай, и если вы используете другие службы синхронизации браузера (например, <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>), отключите их, чтобы избежать конфликтов.</p>",
        "firefox": "<h4>Прежде чем вы начнете</h4><p>xBrowserSync изменяет данные текущего браузера, поэтому лучше создать резервную копию закладок и других данных браузера, на всякий случай, и если вы используете другие службы синхронизации браузера (например, <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>), отключите их, чтобы избежать конфликтов.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Синхронизация с вашим существующим ID</h4><p>Нажмите на “Уже есть ID синхронизации?” для ввода вашего существующего идентификатора синхронизации и пароля. Если ваш идентификатор синхронизации был создан в другом сервисе, чем тот что отображается, то перед попыткой синхронизации переключитесь на правильный сервис.</p><p>xBrowserSync извлечет и расшифрует данные, используя локальный пароль, затем очистите ваши локальные закладки перед повторным восстановлением из расшифрованных данных.</p><p>Кога синхронизация включена, xBrowserSync проверяет в фоновом режиме каждые пятнадцать минут на актуальность ваших синхронизированных данных и при необходимости автоматически обновляет ваши локальные закладки. Вы также можете вручную синхронизировать доступные обновления для синхронизированных данных на Панели настроек.</p>",
        "android": "<h4>Синхронизация с вашим существующим ID</h4><p>Начните со сканирования QR-кода sync ID на Панели настроек расширения браузера xBrowserSync (нажмите на ваш sync ID, чтобы узнать его). Убедитесь, что вы вводите тот же пароль шифрования, что и при создании, иначе xBrowserSync не сможет расшифровать ваши данные.</p><p>Также, если вы синхронизированы с другой службой xBrowserSync убедитесь, что это сервис активен и настроен на Панели настроек.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Первая синхронизация</h4><p>Прежде чем xBrowserSync сможет синхронизировать данные Вашего браузера Вам необходимо будет ввести пароль шифрования. Убедитесь, что он сложный, и также запоминающийся, возможности для восстановлений или напоминаний - нет, поэтому если вы забыли его, вы не сможете получить доступ к синхронизированным данным.</p><p>Данные Вашего браузера будут зашифрованы с помощью Вашего пароля и сохранены в активной службе xBrowserSync, настроенной на Панели настроек.</p><p>После синхронизации все изменения, внесенные вами в локальные закладки, будут автоматически синхронизированы с помощью xBrowserSync.</p>",
        "android": "<h4>Первая синхронизация</h4><p>xBrowserSync активно синхронизирует данные вашего браузера между настольными браузерами (синхронизация с мобильными браузерами в настоящее время не поддерживается), вы можете использовать это приложение для доступа к синхронизированным данным на Вашем мобильном устройство с Android.</p><p>Если вы еще не создали идентификатор синхронизации, перейдите в браузер на своем компьютере и <a href='https://link.xbrowsersync.org/download' class='new-tab'>загрузите</a> расширение xBrowserSync. После создания синхронизации вы можете использовать свой новый идентификатор синхронизации в этом приложении для доступа к своим данным.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Дальнейшая поддержка</h4><p>Вы можете найти ответы на наиболее распространенные вопросы в <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>FAQ</a>, также проверьте текущие <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>известные проблемы</a>, чтобы узнать, есть ли Ваша проблема в списке.</p><p>Как альтернативу, Вы можете использовать <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>багтрекер</a> для сообщения о проблеме или запроса новой функции.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Используйте в смартфоне</h4><p>Получите доступ к синхронизированным закладкам через приложение xBrowserSync для Android, доступно в <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a>, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> или <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>нажмите чтобы скачать</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Нативные функции поддерживаются</h4><p>Вы можете продолжать использовать функции обычных закладок Вашего браузера, такие как Ппанель закладок и Менеджер закладок, все внесенные изменения будут автоматически синхронизированы в фоновом режиме.</p><p>Если вы организовали ваши существующие закладки в папках, не волнуйтесь, xBrowserSync будет их поддерживать и ответсвенно относится к иерархии закладок.</p>",
        "firefox": "<h4>Нативные функции поддерживаются</h4><p>Вы можете продолжать использовать функции обычных закладок Вашего браузера, такие как Ппанель закладок и Менеджер закладок, все внесенные изменения будут автоматически синхронизированы в фоновом режиме.</p><p>Если вы организовали ваши существующие закладки в папках, не волнуйтесь, xBrowserSync будет их поддерживать и ответсвенно относится к иерархии закладок.</p><p>Однако, обратите внимание, что API закладок Firefox еще не поддерживает доступ ко всем возможностям своих закладок, любые существующие метки будут потеряны при синхронизации и теги, добавленные через xBrowserSync не будут сохранены как родные теги.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Предыдущая"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Поиск закладок</h4><p>После синхронизации просто нажмите Enter для отображения недавних закладок или введите какие-то ключевые слова или URL-адрес для поиска по вашим закладкам.</p><p>Переключайтесь между результатами поиска и папками закладок для просмотра всей иерархии.</p><p>Чтобы изменить или удалить закладку, наведите курсор на закладку и нажмите на появившийся значок редактирования рядом с названием закладки.</p>",
        "android": "<h4>Поиск по закладкам</h4><p>После синхронизации ваши закладки отображаются в хронологическом порядке при открытии xBrowserSync. Введите ключевые слова или URL в окне поиска для поиска ваших закладок.</p><p>Переключайтесь между результатами поиска и папками закладок для просмотра всей иерархии.</p><p>Долгое нажатие на закладку позволит вам напрямую поделиться, изменить или удалить закладку.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Синхронизация с другим сервисом</h4><p>По умолчанию ваши данные синхронизируются с <a href='https://link.xbrowsersync.org/api' class='new-tab'>официальным сервисом xBrowserSync</a>, Однако, если вы хотите синхронизировать ваши данные с альтернативным провайдером, вы можете переключить активный сервис перед синхронизацией.</p><p>Проверьте список доступных <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>публичных провайдеров xBrowserSync</a> или <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>используйте свой сервис</a>, для частного использования с максимальной безопасностью и конфиденциальностью, либо для публичного использования, чтобы больше людей могли пользоваться xBrowserSync.</p><p><strong>Важно:</strong> xBrowserSync сервисы запускаются добровольцами независимо друг от друга. Администратор не несет ответственности за ваши данные, поэтому не забудьте регулярно делать резервные копии.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Использовать сочетания клавиш</h4><p>Для быстрого поиска по закладкам, используйте клавишу по умолчанию (Ctrl+Space), чтобы активировать расширение, затем просто нажмите Enter, чтобы просмотреть ваши недавние закладки или начните вводить для поиска.</p><p>Чтобы изменить комбинации клавиш, перейдите на chrome://extensions/shortcuts и обновите список доступных сочетаний в разделе xBrowserSync.</p>",
        "brave": "<h4>Использовать сочетания клавиш</h4><p>Для быстрого поиска по вашим закладкам, используйте клавиши по умолчанию (Ctrl+Space) для активации расширения, затем просто нажмите Enter для просмотра ваших недавних закладок или начните набирать для поиска.</p><p>Чтобы изменить комбинации клавиш, перейдите на brave://extensions/shortcuts и обновите список доступных комбинаций в xBrowserSync.</p>",
        "edge": "<h4>Использовать сочетания клавиш</h4><p>Для быстрого поиска по закладкам, используйте клавишу по умолчанию (Ctrl+Space), чтобы активировать расширение, затем просто нажмите Enter, чтобы просмотреть ваши недавние закладки или начните вводить для поиска.</p><p>Чтобы изменить комбинации клавиш, перейдите на edge://extensions/shortcuts и обновите список доступных сочетаний в разделе xBrowserSync.</p>",
        "firefox": "<h4>Используйте клавиши!</h4><p>Для быстрого поиска по вашим закладкам, используйте клавиши по умолчанию (Ctrl+Space) для активации расширения, затем просто нажмите Enter для просмотра ваших недавних закладок или начните набирать для поиска.</p><p>Чтобы изменить комбинации клавиш, перейдите по ссылке: аддонов, выберите «Manage Extension Shortcuts» в меню Настройки и обновите список доступных ярлыков в разделе xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Ваш sync ID</h4><p>xBrowserSync гарантирует вашу конфиденциальность, так как никакие персональные данные не собираются, а данные браузера зашифрованы перед синхронизацией. Чтобы идентифицировать синхронизированные данные, вам предоставлен анонимный идентификатор синхронизации (sync ID), который можно использовать вместе с вашим паролем для синхронизации данных на других браузерах и устройствах.</p><p>Помните, что ваш идентификатор синхронизации (sync ID) будет работать только с сервисом xBrowserSync, в котором он был создан, если вы переключитесь на другую службу xBrowserSync, то вы должны создать новую синхронизацию или использовать существующий идентификатор синхронизации (sync ID), созданный при предварительной синхронизации с этой службой.</p><p>Всякий раз, когда вы синхронизируетесь, вы можете просматривать свой идентификатор синхронизации (sync ID) на панели настроек, нажмите, чтобы обнаружить QR-код для сканирования при синхронизации с мобильных устройств.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4> Добро пожаловать в xBrowserSync! </h4> <p> xBrowserSync - это бесплатная альтернатива с открытым исходным кодом службам синхронизации браузера, предлагаемых Google, Mozilla, Opera и другими, которая уважает вашу конфиденциальность и обеспечивает полную анонимность (ознакомьтесь с <a href='https://link.xbrowsersync.org/www' class='new-tab'> сайтом </a> для получения дополнительной информации). </p> <p> Найдите минутку, чтобы прочитать это справочное руководство, чтобы ознакомиться с xBrowserSync, используйте ссылки внизу для перехода на другие страницы или клавиши со стрелками. </p> <p> Обратите внимание: xBrowserSync в настоящее время синхронизирует только закладки. Синхронизация дополнительных данных браузера будет добавлена в будущих версиях, ознакомьтесь с <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'> планом развития </a>, чтобы узнать, что планируется. </p>",
        "android": "<h4> Добро пожаловать в xBrowserSync! </h4> <p> xBrowserSync - это бесплатная альтернатива с открытым исходным кодом службам синхронизации браузера, предлагаемых Google, Mozilla, Opera и другими, которая уважает вашу конфиденциальность и обеспечивает полную анонимность (ознакомьтесь с <a href='https://link.xbrowsersync.org/www' class='new-tab'> сайтом </a> для получения дополнительной информации). </p> <p> Найдите минутку, чтобы прочитать это справочное руководство, чтобы ознакомиться с xBrowserSync, используйте ссылки внизу для перехода на другие страницы или клавиши со стрелками. </p> <p> Обратите внимание: xBrowserSync в настоящее время синхронизирует только закладки. Синхронизация дополнительных данных браузера будет добавлена в будущих версиях, ознакомьтесь с <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'> планом развития </a>, чтобы узнать, что планируется. </p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Нужен sync ID?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Загрузите расширение xBrowserSync для настольного браузера и создайте новую синхронизацию для доступа к вашим закладкам."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Подтвердите пароль"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Ваш пароль для шифрования"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Пароль для шифрования"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Введите пароль шифрования"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Показать пароль"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Подключиться к Вашей синхронизации"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Откройте xBrowserSync в Вашем браузере, перейдите в Панель настроек и нажмите на идентификатор синхронизации, чтобы отобразить QR-код, который вы можете просканировать здесь."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Сканировать код"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Ввести данные синхронизации вручную"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "Версия API"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Синхронизировать с этой службой?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Местоположение"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Макс. размер синхронизации"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Синхронизировать с"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Статус"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "URL xBrowserSync сервиса"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Введите URL альтернативноq службы xBrowserSync. Просмотрите список публичных провайдеров xBrowserSync <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>здесь</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Переключить сервис"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "Требуется URL-адрес"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Некорректный сервис xBrowserSync"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Недействительная ссылка"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Не удается подключиться к сервису"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Эта служба использует неподдерживаемую версию API"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Важно:</strong> Сервисы xBrowserSync обслуживаются добровольцами. Администратор сервиса не несет ответственности за ваши данные, поэтому не забудьте регулярно резервное копирование."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Вы уверены?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync удалит все локальные закладки перед восстановлением синхронизированных закладок. Продолжить?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Отключить инструменты синхронизации закладок"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Синхронизация данных браузера с xBrowserSync, пока другие инструменты синхронизации закладок (такие как <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) работают, может привести к дублированию и возможно повреждению данных. Пожалуйста, отключите их, прежде чем продолжить.",
            "brave": "Синхронизация данных браузера с xBrowserSync, пока другие инструменты синхронизации закладок (такие как <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) работают, может привести к дублированию и возможно повреждению данных. Пожалуйста, отключите их, прежде чем продолжить.",
            "edge": "Синхронизация данных браузера с xBrowserSync, пока другие инструменты синхронизации закладок (такие как <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) работают, может привести к дублированию и возможно повреждению данных. Пожалуйста, отключите их, прежде чем продолжить.",
            "firefox": "Синхронизация данных браузера с xBrowserSync, пока другие инструменты синхронизации закладок (такие как <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) работают, может привести к дублированию и возможно повреждению данных. Пожалуйста, отключите их, прежде чем продолжить."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Синхронизировать"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Создать новую синхронизацию"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Готовы обновить синхронизацию?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Ваша синхронизация должна быть обновлена перед синхронизацией с этой версией xBrowserSync. После обновления вы больше не сможете синхронизировать данные с предыдущими версиями xBrowserSync.</p><p>Перед продолжением убедитесь, что хотите обновить xBrowserSync на всех синхронизированных устройствах. Готовы продолжить?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Обновить"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Ваша синхронизация должна быть обновлена перед синхронизацией с этой версией xBrowserSync.</p><p>Для обновления синхронизации используйте расширение для рабочего стола xBrowserSync и повторите синхронизацию.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Ваш sync ID"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Уже есть sync ID?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Неверный sync ID"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Получить sync ID"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Необязательные разрешения"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync автоматически дополняет закладки, создание с помощью кнопки \"Добавить закладку\" браузера доступными метаданными. Для включения этого, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>требует дополнительные разрешения</a> для чтения посещенных данных веб-сайта.</p><p>Пожалуйста, укажите, или вы готовы предоставить эти права, в качестве альтернативы вы можете добавить или удалить разрешения в любое время на Панели настроек.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Сканировать QR-код вашего sync ID"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Переключить свет"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Просмотреть папки закладок"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Очистить"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Папка пуста"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "У вас нет закладок, добавьте что-нибудь!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Закладки не найдены"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Нажмите Enter или найчните вводить текст для поиска",
        "android": "Найти закладки"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Потяните вниз для синхронизации"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Отпустите, чтобы синхронизировать"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Просмотреть результаты поиска"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Резервное копирование и восстановление"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Автоматическое резервное копирование"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Автоматически загружать резервные копии по расписанию."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Копирование будет запускается в"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "каждый"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "одинарный"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "два"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "три"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "четыре"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "пять"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "шесть"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "семь"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "восемь"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "девять"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "десять"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "одинадцать"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "двенадцать"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "дня(дней)"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "недели(ь)"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "месяца(ев)"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "Чтобы предотвратить отображение диалогового окна «Сохранить как...» при загрузке резервных копий, отключите опцию «Спросить, где сохранить каждый файл перед загрузкой»."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Резервное копирование"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Скачать резервную копию"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Резервное копирование локальных данных в файл."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Резервное копирование синхронизированных данных в файл."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Восстановить"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Восстановить из резервной копии"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Восстановить данные локального браузера из резервной копии."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Поскольку синхронизация в данный момент отключена, данные, которые восстанавлятся, перезапишут данные локального браузера.</p><p>ОК, чтобы продолжить?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Восстановить синхронизированные данные из резервной копии."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Так как снхронизация включена, данные которые будут восстановлены, перезапишут синхронизированные.</p><p>Для восстановления данных только в локальном браузере, отключите синхронизацию перед восстановлением.</p><p>ОК, чтобы продолжить?</p>",
              "android": "<p>Данные которые будут восстановлены, перезапишут синхронизированные данные.</p><p>ОК для продолжения?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Резервная копия восстановлена."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Выберите файл"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Выберите файл с резервной копией для восстановления"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Скопируйте содержимое файла резервной копии для восстановления данных."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Вставить резервные данные"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Восстановите данные"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Неверная резервная копии xBrowserSync"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Если вы продолжите, синхронизация будет отключена, и данные вашего локального браузера будут сброшены после установки xBrowserSync на {date}.</p><p>Готовы продолжить?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Сбросить локальные данные"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Локальные данные браузера были сброшены в первоначальное состояние."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Состояние установки недоступно, невозможно сбросить."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Помощь и поддержка"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Справочное руководство"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "У вас есть вопрос или проблема? Обязательно убедитесь что прочитали справочное руководство, так же ответ может быть в разделе FAQ."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Показать FAQ"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Поддержка"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Нужна поддержка? Используйте трекер для сообщения об ошибке или запроса функции."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Просмотр трекера проблем"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Лог приложения"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Скачайте и добавьте логи приложения при регистрации проблемы."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Очистить логи"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Скачать логи"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Текущий размер лога"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Дополнительные разрешения"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Предоставить доступ"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Предоставлено"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Не предоставлено"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Читать данные сайта"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Обьязательно для автоматического добавления метаданных в закладки при использовании кнопки «Сохранить эту страницу» браузера (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>подробнее</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Удалить разрешение"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Автозагрузка метаданных закладки"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Автоматически получать метаданные при добавлении закладки."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Проверить наличие обновлений"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Получать уведомления, когда доступна новая версия xBrowserSync."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Включить темный режим"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Идеально подходит для использования в условиях плохого освещения."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Просмотреть папки закладок"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Отображать папки закладок по умолчанию."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Сменить положение строки поиска"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Показывать строку поиска под результатами."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Синхронизировать панель закладок"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Отключите этот параметр для отображения разных панелей закладок между синхронизированными браузерами."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Включение этой настройки заменит закладки, находящиеся на панели закладок, на синхронизированные закладки.</p><p>ОК, чтобы продолжить?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Включить телеметрию"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Время от времени отправляйте анонимные технические данные, чтобы помочь улучшить xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Настройки"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Синхронизация"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Отключить синхронизацию"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "ID синхронизации"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Используйте ваш Sync ID для подключения к синхронизированным данным на других устройствах (нажмите, чтобы открыть QR-код)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Расход данных"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Как много данных синхронизации, разрешенных сервисом, вы используете."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Сервис"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Последняя синхронизация {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Готово к синхронизации (запланировано для {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Синхронизировать"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Отсканируйте этот QR-код, используя приложение xBrowserSync для подключения к синхронизированным данным."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Показать QR код"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Скопировать sync ID в буфер обмена"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Скопировано!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Настройки доступны, когда включена синхронизация."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Файл сохранен в «Загрузки»"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Поддержите xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Поддержите xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Мы хотим сделать xBrowserSync инструментом синхронизации № 1, но многое еще предстоит сделать:</p><ul><li>Добавить синхронизацию вкладок и истории браузеров</li><li>Поддерживать все основные настольные браузеры</li><li>Перевести на другие языки</li><li>и <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>ещё кучу всего</a>!</li></ul><p>Только при вашей поддержке мы можем продолжать улучшать xBrowserSync и следить за тем, чтобы он оставился эффективным в сфере защиты конфиденциальности в сети и повышении производительности.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Cryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Синхронизация не найдена"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Ваша синхронизация не найдена и может быть удалена из-за неактивности.</p><p>Вам нужно создать новую синхронизацию, но сначала нажмите на кнопку ниже, чтобы загрузить резервную копию ваших синхронизированных данных, которые вы можете затем восстановить до новой синхронизации.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Отправить анонимную телеметрию?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync отличается от традиционных приложений тем, что это полностью анонимный и конфиденциальный инструмент. Поддерживать такой инструмент сложно, поскольку у нас нет доступа к пользовательским данным, чтобы определить, как лучше всего использовать наши ограниченные ресурсы. Поэтому мы просим вашего разрешения время от времени отправлять анонимные технические данные, чтобы помочь нам улучшить xBrowserSync.</p><p>Эти данные телеметрии не включают никаких личных или идентифицирующих данных, а также ваших зашифрованных данных синхронизации и никогда не передаются. делиться с любыми третьими лицами (вы можете в любой момент согласиться или отказаться на панели настроек).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Обновлено до"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "xBrowserSync был обновлен с последними функциями и исправлениями. Для получения более подробной информации об изменениях, содержащихся в этой версии, ознакомьтесь с примечаниями к выпуску."
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Восстановление"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Сброс"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Синхронизация"
      }
    }
  }
}
</file>

<file path="res/strings/sv.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSync-uppdatering tillgänglig"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} är tillgänglig för nedladdning. Klicka för mer information.",
        "android": "xBrowserSync {version} finns tillgänglig för nedladdning."
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "Uppdaterad till"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync har uppdaterats. Synkroniseringen har inaktiverats, återaktivera synkroniseringen för att slutföra uppgraderingsprocessen."
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "Bokmärke skapat"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "Bokmärke raderat"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "Bokmärke uppdaterat"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "Hämtar bokmärkesegenskaper, tryck för att avbryta."
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "Bokmärkesegenskaper uppdaterade."
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "Gå"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "Webbläsarsynkronisering som den borde vara: säker, anonym och gratis! Synkronisera bokmärken över alla dina webbläsare och enheter, ingen registrering krävs."
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "Bokmärkesmeny"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "Andra bokmärken"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "Bokmärkesfältet"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "Lägg till bokmärke"
    },
    "Back": {
      "key": "Button_Back",
      "default": "Tillbaka"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "Avbryt"
    },
    "Close": {
      "key": "Button_Close",
      "default": "Stäng"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "Ja"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "Fortsätt"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "Radera bokmärke"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "Nej"
    },
    "Done": {
      "key": "Button_Done",
      "default": "Klar"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "Ladda ner säkerhetskopia"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "Redigera bokmärke"
    },
    "Help": {
      "key": "Button_Help",
      "default": "Visa hjälpguide"
    },
    "Next": {
      "key": "Button_Next",
      "default": "Nästa"
    },
    "OK": {
      "key": "Button_OK",
      "default": "OK"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "Visa versionsinformation"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "Sparar"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "Inställningar"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "Dela bokmärke"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "Ångra"
    },
    "Update": {
      "key": "Button_Update",
      "default": "Uppdatera"
    },
    "View": {
      "key": "Button_View",
      "default": "Visa"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "Vänligen undvik att ändra [xbs]-mappar eftersom det kan orsaka synkroniseringsproblem."
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "xBrowserSync-mappen ändrad"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "Synkronisera till ett befintligt synkroniserings-ID, byt till en annan tjänst eller försök igen imorgon."
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "Daglig gräns för ny synkronisering har uppnåtts"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "Om problemet kvarstår, vänligen <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>rapportera problemet</a>."
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "Något gick fel"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "Säkerhetskopiering misslyckades"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "Bläddring bland filer misslyckades"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "Webbadressen är ogiltig eller webbsidedata kunde inte hämtas."
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "Kunde inte hämta bokmärkesegenskaper"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "Kunde inte hämta uppdateringar"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "Den säkerhetskopierade datan som tillhandahållits är inte i ett förväntat format."
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "Kunde inte återställa data"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "Du måste vara synkroniserad för att lägga till ett bokmärke"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "Kunde inte hämta delad bokmärkeswebbadress"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "Kontrollera din nätverksanslutning och försök igen. Om problemet kvarstår kan det finnas ett problem med xBrowserSync-tjänsten."
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "Synkronisering misslyckades"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "Kunde inte hitta sparade inloggningsuppgifter. Återaktivera synkronisering och försök igen."
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "Saknar inloggningsuppgifter"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "Kontrollera att ditt synknings-ID, lösenord och tjänstens webbadress har angetts korrekt."
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "Ogiltiga inloggningsuppgifter"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "Tjänstens webbadress är inte en giltig xBrowserSync-tjänst."
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "Ogiltig xBrowserSync-tjänst"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "Möjlig korrupt webbläsarprofil, försök att skapa en ny profil eftersom det kan lösa problemet."
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "Oväntad bokmärkesstruktur"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "Lokal webbläsardata har uppdaterats, vänligen verkställ senaste ändring igen."
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "Synkroniseringsfel"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "Kontrollera din nätverksanslutning och försök igen."
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "Anslutning förlorad"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "Se till att du har angett en giltig xBrowserSync-säkerhetskopiering innan du återställer."
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "Ingen data att återställa"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "Byt till en annan tjänst eller försök igen senare."
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "Tjänsten accepterar inte nya synkroniseringar"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "Lokal data var inte synkroniserad och har nu uppdaterats. Vänligen verkställ senaste ändring igen."
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "Synkroniseringskonflikt upptäckt"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "Radera några bokmärken och försök igen eller byt till en tjänst med en större synkroniseringsgräns."
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "Gränsen för synkroniseringsdata överskriden"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "Kontrollera att behörighet har beviljats och försök igen."
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "Skanning misslyckades"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "xBrowserSync-tjänsten är för närvarande offline, försök igen senare."
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "Tjänsten offline"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "Delning misslyckades"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "Den efterfrågade synkroniseringen finns inte, den kan ha tagits bort på grund av inaktivitet."
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "Synkronisering hittades inte"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "Säkerhetskopieringsdatan kan inte återställas av denna version av xBrowserSync eftersom den skapades med en senare version."
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "Detta ID kan inte synkroniseras med denna version av xBrowserSync eftersom synkroniseringen har uppgraderats till en senare version."
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "Synkroniseringsversionen stöds inte"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "Synkroniseringen har inaktiverats, återaktivera synkroniseringen för att återuppta synkroniseringen."
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "Gränsen uppnådd för tjänstebegäran"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "Ändringar kommer att synkroniseras när anslutningen är återställd."
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "Anslutning förlorad"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "Denna tjänst kör en API-version som inte stöds."
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "Tjänsten stöds inte"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "Uppgradering försöks på nytt vid omstart av appen. Om problemet kvarstår, installera om xBrowserSync.",
        "default": "Starta om din webbläsare för att försöka uppgradera igen. Om problemet kvarstår, installera om xBrowserSync."
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "Uppgradering misslyckades"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "Anslutningsfel"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "Kontrollerar"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "Accepterar inte nya synkroniseringar"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "Offline"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "Online"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "ej synkroniserad"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "synkroniserad"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "synkroniserar"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "Lägg till bokmärke"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "Redigera bokmärke"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "Titel"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "Webbadressen har redan bokmärkts"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "Inte en giltig webbadress"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "Webbadress"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "Webbadress krävs"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "Beskrivning"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "Taggar"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "tagg 1, tagg 2, tagg 3, etc"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "Rensa taggar"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "Ta bort tagg"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "Radera"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "Dela"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "Uppdatera bokmärkesegenskaper"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "Värdet som delades innehåller inte en giltig webbadress."
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>Lägga till ett bokmärke</h4><p>Bokmärk den aktuella sidan genom att klicka på bokmärkesikonen i Sökpanelen. Bokmärkets egenskaper kommer att fyllas i för dig automatiskt, annars kan du lägga till en beskrivning och några taggar för att säkerställa bättre sökresultat.</p><p>Alternativt kan du bara klicka på knappen “Bokmärk denna sida” i webbläsaren som vanligt så kommer xBrowserSync automatiskt att fylla i bokmärkets egenskaper (valfria behörigheter måste beviljas för att detta ska fungera, se panelen Inställningar).</p>",
        "android": "<h4>Lägga till ett bokmärke</h4><p>Lägg till bokmärken enkelt genom att dela till xBrowserSync från vilka appar som helst som delar webbadresser som exempelvis webbläsare, YouTube, Spotify och många fler.</p><p>Bokmärkets egenskaper kommer att hämtas åt dig, annars kan du lägga till en beskrivning och några taggar för att säkerställa bättre sökresultat.</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>Kom ihåg att säkerhetskopiera</h4><p>Din data är ditt ansvar när du använder xBrowserSync så var smart och se till att ta säkerhetskopior.</p><p>Gå till panelen Inställningar och säkerhetskopiera din okrypterade data till en lokal fil som kan användas för att återställa din data om du skulle behöva.</p><p>Om din lokala webbläsardata blir skadad och du inte har några säkerhetskopior, kan du när som helst återställa din data till sitt ursprungliga tillstånd från när xBrowserSync installerades.</p>",
        "android": "<h4>Kom ihåg att säkerhetskopiera</h4><p>Din data är ditt ansvar när du använder xBrowserSync så var smart och se till att ta säkerhetskopior.</p><p>Gå till panelen Inställningar och säkerhetskopiera din okrypterade data till en lokal fil som kan användas för att återställa din data om du skulle behöva.</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>Innan du börjar</h4><p>xBrowserSync ändrar din lokala webbläsardata så det är en bra idé att säkerhetskopiera dina bokmärken och andra webbläsardata för säkerhetskull, och om du använder andra synkroniseringstjänster eller verktyg för webbläsaren (t.ex. <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>), inaktivera dem för att undvika konflikter.</p>",
        "brave": "<h4>Innan du börjar</h4><p>xBrowserSync ändrar din lokala webbläsardata så det är en bra idé att säkerhetskopiera dina bokmärken och andra webbläsardata för säkerhetskull, och om du använder andra synkroniseringstjänster eller verktyg för webbläsaren (t.ex. <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>), inaktivera dem för att undvika konflikter.</p>",
        "edge": "<h4>Innan du börjar</h4><p>xBrowserSync ändrar din lokala webbläsardata så det är en bra idé att säkerhetskopiera dina bokmärken och andra webbläsardata för säkerhetskull, och om du använder andra synkroniseringstjänster eller verktyg för webbläsaren (t.ex. <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>), inaktivera dem för att undvika konflikter.</p>",
        "firefox": "<h4>Innan du börjar</h4><p>xBrowserSync ändrar din lokala webbläsardata så det är en bra idé att säkerhetskopiera dina bokmärken och andra webbläsardata för säkerhetskull, och om du använder andra synkroniseringstjänster eller verktyg för webbläsaren (t.ex. <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>), inaktivera dem för att undvika konflikter.</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>Synkronisera med ditt befintliga ID</h4><p>Klicka på ”Har du redan ett synkroniserings-ID?” för att ange ditt befintliga synkroniserings-ID och lösenord. Om ditt synkronisering-ID skapades på en tjänst som skiljer sig från den som visas, byt då till den tjänsten innan du försöker synkronisera.</p><p>xBrowserSync kommer att hämta och avkryptera din krypterade data med ditt lokalt lagrade lösenord, rensa sedan dina lokala bokmärken innan du återfyller dem från den avkrypterade datan.</p><p>När den är synkroniserad kontrollerar xBrowserSync i bakgrunden var 15:e minut efter uppdateringar till din synkroniserade data och uppdaterar dina lokala bokmärken automatiskt när det behövs. Du kan även manuellt synkronisera tillgängliga uppdateringar till din synkroniserade data i panelen Inställningar.</p>",
        "android": "<h4>Synkronisera med ditt befintliga ID</h4><p>Börja med att skanna synkroniserings-ID QR-koden i panelen Inställningar i xBrowserSync stationära webbläsartillägg (klicka på ditt synkroniserings-ID för att visa det). Kontrollera att du anger samma krypteringslösenord som används när du skapade synkroniseringen annars kommer xBrowserSync inte att kunna avkryptera din data.</p><p>Dessutom, om du är synkroniserad med en annan xBrowserSync-tjänst, kontrollera att det är den tjänsten som konfigurerad som aktiv i panelen Inställningar.</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>Synkronisera för första gången</h4><p>Innan xBrowserSync kan synkronisera din webbläsardata måste du ange ett krypteringslösenord. Tänk på att göra det starkt men också minnesvärt, det finns inga återställningar eller påminnelser så om du glömmer det kommer du inte att kunna komma åt din synkroniserade data.</p><p>Din webbläsardata kommer att krypteras med ditt lösenord och sparas till den aktiva xBrowserSync-tjänsten konfigurerad i panelen Inställningar.</p><p>När du är synkroniserad kommer alla ändringar du gör till dina lokala bokmärken att synkroniseras automatiskt med xBrowserSync.</p>",
        "android": "<h4>Synkronisering för första gången</h4><p>xBrowserSync synkroniserar aktivt din webbläsardata mellan dina stationära webbläsare (synkronisering till mobila webbläsare stöds inte just nu). Du kan använda denna app för att få tillgång till din synkroniserade data på din mobila Android-enhet.</p><p>Om du inte redan har skapat ett synkroniserings-ID, gå över till din stationära webbläsare och <a href='https://link.xbrowsersync.org/download' class='new-tab'>ladda ned</a> xBrowserSync-tillägget. Så fort du har skapat en synkronisering så kan du använda ditt nya synkroniserings-ID i denna app för att få tillgång till din data.</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>Ytterligare support</h4><p>Du hittar svaren på de vanligaste frågorna under <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>Vanliga frågor</a>, titta även på aktuella <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>kända problem</a> för att se om ditt problem är listat där.</p><p>Alternativt kan du använda <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>ärendehanteraren</a> för att rapportera ett problem eller begära en ny funktion.</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>Bli mobil</h4><p>Få tillgång till dina synkroniserade bokmärken på språng med Android-appen xBrowserSync, tillgänglig på <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> store, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> eller <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>direktnedladdning</a>.</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>Inbyggda funktioner som stöds</h4><p>Fortsätt gärna använda webbläsarens inbyggda bokmärkningsfunktioner som bokmärkesfältet och bokmärkeshanteraren, eventuella ändringar du gör kommer att synkroniseras automatiskt i bakgrunden.</p><p>Om du har organiserat dina befintliga bokmärken i mappar, oroa dig inte, xBrowserSync kommer att respektera och upprätthålla din befintliga bokmärkeshierarki.</p>",
        "firefox": "<h4>Inbyggda funktioner som stöds</h4><p>Fortsätt gärna använda webbläsarens inbyggda bokmärkningsfunktioner som bokmärkesfältet och bokmärkesbibliotek, eventuella ändringar du gör kommer att synkroniseras automatiskt i bakgrunden.</p><p>Om du har organiserat dina befintliga bokmärken i mappar, oroa dig inte, xBrowserSync kommer att respektera och upprätthålla din befintliga bokmärkeshierarki.</p><p>Observera dock, eftersom Firefox bokmärkes-API ännu inte stöder åtkomst till inbyggda bokmärkestaggar, kommer alla befintliga taggar att förloras vid synkronisering och taggar som lagts till via xBrowserSync kommer inte att sparas som inbyggda taggar.</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "Föregående"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>Sök i dina bokmärken</h4><p>Efter synkronisering, tryck helt enkelt på Enter för att visa dina senaste bokmärken eller skriv några sökord eller en webbadress för att söka bland dina bokmärken.</p><p>Växla mellan sökresultat och bokmärkesmappar för att bläddra i hela hierarkin.</p><p>För att redigera eller radera ett bokmärke, håll muspekaren över bokmärket och klickar på den nu synliga redigeringsikonen bredvid bokmärkets titel.</p>",
        "android": "<h4>Söka i dina bokmärken</h4><p>Efter synkronisering visas dina bokmärken i kronologisk ordning när du öppnar xBrowserSync. Skriv några sökord eller en webbadress i sökrutan för att söka bland dina bokmärken.</p><p>Växla mellan sökresultat och bokmärkesmappar för att bläddra i hela hierarkin.</p><p>Långtryck på ett bokmärke gör att du direkt kan dela, ändra eller radera bokmärket.</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>Synkronisera till en annan tjänst</h4><p>Som standard synkroniseras din data till den <a href='https://link.xbrowsersync.org/api' class='new-tab'>officiella xBrowserSync-tjänsten</a>, men om du vill synkronisera din data till en alternativ xBrowserSync-tjänst så kan du byta den aktiva tjänsten innan du synkroniserar.</p><p>Se listan över tillgängliga <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>offentliga xBrowserSync-tjänster</a> eller <a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>kör din egna tjänst</a>, antingen för privat bruk för ultimat säkerhet och integritet, eller för offentligt bruk så fler människor kan njuta av xBrowserSync.</p><p><strong>Viktigt:</strong> xBrowserSync-tjänster drivs självständigt av volontärer. Tjänsteadministratören tar inget ansvar för din data så kom ihåg att säkerhetskopiera regelbundet.</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>Använd genvägar!</h4><p>För att söka i dina bokmärken snabbt, använd standardkortkommandot (Ctrl+Blanksteg) för att aktivera tillägget, tryck sedan på Enter för att visa dina senaste bokmärken eller börja skriva för att söka.</p><p>För att ändra genvägen bläddra till chrome://extensions/shortcuts och uppdatera de tillgängliga genvägarna under xBrowserSync.</p>",
        "brave": "<h4>Använd genvägar!</h4><p>För att söka i dina bokmärken snabbt, använd standardkortkommandot (Ctrl+Blanksteg) för att aktivera tillägget, tryck sedan på Enter för att visa dina senaste bokmärken eller börja skriva för att söka.</p><p>För att ändra genvägen bläddra till brave://extensions/shortcuts och uppdatera de tillgängliga genvägarna under xBrowserSync.</p>",
        "edge": "<h4>Använd genvägar!</h4><p>För att söka i dina bokmärken snabbt, använd standardkortkommandot (Ctrl+Blanksteg) för att aktivera tillägget, tryck sedan på Enter för att visa dina senaste bokmärken eller börja skriva för att söka.</p><p>För att ändra genvägen bläddra till edge://extensions/shortcuts och uppdatera de tillgängliga genvägarna under xBrowserSync.</p>",
        "firefox": "<h4>Använd genvägar!</h4><p>För att söka i dina bokmärken snabbt, använd standardkortkommandot (Ctrl+Blanksteg) för att aktivera tillägget, tryck sedan på Enter för att visa dina senaste bokmärken eller börja skriva för att söka.</p><p>För att ändra genvägen bläddra till about:addons, klicka på “Hantera genvägar för tillägg” i inställningsmenyn och uppdatera de tillgängliga genvägarna under xBrowserSync.</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>Ditt synkroniserings-ID</h4><p>xBrowserSync garanterar din integritet eftersom inga personuppgifter någonsin samlas in och din webbläsardata krypteras innan den synkroniseras. För att identifiera din synkroniserade data tilldelas du ett anonymt synkroniserings-ID som kan användas tillsammans med ditt lösenord för att synkronisera din data i andra webbläsare och enheter.</p><p>Tänk på att ditt synkroniserings-ID endast fungerar med xBrowserSync-tjänsten som det skapades på. Om du byter till en annan xBrowserSync-tjänst måste du skapa en ny synkronisering eller använda ett befintligt synkroniserings-ID som skapats när du tidigare synkroniserat med den tjänsten.</p><p>När du är synkroniserad kan du visa ditt synkroniserings-ID i panelen Inställningar, klicka på den för att visa en praktisk QR-kod för att skanna när du synkroniserar på mobila enheter.</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>Välkommen till xBrowserSync!</h4><p>xBrowserSync är ett gratis och med öppen källkod alternativ till synkroniseringstjänster för webbläsare som erbjuds av Google, Mozilla, Opera och andra, som respekterar din integritet och ger dig fullständig anonymitet (se <a href='https://link.xbrowsersync.org/www' class='new-tab'>hemsidan</a> för mer information).</p><p>Ta en stund för att läsa igenom denna hjälpguide och bekanta dig med xBrowserSync, med hjälp av sidlänkarna nedan eller piltangenterna för att flytta mellan sidor.</p><p>Observera: xBrowserSync synkroniserar för närvarande endast bokmärken. Synkronisering av ytterligare webbläsardata kommer att läggas till i framtida versioner, följ utvecklingens <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>färdplan</a> för att se vad som är planerat.</p>",
        "android": "<h4>Välkommen till xBrowserSync!</h4><p>xBrowserSync är ett gratis och med öppen källkod alternativ till synkroniseringstjänster för webbläsare som erbjuds av Google, Mozilla, Opera och andra, som respekterar din integritet och ger dig fullständig anonymitet (se <a href='https://link.xbrowsersync.org/www' class='new-tab'>hemsidan</a> för mer information).</p><p>Ta en stund för att läsa igenom denna hjälpguide och bekanta dig med xBrowserSync, med hjälp av sidlänkarna nedan eller svep för att flytta mellan sidor.</p><p>Observera: xBrowserSync synkroniserar för närvarande endast bokmärken. Synkronisering av ytterligare webbläsardata kommer att läggas till i framtida versioner, följ utvecklingens <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>färdplan</a> för att se vad som är planerat.</p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "Behöver du ett synkroniserings-ID?"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "Ladda ner xBrowserSync stationära webbläsartillägg och skapa en ny synkronisering för att komma åt dina bokmärken här."
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "Bekräfta lösenord"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "Ditt krypteringslösenord"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "Krypteringslösenord"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "Ange ett krypteringslösenord"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "Visa lösenord"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "Anslut till din synkronisering"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "Öppna xBrowserSync i din stationära webbläsare, gå till panelen Inställningar och klicka på ditt synkroniserings-ID för att visa en QR-kod som du kan skanna här."
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "Skanna kod"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "Ange synkroniseringsdetaljer manuellt"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "API-version"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "Synkronisera till denna tjänst?"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "Plats"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "Maximal synkroniseringsstorlek"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "Synkroniserar till"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "Status"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSync-tjänstens webbadress"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "Ange webbadressen till en alternativ xBrowserSync-tjänst. Bläddra i listan över offentliga xBrowserSync-tjänster <a href='https://link.xbrowsersync.org/service-list' class='new-tab'>här</a>."
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "Byt tjänst"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "Webbadress krävs"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "Inte en giltig xBrowserSync-tjänst"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "Inte en giltig webbadress"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "Kunde inte ansluta till tjänsten"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "Denna tjänst kör en API-version som inte stöds"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>Viktigt:</strong> xBrowserSync-tjänster drivs självständigt av volontärer. Tjänsteadministratören tar inget ansvar för din data så kom ihåg att säkerhetskopiera regelbundet."
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "Är du säker?"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync kommer att radera all lokal bokmärkesdata innan återställning av synkroniserade bokmärken. OK för att fortsätta?"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "Inaktivera synkningsverktyg för bokmärken"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "Att synkronisera din webbläsares data med xBrowserSync medan andra synkroniseringsverktyg för bokmärken (t.ex. <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>) är aktiva kan orsaka dubbletter och eventuellt skadad data. Inaktivera dessa innan du fortsätter.",
            "brave": "Att synkronisera din webbläsares data med xBrowserSync medan andra synkroniseringsverktyg för bokmärken (t.ex. <a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'>Brave Sync</a>) är aktiva kan orsaka dubbletter och eventuellt skadad data. Inaktivera dessa innan du fortsätter.",
            "edge": "Att synkronisera din webbläsares data med xBrowserSync medan andra synkroniseringsverktyg för bokmärken (t.ex. <a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'>Microsoft Edge Sync</a>) är aktiva kan orsaka dubbletter och eventuellt skadad data. Inaktivera dessa innan du fortsätter.",
            "firefox": "Att synkronisera din webbläsares data med xBrowserSync medan andra synkroniseringsverktyg för bokmärken (t.ex. <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>) är aktiva kan orsaka dubbletter och eventuellt skadad data. Inaktivera dessa innan du fortsätter."
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "Synkronisera"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "Skapa ny synkronisering"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "Redo att uppgradera synkronisering?"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>Din synkronisering måste uppgraderas innan du synkroniserar med denna version av xBrowserSync. Efter uppgradering kommer du inte längre att kunna synkronisera med tidigare versioner av xBrowserSync.</p><p>Var noga med att uppdatera xBrowserSync på alla synkroniserade enheter innan du fortsätter. Redo att fortsätta?</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "Uppgradera synkronisering"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>Din synkronisering måste uppgraderas innan du synkroniserar med denna version av xBrowserSync.</p><p>Använd det stationära webbläsartillägget xBrowserSync för att uppgradera din synkronisering och försök sedan att synkronisera igen här.</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "Ditt synkroniserings-ID"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "Har du redan ett synkroniserings-ID?"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "Inte ett giltigt synkroniserings-ID"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "Skaffa ett synkroniserings-ID"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "Frivilliga behörigheter"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p>xBrowserSync berikar automatiskt bokmärken med tillgängliga metadata som lagts till med webbläsarens Lägg till bokmärke-knapp. För att aktivera detta kräver xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>ytterligare behörigheter</a> för att kunna läsa besökta webbplatsdata.</p><p>Om du får frågan, välj om du är okej med att bevilja dessa behörigheter, alternativt kan du lägga till eller ta bort behörigheter när som helst i panelen Inställningar.</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "Skanna din synkroniserings-ID QR-kod"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "Växla ljus"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "Visa bokmärkesmappar"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "Rensa"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "Mapp är tom"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "Du har inga bokmärken, lägg till några!"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "Inga bokmärken hittades"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "Tryck på Enter eller sök efter bokmärken",
        "android": "Hitta bokmärken"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "Dra ned för att synkronisera"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "Släpp för att synkronisera"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "Visa sökresultat"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "Säkerhetskopiering och återställning"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "Automatisk säkerhetskopiering"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "Ladda ned säkerhetskopior automatiskt enligt ett schema."
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "Säkerhetskopiering körs"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "varje"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "enstaka"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "två"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "tre"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "fyra"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "fem"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "sex"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "sju"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "åtta"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "nio"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "tio"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "elva"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "tolv"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "dagar"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "veckor"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "månader"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "För att förhindra att dialogrutan “Spara som...” visas när du laddar ned säkerhetskopior, inaktivera webbläsarinställningen “Fråga var filerna ska sparas före nedladdning\"."
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "Säkerhetskopiering"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "Ladda ner säkerhetskopia"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "Säkerhetskopiera lokal webbläsardata till en fil."
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "Säkerhetskopiera synkroniserad data till en fil."
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "Återställning"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "Återställ från säkerhetskopia"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "Återställ lokal webbläsardata från en säkerhetskopia."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>Eftersom synkronisering förnärvarande är inaktiverat kommer data som återställs att skriva över lokal webbläsardata.</p><p>OK för att fortsätta?</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "Återställ synkroniserad data från en säkerhetskopia."
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>Eftersom synkronisering förnärvarande är aktiverat kommer data som återställs att skriva över dina synkroniserade data.</p><p>För att endast återställa data till den lokala webbläsaren, inaktivera synkronisering innan du återställer.</p><p>OK för att fortsätta?</p>",
              "android": "<p>Data som återställs kommer att skriva över din synkroniserade data.</p><p>OK för att fortsätta?</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "Säkerhetskopian har återställts."
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "Välj fil"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "Välj en säkerhetskopieringsfil att återställa"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "Kopiera innehållet i en säkerhetskopieringsfil för att återställa data."
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "Klistra in säkerhetskopieringsdata"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "Återställ data"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "Ogiltig xBrowserSync-säkerhetskopieringsdata"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>Om du fortsätter kommer synkronisering att inaktiveras och din lokala webbläsardata kommer att återställas till när xBrowserSync installerades den {date}.</p><p>OK för att fortsätta?</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "Återställ lokal data"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "Lokal webbläsardata har återställts till ursprungligt installationstillstånd."
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "Data för installationstillstånd är inte tillgänglig, kan inte återställa."
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "Hjälp och support"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "Hjälpguide"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "Har du en fråga eller ett problem? Se till att läsa igenom hjälpguiden, annars kan svaret vara i vanliga frågor."
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "Visa vanliga frågor"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "Support"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "Behöver du support? Använd ärendehanteraren för att rapportera en bugg eller begära en funktion."
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "Visa ärendehanteraren"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "Programlogg"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "Ladda ned och inkludera programloggen när du loggar ett problem."
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "Rensa logg"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "Ladda ned logg"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "Nuvarande loggstorlek"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "Frivilliga behörigheter"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "Bevilja behörigheter"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "Beviljad"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "Ej beviljad"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "Läs webbplatsdata"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "Krävs för att automatiskt lägga till metadata till bokmärken när du använder webbläsarens knapp “Bokmärk denna sida” (<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>mer information</a>)."
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "Ta bort behörigheter"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "Hämta bokmärkens metadata automatiskt"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "Hämta metadata automatiskt när ett bokmärke läggs till."
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "Sök efter appuppdateringar"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "Bli meddelad när en ny version av xBrowserSync finns tillgänglig."
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "Aktivera mörkt läge"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "Idealisk för användning i miljöer med svagt ljus."
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "Visa bokmärkesmappar"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "Visa bokmärkesmappar som standard."
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "Växla sökfältets position"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "Visa sökfältet under resultaten."
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "Synkronisera bokmärkesfältet"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "Inaktivera denna inställning för att visa olika bokmärkesfält i synkroniserade webbläsare."
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>Aktivering av denna inställning kommer att ersätta de nuvarande bokmärkena i bokmärkesfältet med dina synkroniserade bokmärken.</p><p>OK för att fortsätta?</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "Aktivera telemetri"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "Skicka anonym teknisk data då och då för att förbättra xBrowserSync."
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "Inställningar"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "Synkronisering"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "Inaktivera synkronisering"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "Synkroniserings-ID"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "Använd ditt synkroniserings-ID för att ansluta till dina synkroniserade data på andra enheter (klicka för att visa QR-kod)."
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "Dataanvändning"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "Hur mycket av tjänstens tillåtna synkroniseringsdata du använder."
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "Tjänst"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "Senast synkroniserad {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "Redo att synkronisera (schemalagd till {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "Synkronisera nu"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "Skanna denna QR-kod med Android-appen xBrowserSync för att ansluta till dina synkroniserade data."
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "Visa QR-kod"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "Kopiera synkroniserings-ID till urklipp"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "Kopierad!"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "Inställningar tillgängliga när synkronisering är aktiverad."
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "Fil sparad i Nedladdade filer"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "Stöd xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "Stöd xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>Vi vill göra xBrowserSync till det största synkroniseringsverktyget, men det finns fortfarande mycket kvar att göra:</p><ul><li>Lägga till synkronisering av webbläsarflikar och historik</li><li>Stödja alla större stationära webbläsare</li><li>Översätta till andra språk</li><li>Och <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>mycket mer</a>!</li></ul><p>Vi kan endast med din hjälp fortsätta att förbättra xBrowserSync och se till att det förblir effektivt när det gäller att skydda online-integritet och öka produktiviteten.</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "Kryptos"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "Synkronisering hittades inte"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>Din synkronisering kunde inte hittas och kan ha tagits bort på grund av inaktivitet.</p><p>Du måste skapa en ny synkronisering, men klicka först på knappen nedan för att ladda ned en säkerhetskopia av dina synkroniserade data som du sedan kan återställa till din nya synkronisering.</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "Skicka anonym telemetri?"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync skiljer sig från traditionella appar eftersom det är ett helt anonymt verktyg som prioriterar integriteten. Att underhålla ett sådant verktyg är utmanande eftersom vi inte har tillgång till användardata för att hjälpa oss att avgöra hur vi bäst kan distribuera våra begränsade resurser. Därför ber vi om ditt tillåtelse att då och då skicka anonyma tekniska data för att hjälpa oss att förbättra xBrowserSync.</p><p>Denna telemetridata inkluderar inga personliga eller identifierande data, inte heller några av dina krypterade synkroniseringsdata och är aldrig delas med tredje part (du kan när som helst välja att in- eller avstå från inställningspanelen).</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "Uppdaterad till"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "<p>xBrowserSync har uppdaterats med de senaste funktionerna och korrigeringarna.</p><p>Om synkronisering var aktiverad, har den nu inaktiverats och din synkronisering måste först uppgraderas innan den synkroniseras med denna version av xBrowserSync. Återaktivera synkronisering för att slutföra uppgraderingsprocessen.</p><p>För mer information om ändringarna i denna version, titta i versionsinformationen.</p>"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "Återställer"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "Återställer"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "Synkroniserar"
      }
    }
  }
}
</file>

<file path="res/strings/zh.json">
{
  "Alert": {
    "AppUpdateAvailable": {
      "Title": {
        "key": "Alert_AppUpdateAvailable_Title",
        "default": "xBrowserSync 更新可用"
      },
      "Message": {
        "key": "Alert_AppUpdateAvailable_Message",
        "default": "{version} 可以下载。点击获取更多信息。",
        "android": "xBrowserSync {version} 可供下载。"
      }
    },
    "AppUpdated": {
      "Title": {
        "key": "Alert_AppUpdated_Title",
        "default": "更新到"
      },
      "Message": {
        "key": "Alert_AppUpdated_Message",
        "default": "xBrowserSync 已更新。同步已禁用，重新启用同步以完成升级过程。"
      }
    },
    "BookmarkCreated": {
      "key": "Alert_BookmarkCreated",
      "default": "书签已恢复"
    },
    "BookmarkDeleted": {
      "key": "Alert_BookmarkDeleted",
      "default": "书签已删除"
    },
    "BookmarkUpdated": {
      "key": "Alert_BookmarkUpdated",
      "default": "书签已更新"
    },
    "GetMetadata": {
      "Message": {
        "key": "Alert_GetMetadata_Message",
        "default": "正在获取书签属性，点击以取消。"
      },
      "Success": {
        "key": "Alert_GetMetadata_Success",
        "default": "书签属性已更新。"
      }
    },
    "Go": {
      "key": "Alert_Go",
      "default": "转到"
    }
  },
  "App": {
    "Description": {
      "key": "App_Description",
      "default": "浏览器同步应该是安全的、匿名的和免费的！在您的浏览器和设备之间同步书签，无需注册。"
    },
    "Title": {
      "key": "App_Title",
      "default": "xBrowserSync"
    }
  },
  "Bookmarks": {
    "Container": {
      "Menu": {
        "key": "Bookmarks_Container_Menu",
        "default": "菜单书签"
      },
      "Other": {
        "key": "Bookmarks_Container_Other",
        "default": "其他书签"
      },
      "Toolbar": {
        "key": "Bookmarks_Container_Toolbar",
        "default": "工具栏书签"
      }
    }
  },
  "Button": {
    "AddBookmark": {
      "key": "Button_AddBookmark",
      "default": "添加书签"
    },
    "Back": {
      "key": "Button_Back",
      "default": "后退"
    },
    "Cancel": {
      "key": "Button_Cancel",
      "default": "取消"
    },
    "Close": {
      "key": "Button_Close",
      "default": "关闭"
    },
    "Confirm": {
      "key": "Button_Confirm",
      "default": "是"
    },
    "Continue": {
      "key": "Button_Continue",
      "default": "继续"
    },
    "DeleteBookmark": {
      "key": "Button_DeleteBookmark",
      "default": "删除书签"
    },
    "Deny": {
      "key": "Button_Deny",
      "default": "否"
    },
    "Done": {
      "key": "Button_Done",
      "default": "完成"
    },
    "DownloadBackup": {
      "key": "Button_DownloadBackup",
      "default": "下载备份"
    },
    "EditBookmark": {
      "key": "Button_EditBookmark",
      "default": "编辑书签"
    },
    "Help": {
      "key": "Button_Help",
      "default": "查看帮助指南"
    },
    "Next": {
      "key": "Button_Next",
      "default": "下一个"
    },
    "OK": {
      "key": "Button_OK",
      "default": "确定"
    },
    "ReleaseNotes": {
      "key": "Button_ReleaseNotes",
      "default": "查看发行说明"
    },
    "Saving": {
      "key": "Button_Saving",
      "default": "保存中"
    },
    "Settings": {
      "key": "Button_Settings",
      "default": "设置"
    },
    "ShareBookmark": {
      "key": "Button_ShareBookmark",
      "default": "分享书签"
    },
    "Undo": {
      "key": "Button_Undo",
      "default": "撤销"
    },
    "Update": {
      "key": "Button_Update",
      "default": "更新"
    },
    "View": {
      "key": "Button_View",
      "default": "查看"
    }
  },
  "Error": {
    "ContainerChanged": {
      "Message": {
        "key": "Error_ContainerChanged_Message",
        "default": "请避免修改 [xbs] 文件夹，因为它会导致同步问题。"
      },
      "Title": {
        "key": "Error_ContainerChanged_Title",
        "default": "xBrowserSync 文件夹已更改"
      }
    },
    "DailyNewSyncLimitReached": {
      "Message": {
        "key": "Error_DailyNewSyncLimitReached_Message",
        "default": "同步到现有同步ID，切换到不同的服务或明天重试。"
      },
      "Title": {
        "key": "Error_DailyNewSyncLimitReached_Title",
        "default": "达到每日新同步限制"
      }
    },
    "Default": {
      "Message": {
        "key": "Error_Default_Message",
        "default": "如果问题仍然存在，请 <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>报告问题</a>。"
      },
      "Title": {
        "key": "Error_Default_Title",
        "default": "出现错误"
      }
    },
    "FailedDownloadFile": {
      "Title": {
        "key": "Error_FailedDownloadFile_Title",
        "default": "备份失败"
      }
    },
    "FailedGetDataToRestore": {
      "Title": {
        "key": "Error_FailedGetDataToRestore_Title",
        "default": "浏览文件失败"
      }
    },
    "FailedGetPageMetadata": {
      "Message": {
        "key": "Error_FailedGetPageMetadata_Message",
        "default": "URL 无效或无法获取网页数据。"
      },
      "Title": {
        "key": "Error_FailedGetPageMetadata_Title",
        "default": "无法获取书签属性"
      }
    },
    "FailedRefreshBookmarks": {
      "Title": {
        "key": "Error_FailedRefreshBookmarks_Title",
        "default": "无法获取更新"
      }
    },
    "FailedRestoreData": {
      "Message": {
        "key": "Error_FailedRestoreData_Message",
        "default": "提供的备份数据不是预期的格式。"
      },
      "Title": {
        "key": "Error_FailedRestoreData_Title",
        "default": "无法恢复数据"
      }
    },
    "FailedShareUrlNotSynced": {
      "Title": {
        "key": "Error_FailedShareUrlNotSynced_Title",
        "default": "您必须同步才能添加书签"
      }
    },
    "FailedShareUrl": {
      "Title": {
        "key": "Error_FailedShareUrl_Title",
        "default": "无法获取共享书签URL"
      }
    },
    "HttpRequestFailed": {
      "Message": {
        "key": "Error_HttpRequestFailed_Message",
        "default": "检查您的网络连接，然后重试。 如果问题仍然存在，则 xBrowserSync 服务可能存在问题。"
      },
      "Title": {
        "key": "Error_HttpRequestFailed_Title",
        "default": "同步失败"
      }
    },
    "IncompleteSyncInfo": {
      "Message": {
        "key": "Error_IncompleteSyncInfo_Message",
        "default": "无法找到存储的凭据。重新启用同步并重试。"
      },
      "Title": {
        "key": "Error_IncompleteSyncInfo_Title",
        "default": "缺少凭据"
      }
    },
    "InvalidCredentials": {
      "Message": {
        "key": "Error_InvalidCredentials_Message",
        "default": "检查您的同步ID、密码和服务URL是否正确输入。"
      },
      "Title": {
        "key": "Error_InvalidCredentials_Title",
        "default": "无效的凭据"
      }
    },
    "InvalidService": {
      "Message": {
        "key": "Error_InvalidService_Message",
        "default": "服务 URL 不是有效的 xBrowserSync 服务。"
      },
      "Title": {
        "key": "Error_InvalidService_Title",
        "default": "无效的 xBrowserSync 服务"
      }
    },
    "LocalContainerNotFound": {
      "Message": {
        "key": "Error_LocalContainerNotFound_Message",
        "default": "可能损坏的浏览器配置文件， 请尝试创建新的配置文件来解决这个问题。"
      },
      "Title": {
        "key": "Error_LocalContainerNotFound_Title",
        "default": "意外的书签结构"
      }
    },
    "LocalSyncError": {
      "Message": {
        "key": "Error_LocalSyncError_Message",
        "default": "本地浏览器数据已刷新，请重新应用上次更改。"
      },
      "Title": {
        "key": "Error_LocalSyncError_Title",
        "default": "同步出错"
      }
    },
    "NetworkConnection": {
      "Message": {
        "key": "Error_NetworkConnection_Message",
        "default": "请检查你的网络连接并重试。"
      },
      "Title": {
        "key": "Error_NetworkConnection_Title",
        "default": "连接丢失"
      }
    },
    "NoDataToRestore": {
      "Message": {
        "key": "Error_NoDataToRestore_Message",
        "default": "请确保您在恢复之前提供了有效的 xBrowserSync 备份。"
      },
      "Title": {
        "key": "Error_NoDataToRestore_Title",
        "default": "没有数据可恢复"
      }
    },
    "NotAcceptingNewSyncs": {
      "Message": {
        "key": "Error_NotAcceptingNewSyncs_Message",
        "default": "切换到不同的服务或稍后再试。"
      },
      "Title": {
        "key": "Error_NotAcceptingNewSyncs_Title",
        "default": "服务不接受新同步"
      }
    },
    "OutOfSync": {
      "Message": {
        "key": "Error_OutOfSync_Message",
        "default": "本地数据未同步，现已刷新。请重新应用上次更改。"
      },
      "Title": {
        "key": "Error_OutOfSync_Title",
        "default": "检测到同步冲突"
      }
    },
    "RequestEntityTooLarge": {
      "Message": {
        "key": "Error_RequestEntityTooLarge_Message",
        "default": "删除一些书签，然后重试或切换到具有更大同步限制的服务。"
      },
      "Title": {
        "key": "Error_RequestEntityTooLarge_Title",
        "default": "超过同步数据限制"
      }
    },
    "ScanFailed": {
      "Message": {
        "key": "Error_ScanFailed_Message",
        "default": "检查权限已授予，然后重试。"
      },
      "Title": {
        "key": "Error_ScanFailed_Title",
        "default": "扫描失败"
      }
    },
    "ServiceOffline": {
      "Message": {
        "key": "Error_ServiceOffline_Message",
        "default": "xBrowserSync 服务目前处于离线状态，请稍后再试。"
      },
      "Title": {
        "key": "Error_ServiceOffline_Title",
        "default": "离线服务"
      }
    },
    "ShareFailed": {
      "Title": {
        "key": "Error_ShareFailed_Title",
        "default": "分享失败"
      }
    },
    "SyncRemoved": {
      "Message": {
        "key": "Error_SyncRemoved_Message",
        "default": "请求的同步不存在，可能因为没有活动而被删除。"
      },
      "Title": {
        "key": "Error_SyncRemoved_Title",
        "default": "同步未找到"
      }
    },
    "SyncVersionNotSupported": {
      "Restore": {
        "Message": {
          "key": "Error_SyncVersionNotSupported_Restore_Message",
          "default": "无法通过此版本的 xBrowserSync 还原备份数据，因为它是用更高版本创建的。"
        }
      },
      "Message": {
        "key": "Error_SyncVersionNotSupported_Message",
        "default": "此ID不能与此版本的 xBrowserSync 同步，因为同步已经升级到更高版本。"
      },
      "Title": {
        "key": "Error_SyncVersionNotSupported_Title",
        "default": "同步的版本不被支持"
      }
    },
    "TooManyRequests": {
      "Message": {
        "key": "Error_TooManyRequests_Message",
        "default": "同步已禁用，重新启用同步以恢复同步。"
      },
      "Title": {
        "key": "Error_TooManyRequests_Title",
        "default": "服务请求数量限制"
      }
    },
    "UncommittedSyncs": {
      "Message": {
        "key": "Error_UncommittedSyncs_Message",
        "default": "连接恢复后更改将被同步。"
      },
      "Title": {
        "key": "Error_UncommittedSyncs_Title",
        "default": "连接丢失"
      }
    },
    "UnsupportedServiceApiVersion": {
      "Message": {
        "key": "Error_UnsupportedServiceApiVersion_Message",
        "default": "此服务正在运行一个不支持的 API 版本。"
      },
      "Title": {
        "key": "Error_UnsupportedServiceApiVersion_Title",
        "default": "服务不受支持"
      }
    },
    "UpgradeFailed": {
      "Message": {
        "key": "Error_UpgradeFailed_Message",
        "android": "重启应用后将重试升级。如果问题仍然存在，请重新安装 xBrowserSync。",
        "default": "重新启动您的浏览器以重试升级，如果问题仍然存在，请重新安装 xBrowserSync。"
      },
      "Title": {
        "key": "Error_UpgradeFailed_Title",
        "default": "升级失败"
      }
    }
  },
  "Service": {
    "Status": {
      "Error": {
        "key": "Service_Status_Error",
        "default": "连接错误"
      },
      "Loading": {
        "key": "Service_Status_Loading",
        "default": "正在检查"
      },
      "NoNewSyncs": {
        "key": "Service_Status_NoNewSyncs",
        "default": "不接受新同步"
      },
      "Offline": {
        "key": "Service_Status_Offline",
        "default": "离线"
      },
      "Online": {
        "key": "Service_Status_Online",
        "default": "在线"
      }
    }
  },
  "Tooltip": {
    "NotSynced": {
      "key": "Tooltip_NotSynced",
      "default": "未同步"
    },
    "Synced": {
      "key": "Tooltip_Synced",
      "default": "已同步"
    },
    "Syncing": {
      "key": "Tooltip_Syncing",
      "default": "同步中"
    }
  },
  "View": {
    "Bookmark": {
      "Add": {
        "key": "View_Bookmark_Add",
        "default": "添加书签"
      },
      "Edit": {
        "key": "View_Bookmark_Edit",
        "default": "编辑书签"
      },
      "Form": {
        "Title": {
          "key": "View_Bookmark_Form_Title",
          "default": "标题"
        },
        "Url": {
          "Exists": {
            "key": "View_Bookmark_Form_Url_Exists",
            "default": "URL 已是书签"
          },
          "Invalid": {
            "key": "View_Bookmark_Form_Url_Invalid",
            "default": "无效URL"
          },
          "Label": {
            "key": "View_Bookmark_Form_Url_Label",
            "default": "URL"
          },
          "Required": {
            "key": "View_Bookmark_Form_Url_Required",
            "default": "URL必填"
          }
        },
        "Description": {
          "key": "View_Bookmark_Form_Description",
          "default": "描述"
        },
        "Tags": {
          "Label": {
            "key": "View_Bookmark_Form_Tags_Label",
            "default": "标记"
          },
          "Placeholder": {
            "key": "View_Bookmark_Form_Tags_Placeholder",
            "default": "标记 1, 标记 2, 标记 3, 等"
          },
          "Clear": {
            "key": "View_Bookmark_Form_Tags_Clear",
            "default": "清除标记"
          },
          "Remove": {
            "key": "View_Bookmark_Form_Tags_Remove",
            "default": "移除标记"
          }
        },
        "Delete": {
          "key": "View_Bookmark_Form_Delete",
          "default": "删除"
        },
        "Share": {
          "key": "View_Bookmark_Form_Share",
          "default": "分享"
        },
        "UpdateProperties": {
          "key": "View_Bookmark_Form_UpdateProperties",
          "default": "更新书签属性"
        }
      },
      "InvalidUrlShared": {
        "key": "View_Bookmark_InvalidUrlShared",
        "default": "共享的值不包含有效的 URL。"
      }
    },
    "Help": {
      "AddingBookmarks": {
        "key": "View_Help_AddingBookmarks",
        "default": "<h4>添加书签</h4><p>通过单击“搜索”面板中的书签图标，可以为当前页面添加书签。 将自动为您填充书签属性，您也可以添加描述和一些标记以确保获得更好的搜索结果。</p><p>另外，您只需正常单击浏览器自带的“添加书签”按钮，xBrowserSync 将自动填充书签的属性(必须授予可选权限才能使用，请检查“设置”面板)。</p>",
        "android": "<h4>添加书签</h4><p>通过浏览器、YouTube、Spotify 等任何可以分享 URL 的应用程序分享到 xBrowserSync，就可以轻松添加书签。</p><p>书签属性将被自动抓取，您也可以添加描述和一些标记以保证更好的搜索结果。</p>"
      },
      "BackingUp": {
        "key": "View_Help_BackingUp",
        "default": "<h4>记得备份</h4><p>当你使用 xBrowserSync 时，保护你的数据是你的责任，所以聪明点，确保备份。</p><p>转到 “设置” 面板，将未加密的数据备份到本地文件中，如果需要的话，可以用来恢复数据。</p><p>如果您的本地浏览器数据被损坏，而您没有任何备份，您可以随时将数据重置到安装 xBrowserSync 时的原始状态。</p>",
        "android": "<h4>记住要备份</h4><p>当你使用 xBrowserSync 时，保护你的数据是你的责任，所以聪明点，确保备份。</p><p>转到 “设置” 面板，将未加密的数据备份到本地文件中，如果需要的话，可以用来恢复数据。</p>"
      },
      "BeforeYouBegin": {
        "key": "View_Help_BeforeYouBegin",
        "default": "<h4>开始之前</h4> <p> xBrowserSync 会修改本地浏览器数据，因此最好备份备份书签和其他浏览器数据以防万一，若使用其他浏览器同步服务或工具(例如<a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'> Google Chrome Sync </a>)，请禁用它们以避免冲突。</p>",
        "brave": "<h4>开始之前</h4> <p> xBrowserSync会修改本地浏览器数据，因此最好备份备份书签和其他浏览器数据，以防万一，若使用其他任何浏览器同步服务或工具(例如<a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'> Brave Sync </a>)，请禁用它们以避免冲突。</p>",
        "edge": "<h4>开始之前</h4> <p> xBrowserSync会修改本地浏览器数据，因此最好备份备份书签和其他浏览器数据，以防万一，若使用其他任何浏览器同步服务或工具( 例如<a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'> Microsoft Edge Sync </a>)，请禁用它们以避免冲突。</p>",
        "firefox": "<h4>开始之前</h4> <p> xBrowserSync 会修改本地浏览器数据，因此最好备份备份书签和其他浏览器数据以防万一，若使用其他浏览器同步服务或工具(例如<a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'> Firefox Sync </a>)，请禁用它们以避免冲突。</p>"
      },
      "ExistingId": {
        "key": "View_Help_ExistingId",
        "default": "<h4>使用已有 ID 同步</h4> <p>点击“已获得同步ID？” 输入您已有的同步 ID 和密码。 如果您的同步 ID 是在不同的服务上创建的，则在尝试同步之前切换到该服务。</p> <p> xBrowserSync 将使用本地存储的密码检索和解密加密数据，然后会清除本地书签。 </p> <p>同步后，xBrowserSync 每隔15分钟在后台检查一次同步数据的更新，并在需要时自动更新本地书签。 您还可以在“设置”面板中手动同步数据。</p>",
        "android": "<h4>使用已有 ID 同步</h4><p>首先在 xBrowserSync 桌面浏览器扩展程序的“设置”面板中扫描同步ID QR码(单击您的同步 ID 可以显示它)。 确保输入创建同步时使用了相同密码，否则xBrowserSync 将无法解密您的数据。</p><p>另外，如果您同步到其他 xBrowserSync 服务，请确保它是在“设置”面板中配置的活动服务。</p>"
      },
      "FirstSync": {
        "key": "View_Help_FirstSync",
        "default": "<h4>首次同步</h4> <p>在 xBrowserSync 同步浏览器数据之前，您需要提供加密密码。 请务必使其坚固且令人难忘，如果您忘记了，它将不会重设或提示您，您将无法访问已同步的数据。</p> <p>您的浏览器数据将被你的密码加密并保存到“设置”面板中配置的 xBrowserSync 服务。</p> <p>一旦同步，您对本地书签所做的任何更改都会被 xBrowserSync 自动同步。</p>",
        "android": "<h4>首次同步</h4> <p> xBrowserSync 会在桌面浏览器之间互相同步浏览器数据(目前不支持与移动浏览器同步)，您可以使用此应用在 Android 移动设备上访问已同步的数据。</p> <p>如果尚未创建同步 ID，请转到桌面浏览器，然后<a href='https://link.xbrowsersync.org/download' class='new-tab'>下载</a> xBrowserSync 扩展。 创建同步后，您可以在此应用中使用该同步 ID 来访问数据。</p>"
      },
      "FurtherSupport": {
        "key": "View_Help_FurtherSupport",
        "default": "<h4>进一步的支持</h4><p>您可以在 <a href='https://link.xbrowsersync.org/faqs' class='new-tab'>常见问答</a> 中找到最常见问题的答案，还可以查看当前 <a href='https://link.xbrowsersync.org/known-issues' class='new-tab'>已知问题</a> 以查看是否在此处列出了您的问题。</p><p>或者，使用 <a href='https://link.xbrowsersync.org/app-issues' class='new-tab'>问题跟踪器</a> 报告问题或请求新功能。</p>"
      },
      "Mobile": {
        "key": "View_Help_Mobile",
        "default": "<h4>移动端</h4><p>通过 xBrowserSync Android 应用在移动设备中访问已同步的书签, 可在 <a href='https://link.xbrowsersync.org/download-android' class='new-tab'>Google Play</a> 商店, <a href='https://link.xbrowsersync.org/fdroid' class='new-tab'>F-Droid</a> 或者 <a href='https://link.xbrowsersync.org/app-releases-latest' class='new-tab'>直接下载</a>。</p>"
      },
      "NativeFeatures": {
        "key": "View_Help_NativeFeatures",
        "default": "<h4>支持原生功能</h4><p>您可以继续使用浏览器的原生书签功能，如书签栏和书签管理器，您所做的任何更改都会在后台自动同步。</p><p>如果您已经将现有的书签整理成了文件夹，也不用担心，xBrowserSync 将尊重并维护您现有的书签层次结构。</p>",
        "firefox": "<h4>支持原生功能</h4><p>您可以继续使用浏览器的原生书签功能，如书签栏和书签管理器，您所做的任何更改都会在后台自动同步。</p><p>如果您已经将现有的书签整理成了文件夹，也不用担心，xBrowserSync 将尊重并维护您现有的书签层次结构。</p><p>但请注意，由于 Firefox 的书签 API 还不支持访问原生的书签标记，因此在同步时，任何现有的标记都会丢失，而通过 xBrowserSync 添加的标记不会被保存为原生标记。</p>"
      },
      "Previous": {
        "key": "View_Help_Previous",
        "default": "上一个"
      },
      "Searching": {
        "key": "View_Help_Searching",
        "default": "<h4>搜索你的书签</h4><p>首次同步后，只需按 Enter 键即可显示您最近的书签，或键入一些关键字或 URL 来搜索您的书签。</p><p>在搜索结果和书签文件夹之间切换以浏览整个层次结构。</p><p>要编辑或删除书签，请将鼠标悬停在书签上，然后单击书签标题旁边浮现的编辑图标。</p>",
        "android": "<h4>搜索你的书签</h4><p>首次同步后，打开 xBrowserSync 时，书签将按时间顺序显示。 在搜索框中键入一些关键字或 URL 来搜索您的书签。</p><p>在搜索结果和书签文件夹之间切换以浏览整个层次结构。</p><p>您长按书签可以共享，修改或删除它。</p>"
      },
      "Service": {
        "key": "View_Help_Service",
        "default": "<h4>使用其他服务同步</h4><p>默认情况下您的数据已同步到 <a href='https://link.xbrowsersync.org/api' class='new-tab'>官方 xBrowserSync 服务</a>, 如果你愿意,也可以在同步数据之前从 xBrowserSync 服务切换到其他服务。</p><p>选择下列可用的<a href='https://link.xbrowsersync.org/service-list' class='new-tab'>公共 xBrowserSync 服务</a>或<a href='https://link.xbrowsersync.org/api-repo' class='new-tab'>运行在你自己的服务上</a>, 为私人使用提供最高安全和隐私。, 或者公开它以供更多人使用 xBrowserSync。</p><p><strong>重要:</strong> xBrowserSync 服务由志愿者独立运行。 服务管理员对您的数据不承担任何责任，因此请记住要定期备份。</p>"
      },
      "Shortcuts": {
        "key": "View_Help_Shortcuts",
        "default": "<h4>使用快捷键！</h4><p>要快速搜索您的书签，请使用默认的键盘快捷键(Ctrl + Space) 激活扩展名，然后只需按 Enter 键即可查看您最近使用的书签或开始输入搜索内容。</p><p>要更改快捷键, 浏览 chrome://extensions/shortcuts 为 xBrowserSync 更改可用的快捷键。</p>",
        "brave": "<h4>使用快捷键！</h4><p>要快速搜索您的书签，请使用默认的键盘快捷键(Ctrl + Space) 激活扩展名，然后只需按 Enter 键即可查看您最近使用的书签或开始输入搜索内容。</p><p>要更改快捷键, 浏览 brave://extensions/shortcuts 为 xBrowserSync 更改可用的快捷键。</p>",
        "edge": "<h4>使用快捷键！</h4><p>要快速搜索您的书签，请使用默认的键盘快捷键(Ctrl + Space) 激活扩展名，然后只需按 Enter 键即可查看您最近使用的书签或开始输入搜索内容。</p><p>要更改快捷键, 浏览 edge://extensions/shortcuts 为 xBrowserSync 更改可用的快捷键。</p>",
        "firefox": "<h4>使用快捷键！</h4><p>要快速搜索您的书签，请使用默认的键盘快捷键(Ctrl + Space) 激活扩展名，然后只需按 Enter 键即可查看您最近使用的书签或开始输入搜索内容。</p><p>要更改快捷键, 浏览 about:addons, 在设置菜单中单击 “管理扩展快捷键” 为 xBrowserSync 更改可用的快捷键。</p>"
      },
      "SyncId": {
        "key": "View_Help_SyncId",
        "default": "<h4>您的同步 ID </h4> <p> xBrowserSync 可保护您的隐私，不会收集任何个人数据，并且您的浏览器数据在同步之前会被加密。 为了标识您同步的数据，您将获得一个匿名同步 ID，该匿名 ID 可以与您的密码一起用于在其他浏览器和设备上同步数据。</p> <p>请记住，您的同步ID仅适用于 xBrowserSync 服务。 创建该同步的基础上，如果切换到其他 xBrowserSync 服务，则必须创建一个新 ID 或使用以前同步到该服务时已创建的 ID。</p> <p>无论何时同步，您都可以在“设置”面板中查看同步 ID，单击 ID 可以显示 QR 码，以便移动设备扫描二维码进行同步。</p>"
      },
      "Welcome": {
        "key": "View_Help_Welcome",
        "default": "<h4>欢迎使用 xBrowserSync！</h4> <p> xBrowserSync 是 Google，Mozilla，Opera 等提供的浏览器同步服务的免费开放源代码替代品，它尊重您的隐私并为您提供完全的匿名性(请参阅 <a href='https://link.xbrowsersync.org/www' class='new-tab'>网站</a>了解更多信息)。</p> <p>请花点时间通读此帮助 请使用下面的页面链接或箭头键在页面之间移动，以熟悉 xBrowserSync。</p> <p>请注意：xBrowserSync 目前仅同步书签。 将来的版本中将添加其他浏览器数据的同步，请查看开发<a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>路线图</a>以查看计划的内容 </p>",
        "android": "<h4>欢迎使用 xBrowserSync！</h4> <p> xBrowserSync 是 Google，Mozilla，Opera 等提供的浏览器同步服务的免费开放源代码替代品，它尊重您的隐私并为您提供完全的匿名性(请参阅 <a href='https://link.xbrowsersync.org/www' class='new-tab'>网站</a>了解更多信息)。</p> <p>花点时间阅读一下 帮助指南，您可以使用下面的页面链接或在页面之间滑动来熟悉 xBrowserSync。</p> <p>请注意：xBrowserSync 当前仅同步书签。 将来的版本中将添加其他浏览器数据的同步，请查看开发<a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>路线图</a>以查看计划的内容 </p>"
      }
    },
    "Login": {
      "GetSyncId": {
        "Title": {
          "key": "View_Login_GetSyncId_Title",
          "default": "需要同步ID？"
        },
        "Content": {
          "key": "View_Login_GetSyncId_Content",
          "default": "下载xBrowserSync 桌面浏览器扩展并创建一个新的同步来访问您的书签。"
        }
      },
      "Password": {
        "Confirm": {
          "key": "View_Login_Password_Confirm",
          "default": "确认密码"
        },
        "Existing": {
          "key": "View_Login_Password_Existing",
          "default": "您的加密密码"
        },
        "Label": {
          "key": "View_Login_Password_Label",
          "default": "加密密码"
        },
        "New": {
          "key": "View_Login_Password_New",
          "default": "输入加密密码"
        },
        "Show": {
          "key": "View_Login_Password_Show",
          "default": "显示密码"
        }
      },
      "Scan": {
        "Title": {
          "key": "View_Login_Scan_Title",
          "default": "连接到您的同步"
        },
        "Content": {
          "key": "View_Login_Scan_Content",
          "default": "在桌面浏览器上打开 xBrowserSync，进入设置面板，点击你的同步ID，会显示一个二维码，你可以在这里扫描。"
        },
        "ScanCode": {
          "key": "View_Login_Scan_ScanCode",
          "default": "扫描二维码"
        },
        "ManualEntry": {
          "key": "View_Login_Scan_ManualEntry",
          "default": "手动输入同步详细信息"
        }
      },
      "Service": {
        "ApiVersion": {
          "key": "View_Login_Service_ApiVersion",
          "default": "API 版本"
        },
        "Confirm": {
          "key": "View_Login_Service_Confirm",
          "default": "同步到此服务？"
        },
        "Location": {
          "key": "View_Login_Service_Location",
          "default": "位置"
        },
        "MaxSyncSize": {
          "key": "View_Login_Service_MaxSyncSize",
          "default": "最大同步大小"
        },
        "Selected": {
          "key": "View_Login_Service_Selected",
          "default": "同步到"
        },
        "Status": {
          "key": "View_Login_Service_Status",
          "default": "状态"
        },
        "Update": {
          "Label": {
            "key": "View_Login_Service_Update_Label",
            "default": "xBrowserSync 服务 URL"
          },
          "Description": {
            "key": "View_Login_Service_Update_Description",
            "default": "输入替代的 xBrowserSync 服务的 URL。在这里浏览公开的 xBrowserSync 服务列表 <a href='https://link.xbrowsersync.org/service-list' class='new-tab'></a>。"
          },
          "Button": {
            "key": "View_Login_Service_Update_Button",
            "default": "切换服务"
          },
          "Required": {
            "key": "View_Login_Service_Update_Required",
            "default": "URL是必须的"
          },
          "InvalidService": {
            "key": "View_Login_Service_Update_InvalidService",
            "default": "无效的 xBrowserSync 服务"
          },
          "InvalidUrl": {
            "key": "View_Login_Service_Update_InvalidUrl",
            "default": "无效URL"
          },
          "Failed": {
            "key": "View_Login_Service_Update_Failed",
            "default": "无法连接到服务"
          },
          "NotSupported": {
            "key": "View_Login_Service_Update_Failed_NotSupported",
            "default": "此服务正在运行一个不受支持的API版本"
          }
        },
        "Warning": {
          "key": "View_Login_Service_Warning",
          "default": "<strong>重要：</strong> xBrowserSync 服务由志愿者独立运行。服务管理员对您的数据不负责任，因此请记住定期备份。"
        }
      },
      "Sync": {
        "Confirm": {
          "Title": {
            "key": "View_Login_Sync_Confirm_Title",
            "default": "是否确定？"
          },
          "Content": {
            "key": "View_Login_Sync_Confirm_Content",
            "default": "xBrowserSync 将在恢复同步书签之前删除所有本地书签数据。确定继续吗？"
          }
        },
        "DisableOthers": {
          "Title": {
            "key": "View_Login_Sync_DisableOthers_Title",
            "default": "禁用书签同步工具"
          },
          "Content": {
            "key": "View_Login_Sync_DisableOthers_Content",
            "default": "将您的浏览器数据与 xBrowserSync 同步，而其他书签同步工具(如 <a href='https://link.xbrowsersync.org/chrome-sync' class='new-tab'>Google Chrome Sync</a>)正在激活，可能会导致重复并可能损坏数据。 请在继续之前禁用它们。",
            "brave": "在其他书签同步工具(例如<a href='https://link.xbrowsersync.org/brave-sync' class='new-tab'> Brave Sync </a>)处于活动状态的同时，将浏览器数据与xBrowserSync同步，可能导致重复并可能损坏数据。 请先禁用它们，然后再继续。",
            "edge": "使用xBrowserSync同步浏览器数据，同时使用其他书签同步工具(如<a href='https://link.xbrowsersync.org/edge-sync' class='new-tab'> Microsoft Edge Sync </a>) 会导致重复并可能损坏数据。 请在继续之前禁用它们。",
            "firefox": "将您的浏览器数据与 xBrowserSync 同步，而其他书签同步工具(如 <a href='https://link.xbrowsersync.org/firefox-sync' class='new-tab'>Firefox Sync</a>)正在激活，可能会导致重复并可能损坏数据。 请在继续之前禁用它们。"
          }
        },
        "Enable": {
          "key": "View_Login_Sync_Enable",
          "default": "同步"
        },
        "New": {
          "key": "View_Login_Sync_New",
          "default": "创建新同步"
        },
        "UpgradeReady": {
          "Title": {
            "key": "View_Login_Sync_UpgradeReady_Title",
            "default": "准备升级同步吗？"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeReady_Content",
            "default": "<p>此同步ID必须升级才能与此版本的 xBrowserSync同步。 升级后，您将无法与任一旧版本的 xBrowserSync 上的版本同步。</p><p>确保您在继续之前更新所有的 xBrowserSync 应用。准备好继续吗？</p>"
          }
        },
        "UpgradeRequired": {
          "Title": {
            "key": "View_Login_Sync_UpgradeRequired_Title",
            "default": "升级同步"
          },
          "Content": {
            "key": "View_Login_Sync_UpgradeRequired_Content",
            "default": "<p>您的同步必须先升级才能与此版本的 xBrowserSync 同步。</p><p>使用 xBrowserSync 桌面浏览器扩展来升级您的同步，然后在这里重试同步。</p>"
          }
        }
      },
      "SyncId": {
        "Description": {
          "key": "View_Login_SyncId_Description",
          "default": "您的同步 ID"
        },
        "Existing": {
          "key": "View_Login_SyncId_Existing",
          "default": "已有同步ID？"
        },
        "Invalid": {
          "key": "View_Login_SyncId_Invalid",
          "default": "无效的同步 ID"
        },
        "Label": {
          "key": "View_Login_SyncId_Label",
          "default": "ID"
        },
        "New": {
          "key": "View_Login_SyncId_New",
          "default": "获取同步 ID"
        }
      }
    },
    "Permissions": {
      "Title": {
        "key": "View_Permissions_Title",
        "default": "可选权限"
      },
      "Content": {
        "key": "View_Permissions_Content",
        "default": "<p> xBrowserSync 会使用可用的元数据自动丰富使用浏览器的“添加书签”按钮添加的书签。要开启它, xBrowserSync <a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'> 需要额外的权限 </a> 才能读取访问的网站数据。</p><p>请确认您是否愿意授予这些权限，或者您可以随时在“设置”面板中添加或删除权限。</p>"
      }
    },
    "Scan": {
      "Title": {
        "key": "View_Scan_Title",
        "default": "扫描您的同步 ID 二维码"
      },
      "ToggleLight": {
        "key": "View_Scan_ToggleLight",
        "default": "切换明暗"
      }
    },
    "Search": {
      "BookmarkTree": {
        "key": "View_Search_BookmarkTree",
        "default": "显示书签文件夹"
      },
      "Clear": {
        "key": "View_Search_Clear",
        "default": "清除"
      },
      "FolderEmpty": {
        "key": "View_Search_FolderEmpty",
        "default": "文件夹空"
      },
      "NoBookmarks": {
        "key": "View_Search_NoBookmarks",
        "default": "您还没有书签，请添加一些！"
      },
      "NoResults": {
        "key": "View_Search_NoResults",
        "default": "未找到书签"
      },
      "Placeholder": {
        "key": "View_Search_Placeholder",
        "default": "点击输入或搜索书签",
        "android": "查找书签"
      },
      "Pulling": {
        "key": "View_Search_Pulling",
        "default": "下拉来同步"
      },
      "Pulled": {
        "key": "View_Search_Pulled",
        "default": "松开来同步"
      },
      "SearchResults": {
        "key": "View_Search_SearchResults",
        "default": "查看搜索结果"
      }
    },
    "Settings": {
      "BackupRestore": {
        "Title": {
          "key": "View_Settings_BackupRestore_Title",
          "default": "备份和恢复"
        },
        "AutoBackup": {
          "Title": {
            "key": "View_Settings_BackupRestore_AutoBackup_Title",
            "default": "自动备份"
          },
          "Description": {
            "key": "View_Settings_BackupRestore_AutoBackup_Description",
            "default": "自动下载计划中的备份。"
          },
          "RunsAt": {
            "key": "View_Settings_BackupRestore_AutoBackup_RunsAt",
            "default": "备份运行在"
          },
          "Every": {
            "key": "View_Settings_BackupRestore_AutoBackup_Every",
            "default": "每"
          },
          "Numbers": {
            "Single": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Single",
              "default": "一"
            },
            "Two": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Two",
              "default": "二"
            },
            "Three": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Three",
              "default": "三"
            },
            "Four": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Four",
              "default": "四"
            },
            "Five": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Five",
              "default": "五"
            },
            "Six": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Six",
              "default": "六"
            },
            "Seven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Seven",
              "default": "七"
            },
            "Eight": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eight",
              "default": "八"
            },
            "Nine": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Nine",
              "default": "九"
            },
            "Ten": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Ten",
              "default": "十"
            },
            "Eleven": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Eleven",
              "default": "十一"
            },
            "Twelve": {
              "key": "View_Settings_BackupRestore_AutoBackup_Numbers_Twelve",
              "default": "十二"
            }
          },
          "Units": {
            "Day": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Day",
              "default": "天"
            },
            "Week": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Week",
              "default": "周"
            },
            "Month": {
              "key": "View_Settings_BackupRestore_AutoBackup_Units_Month",
              "default": "月"
            }
          },
          "Confirmation": {
            "key": "View_Settings_BackupRestore_AutoBackup_Confirmation",
            "default": "为了防止“另存为...”对话框在下载备份时显示，请禁用浏览器设置“在下载前询问保存每个文件的位置”。"
          }
        },
        "Backup": {
          "Title": {
            "key": "View_Settings_BackupRestore_Backup_Title",
            "default": "备份"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Backup_Button",
            "default": "下载备份"
          },
          "Local": {
            "key": "View_Settings_BackupRestore_Backup_Local",
            "default": "备份本地浏览器数据到文件。"
          },
          "Synced": {
            "key": "View_Settings_BackupRestore_Backup_Synced",
            "default": "备份同步数据到文件。"
          }
        },
        "Restore": {
          "Title": {
            "key": "View_Settings_BackupRestore_Restore_Title",
            "default": "恢复"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Restore_Button",
            "default": "从备份中恢复"
          },
          "Local": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Local_Description",
              "default": "从备份中恢复本地浏览器数据。"
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Local_Confirm",
              "default": "<p>由于同步已禁用，正在恢复的数据将覆盖本地浏览器数据。</p><p>确定继续？</p>"
            }
          },
          "Synced": {
            "Description": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Description",
              "default": "从备份恢复同步数据。"
            },
            "Confirm": {
              "key": "View_Settings_BackupRestore_Restore_Synced_Confirm",
              "default": "<p>由于同步已启用，正在恢复的数据将覆盖您的同步数据。</p><p>要将数据恢复到本地浏览器，请在恢复前禁用同步。</p><p>确定继续吗？</p>",
              "android": "<p>正在恢复的数据将覆盖您同步的数据。</p><p>确定继续吗？</p>"
            }
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Restore_Done",
            "default": "备份已恢复。"
          },
          "SelectFile": {
            "Button": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Button",
              "default": "选择文件"
            },
            "Placeholder": {
              "key": "View_Settings_BackupRestore_Restore_SelectFile_Placeholder",
              "default": "选择要恢复的备份文件"
            }
          },
          "Copy": {
            "key": "View_Settings_BackupRestore_Restore_Copy",
            "default": "复制备份文件的内容以恢复数据。"
          },
          "Paste": {
            "key": "View_Settings_BackupRestore_Restore_Paste",
            "default": "粘贴备份数据"
          },
          "RestoreData": {
            "key": "View_Settings_BackupRestore_Restore_RestoreData",
            "default": "恢复数据"
          },
          "Invalid": {
            "key": "View_Settings_BackupRestore_Restore_Invalid",
            "default": "无效的 xBrowserSync 备份数据"
          }
        },
        "Reset": {
          "Confirm": {
            "key": "View_Settings_BackupRestore_Reset_Confirm",
            "default": "<p>如果你继续， 同步将被禁用，当在 {date} 安装了 xBrowserSync时，您的本地浏览器数据将被重置。</p><p>确定继续？</p>"
          },
          "Button": {
            "key": "View_Settings_BackupRestore_Reset_Button",
            "default": "重置本地数据"
          },
          "Done": {
            "key": "View_Settings_BackupRestore_Reset_Done",
            "default": "本地浏览器数据已重置为初始安装状态。"
          },
          "Unavailable": {
            "key": "View_Settings_BackupRestore_Reset_Unavailable",
            "default": "安装状态数据不可用，无法重置。"
          }
        }
      },
      "Issues": {
        "Title": {
          "key": "View_Settings_Issues_Title",
          "default": "帮助和支持"
        },
        "Help": {
          "Title": {
            "key": "View_Settings_Issues_Help_Title",
            "default": "帮助指南"
          },
          "Description": {
            "key": "View_Settings_Issues_Help_Description",
            "default": "有问题或遇到问题？请务必阅读帮助指南，答案可能就在常见问答中。"
          },
          "ViewFaqs": {
            "key": "View_Settings_Issues_Help_ViewFaqs",
            "default": "查看常见问答"
          }
        },
        "Tracker": {
          "Title": {
            "key": "View_Settings_Issues_Tracker_Title",
            "default": "支持"
          },
          "Description": {
            "key": "View_Settings_Issues_Tracker_Description",
            "default": "需要支持？使用问题跟踪器报告错误或请求功能。"
          },
          "Report": {
            "key": "View_Settings_Issues_Tracker_Report",
            "default": "查看问题跟踪器"
          }
        },
        "Log": {
          "Title": {
            "key": "View_Settings_Issues_Log_Title",
            "default": "应用程序日志"
          },
          "Description": {
            "key": "View_Settings_Issues_Log_Description",
            "default": "当您记录反馈问题时，请下载包含此应用程序的日志。"
          },
          "Clear": {
            "key": "View_Settings_Issues_Log_Clear",
            "default": "清除日志"
          },
          "Download": {
            "key": "View_Settings_Issues_Log_Download",
            "default": "下载日志"
          },
          "Size": {
            "key": "View_Settings_Issues_Log_Size",
            "default": "当前日志大小"
          }
        }
      },
      "Permissions": {
        "Title": {
          "key": "View_Settings_Permissions_Title",
          "default": "可选权限"
        },
        "Add": {
          "key": "View_Settings_Permissions_Add",
          "default": "授予权限"
        },
        "Granted": {
          "key": "View_Settings_Permissions_Granted",
          "default": "已授权"
        },
        "NotGranted": {
          "key": "View_Settings_Permissions_NotGranted",
          "default": "未授权"
        },
        "Read": {
          "Title": {
            "key": "View_Settings_Permissions_Read_Title",
            "default": "读取网站数据"
          },
          "Description": {
            "key": "View_Settings_Permissions_Read_Description",
            "default": "使用浏览器的“添加书签”按钮时，需要自动将元数据添加到书签(<a href='https://link.xbrowsersync.org/optional-perms-faq' class='new-tab'>更多信息</a>)。"
          }
        },
        "Remove": {
          "key": "View_Settings_Permissions_Remove",
          "default": "移除权限"
        }
      },
      "Prefs": {
        "AutoFetchMetadata": {
          "Label": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Label",
            "default": "自动获取书签元数据"
          },
          "Description": {
            "key": "View_Settings_Prefs_AutoFetchMetadata_Description",
            "default": "添加书签时自动获取元数据。"
          }
        },
        "CheckForAppUpdates": {
          "Label": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Label",
            "default": "检查更新"
          },
          "Description": {
            "key": "View_Settings_Prefs_CheckForAppUpdates_Description",
            "default": "当有新版本的 xBrowserSync 时发出通知。"
          }
        },
        "DarkMode": {
          "Label": {
            "key": "View_Settings_Prefs_DarkMode_Label",
            "default": "启用暗色模式"
          },
          "Description": {
            "key": "View_Settings_Prefs_DarkMode_Description",
            "default": "适合在低光环境中使用。"
          }
        },
        "DefaultToFolderView": {
          "Label": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Label",
            "default": "显示书签文件夹"
          },
          "Description": {
            "key": "View_Settings_Prefs_DefaultToFolderView_Description",
            "default": "默认显示书签文件夹。"
          }
        },
        "SearchBar": {
          "Label": {
            "key": "View_Settings_Prefs_SearchBar_Label",
            "default": "切换搜索栏位置"
          },
          "Description": {
            "key": "View_Settings_Prefs_SearchBar_Description",
            "default": "在结果下方显示搜索栏。"
          }
        },
        "SyncToolbar": {
          "Label": {
            "key": "View_Settings_Prefs_SyncToolbar_Label",
            "default": "同步书签工具栏"
          },
          "Description": {
            "key": "View_Settings_Prefs_SyncToolbar_Description",
            "default": "禁用此设置可在同步的浏览器中显示不同的工具栏书签。"
          },
          "Confirmation": {
            "key": "View_Settings_Prefs_SyncToolbar_Confirmation",
            "default": "<p>启用此设置将用您的同步书签替换当前书签工具栏中的书签。</p><p>确定继续吗？</p>"
          }
        },
        "Telemetry": {
          "Label": {
            "key": "View_Settings_Prefs_Telemetry_Label",
            "default": "启用遥测器"
          },
          "Description": {
            "key": "View_Settings_Prefs_Telemetry_Description",
            "default": "偶尔发送匿名技术数据以帮助改进 xBrowserSync。"
          }
        },
        "Title": {
          "key": "View_Settings_Prefs_Title",
          "default": "首选项"
        }
      },
      "Sync": {
        "Title": {
          "key": "View_Settings_Sync_Title",
          "default": "同步"
        },
        "Disable": {
          "key": "View_Settings_Sync_Disable",
          "default": "禁用同步"
        },
        "Id": {
          "Label": {
            "key": "View_Settings_Sync_Id_Label",
            "default": "同步 ID"
          },
          "Description": {
            "key": "View_Settings_Sync_Id_Description",
            "default": "使用您的同步 ID 连接到其他设备上的已同步数据(点击显示二维码)。"
          }
        },
        "Data": {
          "Label": {
            "key": "View_Settings_Sync_Data_Label",
            "default": "数据用量"
          },
          "Description": {
            "key": "View_Settings_Sync_Data_Description",
            "default": "您正在使用服务允许的同步数据量。"
          }
        },
        "Service": {
          "key": "View_Settings_Sync_Service",
          "default": "服务"
        },
        "UpdatesAvailable": {
          "False": {
            "key": "View_Settings_Sync_UpdatesAvailable_False",
            "default": "上次同步 {date}"
          },
          "True": {
            "key": "View_Settings_Sync_UpdatesAvailable_True",
            "default": "准备同步 (计划为 {date})"
          },
          "Sync": {
            "key": "View_Settings_Sync_UpdatesAvailable_Sync",
            "default": "立即同步"
          }
        },
        "Qr": {
          "Description": {
            "key": "View_Settings_Sync_Qr_Description",
            "default": "使用 xBrowserSync Android 应用程序扫描此二维码以连接到您的同步数据。"
          },
          "Show": {
            "key": "View_Settings_Sync_Qr_Show",
            "default": "显示二维码"
          },
          "Copy": {
            "key": "View_Settings_Sync_Qr_Copy",
            "default": "复制同步ID到剪贴板"
          },
          "Copied": {
            "key": "View_Settings_Sync_Qr_Copied",
            "default": "已复制！"
          }
        }
      },
      "NotAvailable": {
        "key": "View_Settings_NotAvailable",
        "default": "启用同步时可用设置。"
      },
      "FileDownloaded": {
        "key": "View_Settings_FileDownloaded",
        "default": "文件已保存到下载"
      },
      "Support": {
        "key": "View_Settings_Support",
        "default": "支持 xBrowserSync"
      }
    },
    "Support": {
      "Title": {
        "key": "View_Support_Title",
        "default": "支持 xBrowserSync!"
      },
      "Content": {
        "key": "View_Support_Content",
        "default": "<p>我们想要将 xBrowserSync 变成一个浏览器同步工具。 但还有很多事情要做：</p><ul><li>添加浏览器标签和历史同步</li><li>支持所有主要桌面浏览器</li><li>翻译成其他语言</li><li> <a href='https://link.xbrowsersync.org/roadmap' class='new-tab'>更多</a>！</li></ul><p>只有在您的支持下，我们才能继续改进xBrowserSync 并确保它在保护在线隐私和提高生产率方面仍然有效。</p>"
      },
      "Cryptos": {
        "key": "View_Support_Cryptos",
        "default": "加密"
      },
      "Liberapay": {
        "key": "View_Support_Liberapay",
        "default": "Liberapay"
      },
      "Patreon": {
        "key": "View_Support_Patreon",
        "default": "Patreon"
      }
    },
    "SyncRemoved": {
      "Title": {
        "key": "View_SyncRemoved_Title",
        "default": "同步未找到"
      },
      "Content": {
        "key": "View_SyncRemoved_Content",
        "default": "<p>您的同步未找到可能因为没有活动而被删除。</p><p>您将需要创建一个新的同步, 但首先点击下面的按钮下载您同步数据的备份，然后恢复到新的同步状态。</p>"
      }
    },
    "TelemetryCheck": {
      "Title": {
        "key": "View_TelemetryCheck_Title",
        "default": "发送匿名遥测？"
      },
      "Content": {
        "key": "View_TelemetryCheck_Content",
        "default": "<p>xBrowserSync 与传统应用程序不同，因为它是一个完全匿名的隐私优先工具。 维护这样一个工具具有挑战性，因为我们无法访问用户数据来帮助确定如何最好地部署我们有限的资源。 因此，我们请求您允许偶尔发送匿名技术数据，以帮助我们改进 xBrowserSync。</p><p>此遥测数据不包括任何个人或识别数据，也不包括您的任何加密同步数据，并且永远不会 与任何第三方共享（您可以随时在“设置”面板中选择加入或退出）。</p>"
      }
    },
    "Updated": {
      "Title": {
        "key": "View_Updated_Title",
        "default": "已更新到"
      },
      "Content": {
        "key": "View_Updated_Content",
        "default": "xBrowserSync 已经更新了最新功能和修复。关于此版本中包含的更改的更多详情，请查看发布说明。"
      }
    },
    "Working": {
      "Restoring": {
        "key": "View_Working_Restoring",
        "default": "正在恢复"
      },
      "Resetting": {
        "key": "View_Working_Resetting",
        "default": "重置中"
      },
      "Syncing": {
        "key": "View_Working_Syncing",
        "default": "正在同步"
      }
    }
  }
}
</file>

<file path="res/webext/images/notification.svg">
<svg width="128" height="128" version="1.1" viewBox="-500 277 128 128" xmlns="http://www.w3.org/2000/svg"><g fill="#0A323D"><polygon points="-403.5 314.7 -429.4 299.5 -429.5 284.6 -403.5 299.6"/><polygon points="-403.3 374.8 -429.3 359.7 -429.3 344.6 -403.4 359.8"/><polygon points="-416.4 367.3 -442.4 352.2 -442.4 337.2 -416.5 352.3"/><polygon points="-416.5 337.3 -442.5 322.1 -442.5 307.1 -416.5 322.2"/><polygon points="-429.5 359.8 -455.5 344.7 -455.5 329.7 -429.6 344.8"/><polygon points="-442.5 382.4 -468.5 367.3 -468.5 352.3 -442.6 367.3"/><polygon points="-442.6 352.3 -468.6 337.3 -468.6 322.2 -442.7 337.3"/><polygon points="-455.7 344.8 -481.8 329.8 -481.8 314.8 -455.8 329.8"/><polygon points="-455.6 405 -481.5 389.9 -481.7 374.8 -455.6 390"/></g><g fill="#267D91"><polygon points="-403.5 299.6 -429.5 284.6 -416.4 277 -390.5 292"/><polygon points="-403.4 359.8 -429.3 344.6 -416.3 337.1 -390.2 352.2"/><polygon points="-416.5 352.3 -442.4 337.2 -429.4 329.6 -403.4 344.7"/><polygon points="-416.5 322.2 -442.5 307.1 -429.4 299.5 -403.5 314.7"/><polygon points="-429.6 344.8 -455.5 329.7 -442.5 322.1 -416.5 337.3"/><polygon points="-442.6 367.3 -468.5 352.3 -455.5 344.7 -429.5 359.8"/><polygon points="-442.7 337.3 -468.6 322.2 -455.6 314.7 -429.6 329.8"/><polygon points="-455.8 329.8 -481.8 314.8 -468.7 307.2 -442.7 322.3"/><polygon points="-455.6 390 -481.7 374.8 -468.5 367.3 -442.5 382.4"/></g><g fill="#71D2E2"><polygon points="-390.5 292 -390.3 307.1 -403.5 314.7 -403.5 299.6"/><polygon points="-390.2 352.2 -390.2 367.2 -403.3 374.8 -403.4 359.8"/><polygon points="-403.4 344.7 -403.4 359.8 -416.4 367.3 -416.5 352.3"/><polygon points="-403.5 314.7 -403.4 329.7 -416.5 337.3 -416.5 322.2"/><polygon points="-416.5 337.3 -416.5 352.3 -429.5 359.8 -429.6 344.8"/><polygon points="-429.5 359.8 -429.5 374.8 -442.5 382.4 -442.6 367.3"/><polygon points="-429.6 329.8 -429.6 344.8 -442.6 352.3 -442.7 337.3"/><polygon points="-442.7 322.3 -442.7 337.3 -455.7 344.8 -455.8 329.8"/><polygon points="-442.5 382.4 -442.5 397.4 -455.6 405 -455.6 390"/></g></svg>
</file>

<file path="res/webext/app.html">
<!doctype html>
<html ng-csp>

<head>
  <meta charset="utf-8">
  <link href="assets/app.css" rel="stylesheet">
  <link rel="preload" href="assets/roboto-condensed-all-400-normal.woff" as="font" type="font/woff"
        crossorigin="anonymous">
  <link rel="preload" href="assets/roboto-condensed-all-400-italic.woff" as="font" type="font/woff"
        crossorigin="anonymous">
  <link rel="preload" href="assets/roboto-condensed-all-700-normal.woff" as="font" type="font/woff"
        crossorigin="anonymous">
  <link rel="preload" href="assets/roboto-condensed-all-700-italic.woff" as="font" type="font/woff"
        crossorigin="anonymous">
  <link rel="preload" href="assets/source-code-pro-all-500-normal.woff" as="font" type="font/woff"
        crossorigin="anonymous">
</head>

<body>
  <app></app>
  <script src="assets/vendor.js"></script>
  <script src="assets/app.js"></script>
</body>

</html>
</file>

<file path="res/webext/background.html">
<!doctype html>
<html ng-csp>

<head>
  <meta charset="utf-8">
</head>

<body>
  <webext-background></webext-background>
  <script src="assets/vendor.js"></script>
  <script src="assets/background.js"></script>
</body>

</html>
</file>

<file path="res/webext/manifest.json">
{
  "manifest_version": 2,
  "name": "__MSG_App_Title_Default__",
  "description": "__MSG_App_Description_Default__",
  "icons": {
    "48": "assets/icon48.png",
    "128": "assets/icon128.png"
  },
  "default_locale": "en",
  "browser_action": {
    "default_icon": {
      "32": "assets/notsynced.png"
    },
    "default_popup": "app.html",
    "default_title": "__MSG_App_Title_Default__"
  },
  "background": {
    "page": "background.html"
  },
  "commands": {
    "_execute_browser_action": {
      "suggested_key": {
        "default": "Ctrl+Space",
        "mac": "MacCtrl+Space"
      }
    }
  },
  "content_security_policy": "connect-src *; default-src 'none'; font-src 'self' data:; img-src 'self' data:; script-src 'self'; style-src 'self' 'unsafe-inline';",
  "permissions": [
    "activeTab",
    "alarms",
    "bookmarks",
    "downloads",
    "notifications",
    "storage",
    "tabs",
    "unlimitedStorage"
  ],
  "optional_permissions": ["http://*/", "https://*/"],
  "incognito": "not_allowed"
}
</file>

<file path="scripts/android-utils.js">
const getAndroidVersionCode = (version) => {
  const versionArr = version.split('.');
  const build = versionArr.pop();
  return `${versionArr.map((x) => x.replace(/\D/g, '')).join('')}${build.padStart(2, 0)}`;
};

module.exports = {
  getAndroidVersionCode
};
</file>

<file path="scripts/create-apk-package.js">
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

const version = fs.readFileSync(path.resolve(__dirname, '../PACKAGE_VERSION'), 'utf8');
const pathToApk = path.resolve(
  __dirname,
  '../build/android/platforms/android/app/build/outputs/apk/release/app-release.apk'
);
const outputDir = path.resolve(__dirname, '../dist');
const outputFilePath = `${outputDir}/xbrowsersync_${version}_android.apk`;
const pathToKeyStore = path.resolve(__dirname, '../build/android/xbrowsersync.keystore');
const signingAlias = process.env.SIGNING_ALIAS;
const signingPassword = process.env.SIGNING_PASSWORD;
const signingStorePassword = process.env.SIGNING_STORE_PASSWORD;

if (!signingAlias || !signingPassword || !signingStorePassword) {
  throw new Error('Signing values incomplete');
}

if (fs.existsSync(pathToApk)) {
  fs.unlinkSync(pathToApk);
}
if (fs.existsSync(outputFilePath)) {
  fs.unlinkSync(outputFilePath);
}

const runCommand = (command, cwd, callback) => {
  const options = { shell: true };
  if (cwd) {
    options.cwd = cwd;
  }
  exec(command, options, (error, stdout, stderr) => {
    if (error) {
      if (stderr) {
        console.log(stderr);
      }

      throw error;
    }
    if (stderr) {
      console.log(stderr);
    }

    callback(stdout);
  });
};

runCommand(
  `cordova build android --release -- --keystore=${pathToKeyStore} --storePassword=${signingStorePassword} --alias=${signingAlias} --password=${signingPassword}`,
  './build/android',
  () => {
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir);
    }
    fs.copyFileSync(pathToApk, outputFilePath);
  }
);
</file>

<file path="scripts/create-zip-package.js">
const fs = require('fs');
const path = require('path');
const zipdir = require('zip-dir');

const platform = process.argv[2] || 'chromium';
const version = fs.readFileSync(path.resolve(__dirname, '../PACKAGE_VERSION'), 'utf8');
const dirToZip = path.resolve(__dirname, `../build/${platform}`);
const outputDir = './dist';
const outputFilePath = `${outputDir}/xbrowsersync_${version}_${platform}.${platform === 'firefox' ? 'xpi' : 'zip'}`;

if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir);
}
zipdir(dirToZip, { saveTo: outputFilePath }, (err) => {
  if (err) {
    throw err;
  }
});
</file>

<file path="scripts/update-build-number.js">
const fs = require('fs');
const path = require('path');
const xml2js = require('xml2js');
const { getAndroidVersionCode } = require('./android-utils');

const platform = process.argv[2] ?? 'chromium';
const buildNum = process.argv[3] ?? process.env.GITHUB_RUN_NUMBER ?? 0;
const isBetaRelease = JSON.parse(process.env.BETA ?? 'false');

const packageFilePath = path.resolve(__dirname, `../package.json`);
const packageFile = require(packageFilePath);
const versionNum = `${packageFile.version}.${buildNum}`;
const versionName = isBetaRelease ? `${packageFile.version}-beta.${buildNum}` : packageFile.version;
const versionFileName = path.resolve(__dirname, '../PACKAGE_VERSION');
fs.writeFileSync(versionFileName, `${isBetaRelease ? versionName : versionNum}`);

const updateBuildNumberForWebext = (platformName) => {
  const fileName = path.resolve(__dirname, `../build/${platformName}/manifest.json`);
  const file = require(fileName);
  file.version = versionNum;
  file.version_name = `${versionName}`;
  fs.writeFileSync(fileName, JSON.stringify(file, null, 2));
};

const updateBuildNumberForAndroid = () => {
  const filePath = path.resolve(__dirname, '../build/android/config.xml');
  const parser = new xml2js.Parser();
  const builder = new xml2js.Builder();

  const data = fs.readFileSync(filePath);
  parser.parseString(data, (err, result) => {
    result.widget.$.version = `${versionName}`;
    result.widget.$['android-versionCode'] = getAndroidVersionCode(versionNum);
    const xml = builder.buildObject(result);
    fs.writeFileSync(filePath, xml);
  });
};

switch (platform) {
  case 'chromium':
  case 'firefox':
    updateBuildNumberForWebext(platform);
    break;
  case 'android':
    updateBuildNumberForAndroid();
    break;
  default:
    throw new Error('No platform specified');
}
</file>

<file path="src/@types/global.d.ts">
/* eslint-disable @typescript-eslint/no-explicit-any */

interface Window {
  cordova: Cordova;
  device: any;
  NativeStorage: any;
  plugins: any;
  QRScanner: any;
  resolveLocalFileSystemURL: any;
  SpinnerDialog: any;
  sqlitePlugin: any;
}

interface Cordova {
  file: any;
  getAppVersion: any;
  InAppBrowser: any;
}

interface CordovaPlugins {
  backgroundMode: any;
  clipboard: any;
  exit: () => void;
  snackbar: any;
}

interface Navigator {
  brave: any;
  globalization: any;
}
</file>

<file path="src/modules/android/android-app/android-app-alert/android-app-alert.component.ts">
import angular from 'angular';
import { Component } from 'angular-ts-decorators';
import { AlertType } from '../../../shared/alert/alert.enum';
import { AlertService } from '../../../shared/alert/alert.service';
import { AndroidError } from '../../../shared/errors/errors';
import { ExceptionHandler } from '../../../shared/errors/errors.interface';
import Globals from '../../../shared/global-shared.constants';
import { AndroidPlatformService } from '../../android-shared/android-platform/android-platform.service';
import { AndroidAlert } from '../android-app.interface';

@Component({
  selector: 'appAlert'
})
export class AndroidAppAlertComponent {
  Strings = require('../../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $scope: ng.IScope;
  platformSvc: AndroidPlatformService;

  static $inject = ['$exceptionHandler', '$scope', 'AlertService', 'PlatformService'];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $scope: ng.IScope,
    AlertSvc: AlertService,
    PlatformSvc: AndroidPlatformService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$scope = $scope;
    this.platformSvc = PlatformSvc;

    $scope.$watch(
      () => AlertSvc.currentAlert,
      (newVal, oldVal) => {
        if (newVal !== oldVal && !angular.isUndefined(newVal ?? undefined)) {
          this.displayAlert(newVal);
        }
      }
    );
  }

  displayAlert(alert: AndroidAlert): void {
    // Strip html tags from message
    const urlInAlert = alert.message?.match(new RegExp(Globals.URL.ValidUrlRegex, 'i'))?.find(Boolean);
    const descriptionStripped = urlInAlert
      ? new DOMParser().parseFromString(`<span>${alert.message}</span>`, 'text/xml').firstElementChild.textContent
      : alert.message;

    // Add an action to open url if provided or if the message contains a url
    if (!alert.actionCallback && urlInAlert) {
      const urlToOpenOnClick = urlInAlert;
      alert.action = this.platformSvc.getI18nString(this.Strings.Alert.Go);
      alert.actionCallback = () => {
        this.platformSvc.openUrl(urlToOpenOnClick);
      };
    }

    // Join title and description to form alert text
    const text = `${[alert.title, descriptionStripped.replace(/\.$/, '')].filter(Boolean).join('. ')}.`;
    const textColor = '#ffffff';
    let bgColor = null;
    switch (alert.type) {
      case AlertType.Error:
        bgColor = '#ea3869';
        break;
      case AlertType.Warning:
        bgColor = '#bdc71b';
        break;
      case AlertType.Information:
      default:
        bgColor = '#083039';
        break;
    }
    const success = (clicked) => {
      if (clicked && alert.actionCallback) {
        alert.actionCallback();
      }
    };
    const failure = (errMessage) => {
      this.$exceptionHandler(new AndroidError('Failed to create snackbar'), errMessage);
    };

    // Ensure soft keyboard is hidden
    if (document.activeElement) {
      (document.activeElement as HTMLInputElement).blur();
    }

    // Display snackbar
    window.cordova.plugins.snackbar.create(text, 5000, bgColor, textColor, 3, alert.action, success, failure);
  }
}
</file>

<file path="src/modules/android/android-app/android-app-backup-restore-settings/android-app-backup-restore-settings.component.ts">
import { Component } from 'angular-ts-decorators';
import { BackupRestoreSettingsComponent } from '../../../app/app-settings/backup-restore-settings/backup-restore-settings.component';

@Component({
  controllerAs: 'vm',
  selector: 'backupRestoreSettings',
  styles: [require('../../../app/app-settings/backup-restore-settings/backup-restore-settings.component.scss')],
  template: require('../../../app/app-settings/backup-restore-settings/backup-restore-settings.component.html')
})
export class AndroidAppBackupRestoreSettingsComponent extends BackupRestoreSettingsComponent {}
</file>

<file path="src/modules/android/android-app/android-app-bookmark/android-app-bookmark.component.scss">
@import '../../../../styles/modules/all';

app-bookmark {
  .mobile-landscape {
    min-height: 2.9rem;

    @media (orientation: landscape) {
      display: flex;
      flex: 1 0;
      flex-direction: row;
      overflow: auto;
    }
  }

  .tags-container {
    .badge {
      font-size: 1rem;
      line-height: 1.3rem;
    }

    .label {
      border-radius: $border-radius-input;
      margin: 0 0.5rem 0.6rem 0;
      padding: 0.6rem 1rem;
    }

    @media (orientation: landscape) {
      flex: auto;
      height: 100%;
      margin: 0;
      max-height: none;
    }
  }

  .tags-input-container {
    @media (orientation: landscape) {
      height: 2.9rem;
      margin-right: 1rem;
      width: 40%;

      input {
        line-height: 2rem;
      }
    }
  }

  .textarea-container {
    max-height: 15rem;

    @media (orientation: landscape) {
      flex: 1 0 4rem;
    }
  }
}
</file>

<file path="src/modules/android/android-app/android-app-bookmark/android-app-bookmark.component.ts">
import angular from 'angular';
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AppEventType } from '../../../app/app.enum';
import { AppBookmarkComponent } from '../../../app/app-bookmark/app-bookmark.component';
import { AppHelperService } from '../../../app/shared/app-helper/app-helper.service';
import { AlertType } from '../../../shared/alert/alert.enum';
import { AlertService } from '../../../shared/alert/alert.service';
import { Bookmark, BookmarkMetadata } from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { ExceptionHandler } from '../../../shared/errors/errors.interface';
import Globals from '../../../shared/global-shared.constants';
import { PlatformService } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { SettingsService } from '../../../shared/settings/settings.service';
import { SyncType } from '../../../shared/sync/sync.enum';
import { SyncService } from '../../../shared/sync/sync.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingService } from '../../../shared/working/working.service';
import { AndroidPlatformService } from '../../android-shared/android-platform/android-platform.service';
import { AndroidAlert } from '../android-app.interface';
import { AndroidAppHelperService } from '../shared/android-app-helper/android-app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appBookmark',
  styles: [require('./android-app-bookmark.component.scss')],
  template: require('../../../app/app-bookmark/app-bookmark.component.html')
})
export class AndroidAppBookmarkComponent extends AppBookmarkComponent implements OnInit {
  appHelperSvc: AndroidAppHelperService;
  logSvc: LogService;
  platformSvc: AndroidPlatformService;
  settingsSvc: SettingsService;
  syncSvc: SyncService;

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$routeParams',
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'BookmarkHelperService',
    'LogService',
    'PlatformService',
    'SettingsService',
    'SyncService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $routeParams: ng.route.IRouteParamsService,
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    super(
      $exceptionHandler,
      $q,
      $routeParams,
      $scope,
      $timeout,
      AlertSvc,
      AppHelperSvc,
      BookmarkHelperSvc,
      PlatformSvc,
      UtilitySvc,
      WorkingSvc
    );

    this.logSvc = LogSvc;
    this.settingsSvc = SettingsSvc;
    this.syncSvc = SyncSvc;

    // If user cancels loading bookmark metadata
    $scope.$on(AppEventType.WorkingCancelAction, () => {
      if (this.platformSvc.cancelGetPageMetadata) {
        this.platformSvc.cancelGetPageMetadata();
      }
    });
  }

  @boundMethod
  createBookmark(): ng.IPromise<void> {
    return super.createBookmark().then((result) => {
      this.$timeout(() => {
        this.alertSvc.currentAlert = {
          message: this.platformSvc.getI18nString(this.Strings.Alert.BookmarkCreated)
        } as AndroidAlert;
      }, Globals.InterfaceReadyTimeout);
    });
  }

  @boundMethod
  deleteBookmark(): ng.IPromise<void> {
    // Get current cached bookmarks for undo
    return this.bookmarkHelperSvc.getCachedBookmarks().then((cachedBookmarks) => {
      return super.deleteBookmark().then(() => {
        this.$timeout(() => {
          this.alertSvc.currentAlert = {
            action: this.platformSvc.getI18nString(this.Strings.Button.Undo),
            actionCallback: () => this.undoBookmarkAction(cachedBookmarks),
            message: this.platformSvc.getI18nString(this.Strings.Alert.BookmarkDeleted)
          } as AndroidAlert;
        }, Globals.InterfaceReadyTimeout);
      });
    });
  }

  getMetadataForCurrentPage(): ng.IPromise<Boolean | BookmarkMetadata> {
    if (angular.isUndefined(this.platformSvc.sharedBookmark)) {
      return this.$q.resolve(undefined);
    }

    // Show a message if current page has no url - user shared an value that did not contain a valid url
    if (angular.isUndefined(this.platformSvc.sharedBookmark.url)) {
      this.alertSvc.currentAlert = {
        message: this.platformSvc.getI18nString(this.Strings.View.Bookmark.InvalidUrlShared),
        type: AlertType.Error
      };
      return this.$q.resolve().then(() => false);
    }

    // Check auto fetch metadata preference before retrieving metadata
    this.bookmarkFormData = this.platformSvc.sharedBookmark;
    this.originalUrl = this.bookmarkFormData.url;
    return this.settingsSvc.autoFetchMetadata().then((autoFetchMetadata) => {
      if (!autoFetchMetadata) {
        this.displayUpdatePropertiesButton = true;
        return this.platformSvc.sharedBookmark;
      }
      return super.getMetadataForCurrentPage();
    });
  }

  ngOnInit(): ng.IPromise<void> {
    return super.ngOnInit().finally(() => {
      // Clear current page
      this.platformSvc.sharedBookmark = undefined;
    });
  }

  undoBookmarkAction(bookmarks: Bookmark[]): void {
    // Sync pre-change bookmarks and refresh display
    this.workingSvc.show();
    this.platformSvc
      .queueSync({
        bookmarks,
        type: SyncType.LocalAndRemote
      })
      .finally(() => this.utilitySvc.broadcastEvent(AppEventType.RefreshBookmarkSearchResults));
  }

  @boundMethod
  updateBookmark(): ng.IPromise<void> {
    // Get current cached bookmarks for undo
    return this.bookmarkHelperSvc.getCachedBookmarks().then((cachedBookmarks) => {
      return super.updateBookmark().then(() => {
        this.$timeout(() => {
          this.alertSvc.currentAlert = {
            action: this.platformSvc.getI18nString(this.Strings.Button.Undo),
            actionCallback: () => this.undoBookmarkAction(cachedBookmarks),
            message: this.platformSvc.getI18nString(this.Strings.Alert.BookmarkUpdated)
          } as AndroidAlert;
        }, Globals.InterfaceReadyTimeout);
      });
    });
  }
}
</file>

<file path="src/modules/android/android-app/android-app-scan/android-app-scan.component.html">
<div class="view-content" ng-if="vm.displayScanInterface">
  <h3>{{ vm.platformSvc.getI18nString(vm.Strings.View.Scan.Title) }}</h3>
  <div class="validation" ng-show="vm.invalidSyncId">
    {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.SyncId.Invalid) }}
  </div>
  <div class="buttons">
    <icon-button type="vm.lightEnabled ? 'flashlight-off' : 'flashlight'" fab="true"
                 title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Scan.ToggleLight) }}"
                 ng-class="{ 'enabled': vm.lightEnabled }" on-click="vm.utilitySvc.handleEvent(vm.toggleCameraLight)">
    </icon-button>
    <icon-button type="'x'" fab="true" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.Cancel) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.close)"></icon-button>
  </div>
</div>
</file>

<file path="src/modules/android/android-app/android-app-scan/android-app-scan.component.scss">
@import '../../../../styles/modules/all';

app-scan {
  --color-button-fab-bg: #{$color-bg3-default};
  --color-button-fab-text: #{$color-text2-default};

  display: block;

  @include theme-dark {
    --color-button-fab-bg: #{$color-text3-dark};
    --color-button-fab-text: #{$color-text1-dark};
  }

  h3 {
    font-size: 1rem;
    left: 0;
    position: fixed;
    right: 0;
    text-align: center;
    top: 12vh;
  }

  .buttons {
    bottom: 20vh;
    left: 0;
    position: fixed;
    right: 0;

    icon-button {
      &.enabled {
        button {
          background-color: var(--color-warning);
        }
      }
    }
  }

  .validation {
    font-size: 1rem;
    padding: 0.25em 1em;
    position: absolute;
    top: 42vh;
  }

  .view-content {
    border-color: rgba(0, 0, 0, 0.5);
    border-style: solid;
    border-width: 25vh 15vw 40vh;
    padding: 0 !important;
  }

  @media (orientation: landscape) {
    h3 {
      top: 15vh;
    }

    .buttons {
      bottom: 10vh;
    }

    .validation {
      top: 47vh;
    }

    .view-content {
      border-width: 27vh 40vw 32vh;
    }
  }
}
</file>

<file path="src/modules/android/android-app/android-app-scan/android-app-scan.component.ts">
import { Component, OnDestroy, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { ApiSyncInfo } from '../../../shared/api/api.interface';
import { AndroidError, FailedScanError, InvalidSyncInfoError } from '../../../shared/errors/errors';
import Globals from '../../../shared/global-shared.constants';
import { PlatformService } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { AndroidAppHelperService } from '../shared/android-app-helper/android-app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appScan',
  styles: [require('./android-app-scan.component.scss')],
  template: require('./android-app-scan.component.html')
})
export class AndroidAppScanComponent implements OnInit, OnDestroy {
  Strings = require('../../../../../res/strings/en.json');

  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  appHelperSvc: AndroidAppHelperService;
  logSvc: LogService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  displayScanInterface = false;
  invalidSyncId = false;
  lightEnabled = false;

  static $inject = [
    '$q',
    '$timeout',
    'AppHelperService',
    'LogService',
    'PlatformService',
    'StoreService',
    'UtilityService'
  ];
  constructor(
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AndroidAppHelperService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  close(): void {
    this.appHelperSvc.switchView();
  }

  decodeQrCode(qrCodeValue: string): ApiSyncInfo {
    const syncInfo = JSON.parse(qrCodeValue) as ApiSyncInfo;
    if (!syncInfo?.id || !syncInfo?.serviceType || !syncInfo?.version) {
      throw new InvalidSyncInfoError('Invalid QR code');
    }
    return syncInfo;
  }

  disableLight(): ng.IPromise<void> {
    if (!this.lightEnabled) {
      return this.$q.resolve();
    }

    return this.$q<void>((resolve, reject) => {
      window.QRScanner.disableLight((err: any) => {
        if (err) {
          return reject(new AndroidError(err._message ?? err.name ?? err.code));
        }
        resolve();
      });
    });
  }

  enableLight(): ng.IPromise<void> {
    return this.$q<void>((resolve, reject) => {
      window.QRScanner.enableLight((err: any) => {
        if (err) {
          return reject(new AndroidError(err._message ?? err.name ?? err.code));
        }
        resolve();
      });
    });
  }

  ngOnDestroy(): void {
    this.stopScanning();
  }

  ngOnInit(): void {
    this.startScanning();
  }

  scanCompleted(scannedSyncInfo: ApiSyncInfo): ng.IPromise<void> {
    // Update stored sync info
    return this.storeSvc
      .set(StoreKey.SyncInfo, scannedSyncInfo)
      .then(() => this.appHelperSvc.switchView())
      .then(() => this.appHelperSvc.focusOnElement('.active-login-form  input[name="txtPassword"]'));
  }

  startScanning(): ng.IPromise<void> {
    this.lightEnabled = false;
    this.invalidSyncId = false;

    return this.$q<ApiSyncInfo>((resolve, reject) => {
      const waitForScan = () => {
        this.displayScanInterface = true;

        this.$timeout(() => {
          this.invalidSyncId = false;
        }, 100);

        window.QRScanner.scan((err: any, scannedText: string): void => {
          if (err) {
            return reject(new AndroidError(err._message ?? err.name ?? err.code));
          }

          window.QRScanner.pausePreview(() => {
            this.logSvc.logInfo(`Scanned: ${scannedText}`);

            let syncInfo: ApiSyncInfo;
            try {
              syncInfo = this.decodeQrCode(scannedText);
            } catch (decodeQrCodeErr) {
              // If scanned value is not value resume scanning
              this.invalidSyncId = true;
              this.$timeout(() => window.QRScanner.resumePreview(waitForScan), 3e3);
              return;
            }

            this.$timeout(() => resolve(syncInfo), 1e3);
          });
        });
      };

      window.QRScanner.prepare((err: any, status: any) => {
        if (err) {
          return reject(new AndroidError(err._message ?? err.name ?? err.code));
        }

        if (status.authorized) {
          window.QRScanner.show(() => waitForScan());
        } else {
          reject(new AndroidError('Camera use not authorised'));
        }
      });
    })
      .then((scanResult) => this.scanCompleted(scanResult))
      .catch((err) => {
        this.appHelperSvc.switchView().then(() => {
          throw new FailedScanError(undefined, err);
        });
      });
  }

  stopScanning(): void {
    this.displayScanInterface = false;
    this.lightEnabled = false;
    this.$timeout(
      () =>
        this.disableLight()
          .catch(() => {})
          .finally(() => window.QRScanner.hide(() => window.QRScanner.destroy())),
      Globals.InterfaceReadyTimeout
    );
  }

  @boundMethod
  toggleCameraLight(switchOn?: boolean): ng.IPromise<void> {
    // If state was elected toggle light based on value
    if (switchOn !== undefined) {
      return (switchOn ? this.enableLight() : this.disableLight()).then(() => {
        this.lightEnabled = switchOn;
      });
    }

    // Otherwise toggle light based on current state
    return this.$q((resolve, reject) => {
      window.QRScanner.getStatus((status: any) => {
        (status.lightEnabled ? this.disableLight() : this.enableLight())
          .then(() => {
            this.lightEnabled = !status.lightEnabled;
            resolve();
          })
          .catch(reject);
      });
    });
  }
}
</file>

<file path="src/modules/android/android-app/android-app-scan/android-app-scan.controller.html">
<app-scan class="view"></app-scan>
</file>

<file path="src/modules/android/android-app/android-app-search/android-app-search.component.scss">
@import '../../../../styles/modules/all';

app-search {
  --color-pull-to-refresh-link: #{$color-text2-default};

  @include theme-dark {
    --color-pull-to-refresh-link: #{$color-text3-dark};
  }

  bookmark {
    &:not(.folder) {
      & > .bookmark-content > .bookmark-heading {
        margin-right: 0;
        transition: none;
      }
    }

    &.folder > .bookmark-content > .bookmark-heading:not(.opening)::after {
      opacity: 0.6;
    }
  }

  .header-panel,
  .search-results-container {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }

  .header-panel {
    display: flex;
    flex-direction: row-reverse;
  }

  .btn-add-bookmark {
    bottom: 2rem;
    position: fixed;
    right: 1rem;
    z-index: 1000;
  }

  /* stylelint-disable-next-line selector-class-pattern */
  .ptr--ptr {
    box-shadow: none !important;

    /* stylelint-disable-next-line selector-class-pattern */
    .ptr--box {
      margin: 0;
      padding: 15px;
    }

    /* stylelint-disable-next-line selector-class-pattern */
    .ptr--icon {
      display: none;
    }

    /* stylelint-disable-next-line selector-class-pattern */
    .ptr--text {
      color: var(--color-pull-to-refresh-link);
      font-size: 0.9rem;
      margin-top: 0;
      opacity: 0.5;
    }
  }

  .search-results-container {
    & > h4 {
      margin: 1rem;
    }
  }

  .view-content {
    padding-left: 0;

    &.search-bar-bottom {
      flex-direction: column-reverse;

      .bookmark-tree-container,
      .search-results-container {
        padding-top: 0.75rem;
      }
    }
  }

  @media all and (orientation: portrait) {
    .bookmark-tree-container .description {
      @include text-overflow-ellipsis;
    }
  }
}
</file>

<file path="src/modules/android/android-app/android-app-search/android-app-search.component.ts">
import angular from 'angular';
import { Component, OnDestroy } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import PullToRefresh from 'pulltorefreshjs';
import { AppEventType } from '../../../app/app.enum';
import { AppSearchComponent } from '../../../app/app-search/app-search.component';
import { AppHelperService } from '../../../app/shared/app-helper/app-helper.service';
import { AlertService } from '../../../shared/alert/alert.service';
import { BookmarkChangeType } from '../../../shared/bookmark/bookmark.enum';
import { Bookmark, BookmarkChange, RemoveBookmarkChangeData } from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { DataOutOfSyncError, SyncUncommittedError } from '../../../shared/errors/errors';
import { ExceptionHandler } from '../../../shared/errors/errors.interface';
import Globals from '../../../shared/global-shared.constants';
import { PlatformService } from '../../../shared/global-shared.interface';
import { SettingsService } from '../../../shared/settings/settings.service';
import { SyncType } from '../../../shared/sync/sync.enum';
import { SyncService } from '../../../shared/sync/sync.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingService } from '../../../shared/working/working.service';
import { AndroidPlatformService } from '../../android-shared/android-platform/android-platform.service';
import { AndroidAlert } from '../android-app.interface';
import { AndroidAppHelperService } from '../shared/android-app-helper/android-app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appSearch',
  styles: [require('./android-app-search.component.scss')],
  template: require('../../../app/app-search/app-search.component.html')
})
export class AndroidAppSearchComponent extends AppSearchComponent implements OnDestroy {
  appHelperSvc: AndroidAppHelperService;
  platformSvc: AndroidPlatformService;
  syncSvc: SyncService;

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'BookmarkHelperService',
    'PlatformService',
    'SettingsService',
    'SyncService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    super(
      $exceptionHandler,
      $q,
      $scope,
      $timeout,
      AlertSvc,
      AppHelperSvc,
      BookmarkHelperSvc,
      PlatformSvc,
      SettingsSvc,
      UtilitySvc,
      WorkingSvc
    );

    this.syncSvc = SyncSvc;

    $scope.$on(AppEventType.RefreshBookmarkSearchResults, () => {
      this.refreshBookmarks();
    });
  }

  @boundMethod
  deleteBookmark(event: Event, bookmark: Bookmark): void {
    // Stop event propogation
    this.utilitySvc.stopEventPropagation(event);

    let originalBookmarks;
    if (this.displayFolderView) {
      // Find and remove the deleted bookmark element in the bookmark tree
      originalBookmarks = angular.copy(this.bookmarkTree);

      // Find parent of bookmark to delete
      let parent;
      let childIndex = -1;
      this.bookmarkHelperSvc.eachBookmark((current) => {
        if (angular.isUndefined(current.children ?? undefined) || current.children.length === 0) {
          return;
        }

        // Check children for target bookmark
        const index = current.children.findIndex((child) => {
          return child.id === bookmark.id;
        });
        if (index >= 0) {
          parent = current;
          childIndex = index;
        }
      }, this.bookmarkTree);

      // If target bookmark and parent were found, remove the bookmark
      if (parent && childIndex >= 0) {
        parent.children.splice(childIndex, 1);
      }
    } else {
      // Find and remove the deleted bookmark element in the search results
      originalBookmarks = angular.copy(this.results);

      const removedBookmarkIndex = this.results.findIndex((result) => {
        return result.id === bookmark.id;
      });
      if (removedBookmarkIndex >= 0) {
        this.results.splice(removedBookmarkIndex, 1);
      }
    }

    this.$timeout(() => {
      // Display loading overlay
      this.workingSvc.show();

      // Get current cached bookmarks for undo
      this.bookmarkHelperSvc
        .getCachedBookmarks()
        .then((cachedBookmarks) => {
          // Create change info and sync changes
          const data: RemoveBookmarkChangeData = {
            id: bookmark.id
          };
          const changeInfo: BookmarkChange = {
            changeData: data,
            type: BookmarkChangeType.Remove
          };
          return this.platformSvc
            .queueSync({
              changeInfo,
              type: SyncType.LocalAndRemote
            })
            .then(() => {
              this.$timeout(() => {
                this.alertSvc.currentAlert = {
                  action: this.platformSvc.getI18nString(this.Strings.Button.Undo),
                  actionCallback: () => this.undoBookmarkAction(cachedBookmarks),
                  message: this.platformSvc.getI18nString(this.Strings.Alert.BookmarkDeleted)
                } as AndroidAlert;
              }, Globals.InterfaceReadyTimeout);
            });
        })
        .catch((err) => {
          this.$q
            .resolve()
            .then(() => {
              switch (true) {
                case err instanceof DataOutOfSyncError:
                  // Refresh bookmarks to reflect re-sync
                  return this.refreshBookmarks();
                case err instanceof SyncUncommittedError:
                case this.syncSvc.shouldDisplayDefaultPageOnError(err):
                  // Do nothing
                  return;
                default:
                  // On any other error, restore previous bookmarks results
                  if (this.displayFolderView) {
                    this.bookmarkTree = originalBookmarks;
                  } else {
                    this.results = originalBookmarks;
                  }
              }
            })
            .then(() => this.appHelperSvc.syncBookmarksFailed(err))
            .then(() => this.$exceptionHandler(err));
        });
    }, 1e3);
  }

  initPullToRefresh(): void {
    // Set up pull to refresh
    const selector = '.pull-to-refresh';
    PullToRefresh.destroyAll();
    this.$timeout(() =>
      PullToRefresh.init({
        distMax: 75,
        distReload: 1,
        distThreshold: 74,
        instructionsPullToRefresh: this.platformSvc.getI18nString(this.Strings.View.Search.Pulling),
        instructionsReleaseToRefresh: this.platformSvc.getI18nString(this.Strings.View.Search.Pulled),
        instructionsRefreshing: this.platformSvc.getI18nString(this.Strings.View.Search.Pulled),
        mainElement: selector,
        onRefresh: () => {
          // Display loading overlay
          this.workingSvc.show();
          return this.platformSvc.executeSync().then(() => {
            this.resetSearch();
            this.refreshBookmarks();
          });
        },
        refreshTimeout: 0,
        shouldPullToRefresh: () => !document.querySelector(selector)?.scrollTop
      })
    );
  }

  ngOnDestroy(): void {
    PullToRefresh.destroyAll();
  }

  ngOnInit(): ng.IPromise<void> {
    // Clear selected bookmark on touch
    this.$timeout(() =>
      document.querySelector('.view-content').addEventListener(
        'touchstart',
        () =>
          this.$timeout(() => {
            this.selectedBookmarkId = undefined;
          }),
        false
      )
    );

    // Enable pull to refresh
    this.$timeout(() => this.initPullToRefresh(), 500);

    return super.ngOnInit();
  }

  refreshBookmarks(): ng.IPromise<boolean> {
    return super.refreshBookmarks().then((doRefresh) => {
      if (doRefresh && !this.displayFolderView) {
        // Update search results if new results are different to current results
        return this.getSearchResults()
          .then((results) => this.displaySearchResults(results))
          .then(() => true);
      }
      return false;
    });
  }

  resetSearch(): void {
    super.resetSearch();
    this.refreshBookmarks();
  }

  @boundMethod
  toggleBookmarkTreeView(): ng.IPromise<void> {
    return super.toggleBookmarkTreeView().then(() => this.initPullToRefresh());
  }

  undoBookmarkAction(bookmarks: Bookmark[]): void {
    // Sync pre-change bookmarks and refresh display
    this.workingSvc.show();
    this.platformSvc
      .queueSync({
        bookmarks,
        type: SyncType.LocalAndRemote
      })
      .finally(() => {
        this.cachedBookmarks = null;
        this.refreshBookmarks();
      });
  }
}
</file>

<file path="src/modules/android/android-app/android-app-working/android-app-working.component.ts">
import { Component, Output } from 'angular-ts-decorators';
import { AppHelperService } from '../../../app/shared/app-helper/app-helper.service';
import { AlertService } from '../../../shared/alert/alert.service';
import { PlatformService } from '../../../shared/global-shared.interface';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingContext } from '../../../shared/working/working.enum';
import { WorkingService } from '../../../shared/working/working.service';

@Component({
  controllerAs: 'vm',
  selector: 'appWorking'
})
export class AndroidAppWorkingComponent {
  Strings = require('../../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  currentContext: WorkingContext;
  message: string;
  currentTimeout: ng.IPromise<void>;

  @Output() cancelAction: () => () => void;

  static $inject = [
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'PlatformService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;

    // Watch working service for status changes to display spinner dialog
    $scope.$watch(
      () => WorkingSvc.status,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          if (newVal.activated) {
            this.showSpinnerDialog(newVal.context);
          } else {
            this.hideSpinnerDialog();
          }
        }
      }
    );
  }

  hideSpinnerDialog(): void {
    if (this.currentTimeout) {
      this.$timeout.cancel(this.currentTimeout);
    }
    this.currentContext = undefined;
    window.SpinnerDialog.hide();
  }

  showSpinnerDialog(context?: WorkingContext): void {
    // Return if spinner dialog already displayed
    if (this.currentContext) {
      return;
    }

    // Hide any alert messages
    this.alertSvc.clearCurrentAlert();

    // Set displayed message based on context
    this.currentContext = context;
    switch (context) {
      case WorkingContext.DelayedSyncing:
        this.currentTimeout = this.$timeout(() => {
          window.SpinnerDialog.show(
            null,
            `${this.platformSvc.getI18nString(this.Strings.View.Working.Syncing)}…`,
            true
          );
        }, 250);
        break;
      case WorkingContext.Restoring:
        this.currentTimeout = this.$timeout(() => {
          window.SpinnerDialog.show(
            null,
            `${this.platformSvc.getI18nString(this.Strings.View.Working.Restoring)}…`,
            true
          );
        });
        break;
      case WorkingContext.RetrievingMetadata:
        window.SpinnerDialog.hide();
        this.currentTimeout = this.$timeout(() => {
          window.SpinnerDialog.show(
            null,
            this.platformSvc.getI18nString(this.Strings.Alert.GetMetadata.Message),
            () => {
              window.SpinnerDialog.hide();
              this.currentContext = undefined;
              this.cancelAction()();
            }
          );
        }, 250);
        break;
      default:
        this.currentTimeout = this.$timeout(() => {
          window.SpinnerDialog.show(
            null,
            `${this.platformSvc.getI18nString(this.Strings.View.Working.Syncing)}…`,
            true
          );
        });
    }
  }
}
</file>

<file path="src/modules/android/android-app/shared/android-app-helper/android-app-helper.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AppHelperService } from '../../../../app/shared/app-helper/app-helper.service';
import { Bookmark } from '../../../../shared/bookmark/bookmark.interface';
import { ExceptionHandler } from '../../../../shared/errors/errors.interface';
import { LogService } from '../../../../shared/log/log.service';
import { StoreService } from '../../../../shared/store/store.service';
import { Sync } from '../../../../shared/sync/sync.interface';
import { SyncService } from '../../../../shared/sync/sync.service';
import { UtilityService } from '../../../../shared/utility/utility.service';
import { WorkingService } from '../../../../shared/working/working.service';
import { AndroidPlatformService } from '../../../android-shared/android-platform/android-platform.service';

@Injectable('AppHelperService')
export class AndroidAppHelperService extends AppHelperService {
  $interval: ng.IIntervalService;
  platformSvc: AndroidPlatformService;

  static $inject = [
    '$exceptionHandler',
    '$interval',
    '$location',
    '$q',
    '$timeout',
    'LogService',
    'PlatformService',
    'StoreService',
    'SyncService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $interval: ng.IIntervalService,
    $location: ng.ILocationService,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    LogSvc: LogService,
    PlatformSvc: AndroidPlatformService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    super($exceptionHandler, $location, $q, $timeout, LogSvc, PlatformSvc, StoreSvc, SyncSvc, UtilitySvc, WorkingSvc);

    this.$exceptionHandler = $exceptionHandler;
    this.$interval = $interval;
  }

  confirmBeforeSyncing(): boolean {
    return false;
  }

  copyTextToClipboard(text: string): ng.IPromise<void> {
    return this.$q<void>((resolve, reject) => {
      window.cordova.plugins.clipboard.copy(text, resolve, reject);
    }).then(() => {});
  }

  exitApp(): void {
    window.cordova.plugins.exit();
  }

  getCurrentSync(): ng.IPromise<Sync> {
    return this.$q.resolve(this.syncSvc.getCurrentSync());
  }

  getHelpPages(): string[] {
    const pages = [
      this.platformSvc.getI18nString(this.Strings.View.Help.Welcome),
      this.platformSvc.getI18nString(this.Strings.View.Help.FirstSync),
      this.platformSvc.getI18nString(this.Strings.View.Help.ExistingId),
      this.platformSvc.getI18nString(this.Strings.View.Help.Searching),
      this.platformSvc.getI18nString(this.Strings.View.Help.AddingBookmarks),
      this.platformSvc.getI18nString(this.Strings.View.Help.BackingUp),
      this.platformSvc.getI18nString(this.Strings.View.Help.FurtherSupport)
    ];

    return pages;
  }

  getNextScheduledSyncUpdateCheck(): ng.IPromise<Date> {
    return this.$q.resolve(new Date(''));
  }

  getSyncQueueLength(): ng.IPromise<number> {
    return this.$q.resolve(this.syncSvc.getSyncQueueLength());
  }

  @boundMethod
  openUrl(event?: Event, url?: string): void {
    // Stop event propogation
    this.utilitySvc.stopEventPropagation(event);

    // Open the target url
    if (url) {
      this.platformSvc.openUrl(url);
    } else if (event?.currentTarget) {
      this.platformSvc.openUrl((event.currentTarget as HTMLLinkElement).href);
    } else {
      this.logSvc.logWarning('Couldn’t open url');
    }
  }

  removePermissions(): ng.IPromise<void> {
    return this.$q.resolve();
  }

  requestPermissions(): ng.IPromise<boolean> {
    return this.$q.resolve(true);
  }

  shareBookmark(bookmark: Bookmark): void {
    const options = {
      url: bookmark.url
    };

    const onError = (err: Error) => {
      this.$exceptionHandler(err);
    };

    // Display share sheet
    window.plugins.socialsharing.shareWithOptions(options, null, onError);
  }
}
</file>

<file path="src/modules/android/android-app/android-app.component.scss">
@import '../../../styles/modules/all';

* {
  user-select: none;
}

:root {
  @media (orientation: portrait) and (min-width: 321px) {
    font-size: 16px;
  }
  @media (orientation: portrait) and (min-width: 411px) {
    font-size: 18px;
  }
  @media (orientation: portrait) and (min-width: 480px) {
    font-size: 20px;
  }
  @media (orientation: portrait) and (min-width: 600px) {
    font-size: 22px;
  }
  @media (orientation: portrait) and (min-width: 760px) {
    font-size: 26px;
  }
  @media (orientation: portrait) and (min-width: 800px) {
    font-size: 30px;
  }
  @media (orientation: portrait) and (min-width: 900px) {
    font-size: 32px;
  }

  @media (orientation: landscape) and (min-width: 720px) and (min-height: 361px) {
    font-size: 16px;
  }
  @media (orientation: landscape) and (min-width: 813px) {
    font-size: 18px;
  }
  @media (orientation: landscape) and (min-width: 900px) {
    font-size: 20px;
  }
  @media (orientation: landscape) and (min-width: 960px) {
    font-size: 22px;
  }
  @media (orientation: landscape) and (min-width: 980px) {
    font-size: 24px;
  }
  @media (orientation: landscape) and (min-width: 1200px) {
    font-size: 28px;
  }
  @media (orientation: landscape) and (min-width: 1280px) {
    font-size: 32px;
  }
}

html,
body {
  height: 100%;
  overflow: auto;
}

body {
  background: transparent;
  overflow: auto;
}

app {
  a {
    &:hover {
      color: unset;
      text-decoration: none;
    }
  }

  input,
  textarea {
    user-select: text;
  }

  textarea.form-control {
    padding: 0.5rem 1rem;
  }

  .checkbox {
    height: 1.5rem;
    width: 3rem;

    input[type='checkbox']:checked + label {
      left: 1.65rem;
    }

    label {
      height: 1.2rem;
      width: 1.2rem;
    }
  }

  .container {
    .view,
    .view-content {
      height: 100vh;
    }
  }

  .form-group {
    &.icon-button-container {
      icon-button {
        margin-top: -0.85em;

        & > div {
          height: 1.75em !important;
          width: 1.75em !important;
        }
      }

      input {
        padding-right: 2.5rem !important;
      }
    }
  }

  .header-panel {
    font-size: 1.5rem;
    height: 4rem;
    margin-bottom: 0;
  }

  .view-content {
    padding-top: 1.5rem !important;

    &.ng-enter {
      z-index: 10 !important;
    }

    &.ng-leave {
      z-index: 20;
    }
  }

  .well {
    button.btn.btn-default {
      font-size: 1rem;
    }
  }
}

app-background {
  .background {
    @include animation-fade-in;
  }
}

app-login {
  .form-group {
    input {
      font-size: 0.92em;
    }
  }

  .login-form-existing,
  .login-form-new,
  .update-service-panel {
    height: auto;
  }

  .login-form-new {
    .toggle-form {
      display: block;
    }
  }

  .logo {
    background-size: 10rem;
    flex-basis: 16rem;
  }

  .well {
    margin-bottom: 0;
  }

  @media (orientation: landscape) {
    form {
      align-items: center;
      display: flex;
      flex-basis: 40%;
      flex-direction: column;
      flex-grow: 1;
      justify-content: center;

      .form-content {
        display: flex;
        height: auto;
        justify-content: center;

        & > div {
          position: initial;
        }
      }
    }

    .header-panel {
      position: absolute;
      flex-direction: column-reverse;
      height: calc(100% - 4.5rem);
      top: 3rem;
    }

    .logo {
      background-position: 90% 50%;
      background-size: 13rem;
      flex: 1 12rem;
      height: 100%;
    }

    .view-content {
      align-items: center;
      flex-direction: row;
    }
  }
}

app-settings {
  sync-settings {
    .id-url,
    .service-url {
      @media (orientation: landscape) {
        position: absolute;
        width: auto;
      }
    }

    qr-panel {
      #qr {
        @media (orientation: landscape) {
          height: 7rem;
          width: 7rem;
        }
      }
    }
  }
}

app-support {
  @media (orientation: landscape) {
    .footer {
      margin-top: 0;
    }
  }
}
</file>

<file path="src/modules/android/android-app/android-app.component.ts">
import angular from 'angular';
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AppEventType, RoutePath } from '../../app/app.enum';
import { AppMainComponent } from '../../app/app-main/app-main.component';
import { AppHelperService } from '../../app/shared/app-helper/app-helper.service';
import { AlertService } from '../../shared/alert/alert.service';
import { BookmarkMetadata } from '../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import Globals from '../../shared/global-shared.constants';
import { PlatformService } from '../../shared/global-shared.interface';
import { LogService } from '../../shared/log/log.service';
import { NetworkService } from '../../shared/network/network.service';
import { SettingsService } from '../../shared/settings/settings.service';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { SyncService } from '../../shared/sync/sync.service';
import { TelemetryService } from '../../shared/telemetry/telemetry.service';
import { UpgradeService } from '../../shared/upgrade/upgrade.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { WorkingContext } from '../../shared/working/working.enum';
import { WorkingService } from '../../shared/working/working.service';
import { AndroidPlatformService } from '../android-shared/android-platform/android-platform.service';
import { AndroidAlert } from './android-app.interface';
import { AndroidAppHelperService } from './shared/android-app-helper/android-app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'app',
  styles: [require('./android-app.component.scss')],
  template: require('../../app/app-main/app-main.component.html')
})
export class AndroidAppComponent extends AppMainComponent implements OnInit {
  $interval: ng.IIntervalService;
  appHelperSvc: AndroidAppHelperService;
  platformSvc: AndroidPlatformService;
  syncSvc: SyncService;
  telemetrySvc: TelemetryService;
  upgradeSvc: UpgradeService;

  darkThemeEnabled = false;

  static $inject = [
    '$interval',
    '$location',
    '$q',
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'BookmarkHelperService',
    'LogService',
    'NetworkService',
    'PlatformService',
    'SettingsService',
    'StoreService',
    'SyncService',
    'TelemetryService',
    'UpgradeService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $interval: ng.IIntervalService,
    $location: ng.ILocationService,
    $q: ng.IQService,
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    LogSvc: LogService,
    NetworkSvc: NetworkService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    TelemetrySvc: TelemetryService,
    UpgradeSvc: UpgradeService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    super(
      $location,
      $q,
      $scope,
      $timeout,
      AlertSvc,
      AppHelperSvc,
      BookmarkHelperSvc,
      LogSvc,
      NetworkSvc,
      PlatformSvc,
      SettingsSvc,
      StoreSvc,
      UtilitySvc,
      WorkingSvc
    );

    this.$interval = $interval;
    this.syncSvc = SyncSvc;
    this.telemetrySvc = TelemetrySvc;
    this.upgradeSvc = UpgradeSvc;
  }

  checkForInstallOrUpgrade(): ng.IPromise<void> {
    // Get current app version
    return (
      this.platformSvc
        .getAppVersion()
        .then((appVersion) => {
          // Get previous app version by first checking both legacy and old versions
          const localStorageAppVersion = localStorage.getItem('xBrowserSync-mobileAppVersion');
          return this.$q<string>((resolve) => {
            window.NativeStorage.getItem('appVersion', resolve, () => resolve());
          })
            .then((nativeStorageAppVersion) => {
              return nativeStorageAppVersion ?? localStorageAppVersion ?? undefined;
            })
            .then((legacyAppVersion) => {
              // If no last upgrade version or legacy app version this is a new install
              // otherwise set last upgrade version to be legacy version if not set
              return this.upgradeSvc
                .getLastUpgradeVersion()
                .then((lastUpgradeVersion) => {
                  if (angular.isUndefined(lastUpgradeVersion)) {
                    if (angular.isUndefined(legacyAppVersion)) {
                      return this.handleInstall(appVersion);
                    }
                    return this.upgradeSvc.setLastUpgradeVersion(legacyAppVersion);
                  }
                })
                .then(() => {
                  // Upgrade if required
                  return this.upgradeSvc.checkIfUpgradeRequired(appVersion).then((upgradeRequired) => {
                    if (upgradeRequired) {
                      return this.handleUpgrade(appVersion);
                    }
                  });
                });
            });
        })
        // Load i18n strings
        .finally(() => this.platformSvc.initI18n())
    );
  }

  checkForNewVersion(): void {
    this.$timeout(() => {
      this.platformSvc.getAppVersion().then((appVersion) => {
        this.utilitySvc.checkForNewVersion(appVersion).then((newVersion) => {
          if (!newVersion) {
            return;
          }

          this.alertSvc.currentAlert = {
            message: this.platformSvc
              .getI18nString(this.Strings.Alert.AppUpdateAvailable.Message)
              .replace('{version}', `v${newVersion}`),
            action: this.platformSvc.getI18nString(this.Strings.Button.View),
            actionCallback: () => {
              this.platformSvc.openUrl(`${Globals.ReleaseNotesUrlStem}${newVersion}`);
            }
          } as AndroidAlert;
        });
      });
    }, 1e3);
  }

  executeSync(workingContext: WorkingContext): ng.IPromise<void> {
    return this.$q.resolve().then(() => {
      // Don't attempt to sync if no connection
      if (!this.networkSvc.isNetworkConnected()) {
        return;
      }

      // Check if there are uncommitted syncs or sync updates before syncing
      return this.appHelperSvc
        .getSyncQueueLength()
        .then((syncQueueLength) => {
          return syncQueueLength === 0 ? this.syncSvc.checkForUpdates().catch(() => false) : true;
        })
        .then((runSync) => {
          if (!runSync) {
            return;
          }

          return this.platformSvc
            .executeSync(false, workingContext)
            .then(() => this.utilitySvc.broadcastEvent(AppEventType.RefreshBookmarkSearchResults))
            .catch((err) => {
              return this.appHelperSvc.syncBookmarksFailed(err).then(() => {
                throw err;
              });
            });
        });
    });
  }

  getSharedBookmark(): ng.IPromise<BookmarkMetadata> {
    return this.$q<any>((resolve, reject) => window.plugins.intentShim.getIntent(resolve, reject))
      .then((intent) => {
        if (intent?.type !== 'text/plain' || !intent?.extras) {
          return;
        }
        const intentText = intent.extras[window.plugins.intentShim.EXTRA_TEXT];
        const intentSubject = intent.extras[window.plugins.intentShim.EXTRA_SUBJECT];

        // Set shared bookmark with shared intent data
        this.logSvc.logInfo(`Detected new intent: ${intentText}`);

        // Extract url from intent
        const url = intentText?.match(new RegExp(Globals.URL.ValidUrlRegex, 'i'))?.find(Boolean);
        return {
          title: intentSubject,
          url
        };
      })
      .then((sharedBookmark) => {
        if (angular.isUndefined(sharedBookmark)) {
          return;
        }

        const txt = document.createElement('textarea');
        txt.innerHTML = sharedBookmark.title ? sharedBookmark.title.trim() : '';
        sharedBookmark.title = txt.value;
        return sharedBookmark;
      });
  }

  @boundMethod
  handleBackButton(event: Event): void {
    if (
      this.utilitySvc.checkCurrentRoute(RoutePath.Bookmark) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Help) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Scan) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Settings) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Support) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Updated)
    ) {
      // Back to login/search panel
      event.preventDefault();
      this.appHelperSvc.switchView();
    } else {
      // On main view, exit app
      event.preventDefault();
      this.appHelperSvc.exitApp();
    }
  }

  handleBookmarkShared(sharedBookmark: BookmarkMetadata): void {
    if (!angular.isUndefined(sharedBookmark)) {
      // Set current page as shared bookmark
      this.platformSvc.sharedBookmark = sharedBookmark;
    }
  }

  handleDeviceReady(success: () => any, failure: (err: any) => any): ng.IPromise<any> {
    return (
      this.$q
        .resolve()
        .then(() => {
          // Configure events
          document.addEventListener('backbutton', this.handleBackButton, false);
          document.addEventListener('touchstart', this.handleTouchStart, false);
          window.addEventListener('keyboardDidShow', this.handleKeyboardDidShow);
          window.addEventListener('keyboardWillHide', this.handleKeyboardWillHide);

          // Enable app working in background to check for uncommitted syncs
          window.cordova.plugins.backgroundMode.setDefaults({ hidden: true, silent: true });
          window.cordova.plugins.backgroundMode.on('activate', () => {
            window.cordova.plugins.backgroundMode.disableWebViewOptimizations();
          });

          // Check for upgrade or do fresh install
          return this.checkForInstallOrUpgrade();
        })
        // Run startup process after install/upgrade
        .then(() => this.handleStartup())
        .then(() => success())
        .catch((err) => failure(err))
    );
  }

  handleInstall(installedVersion: string): ng.IPromise<void> {
    return (
      this.storeSvc
        .init()
        // Set the initial upgrade version
        .then(() => this.upgradeSvc.setLastUpgradeVersion(installedVersion))
        .then(() => this.logSvc.logInfo(`Installed ${installedVersion}`))
    );
  }

  @boundMethod
  handleKeyboardDidShow(event: any): void {
    document.body.style.height = `calc(100% - ${event.keyboardHeight}px)`;
    setTimeout(() => {
      (document.activeElement as any).scrollIntoViewIfNeeded();
    }, 100);
  }

  @boundMethod
  handleKeyboardWillHide(): void {
    document.body.style.removeProperty('height');
  }

  @boundMethod
  handleResume(): ng.IPromise<void> {
    // Check if sync enabled and reset network disconnected flag
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      if (!syncEnabled) {
        return;
      }

      // If bookmark was shared, switch to bookmark view
      return this.getSharedBookmark().then((sharedBookmark) => {
        if (!angular.isUndefined(sharedBookmark)) {
          this.handleBookmarkShared(sharedBookmark);
          return this.appHelperSvc.switchView(RoutePath.Bookmark);
        }

        // Run sync
        this.executeSync(WorkingContext.DelayedSyncing);
      });
    });
  }

  handleStartup(): ng.IPromise<void> {
    this.logSvc.logInfo('Starting up');

    return this.$q
      .all([
        this.settingsSvc.checkForAppUpdates(),
        this.settingsSvc.telemetryEnabled(),
        this.utilitySvc.isSyncEnabled()
      ])
      .then((data) => {
        const [checkForAppUpdates, telemetryEnabled, syncEnabled] = data;

        // Check for new app version
        if (checkForAppUpdates) {
          this.checkForNewVersion();
        }

        // Exit if sync not enabled
        if (!syncEnabled) {
          return;
        }

        // Submit telemetry if enabled
        if (telemetryEnabled) {
          this.$timeout(() => this.telemetrySvc.submitTelemetry(), 5e3);
        }

        // Check if a bookmark was shared
        return this.getSharedBookmark().then((sharedBookmark) => {
          if (!angular.isUndefined(sharedBookmark)) {
            return this.handleBookmarkShared(sharedBookmark);
          }

          // Run sync
          this.executeSync(WorkingContext.DelayedSyncing);
        });
      });
  }

  @boundMethod
  handleTouchStart(event: Event): void {
    // Blur focus (and hide keyboard) when pressing out of text fields
    if (!this.utilitySvc.isTextInput(event.target as Element) && this.utilitySvc.isTextInput(document.activeElement)) {
      this.$timeout(() => {
        (document.activeElement as HTMLInputElement).blur();
      }, 100);
    }
  }

  handleUpgrade(upgradeToVersion: string): ng.IPromise<void> {
    return this.upgradeSvc.upgrade(upgradeToVersion).then(() => this.storeSvc.set(StoreKey.DisplayUpdated, true));
  }

  ngOnInit(): ng.IPromise<void> {
    // Bind to cordova device events
    return (
      this.$q<void>((resolve, reject) => {
        document.addEventListener('deviceready', () => this.handleDeviceReady(resolve, reject), false);
        document.addEventListener('resume', this.handleResume, false);
      })
        .then(() => {
          // If bookmark was shared, switch to bookmark view
          if (!angular.isUndefined(this.platformSvc.sharedBookmark)) {
            return this.appHelperSvc.switchView(RoutePath.Bookmark);
          }
        })
        // Continue initialisation
        .then(() => super.ngOnInit())
    );
  }

  @boundMethod
  workingCancelAction(): ng.IPromise<void> {
    this.utilitySvc.broadcastEvent(AppEventType.WorkingCancelAction);
    return this.$q.resolve();
  }
}
</file>

<file path="src/modules/android/android-app/android-app.interface.ts">
import { Alert } from '../../shared/alert/alert.interface';

export interface AndroidAlert extends Alert {
  action?: any;
  actionCallback?: () => any;
}
</file>

<file path="src/modules/android/android-app/android-app.module.ts">
import 'angular-hammer';
import angular from 'angular';
import { NgModule } from 'angular-ts-decorators';
import { AppModule } from '../../app/app.module';
import { AndroidSharedModule } from '../android-shared/android-shared.module';
import { AndroidAppComponent } from './android-app.component';
import { AndroidAppAlertComponent } from './android-app-alert/android-app-alert.component';
import { AndroidAppBackupRestoreSettingsComponent } from './android-app-backup-restore-settings/android-app-backup-restore-settings.component';
import { AndroidAppBookmarkComponent } from './android-app-bookmark/android-app-bookmark.component';
import { AndroidAppScanComponent } from './android-app-scan/android-app-scan.component';
import { AndroidAppSearchComponent } from './android-app-search/android-app-search.component';
import { AndroidAppWorkingComponent } from './android-app-working/android-app-working.component';
import { AndroidAppHelperService } from './shared/android-app-helper/android-app-helper.service';

@NgModule({
  declarations: [
    AndroidAppAlertComponent,
    AndroidAppBackupRestoreSettingsComponent,
    AndroidAppBookmarkComponent,
    AndroidAppComponent,
    AndroidAppScanComponent,
    AndroidAppSearchComponent,
    AndroidAppWorkingComponent
  ],
  id: 'AndroidAppModule',
  imports: [AndroidSharedModule, AppModule, 'hmTouchEvents'],
  providers: [AndroidAppHelperService]
})
class AndroidAppModule {}

angular.element(document).ready(() => {
  angular.bootstrap(document, [(AndroidAppModule as NgModule).module.name], { strictDi: true });
});
</file>

<file path="src/modules/android/android-shared/android-bookmark/android-bookmark.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { Bookmark, BookmarkService } from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { UtilityService } from '../../../shared/utility/utility.service';

@Injectable('BookmarkService')
export class AndroidBookmarkService implements BookmarkService {
  $q: ng.IQService;
  bookmarkHelperSvc: BookmarkHelperService;
  utilitySvc: UtilityService;

  static $inject = ['$q', 'BookmarkHelperService', 'UtilityService'];
  constructor($q: ng.IQService, BookmarkHelperSvc: BookmarkHelperService, UtilitySvc: UtilityService) {
    this.$q = $q;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.utilitySvc = UtilitySvc;
  }

  buildIdMappings(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }

  clearNativeBookmarks(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }

  createNativeBookmarksFromBookmarks(): ng.IPromise<number> {
    return this.methodNotApplicable();
  }

  ensureContainersExist(bookmarks: Bookmark[]): Bookmark[] {
    return bookmarks;
  }

  getBookmarksForExport(): ng.IPromise<Bookmark[]> {
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      if (!syncEnabled) {
        return;
      }
      return this.bookmarkHelperSvc.getCachedBookmarks().then((bookmarks) => {
        // Clean bookmarks for export
        return this.bookmarkHelperSvc.cleanAllBookmarks(this.bookmarkHelperSvc.removeEmptyContainers(bookmarks));
      });
    });
  }

  methodNotApplicable(): ng.IPromise<any> {
    // Unused for this platform
    return this.$q.resolve();
  }

  processNativeChangeOnBookmarks(): ng.IPromise<Bookmark[]> {
    return this.methodNotApplicable();
  }

  processChangeOnNativeBookmarks(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }
}
</file>

<file path="src/modules/android/android-shared/android-platform/android-platform.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AppEventType } from '../../../app/app.enum';
import { AlertService } from '../../../shared/alert/alert.service';
import { BookmarkChangeType } from '../../../shared/bookmark/bookmark.enum';
import {
  Bookmark,
  BookmarkMetadata,
  ModifyBookmarkChangeData,
  RemoveBookmarkChangeData
} from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import {
  FailedDownloadFileError,
  FailedGetPageMetadataError,
  I18nError,
  SyncUncommittedError
} from '../../../shared/errors/errors';
import { ExceptionHandler } from '../../../shared/errors/errors.interface';
import Globals from '../../../shared/global-shared.constants';
import { PlatformType } from '../../../shared/global-shared.enum';
import { I18nObject, PlatformInfo, PlatformService, WebpageMetadata } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { MetadataService } from '../../../shared/metadata/metadata.service';
import { NetworkService } from '../../../shared/network/network.service';
import { StoreService } from '../../../shared/store/store.service';
import { SyncType } from '../../../shared/sync/sync.enum';
import { Sync } from '../../../shared/sync/sync.interface';
import { SyncService } from '../../../shared/sync/sync.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingContext } from '../../../shared/working/working.enum';
import { WorkingService } from '../../../shared/working/working.service';

@Injectable('PlatformService')
export class AndroidPlatformService implements PlatformService {
  Strings = require('../../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $http: ng.IHttpService;
  $injector: ng.auto.IInjectorService;
  $interval: ng.IIntervalService;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  bookmarkHelperSvc: BookmarkHelperService;
  logSvc: LogService;
  metadataSvc: MetadataService;
  networkSvc: NetworkService;
  storeSvc: StoreService;
  _syncSvc: SyncService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  backgroundSyncInterval: ng.IPromise<void>;
  _sharedBookmark: BookmarkMetadata;
  cancelGetPageMetadata: () => any;
  i18nObjects: I18nObject[];
  loadingId: string;
  platformName = PlatformType.Android;

  static $inject = [
    '$exceptionHandler',
    '$http',
    '$injector',
    '$interval',
    '$q',
    '$timeout',
    'AlertService',
    'BookmarkHelperService',
    'LogService',
    'MetadataService',
    'NetworkService',
    'StoreService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $http: ng.IHttpService,
    $injector: ng.auto.IInjectorService,
    $interval: ng.IIntervalService,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    BookmarkHelperSvc: BookmarkHelperService,
    LogSvc: LogService,
    MetadataSvc: MetadataService,
    NetworkSvc: NetworkService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$http = $http;
    this.$injector = $injector;
    this.$interval = $interval;
    this.$q = $q;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.logSvc = LogSvc;
    this.metadataSvc = MetadataSvc;
    this.networkSvc = NetworkSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;

    this.i18nObjects = [];
  }

  get sharedBookmark(): BookmarkMetadata {
    return this._sharedBookmark;
  }
  set sharedBookmark(value: BookmarkMetadata) {
    this._sharedBookmark = value;
  }

  get syncSvc(): SyncService {
    if (angular.isUndefined(this._syncSvc)) {
      this._syncSvc = this.$injector.get('SyncService');
    }
    return this._syncSvc;
  }

  checkOptionalNativePermissions(): ng.IPromise<boolean> {
    return this.methodNotApplicable();
  }

  disableBackgroundSync(): void {
    if (!this.backgroundSyncInterval) {
      return;
    }

    this.$interval.cancel(this.backgroundSyncInterval);
    this.backgroundSyncInterval = null;
    window.cordova.plugins.backgroundMode.disable();
  }

  disableSync(): ng.IPromise<any> {
    return this.syncSvc.disableSync();
  }

  disableNativeEventListeners(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }

  downloadFile(filename: string, textContents: string): ng.IPromise<string | void> {
    if (!filename) {
      throw new Error('File name not supplied.');
    }

    // Set file storage location to external storage root directory
    const storageLocation = `${window.cordova.file.externalRootDirectory}Download`;

    return this.$q((resolve, reject) => {
      const onError = (err: Error) => {
        return reject(new FailedDownloadFileError(undefined, err));
      };

      this.logSvc.logInfo(`Downloading file ${filename}`);

      // Save file to storage location
      window.resolveLocalFileSystemURL(
        storageLocation,
        (dirEntry) => {
          dirEntry.getFile(
            filename,
            { create: true },
            (fileEntry) => {
              fileEntry.createWriter((fileWriter) => {
                fileWriter.write(textContents);
                fileWriter.onerror = onError;
                fileWriter.onwriteend = () => resolve(filename);
              }, onError);
            },
            onError
          );
        },
        onError
      );
    });
  }

  enableBackgroundSync(): void {
    // Exit if background sync already enabled
    if (this.backgroundSyncInterval) {
      return;
    }

    // Keep app running in background
    window.cordova.plugins.backgroundMode.enable();

    // Try executing sync periodically
    this.backgroundSyncInterval = this.$interval(() => {
      // Only execute sync if app running in background
      if (!window.cordova.plugins.backgroundMode.isActive()) {
        return;
      }

      this.executeSync(true)
        // Disable background sync if sync successfull
        .then(() => this.disableBackgroundSync())
        .catch((err) => {
          // Swallow sync uncommitted and network connection errors to not flood logs with duplicate error messages
          if (err instanceof SyncUncommittedError || this.networkSvc.isNetworkConnectionError(err)) {
            this.logSvc.logInfo('Waiting for network connection...');
            return;
          }

          // Disable background sync if error encountered
          this.disableBackgroundSync();
          throw err;
        });
    }, 120e3);
  }

  enableNativeEventListeners(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }

  executeSync(isBackgroundSync = false, workingContext?: WorkingContext): ng.IPromise<void> {
    // Display loading panel if not background sync and currently on the search view
    if (!isBackgroundSync) {
      this.workingSvc.show(workingContext);
    }

    // Sync bookmarks
    return this.syncSvc.executeSync(isBackgroundSync).finally(() => {
      if (!isBackgroundSync) {
        this.workingSvc.hide();
      }
    });
  }

  getAppVersion(): ng.IPromise<string> {
    return this.$q.when(window.cordova.getAppVersion.getVersionNumber()).then((versionNumber: string) => {
      return this.utilitySvc.getSemVerAlignedVersion(versionNumber);
    });
  }

  getAppVersionName(): ng.IPromise<string> {
    return this.$q.when(window.cordova.getAppVersion.getVersionNumber());
  }

  getCurrentLocale(): ng.IPromise<string> {
    let currentLocale = Globals.I18n.DefaultLocale;
    return this.$q<any>((resolve, reject) => {
      navigator.globalization.getPreferredLanguage(resolve, reject);
    })
      .then((language) => {
        if (!angular.isUndefined(language?.value)) {
          currentLocale = language?.value;
        }
        return currentLocale;
      })
      .catch((err) => {
        this.logSvc.logWarning(`Couldn’t get current locale: ${err.message}`);
        return currentLocale;
      });
  }

  getCurrentUrl(): ng.IPromise<string> {
    return this.$q.resolve(this.sharedBookmark?.url);
  }

  @boundMethod
  getI18nString(i18nObj: I18nObject): string {
    const i18nStr = this.i18nObjects[i18nObj.key];
    if (angular.isUndefined(i18nStr ?? undefined)) {
      throw new I18nError('I18n string has no value');
    }
    return i18nStr;
  }

  getPageMetadata(getFullMetadata = true, pageUrl?: string): ng.IPromise<WebpageMetadata> {
    let inAppBrowser: any;
    let loadUrlTimeout: ng.IPromise<void>;

    // Check for protocol
    let metadataUrl = pageUrl ?? this.sharedBookmark?.url;
    if (metadataUrl && !new RegExp(Globals.URL.ProtocolRegex).test(metadataUrl)) {
      metadataUrl = `https://${metadataUrl}`;
    }

    // Set default metadata from provided page url or current page
    const metadata: WebpageMetadata = {
      title: this.sharedBookmark?.title,
      url: metadataUrl
    };

    const promise = this.$q<WebpageMetadata>((resolve, reject) => {
      // Return if no url set
      if (!metadata.url) {
        return resolve();
      }

      // Check connection
      if (!this.networkSvc.isNetworkConnected()) {
        return reject(new FailedGetPageMetadataError());
      }

      const handleResponse = (pageContent?: string, err?: Error): void => {
        this.workingSvc.hide();

        // Cancel timeout
        if (loadUrlTimeout) {
          this.$timeout.cancel(loadUrlTimeout);
          loadUrlTimeout = null;
        }

        // Check html content was returned
        if (err || !pageContent) {
          return reject(new FailedGetPageMetadataError(undefined, err));
        }

        // Update metadata with retrieved page data and return
        const pageMetadata = this.metadataSvc.getMetadata(metadata.url, pageContent);
        if (pageMetadata) {
          return resolve(pageMetadata);
        }
        resolve(metadata);
      };

      // If network disconnected fail immediately, otherwise retrieve page metadata
      if (!this.networkSvc.isNetworkConnected()) {
        return handleResponse();
      }

      // If user cancels loading metadata, return default metadata
      this.cancelGetPageMetadata = () => {
        resolve(metadata);
        this.cancelGetPageMetadata = undefined;
      };

      this.workingSvc.show(WorkingContext.RetrievingMetadata);
      inAppBrowser = window.cordova.InAppBrowser.open(metadata.url, '_blank', 'hidden=yes');

      inAppBrowser.addEventListener('loaderror', (event: any) => {
        const errMessage = event?.message ?? 'Failed to load webpage';
        handleResponse(null, new Error(errMessage));
      });

      inAppBrowser.addEventListener('loadstop', () => {
        // Return if inAppBrowser has already been closed
        if (!inAppBrowser) {
          return;
        }

        // Remove invasive content and return doc html
        inAppBrowser.executeScript(
          {
            code:
              "(function() { var elements = document.querySelectorAll('video,script'); for (var i = 0; i < elements.length; i++) { elements[i].parentNode.removeChild(elements[i]); } })();" +
              "document.querySelector('html').outerHTML;"
          },
          handleResponse
        );
      });

      // Time out metadata load after 10 secs
      loadUrlTimeout = this.$timeout(() => {
        if ((promise as any).$$state?.status === 0) {
          handleResponse(null, new Error('Timed out loading URL'));
        }
      }, 10e3);
    }).finally(() => {
      // Close InAppBrowser
      if (inAppBrowser) {
        inAppBrowser.close();
        inAppBrowser = null;
      }
    });

    return promise;
  }

  getPlatformInfo(): PlatformInfo {
    return {
      device: `${window.device.manufacturer} ${window.device.model}`
    };
  }

  getSupportedUrl(url: string): string {
    return url;
  }

  initI18n(): ng.IPromise<void> {
    // Load strings for default locale first
    return this.$http
      .get<I18nObject[]>(`./assets/strings_${Globals.I18n.DefaultLocale}.json`)
      .then((response) => {
        this.i18nObjects = response.data;

        // Load strings for current locale
        return this.getCurrentLocale();
      })
      .then((currentLocale) => {
        const i18nCode = currentLocale.split('-')[0];
        return this.$http
          .get<I18nObject[]>(`./assets/strings_${i18nCode}.json`)
          .then((response) => {
            this.i18nObjects = response.data;
          })
          .catch((err) => {
            this.logSvc.logWarning(`Failed to load i18n strings for locale ${currentLocale}`);
          });
      })
      .catch((err) => {
        this.logSvc.logWarning(`Failed to load i18n strings: ${err?.message}`);
      });
  }

  methodNotApplicable(): ng.IPromise<any> {
    // Unused for this platform
    return this.$q.resolve();
  }

  @boundMethod
  openUrl(url: string): void {
    window.open(url, '_system', '');
  }

  queueLocalResync(): ng.IPromise<void> {
    return this.queueSync({ type: SyncType.Local }).then(() => {
      this.logSvc.logInfo('Local sync data refreshed');
    });
  }

  queueSync(sync?: Sync): ng.IPromise<void> {
    let resyncRequired = false;
    return this.$q<boolean>((resolve, reject) => {
      // If no sync has been provided, process current sync queue and check for updates
      if (angular.isUndefined(sync)) {
        return this.executeSync();
      }

      // If pushing a change, check for updates before proceeding with sync
      if (sync.type !== SyncType.LocalAndRemote && sync.type !== SyncType.Remote) {
        return resolve(true);
      }

      // Check for updates before syncing
      this.syncSvc
        .checkForUpdates()
        .then((updatesAvailable) => {
          if (!updatesAvailable) {
            return resolve(true);
          }

          // Queue sync to get updates
          resyncRequired = true;
          return this.queueSync({
            type: SyncType.Local
          }).then(() => {
            // Proceed with sync only if queued sync is to add a new bookmark or changed bookmark
            // still exists
            if (sync.changeInfo.type === BookmarkChangeType.Add) {
              return resolve(true);
            }
            return this.bookmarkHelperSvc.getCachedBookmarks().then((bookmarks) => {
              const changedBookmarkId =
                (sync.changeInfo.changeData as RemoveBookmarkChangeData)?.id ??
                (sync.changeInfo.changeData as ModifyBookmarkChangeData)?.bookmark?.id;
              const changedBookmark = this.bookmarkHelperSvc.findBookmarkById(changedBookmarkId, bookmarks) as Bookmark;
              if (angular.isUndefined(changedBookmark)) {
                this.logSvc.logInfo('Changed bookmark could not be found, cancelling sync');
                return resolve(false);
              }
              resolve(true);
            });
          });
        })
        .catch(reject);
    })
      .catch(() => true)
      .then((proceedWithSync) => {
        return (proceedWithSync ? this.syncSvc.queueSync(sync) : this.$q.resolve())
          .then(() => {
            // Ensure bookmark results are refreshed if bookmarks were out of sync
            if (resyncRequired) {
              this.utilitySvc.broadcastEvent(AppEventType.RefreshBookmarkSearchResults);
            }
          })
          .catch((err) => {
            // Enable background sync if sync uncommitted
            if (err instanceof SyncUncommittedError) {
              this.enableBackgroundSync();
            }
            throw err;
          });
      })
      .finally(() => this.workingSvc.hide());
  }

  refreshNativeInterface(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }

  startSyncUpdateChecks(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }

  stopSyncUpdateChecks(): ng.IPromise<void> {
    return this.methodNotApplicable();
  }

  urlIsSupported(): boolean {
    // Android supports all urls
    return true;
  }
}
</file>

<file path="src/modules/android/android-shared/android-store/android-store.enum.ts">
enum NativeStorageError {
  NativeWriteFailed = 1,
  ItemNotFound = 2,
  NullReference = 3,
  UndefinedType = 4,
  JsonError = 5,
  WrongParameter = 6
}

enum Table {
  App = 'app',
  TraceLog = 'traceLog'
}

enum TraceLogColumn {
  Timestamp = 'timestamp',
  Level = 'level',
  Message = 'message'
}

export { NativeStorageError, Table, TraceLogColumn };
</file>

<file path="src/modules/android/android-shared/android-store/android-store.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { FailedLocalStorageError } from '../../../shared/errors/errors';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreContent, TraceLogItem } from '../../../shared/store/store.interface';
import { StoreService } from '../../../shared/store/store.service';
import { NativeStorageError, Table, TraceLogColumn } from './android-store.enum';

@Injectable('StoreService')
export class AndroidStoreService extends StoreService {
  appRowId = 1;
  dbName = 'xbs.db';
  idCol = 'id';
  nativeStorageKeys: string[] = [
    StoreKey.AlternateSearchBarPosition,
    StoreKey.AutoFetchMetadata,
    StoreKey.CheckForAppUpdates,
    StoreKey.DarkModeEnabled,
    StoreKey.DefaultToFolderView,
    StoreKey.DisplayHelp,
    StoreKey.DisplayOtherSyncsWarning,
    StoreKey.DisplayPermissions,
    StoreKey.DisplayTelemetryCheck,
    StoreKey.DisplayUpdated,
    StoreKey.InstallationId,
    StoreKey.LastUpdated,
    StoreKey.LastUpgradeVersion,
    StoreKey.SyncBookmarksToolbar,
    StoreKey.SyncEnabled,
    StoreKey.SyncInfo,
    StoreKey.TelemetryEnabled
  ];
  sqlKeys: string[] = [StoreKey.Bookmarks, StoreKey.RemovedSync, StoreKey.TraceLog];

  static $inject = ['$q'];

  private _db: any;
  private get db() {
    if (!this._db) {
      try {
        this._db = window.sqlitePlugin.openDatabase({
          androidDatabaseProvider: 'system',
          location: 'default',
          name: this.dbName
        });
      } catch (err) {
        throw new FailedLocalStorageError(err.message);
      }
    }
    return this._db;
  }

  protected addTraceLog(log: TraceLogItem): ng.IPromise<void> {
    return this.$q<void>((resolve, reject) => {
      this.db.executeSql(
        `INSERT INTO ${Table.TraceLog} (
          ${TraceLogColumn.Timestamp},
          ${TraceLogColumn.Level},
          ${TraceLogColumn.Message}
        ) VALUES (?, ?, ?)`,
        [log.timestamp, log.level, log.message],
        () => resolve(),
        reject
      );
    }).catch((err) => this.handleSqlError(err));
  }

  protected clear(): ng.IPromise<void> {
    return this.$q
      .all([
        this.$q((resolve, reject) => window.NativeStorage.clear(resolve, reject)),
        this.createTables().catch((err) => this.handleSqlError(err))
      ])
      .then(() => {});
  }

  protected clearTraceLog(): ng.IPromise<void> {
    return this.$q<void>((resolve, reject) => {
      this.db.executeSql(`DELETE FROM ${Table.TraceLog}`, [], () => resolve(), reject);
    }).catch((err) => this.handleSqlError(err));
  }

  protected createTables(): ng.IPromise<any> {
    return this.$q((resolve, reject) => {
      this.db.transaction(
        (tx: any) => {
          tx.executeSql(`DROP TABLE IF EXISTS ${Table.App}`);
          tx.executeSql(`CREATE TABLE ${Table.App} (
            ${this.idCol} INTEGER PRIMARY KEY,
            ${StoreKey.Bookmarks} TEXT,
            ${StoreKey.RemovedSync} TEXT
          )`);
          tx.executeSql(`INSERT INTO ${Table.App} (${this.idCol}) VALUES (?)`, [this.appRowId]);
          tx.executeSql(`DROP TABLE IF EXISTS ${Table.TraceLog}`);
          tx.executeSql(`CREATE TABLE ${Table.TraceLog} (
            ${TraceLogColumn.Timestamp} INTEGER PRIMARY KEY,
            ${TraceLogColumn.Level} INTEGER,
            ${TraceLogColumn.Message} TEXT
          )`);
        },
        reject,
        resolve
      );
    }).catch((err) => this.handleSqlError(err));
  }

  protected getFromStore<T = StoreContent>(keys: string[] = []): ng.IPromise<T[]> {
    return this.$q<T[]>((resolve, reject) => {
      // Separate keys
      const keysForNativeStorage = keys.filter((key) => this.nativeStorageKeys.includes(key));
      const keysForSql = keys.filter((key) => this.sqlKeys.includes(key));

      // Get values from native storage and sql separately then combine them back to original order
      const results = new Array(keys.length);
      this.$q
        .all(
          keysForNativeStorage
            .map((key) => {
              return this.getFromNativeStorage(key).then((value) => {
                results[keys.indexOf(key)] = value;
              });
            })
            .concat([
              this.getFromSql(keysForSql).then((values) => {
                keysForSql.forEach((key, index) => {
                  results[keys.indexOf(key)] = values[index];
                });
              })
            ])
        )
        .then(() => resolve(results))
        .catch(reject);
    });
  }

  protected getAllTraceLogs(): ng.IPromise<TraceLogItem[]> {
    return this.$q<TraceLogItem[]>((resolve, reject) => {
      this.db.executeSql(
        `SELECT * FROM ${Table.TraceLog} ORDER BY ${TraceLogColumn.Timestamp}`,
        [],
        (result: any) => {
          // Convert results to array of TraceLogItem
          const logItems: TraceLogItem[] = [];
          for (let x = 0; x < result.rows.length; x += 1) {
            const logItem: TraceLogItem = {
              level: result.rows.item(x).level,
              message: result.rows.item(x).message,
              timestamp: result.rows.item(x).timestamp
            };
            logItems.push(logItem);
          }
          resolve(logItems);
        },
        reject
      );
    }).catch((err) => this.handleSqlError(err));
  }

  protected getFromNativeStorage<T = StoreContent>(key: string): ng.IPromise<T> {
    return this.$q<T>((resolve, reject) => {
      if (angular.isUndefined(key ?? undefined)) {
        return resolve();
      }

      const failure = (err = new Error()) => {
        if ((err as any).code === NativeStorageError.ItemNotFound) {
          return resolve();
        }
        reject(new FailedLocalStorageError(NativeStorageError[(err as any).code], err));
      };
      window.NativeStorage.getItem(key, resolve, failure);
    });
  }

  protected getFromSql<T = StoreContent>(keys: string[] = []): ng.IPromise<T[]> {
    if (keys.length === 0) {
      return this.$q.resolve([]);
    }
    const values = new Array(keys.length);
    return this.$q<T[]>((resolve, reject) => {
      // Get non-trace log values
      const keysWithoutTraceLog = keys.filter((key) => key !== StoreKey.TraceLog);
      if (keysWithoutTraceLog.length === 0) {
        return resolve([]);
      }
      this.db.executeSql(
        `SELECT ${keysWithoutTraceLog.join(', ')} FROM ${Table.App} WHERE ${this.idCol} = ?`,
        [this.appRowId],
        (result: any) => {
          keysWithoutTraceLog.forEach((key) => {
            values[keys.indexOf(key)] = result.rows.item(0)[key as string];
          });
          resolve();
        },
        reject
      );
    })
      .then(() => {
        // Get trace log if requested
        if (!keys.includes(StoreKey.TraceLog)) {
          return;
        }
        return this.getAllTraceLogs().then((traceLogItems) => {
          values[keys.indexOf(StoreKey.TraceLog)] = traceLogItems;
        });
      })
      .then(() => values)
      .catch((err) => this.handleSqlError(err));
  }

  protected handleSqlError(err: Error): never {
    throw new FailedLocalStorageError(err.message);
  }

  protected keys(): ng.IPromise<string[]> {
    return this.$q<string[]>((resolve, reject) => window.NativeStorage.keys(resolve, reject)).then((keys) => {
      return keys.concat(this.sqlKeys);
    });
  }

  protected removeFromStore(keys: string[] = []): ng.IPromise<void> {
    // Separate keys
    const keysForNativeStorage = keys.filter((key) => this.nativeStorageKeys.includes(key));
    const keysForSql = keys.filter((key) => this.sqlKeys.includes(key));

    // Remove values from native storage and sql separately
    return this.$q
      .all(
        keysForNativeStorage
          .map((key) => this.$q((resolve, reject) => window.NativeStorage.remove(key, resolve, reject)))
          .concat(this.$q.all(keysForSql.map((key) => this.setInSql(key, null))))
      )
      .then(() => {});
  }

  protected setInStore(key: string, value: any): ng.IPromise<void> {
    if (this.nativeStorageKeys.includes(key)) {
      return this.setInNativeStorage(key, value);
    }
    return this.setInSql(key, value);
  }

  protected setInNativeStorage(key: string, value: any): ng.IPromise<void> {
    return this.$q((resolve, reject) => window.NativeStorage.setItem(key, value, resolve, reject));
  }

  protected setInSql(key: string, value: any): ng.IPromise<void> {
    // For trace log use relevant method
    if (key === StoreKey.TraceLog) {
      return angular.isUndefined(value ?? undefined) ? this.clearTraceLog() : this.addTraceLog(value);
    }

    // For anything else update existing app table row
    return this.$q<void>((resolve, reject) => {
      this.db.executeSql(
        `UPDATE ${Table.App} SET ${key} = ? WHERE ${this.idCol} = ?`,
        [value, this.appRowId],
        () => resolve(),
        reject
      );
    }).catch((err) => this.handleSqlError(err));
  }
}
</file>

<file path="src/modules/android/android-shared/android-upgrade/android-v1.6.0-upgrade-provider.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { ApiServiceType } from '../../../shared/api/api.enum';
import { ApiXbrowsersyncSyncInfo } from '../../../shared/api/api-xbrowsersync/api-xbrowsersync.interface';
import { FailedLocalStorageError } from '../../../shared/errors/errors';
import Globals from '../../../shared/global-shared.constants';
import { StoreKey } from '../../../shared/store/store.enum';
import { V160UpgradeProviderService } from '../../../shared/upgrade/v1.6.0-upgrade-provider/v1.6.0-upgrade-provider.service';

@Injectable('V160UpgradeProviderService')
export class AndroidV160UpgradeProviderService extends V160UpgradeProviderService {
  static $inject = ['$q', 'BookmarkHelperService', 'PlatformService', 'StoreService', 'UtilityService'];

  getAllFromNativeStorage(): ng.IPromise<any> {
    return this.$q<any>((resolve, reject) => {
      const nativeStorageItems: any = {};

      const failure = (err = new Error()) => {
        if ((err as any).code === 2) {
          // Item not found
          return resolve(null);
        }
        reject(new FailedLocalStorageError(undefined, err));
      };

      const success = (keys: string[]) => {
        this.$q
          .all(
            keys.map((key) => {
              return this.$q((resolveGetItem, rejectGetItem) =>
                window.NativeStorage.getItem(
                  key,
                  (result: any) => {
                    nativeStorageItems[key] = result;
                    resolveGetItem();
                  },
                  rejectGetItem
                )
              );
            })
          )
          .then(() => resolve(nativeStorageItems))
          .catch((err) => failure(err));
      };

      window.NativeStorage.keys(success, failure);
    });
  }

  upgradeApp(upgradingFromVersion?: string): ng.IPromise<void> {
    // Migrate items in native storage to new store
    return this.getAllFromNativeStorage().then((cachedData) => {
      return this.storeSvc
        .init()
        .then(() => {
          if (!cachedData || Object.keys(cachedData).length === 0) {
            return;
          }

          const syncInfo: Partial<ApiXbrowsersyncSyncInfo> = {
            serviceType: ApiServiceType.xBrowserSync
          };
          return this.$q
            .all(
              Object.keys(cachedData).map((key) => {
                // Ignore items that should not be migrated
                if (key === 'appVersion' || key === 'password' || key === 'traceLog') {
                  return;
                }

                // Upgrade sync settings
                switch (key) {
                  case 'serviceUrl':
                    syncInfo.serviceUrl = cachedData[key];
                    return;
                  case 'syncId':
                    syncInfo.id = cachedData[key];
                    return;
                  case 'syncVersion':
                    syncInfo.version = cachedData[key];
                    return;
                  default:
                }

                // Update settings whose key has changed
                if (key === 'displaySearchBarBeneathResults') {
                  const keyValue = cachedData[key];
                  key = StoreKey.AlternateSearchBarPosition;
                  cachedData[key] = keyValue;
                }

                return this.storeSvc.set(key, cachedData[key]);
              })
            )
            .then(() => {
              if (!syncInfo.id) {
                return;
              }
              if (!syncInfo.serviceUrl) {
                syncInfo.serviceUrl = Globals.URL.DefaultServiceUrl;
              }
              return this.storeSvc.set(StoreKey.SyncInfo, syncInfo);
            });
        })
        .then(() => super.upgradeApp());
    });
  }
}
</file>

<file path="src/modules/android/android-shared/android-shared.module.ts">
import 'angular-hammer';
import { NgModule } from 'angular-ts-decorators';
import { AndroidBookmarkService } from './android-bookmark/android-bookmark.service';
import { AndroidPlatformService } from './android-platform/android-platform.service';
import { AndroidStoreService } from './android-store/android-store.service';
import { AndroidV160UpgradeProviderService } from './android-upgrade/android-v1.6.0-upgrade-provider.service';

@NgModule({
  id: 'AndroidSharedModule',
  providers: [AndroidBookmarkService, AndroidPlatformService, AndroidStoreService, AndroidV160UpgradeProviderService]
})
export class AndroidSharedModule {}
</file>

<file path="src/modules/app/app-background/app-background.component.html">
<div class="background animate" ng-if="vm.pageHasBackground()">
  <div class="background-img" ng-class="{ 'moving-clouds': vm.animateClouds }" ng-if="vm.pageHasCloudBackground()">
  </div>
</div>
</file>

<file path="src/modules/app/app-background/app-background.component.scss">
@import '../../../styles/modules/all';

app-background {
  display: block;

  .background {
    @include background-gradient(20deg, var(--color-bg-primary), 0, var(--color-bg-secondary), 100%);

    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 10;

    .background-img {
      background: url('../../../../res/images/clouds.svg');
      background-repeat: repeat;
      background-size: $bg-width;
      display: block;
      height: $bg-height * 10;
      opacity: 0.15;
      position: absolute;
      top: -$bg-height;
      width: $bg-width * 10;
      z-index: 0;

      @include theme-dark {
        opacity: 0.09;
      }

      &.moving-clouds {
        @include animation-clouds;
      }
    }
  }
}
</file>

<file path="src/modules/app/app-background/app-background.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import Globals from '../../shared/global-shared.constants';
import { UtilityService } from '../../shared/utility/utility.service';
import { RoutePath } from '../app.enum';

@Component({
  controllerAs: 'vm',
  selector: 'appBackground',
  styles: [require('./app-background.component.scss')],
  template: require('./app-background.component.html')
})
export class AppBackgroundComponent implements OnInit {
  $timeout: ng.ITimeoutService;
  utilitySvc: UtilityService;

  animateClouds = false;

  static $inject = ['$timeout', 'UtilityService'];
  constructor($timeout: ng.ITimeoutService, UtilitySvc: UtilityService) {
    this.$timeout = $timeout;
    this.utilitySvc = UtilitySvc;
  }

  pageHasBackground(): boolean {
    return !this.utilitySvc.checkCurrentRoute(RoutePath.Scan);
  }

  pageHasCloudBackground(): boolean {
    return (
      this.utilitySvc.checkCurrentRoute(RoutePath.Help) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Login) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Permissions) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Support) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.SyncRemoved) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.TelemetryCheck) ||
      this.utilitySvc.checkCurrentRoute(RoutePath.Updated)
    );
  }

  ngOnInit(): void {
    this.$timeout(() => {
      this.animateClouds = true;
    }, Globals.InterfaceReadyTimeout);
  }
}
</file>

<file path="src/modules/app/app-bookmark/app-bookmark.component.html">
<div class="view-content">
  <form id="bookmarkForm" name="vm.bookmarkForm" novalidate>
    <button type="submit" class="display-none" tabindex="-1"></button>
    <div class="header-panel">
      <h2 ng-if="vm.editMode">{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Edit)
      }}</h2>
      <h2 ng-if="!vm.editMode">{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Add)
      }}</h2>
      <icon-button type="'x-circle'" size="1.2em" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.Close) }}"
                   on-click="vm.utilitySvc.handleEvent(vm.close)" tab-index="1000"></icon-button>
    </div>
    <div class="form-group">
      <label for="bookmarkTitle" class="sr-only">{{
      vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Title) }}</label>
      <input type="text" name="bookmarkTitle" ng-model="vm.bookmarkFormData.title" class="form-control"
             ng-class="{ 'focused': vm.editMode }" maxlength="255" autocomplete="off"
             placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Title) }}">
    </div>
    <div class="form-group" ng-class="{ 
      'icon-button-container': vm.displayUpdatePropertiesButton,
      'has-error': vm.bookmarkForm.bookmarkUrl.$invalid
    }">
      <label for="bookmarkUrl" class="sr-only">{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Url.Label)
      }}</label>
      <input type="text" name="bookmarkUrl" ng-model="vm.bookmarkFormData.url" class="form-control"
             ng-class="{ 'focused': !vm.editMode && vm.bookmarkFormData.url === vm.defaultProtocol }" placeholder="URL"
             ng-change="vm.urlChanged()" maxlength="2000" autocapitalize="off" autocorrect="off" spellcheck="false"
             required placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Url.Label) }}">
      <icon-button type="'download-cloud'"
                   title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.UpdateProperties) }}"
                   ng-show="vm.displayUpdatePropertiesButton"
                   on-click="vm.utilitySvc.handleEvent(vm.populateFromUrlMetadata)"
                   ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"></icon-button>
      <div class="validation" ng-if="vm.bookmarkFormData && vm.bookmarkForm.bookmarkUrl.$error.required">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Url.Required) }}
      </div>
      <div class="validation" ng-if="vm.bookmarkFormData && vm.bookmarkForm.bookmarkUrl.$error.Invalid">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Url.Invalid) }}
      </div>
      <div class="validation" ng-if="vm.bookmarkFormData && vm.bookmarkForm.bookmarkUrl.$error.Exists">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Url.Exists) }}
      </div>
    </div>
    <div class="form-group textarea-container">
      <label for="bookmarkDescription" class="sr-only">{{
      vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Description) }}</label>
      <textarea name="bookmarkDescription" ng-model="vm.bookmarkFormData.description" class="form-control"
                ng-keydown="vm.utilitySvc.handleEvent(vm.descriptionChanged)"
                placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Description) }}"></textarea>
    </div>
    <div class="mobile-landscape">
      <div class="form-group tags-input-container icon-button-container">
        <label for="bookmarkTags" class="sr-only">{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Tags.Label)
      }}</label>
        <input type="text" name="bookmarkTags" ng-model="vm.tagText" ng-model-options="{ debounce: globals.Debounce }"
               class="form-control"
               placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Tags.Placeholder) }}…"
               maxlength="50" ng-keydown="vm.utilitySvc.handleEvent(vm.tagsTextKeyDown, $event)" ng-trim="false"
               autocapitalize="off" autocomplete="off" autocorrect="off">
        <div class="lookahead-container">
          <span class="measure" ng-bind-html="vm.tagTextMeasure"></span>
          <span class="lookahead" ng-show="vm.tagLookahead"
                ng-click="vm.utilitySvc.handleEvent(vm.selectTagsLookahead)"><span
                  ng-bind-html="vm.tagLookahead"></span>
            <icon type="'edit-3'" ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"></icon>
          </span>
        </div>
        <icon-button type="'trash-2'"
                     title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Tags.Clear) }}"
                     ng-show="vm.bookmarkFormData.tags.length > 0"
                     on-click="vm.utilitySvc.handleEvent(vm.clearExistingTags)"></icon-button>
      </div>
      <div class="form-group tags-container" ng-show="vm.bookmarkFormData.tags.length > 0">
        <button class="badge badge-pill" ng-repeat="tag in vm.bookmarkFormData.tags track by $index"
                ng-click="vm.utilitySvc.handleEvent(vm.removeTag, tag)">
          <span>{{ tag }}</span>
          <icon type="'x'" bold="true"></icon>
          <span class="sr-only">{{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Tags.Remove) }}</span>
        </button>
      </div>
    </div>
    <div class="buttons">
      <button type="button" class="btn btn-default"
              ng-class="{ 'focused': !vm.editMode && vm.bookmarkFormData.url !== vm.defaultProtocol }"
              ng-if="!vm.editMode"
              ng-disabled="(vm.addButtonDisabledUntilEditForm && vm.bookmarkForm.$pristine) || vm.bookmarkForm.$invalid"
              ng-click="vm.utilitySvc.handleEvent(vm.createBookmark)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.AddBookmark) }}
      </button>
      <button type="button" class="btn btn-default" ng-if="vm.editMode"
              ng-disabled="vm.bookmarkForm.$pristine || vm.bookmarkForm.$invalid"
              ng-click="vm.utilitySvc.handleEvent(vm.updateBookmark)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Update) }}
      </button>
      <button type="button" class="btn btn-default"
              ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) && vm.editMode"
              ng-click="vm.utilitySvc.handleEvent(vm.shareBookmark, $event, vm.bookmarkFormData)">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Share) }}
      </button>
      <button type="button" class="btn btn-default btn-delete-bookmark" ng-if="vm.editMode"
              ng-click="vm.utilitySvc.handleEvent(vm.deleteBookmark)">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Bookmark.Form.Delete) }}
      </button>
    </div>
  </form>
</div>
</file>

<file path="src/modules/app/app-bookmark/app-bookmark.component.scss">
@import '../../../styles/modules/all';

app-bookmark {
  --color-badge-bg: #{$color-text2-default};
  --color-badge-text: #{$color-text1-default};

  display: block;

  @include theme-dark {
    --color-badge-bg: #{$color-bg3-dark};
    --color-badge-text: #{$color-text2-dark};
  }

  #bookmarkForm {
    display: flex;
    flex-flow: column;
    height: 100%;
  }

  button.btn.btn-default.btn-delete-bookmark {
    background-color: var(--color-danger);

    @media (hover: hover) {
      &:not([disabled]):active,
      &:not([disabled]):hover {
        color: var(--color-danger);
      }
    }
  }

  .buttons,
  .form-group,
  .header-panel {
    flex: none;
  }

  input[type='text'] {
    text-overflow: ellipsis;
    width: 100%;
  }

  .mobile-landscape {
    margin-bottom: 1rem;
    overflow: hidden;
  }

  .tags-container {
    height: calc(100% - 3.5rem);
    margin-bottom: 0;
    margin-top: 1rem;
    overflow-x: hidden;
    overflow-y: auto;

    .badge {
      align-items: center;
      background-color: var(--color-badge-bg);
      border: 0;
      border-radius: $border-radius-input;
      color: var(--color-badge-text);
      display: inline-flex;
      font-size: 0.85rem;
      font-weight: 400;
      line-height: 1.2rem;
      margin: 0 0.5rem 0.5rem 0;
      max-width: 99%;

      icon {
        color: var(--color-badge-text);
        opacity: 0.5;
        transition: opacity ease-in-out 0.2s;
      }

      span {
        @include text-overflow-ellipsis;

        margin-right: 0.3rem;

        @media (hover: hover) {
          &:hover {
            color: inherit;
          }
        }
      }

      @media (hover: hover) {
        &:active,
        &:hover,
        &:focus {
          icon {
            opacity: 1;
          }
        }

        &:not(:active):focus span {
          text-decoration: underline;
        }
      }
    }
  }

  .tags-input-container {
    border-radius: $border-radius-input;
    margin-bottom: 0;
    overflow: hidden;

    input {
      background: transparent;
      border-width: 0;
      line-height: 2.6rem;
      position: relative;
      z-index: 50;
    }
  }

  .textarea-container {
    display: flex;
    flex: 1 0 10rem;
  }

  .view-content {
    display: flex;
    flex-flow: column;
  }
}
</file>

<file path="src/modules/app/app-bookmark/app-bookmark.component.ts">
import angular from 'angular';
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AndroidAppHelperService } from '../../android/android-app/shared/android-app-helper/android-app-helper.service';
import { AlertType } from '../../shared/alert/alert.enum';
import { AlertService } from '../../shared/alert/alert.service';
import { BookmarkChangeType } from '../../shared/bookmark/bookmark.enum';
import {
  AddBookmarkChangeData,
  Bookmark,
  BookmarkChange,
  BookmarkMetadata,
  ModifyBookmarkChangeData,
  RemoveBookmarkChangeData
} from '../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { ExceptionHandler } from '../../shared/errors/errors.interface';
import Globals from '../../shared/global-shared.constants';
import { PlatformService, WebpageMetadata } from '../../shared/global-shared.interface';
import { SyncType } from '../../shared/sync/sync.enum';
import { UtilityService } from '../../shared/utility/utility.service';
import { WorkingService } from '../../shared/working/working.service';
import { KeyCode, RoutePath } from '../app.enum';
import { AppHelperService } from '../shared/app-helper/app-helper.service';
import { BookmarkRouteParams } from './app-bookmark.interface';

@Component({
  controllerAs: 'vm',
  selector: 'appBookmark',
  styles: [require('./app-bookmark.component.scss')],
  template: require('./app-bookmark.component.html')
})
export class AppBookmarkComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $q: ng.IQService;
  $routeParams: ng.route.IRouteParamsService;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  appHelperSvc: AppHelperService;
  bookmarkHelperSvc: BookmarkHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  addButtonDisabledUntilEditForm = false;
  RoutePath = RoutePath;
  bookmarkForm: ng.IFormController;
  bookmarkFormData: BookmarkMetadata;
  currentBookmarkId: number;
  defaultProtocol = 'https://';
  descriptionFieldOriginalHeight: string;
  displayUpdatePropertiesButton = false;
  editMode = false;
  globals = Globals;
  originalUrl: string;
  tagLookahead: string;
  tagText: string;
  tagTextMeasure: string;

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$routeParams',
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'BookmarkHelperService',
    'PlatformService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $routeParams: ng.route.IRouteParamsService,
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$q = $q;
    this.$routeParams = $routeParams;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.appHelperSvc = AppHelperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;

    $scope.$watch(
      () => this.tagText,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          this.tagsTextChanged();
        }
      }
    );
  }

  changesSynced(): ng.IPromise<void> {
    return this.appHelperSvc.syncBookmarksSuccess();
  }

  @boundMethod
  clearExistingTags(): void {
    this.bookmarkFormData.tags = [];
    this.bookmarkForm.$setDirty();
    this.appHelperSvc.focusOnElement('input[name="bookmarkTags"]');
  }

  @boundMethod
  close(): void {
    this.appHelperSvc.switchView();
  }

  @boundMethod
  createBookmark(): ng.IPromise<void> {
    // Add tags if tag text present
    if (this.tagText?.length) {
      this.createTags();
    }

    // Clone current bookmark object
    const bookmarkToAdd = this.bookmarkHelperSvc.cleanBookmark(this.bookmarkFormData);

    // Check for protocol
    if (!new RegExp(Globals.URL.ProtocolRegex).test(bookmarkToAdd.url ?? '')) {
      bookmarkToAdd.url = `${this.defaultProtocol}${bookmarkToAdd.url}`;
    }

    // Validate the new bookmark
    return this.validateBookmark(bookmarkToAdd).then((isValid) => {
      if (!isValid) {
        // Bookmark URL exists, display validation error
        this.bookmarkForm.bookmarkUrl.$setValidity('Exists', false);
        return;
      }

      // Display loading overlay
      this.workingSvc.show();

      // Create change info and sync changes
      const data: AddBookmarkChangeData = {
        metadata: bookmarkToAdd
      };
      const changeInfo: BookmarkChange = {
        changeData: data,
        type: BookmarkChangeType.Add
      };
      return this.queueSync(changeInfo).then(() => this.changesSynced());
    });
  }

  createTags(): void {
    if (!this.tagText) {
      return;
    }

    this.platformSvc.getCurrentLocale().then((currentLocale) => {
      // Clean and sort tags and add them to tag array
      const newTags = this.utilitySvc.getTagArrayFromText(this.tagText.toLocaleLowerCase(currentLocale));
      this.bookmarkFormData.tags = this.utilitySvc.sortWords([...newTags, ...(this.bookmarkFormData.tags ?? [])]);
      this.bookmarkForm.$setDirty();
      this.tagText = undefined;
      this.tagLookahead = undefined;
      this.appHelperSvc.focusOnElement('input[name="bookmarkTags"]');
    });
  }

  @boundMethod
  deleteBookmark(): ng.IPromise<void> {
    // Display loading overlay
    this.workingSvc.show();

    // Create change info and sync changes
    const data: RemoveBookmarkChangeData = {
      id: this.currentBookmarkId
    };
    const changeInfo: BookmarkChange = {
      changeData: data,
      type: BookmarkChangeType.Remove
    };
    return this.queueSync(changeInfo).then(() => this.changesSynced());
  }

  @boundMethod
  descriptionChanged(): void {
    // Limit the bookmark description to the max length
    this.$timeout(() => {
      this.bookmarkFormData.description = this.utilitySvc.trimToNearestWord(
        this.bookmarkFormData.description,
        Globals.Bookmarks.DescriptionMaxLength
      );
    });
  }

  getMetadataForCurrentPage(): ng.IPromise<Boolean | BookmarkMetadata> {
    return this.platformSvc.getPageMetadata(true).then((metadata) => this.getPageMetadataAsBookmarkMetadata(metadata));
  }

  getMetadataForUrl(url: string): ng.IPromise<BookmarkMetadata> {
    return this.$q<BookmarkMetadata>((resolve, reject) => {
      if (angular.isUndefined(url ?? undefined)) {
        return resolve();
      }
      return this.platformSvc
        .getPageMetadata(true, url)
        .then((metadata) => this.getPageMetadataAsBookmarkMetadata(metadata))
        .then(resolve)
        .catch(reject);
    });
  }

  getPageMetadataAsBookmarkMetadata(metadata: WebpageMetadata): BookmarkMetadata {
    if (angular.isUndefined(metadata ?? undefined)) {
      return;
    }

    return {
      description: this.utilitySvc.trimToNearestWord(metadata.description, Globals.Bookmarks.DescriptionMaxLength),
      tags: this.utilitySvc.getTagArrayFromText(metadata.tags),
      title: metadata.title,
      url: metadata.url
    };
  }

  ngOnInit(): ng.IPromise<void> {
    return (
      this.$q<Bookmark>((resolve) => {
        // Get bookmark if specified in route
        const bookmarkId = (this.$routeParams as BookmarkRouteParams).id;
        if (bookmarkId) {
          this.editMode = true;
          return this.bookmarkHelperSvc.getBookmarkById(parseInt(bookmarkId, 10)).then(resolve);
        }

        // Check if current url is a bookmark
        return this.bookmarkHelperSvc.findCurrentUrlInBookmarks().then((existingBookmark) => {
          if (existingBookmark) {
            return resolve(existingBookmark);
          }
          resolve();
        });
      })
        .then((bookmark) => {
          // If bookmark was found, set view model for edit
          if (!angular.isUndefined(bookmark ?? undefined)) {
            this.bookmarkFormData = this.bookmarkHelperSvc.extractBookmarkMetadata(bookmark);
            this.currentBookmarkId = bookmark.id;
            this.editMode = angular.isNumber(this.currentBookmarkId);
            this.originalUrl = this.bookmarkFormData.url;
            return true;
          }

          // Set default bookmark form values
          this.bookmarkFormData = { url: this.defaultProtocol };
          this.originalUrl = this.bookmarkFormData.url;
          this.addButtonDisabledUntilEditForm = true;

          // Get current page metadata as bookmark
          return this.getMetadataForCurrentPage()
            .then((currentPageMetadata) => {
              if (currentPageMetadata === false) {
                return false;
              }
              if (!angular.isUndefined(currentPageMetadata)) {
                this.bookmarkFormData = currentPageMetadata as BookmarkMetadata;
              }
              return true;
            })
            .catch((err) => this.$exceptionHandler(err))
            .finally(() => {
              this.addButtonDisabledUntilEditForm = false;
            });
        })
        // Set initial focus
        .then((setFocus) => {
          if (setFocus) {
            this.$timeout(() => this.appHelperSvc.focusOnElement('.focused'));
          }
        })
        .catch((err) => {
          if (err.url) {
            // Set bookmark url
            this.bookmarkFormData = {
              url: err.url
            } as BookmarkMetadata;
          }
          throw err;
        })
    );
  }

  @boundMethod
  populateFromUrlMetadata(): void {
    this.getMetadataForUrl(this.bookmarkFormData.url).then((metadata) => {
      this.displayUpdatePropertiesButton = false;
      if (!metadata?.title && !metadata?.description && !metadata?.tags) {
        return;
      }

      // Update bookmark metadata and set url field as pristine
      this.bookmarkFormData.title = metadata.title ?? this.bookmarkFormData.title;
      this.bookmarkFormData.description = metadata.description ?? this.bookmarkFormData.description;
      this.bookmarkFormData.tags = metadata.tags ?? this.bookmarkFormData.tags;
      this.bookmarkForm.bookmarkUrl.$setPristine();

      // Display alert
      this.alertSvc.currentAlert = {
        message: this.platformSvc.getI18nString(this.Strings.Alert.GetMetadata.Success),
        type: AlertType.Information
      };
    });
  }

  queueSync(changeInfo: BookmarkChange): ng.IPromise<void> {
    return this.platformSvc
      .queueSync({
        changeInfo,
        type: SyncType.LocalAndRemote
      })
      .catch((err) =>
        this.appHelperSvc.syncBookmarksFailed(err).then(() => {
          throw err;
        })
      );
  }

  @boundMethod
  removeTag(tag: string): void {
    this.bookmarkFormData.tags = this.bookmarkFormData.tags.filter((x) => x !== tag);
    this.bookmarkForm.$setDirty();
    this.appHelperSvc.focusOnElement('#bookmarkForm input[name="bookmarkTags"]');
  }

  @boundMethod
  selectTagsLookahead(): void {
    this.tagText += this.tagLookahead.replace(/&nbsp;/g, ' ');
    this.createTags();
    this.appHelperSvc.focusOnElement('input[name="bookmarkTags"]');
  }

  @boundMethod
  shareBookmark(event: Event, bookmarkToShare: Bookmark) {
    // Stop event propogation
    this.utilitySvc.stopEventPropagation(event);

    // Trigger native share functionality
    (this.appHelperSvc as AndroidAppHelperService).shareBookmark(bookmarkToShare);
  }

  tagsTextChanged(): void {
    if (!this.tagText?.trim()) {
      return;
    }

    // Get last word of tag text
    this.platformSvc.getCurrentLocale().then((currentLocale) => {
      const words = this.utilitySvc.splitTextIntoWords(this.tagText, currentLocale);
      let lastWord = words.slice(-1).find(Boolean);
      if (!angular.isUndefined(lastWord)) {
        lastWord = lastWord.trimLeft();
      }

      // Display lookahead if word length exceeds minimum
      if (!(lastWord?.length >= Globals.LookaheadMinChars)) {
        this.tagLookahead = undefined;
        return;
      }
      return this.bookmarkHelperSvc
        .getLookahead(lastWord.toLocaleLowerCase(currentLocale), null, true, this.bookmarkFormData.tags)
        .then((results) => {
          if (!results) {
            this.tagLookahead = undefined;
            return;
          }

          let lookahead = results[0];
          const word = results[1];

          if (lookahead && this.utilitySvc.stringsAreEquivalent(word, lastWord, currentLocale)) {
            // Set lookahead after trimming word
            lookahead = lookahead ? lookahead.substring(word.length) : undefined;
            this.tagTextMeasure = this.tagText.replace(/\s/g, '&nbsp;');
            this.tagLookahead = lookahead.replace(/\s/g, '&nbsp;');
          }
        });
    });
  }

  @boundMethod
  tagsTextKeyDown(event: KeyboardEvent): void {
    switch (event.keyCode) {
      case KeyCode.Enter:
        // Add new tags
        event.preventDefault();
        this.$timeout(() => this.createTags(), Globals.Debounce);
        break;
      case KeyCode.Tab:
      case KeyCode.ArrowRight:
        if (!this.tagLookahead) {
          break;
        }
        // Add lookahead to tag text
        event.preventDefault();
        this.tagText += this.tagLookahead.replace(/&nbsp;/g, ' ');
        this.tagsTextChanged();
        this.appHelperSvc.focusOnElement('input[name="bookmarkTags"]');
        break;
      default:
        // Clear lookahead if any other key was pressed
        this.tagLookahead = null;
    }
  }

  @boundMethod
  updateBookmark(): ng.IPromise<void> {
    // Add tags if tag text present
    if (this.tagText?.length) {
      this.createTags();
    }

    // Validate update info
    const bookmarkToModify = this.bookmarkHelperSvc.cleanBookmark(this.bookmarkFormData);
    bookmarkToModify.id = this.currentBookmarkId;
    if (!new RegExp(Globals.URL.ProtocolRegex).test(bookmarkToModify.url ?? '')) {
      bookmarkToModify.url = `${this.defaultProtocol}${bookmarkToModify.url}`;
    }
    return this.validateBookmark(bookmarkToModify, this.originalUrl).then((isValid) => {
      if (!isValid) {
        // Bookmark URL exists, display validation error
        this.bookmarkForm.bookmarkUrl.$setValidity('Exists', false);
        return;
      }

      // Display loading overlay
      this.workingSvc.show();

      // Create change info and sync changes
      const data: ModifyBookmarkChangeData = {
        bookmark: bookmarkToModify
      };
      const changeInfo: BookmarkChange = {
        changeData: data,
        type: BookmarkChangeType.Modify
      };
      return this.queueSync(changeInfo).then(() => {
        return this.changesSynced();
      });
    });
  }

  @boundMethod
  urlChanged(): void {
    // Reset form if field is invalid
    if (this.bookmarkForm.bookmarkUrl.$invalid) {
      this.bookmarkForm.bookmarkUrl.$setValidity('Exists', true);
      this.bookmarkForm.bookmarkUrl.$setValidity('Invalid', true);
      this.displayUpdatePropertiesButton = false;
    }

    if ((this.bookmarkFormData.url ?? undefined) === undefined) {
      return;
    }

    // Check url is valid
    if (!new RegExp(`^${Globals.URL.ValidUrlRegex}$`, 'i').test(this.bookmarkFormData.url)) {
      this.bookmarkForm.bookmarkUrl.$setValidity('Invalid', false);
      return;
    }

    // Display update properties button if url is valid
    this.displayUpdatePropertiesButton =
      this.bookmarkForm.bookmarkUrl.$dirty && !this.bookmarkForm.bookmarkUrl.$invalid;
  }

  validateBookmark(bookmarkToValidate: BookmarkMetadata, originalUrl?: string): ng.IPromise<boolean> {
    return this.platformSvc.getCurrentLocale().then((currentLocale) => {
      // Skip validation if URL is unmodified
      if (this.utilitySvc.stringsAreEquivalent(bookmarkToValidate.url, originalUrl, currentLocale)) {
        return true;
      }

      // Check if bookmark url already exists
      return this.bookmarkHelperSvc
        .searchBookmarks({
          url: bookmarkToValidate.url
        })
        .then((results) => {
          // Filter search results for bookmarks with matching urls
          const duplicateBookmarks = results.filter((b) => {
            return this.utilitySvc.stringsAreEquivalent(b.url, bookmarkToValidate.url, currentLocale);
          });

          return duplicateBookmarks.length === 0;
        });
    });
  }
}
</file>

<file path="src/modules/app/app-bookmark/app-bookmark.controller.html">
<app-bookmark class="view animate-fade-in" ng-if="vm.showComponent"></app-bookmark>
</file>

<file path="src/modules/app/app-bookmark/app-bookmark.interface.ts">
export interface BookmarkRouteParams {
  id: string;
}
</file>

<file path="src/modules/app/app-help/app-help.component.html">
<div class="view-content" ng-keydown="vm.utilitySvc.handleEvent(vm.handleKeyDown, $event)"
     hm-swipeleft="vm.utilitySvc.handleEvent(vm.displayNextPage)"
     hm-swiperight="vm.utilitySvc.handleEvent(vm.displayPreviousPage, $event)" tabindex="0">
  <div id="help-page-{{vm.currentPage}}" class="help-page-container animate-fade-in" ng-show="vm.showPage">
    <div class="help-page-content" ng-bind-html="vm.pages[vm.currentPage - 1]"></div>
    <div class="pagination">
      <a href="#" ng-click="vm.utilitySvc.handleEvent(vm.close, $event)" ng-show="vm.currentPage === 1">
        <span>{{ vm.platformSvc.getI18nString(vm.Strings.Button.Close) }}</span>
      </a>
      <a href="#" class="prev-link" ng-click="vm.utilitySvc.handleEvent(vm.displayPreviousPage, $event)"
         ng-hide="vm.currentPage === 1">
        <span>{{ vm.platformSvc.getI18nString(vm.Strings.View.Help.Previous) }}</span>
      </a>
      <span class="page-number">{{vm.currentPage | number : 0}} / {{vm.pages.length | number : 0}}</span>
      <a href="#" class="next-link focused" ng-click="vm.utilitySvc.handleEvent(vm.displayNextPage, $event)"
         ng-hide="vm.currentPage === vm.pages.length">
        <span>{{ vm.platformSvc.getI18nString(vm.Strings.Button.Next) }}</span>
      </a>
      <a href="#" class="focused" ng-click="vm.utilitySvc.handleEvent(vm.close, $event)"
         ng-show="vm.currentPage === vm.pages.length">
        <span>{{ vm.platformSvc.getI18nString(vm.Strings.Button.Close) }}</span>
      </a>
    </div>
  </div>
</div>
</file>

<file path="src/modules/app/app-help/app-help.component.scss">
@import '../../../styles/modules/all';

app-help {
  display: block;

  .help-page-container {
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: center;
  }

  .help-page-content {
    flex: 0 1 auto;
    overflow: auto;
  }

  .pagination {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;

    a {
      position: relative;

      &.next-link {
        margin-right: 0.5rem;

        span::after {
          content: '\203A';
          position: absolute;
          right: -0.5rem;
        }
      }

      &.prev-link {
        margin-left: 0.5rem;

        span::before {
          content: '\2039';
          left: -0.5rem;
          position: absolute;
        }
      }
    }
  }
}
</file>

<file path="src/modules/app/app-help/app-help.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../shared/global-shared.interface';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { KeyCode, RoutePath } from '../app.enum';
import { AppHelperService } from '../shared/app-helper/app-helper.service';
import { HelpRouteParams } from './app-help.interface';

@Component({
  controllerAs: 'vm',
  selector: 'appHelp',
  styles: [require('./app-help.component.scss')],
  template: require('./app-help.component.html')
})
export class AppHelpComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $location: ng.ILocationService;
  $routeParams: ng.route.IRouteParamsService;
  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  currentPage = 0;
  pages: string[];
  showPage = false;

  static $inject = [
    '$location',
    '$routeParams',
    '$timeout',
    'AppHelperService',
    'PlatformService',
    'StoreService',
    'UtilityService'
  ];
  constructor(
    $location: ng.ILocationService,
    $routeParams: ng.route.IRouteParamsService,
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$location = $location;
    this.$routeParams = $routeParams;
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  close(event: Event): void {
    this.utilitySvc.stopEventPropagation(event);
    this.storeSvc.set(StoreKey.DisplayHelp, false).then(() => this.appHelperSvc.switchView());
  }

  displayPage(event: Event, pageToDisplay = 0): void {
    this.utilitySvc.stopEventPropagation(event);
    if (pageToDisplay <= 0 || pageToDisplay > this.pages.length) {
      return this.close(event);
    }
    this.$location.path(`${RoutePath.Help}/${pageToDisplay}`);
  }

  @boundMethod
  displayNextPage(event: Event): void {
    this.displayPage(event, this.currentPage + 1);
  }

  @boundMethod
  displayPreviousPage(event: Event): void {
    this.displayPage(event, this.currentPage - 1);
  }

  @boundMethod
  handleKeyDown(event: KeyboardEvent): void {
    switch (event.keyCode) {
      case KeyCode.Escape:
        event.preventDefault();
        this.appHelperSvc.switchView();
        break;
      case KeyCode.ArrowLeft:
        this.displayPreviousPage(event);
        break;
      case KeyCode.ArrowRight:
        this.displayNextPage(event);
        break;
      default:
    }
  }

  ngOnInit(): void {
    // Load help pages and display first page
    this.pages = this.appHelperSvc.getHelpPages();
    this.currentPage = parseInt((this.$routeParams as HelpRouteParams).id, 10);
    this.$timeout(() => {
      this.showPage = true;

      // Focus on relevant link and set links to open in new tabs
      this.appHelperSvc.focusOnElement('.focused:not(.ng-hide)');
      this.appHelperSvc.attachClickEventsToNewTabLinks();
    });
  }
}
</file>

<file path="src/modules/app/app-help/app-help.controller.html">
<app-help class="view-overlay"></app-help>
</file>

<file path="src/modules/app/app-help/app-help.interface.ts">
export interface HelpRouteParams {
  id: string;
}
</file>

<file path="src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.html">
<form name="vm.syncForm" class="animate-fade-in"
      ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) || (vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) && vm.getSyncIdPanelVisible !== undefined)"
      novalidate>
  <button type="submit" class="display-none" ng-click="vm.utilitySvc.handleEvent(vm.submitForm)" tabindex="-1"></button>
  <div class="selected-service animate-fade-in"
       ng-show="(!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) && !vm.updateServicePanelVisible) || 
    (vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) && !vm.updateServicePanelVisible && !vm.getSyncIdPanelVisible)">
    <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Selected) }}</label>
    <div class="service-url-container">
      <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">
        {{ vm.serviceInfo.url }}
      </a>
      <div class="status-icon">
        <div class="loading animate-fade-in"
             ng-show="vm.serviceInfo.url !== undefined && vm.serviceInfo.status === undefined"
             title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Loading) }}">
          <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
        </div>
        <div class="success animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.Online"
             title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Online) }}">
          <icon type="'check'" bold="true"></icon>
        </div>
        <div class="warning animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.NoNewSyncs"
             title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.NoNewSyncs) }}">
          <icon type="'minus'" bold="true"></icon>
        </div>
        <div class="danger animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.Error"
             title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Error) }}">
          <icon type="'x'" bold="true"></icon>
        </div>
        <div class="danger animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.Offline"
             title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Offline) }}">
          <icon type="'x'" bold="true"></icon>
        </div>
      </div>
    </div>
  </div>
  <div class="form-content">
    <div class="login-form-new animate-fade-in" ng-class="{ 'active-login-form': vm.newSync }"
         ng-show="vm.newSync && !vm.updateServicePanelVisible">
      <div ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
        <div class="animate-fade-in" ng-hide="vm.syncPasswordConfirmationVisible">
          <div class="form-group secret-form-group icon-button-container"
               ng-class="{ true: 'has-error' }[vm.syncForm.$submitted && vm.syncForm.txtPassword.$invalid]">
            <label class="sr-only" for="txtPassword">{{
          vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Label) }}</label>
            <input type="{{ vm.showPassword ? 'text' : 'password' }}" name="txtPassword" ng-model="vm.syncPassword"
                   class="form-control" password-strength="vm.syncPasswordComplexity" ng-disabled="vm.syncEnabled"
                   maxlength="150" autocapitalize="off" autocomplete="new-password" autocorrect="off" spellcheck="false"
                   placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.New) }}" />
            <icon-button type="vm.showPassword ? 'eye-off' : 'eye'"
                         title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Show) }}"
                         on-click="vm.utilitySvc.handleEvent(vm.toggleShowPassword)" ng-show="vm.syncPassword">
            </icon-button>
            <div class="validation" ng-if="vm.enablePasswordValidation && vm.syncPassword && ((vm.syncPasswordComplexity.feedback.suggestions && vm.syncPasswordComplexity.feedback.suggestions.length > 0) || 
          vm.syncPasswordComplexity.feedback.warning)">
              {{ vm.syncPasswordComplexity.feedback.warning ? vm.syncPasswordComplexity.feedback.warning :
          vm.syncPasswordComplexity.feedback.suggestions.length > 0 ?
          vm.syncPasswordComplexity.feedback.suggestions.slice(-1)[0] : '' }}
            </div>
            <div class="progress">
              <div class="progress-bar" role="progressbar"
                   ng-style="{ width: !vm.syncPassword ? 0 : (((vm.syncPasswordComplexity.score + 1) / 5) * 100) + '%' }"
                   ng-class="{
              'progress-bar-warning': vm.syncPasswordComplexity.score > 1 && vm.syncPasswordComplexity.score < 4,
              'progress-bar-success': vm.syncPasswordComplexity.score === 4
              }">
              </div>
            </div>
            <div class="progress-bar-background"></div>
          </div>
          <div class="buttons">
            <button type="button" class="btn btn-default btn-confirm-password" ng-disabled="!vm.syncPassword"
                    ng-click="vm.utilitySvc.handleEvent(vm.confirmPassword)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Next) }}
            </button>
            <button type="button" class="btn btn-default"
                    ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
                    ng-click="vm.utilitySvc.handleEvent(vm.switchService)">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.Button) }}
            </button>
          </div>
        </div>
        <div class="animate-fade-in" ng-show="vm.syncPasswordConfirmationVisible">
          <div class="form-group secret-form-group icon-button-container">
            <label class="sr-only" for="txtPasswordConfirmation">{{
          vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Confirm) }}</label>
            <input type="{{ vm.showPassword ? 'text' : 'password' }}" name="txtPasswordConfirmation"
                   ng-model="vm.syncPasswordConfirmation" class="form-control" maxlength="150" autocapitalize="off"
                   autocorrect="off" spellcheck="false"
                   placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Confirm) }}" />
            <icon-button type="vm.showPassword ? 'eye-off' : 'eye'"
                         title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Show) }}"
                         on-click="vm.utilitySvc.handleEvent(vm.toggleShowPassword)" ng-show="vm.syncPassword">
            </icon-button>
          </div>
          <div class="form-group buttons">
            <button type="button" class="btn btn-default btn-new-sync"
                    ng-disabled="vm.syncPasswordConfirmation !== vm.syncPassword"
                    ng-click="vm.utilitySvc.handleEvent(vm.sync)">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.Enable) }}
            </button>
            <button type="button" class="btn btn-default"
                    ng-click="vm.utilitySvc.handleEvent(vm.cancelConfirmPassword)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Back) }}
            </button>
          </div>
        </div>
        <div class="form-group toggle-form">
          <a href="#" ng-click="vm.utilitySvc.handleEvent(vm.displayExistingSyncPanel, $event)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.SyncId.Existing) }}
          </a>
        </div>
      </div>
      <div ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
        <div class="well well-sm">
          <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.GetSyncId.Title) }}</h4>
          <p ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Login.GetSyncId.Content)"></p>
          <div class="buttons">
            <button type="button" class="btn btn-default"
                    ng-click="vm.utilitySvc.handleEvent(vm.displayExistingSyncPanel)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.OK) }}
            </button>
          </div>
        </div>
      </div>
    </div>
    <div class="login-form-existing animate-fade-in" ng-class="{ 'active-login-form': !vm.newSync }"
         ng-hide="vm.newSync || vm.updateServicePanelVisible">
      <div class="animate-fade-in" ng-show="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) || 
      (vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) && vm.getSyncIdPanelVisible === false)">
        <div class="form-group" ng-class="{ 'has-error': vm.syncForm.txtId.$invalid }">
          <label class="sr-only"
                 for="txtId">{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.SyncId.Label) }}</label>
          <input type="text" name="txtId" ng-model="vm.syncId" class="form-control" ng-disabled="vm.syncEnabled"
                 placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.SyncId.Description) }}"
                 maxlength="32" autocapitalize="off" autocorrect="off" spellcheck="false" />
          <div class="validation" ng-if="vm.syncId && vm.syncForm.txtId.$error.InvalidSyncId">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.SyncId.Invalid) }}
          </div>
        </div>
        <div class="form-group secret-form-group icon-button-container"
             ng-class="{ true: 'has-error' }[vm.syncForm.$submitted && vm.syncForm.txtPassword.$invalid]">
          <label class="sr-only" for="txtPassword">{{
        vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Label) }}</label>
          <input type="{{ vm.showPassword ? 'text' : 'password' }}" name="txtPassword" ng-model="vm.syncPassword"
                 class="form-control" ng-disabled="vm.syncEnabled" maxlength="150" autocapitalize="off"
                 autocorrect="off" spellcheck="false"
                 placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Existing) }}" />
          <icon-button type="vm.showPassword ? 'eye-off' : 'eye'"
                       title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Password.Show) }}"
                       on-click="vm.utilitySvc.handleEvent(vm.toggleShowPassword)" ng-show="vm.syncPassword">
          </icon-button>
        </div>
        <div class="buttons">
          <button type="button" class="btn btn-default btn-existing-sync"
                  ng-disabled="!vm.syncId || !vm.syncPassword || vm.syncForm.$invalid"
                  ng-click="vm.utilitySvc.handleEvent(vm.sync)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.Enable) }}
          </button>
          <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.switchService)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.Button) }}
          </button>
        </div>
        <div class="form-group toggle-form">
          <a href="#" ng-click="vm.utilitySvc.handleEvent(vm.displayNewSyncPanel, $event)"
             ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.New) }}
          </a>
          <a href="#" ng-click="vm.utilitySvc.handleEvent(vm.scanId, $event)"
             ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Scan.ScanCode) }}
          </a>
        </div>
      </div>
      <div ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
           ng-show="vm.getSyncIdPanelVisible === true">
        <div class="well well-sm">
          <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Scan.Title) }}</h4>
          <p>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Scan.Content) }}</p>
          <div class="buttons">
            <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.scanId)">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Scan.ScanCode) }}
            </button>
            <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.displayNewSyncPanel)">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.SyncId.New) }}
            </button>
          </div>
        </div>
        <div class="form-group toggle-form">
          <a href="#" ng-click="vm.utilitySvc.handleEvent(vm.enableManualEntry, $event)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Scan.ManualEntry) }}
          </a>
        </div>
      </div>
    </div>
    <div class="update-service-panel animate-fade-in" ng-show="vm.updateServicePanelVisible">
      <div ng-hide="vm.updateServiceConfirmationVisible">
        <p ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.Description)">
        </p>
        <div class="form-group" ng-if="vm.updateServicePanelVisible"
             ng-class="{ 'has-error': vm.syncForm.newServiceUrl.$invalid }">
          <input type="text" name="newServiceUrl" ng-model="vm.newServiceInfo.url" class="form-control"
                 ng-change="vm.serviceUrlChanged()" ng-readonly="vm.validatingServiceUrl"
                 placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.Label) }}"
                 maxlength="128" autocapitalize="off" autocorrect="off" spellcheck="false" required />
          <div class="validation" ng-if="vm.syncForm.newServiceUrl.$invalid">
            <span ng-if="vm.syncForm.newServiceUrl.$error.required">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.Required) }}
            </span>
            <span ng-if="vm.syncForm.newServiceUrl.$error.InvalidService">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.InvalidService) }}
            </span>
            <span ng-if="vm.syncForm.newServiceUrl.$error.InvalidUrl">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.InvalidUrl) }}
            </span>
            <span ng-if="vm.syncForm.newServiceUrl.$error.RequestFailed">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.Failed) }}
            </span>
            <span ng-if="vm.syncForm.newServiceUrl.$error.ServiceVersionNotSupported">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Update.NotSupported) }}
            </span>
          </div>
        </div>
        <div class="buttons">
          <button type="button" class="btn btn-default btn-update-service-url"
                  ng-click="vm.utilitySvc.handleEvent(vm.updateServiceUrl)"
                  ng-disabled="vm.newServiceInfo.url === vm.serviceInfo.url || vm.syncForm.newServiceUrl.$invalid || vm.validatingServiceUrl"
                  ng-class="{ 'working': vm.validatingServiceUrl }">
            <span class="spinner-border spinner-border-sm" ng-show="vm.validatingServiceUrl" aria-hidden="true"></span>
            <span ng-show="vm.validatingServiceUrl">{{
          vm.platformSvc.getI18nString(vm.Strings.Service.Status.Loading) }}
            </span>
            <span ng-hide="vm.validatingServiceUrl">{{
          vm.platformSvc.getI18nString(vm.Strings.Button.Update) }}</span>
          </button>
          <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.cancelUpdateService)">
            {{ vm.platformSvc.getI18nString(vm.Strings.Button.Cancel) }}
          </button>
        </div>
      </div>
    </div>
  </div>
</form>
<div class="confirm well well-sm animate-fade-in service-info" ng-show="vm.updateServiceConfirmationVisible">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Confirm) }}</h4>
  <p class="selected-service">
    <a href="{{ vm.newServiceInfo.url }}" class="new-tab"
       title="{{ vm.newServiceInfo.url }}">{{ vm.newServiceInfo.url }}</a>
  </p>
  <ul>
    <li
        ng-class="{ 'text-danger': vm.newServiceInfo.status === vm.apiServiceStatus.Offline || vm.newServiceInfo.status === vm.apiServiceStatus.Error }">
      <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Status) }}</label>
      <span>{{ vm.getServiceStatusTextFromStatusCode(vm.newServiceInfo.status) }}</span>
    </li>
    <li ng-if="vm.newServiceInfo.location">
      <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Location) }}</label>
      <span>{{ vm.getCountryNameFrom2LetterISOCode(vm.newServiceInfo.location) }}</span>
    </li>
    <li>
      <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.MaxSyncSize) }}</label>
      <span>{{ vm.newServiceInfo.maxSyncSize | kbFmt : 0 }}</span>
    </li>
    <li>
      <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.ApiVersion) }}</label>
      <span>{{ vm.newServiceInfo.version }}</span>
    </li>
  </ul>
  <p class="service-message" ng-if="vm.newServiceInfo.message" ng-bind-html="vm.newServiceInfo.message">
  </p>
  <p class="service-warning" ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Login.Service.Warning)"></p>
  <div class="buttons">
    <button type="button" class="btn btn-default focused" ng-click="vm.utilitySvc.handleEvent(vm.confirmUpdateService)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.Confirm) }}
    </button>
    <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.cancelUpdateService)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.Deny) }}
    </button>
  </div>
</div>
</file>

<file path="src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.scss">
xbs-login-form {
  flex-grow: 1;
}
</file>

<file path="src/modules/app/app-login/api-xbrowsersync-login-form/api-xbrowsersync-login-form.component.ts">
import { Component, OnInit, Output } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import * as countriesList from 'countries-list';
import { ApiServiceStatus, ApiServiceType } from '../../../shared/api/api.enum';
import {
  ApiXbrowsersyncServiceInfo,
  ApiXbrowsersyncSyncInfo
} from '../../../shared/api/api-xbrowsersync/api-xbrowsersync.interface';
import { ApiXbrowsersyncService } from '../../../shared/api/api-xbrowsersync/api-xbrowsersync.service';
import { CryptoService } from '../../../shared/crypto/crypto.service';
import { InvalidServiceError, ServiceOfflineError, UnsupportedApiVersionError } from '../../../shared/errors/errors';
import { ExceptionHandler } from '../../../shared/errors/errors.interface';
import Globals from '../../../shared/global-shared.constants';
import { PlatformService } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingService } from '../../../shared/working/working.service';
import { RoutePath } from '../../app.enum';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'apiXbrowsersyncLoginForm',
  styles: [require('./api-xbrowsersync-login-form.component.scss')],
  template: require('./api-xbrowsersync-login-form.component.html')
})
export class XbrowsersyncLoginComponent implements OnInit {
  Strings = require('../../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  apiSvc: ApiXbrowsersyncService;
  appHelperSvc: AppHelperService;
  cryptoSvc: CryptoService;
  logSvc: LogService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  @Output() executeSync: () => (syncPassword: string) => void;

  apiServiceStatus = ApiServiceStatus;
  enablePasswordValidation = false;
  getSyncIdPanelVisible: boolean;
  newServiceInfo: ApiXbrowsersyncServiceInfo;
  newSync = false;
  serviceInfo: ApiXbrowsersyncServiceInfo;
  showPassword = false;
  syncEnabled = false;
  syncForm: ng.IFormController;
  syncId: string;
  syncPassword: string;
  syncPasswordComplexity: any;
  syncPasswordConfirmation = null;
  syncPasswordConfirmationVisible = false;
  updateServiceConfirmationVisible = false;
  updateServicePanelVisible = false;
  validatingServiceUrl = false;

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$timeout',
    'ApiXbrowsersyncService',
    'AppHelperService',
    'CryptoService',
    'LogService',
    'PlatformService',
    'StoreService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    ApiSvc: ApiXbrowsersyncService,
    AppHelperSvc: AppHelperService,
    CryptoSvc: CryptoService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$q = $q;
    this.$timeout = $timeout;
    this.apiSvc = ApiSvc;
    this.appHelperSvc = AppHelperSvc;
    this.cryptoSvc = CryptoSvc;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;
  }

  @boundMethod
  cancelConfirmPassword(): void {
    this.syncPasswordConfirmationVisible = false;
    this.syncPasswordConfirmation = null;
  }

  @boundMethod
  cancelUpdateService(): void {
    this.updateServiceConfirmationVisible = false;
    this.updateServicePanelVisible = false;
  }

  @boundMethod
  confirmPassword(): void {
    this.syncPasswordConfirmationVisible = true;
    this.appHelperSvc.focusOnElement('input[name="txtPasswordConfirmation"]');
  }

  @boundMethod
  confirmUpdateService(): void {
    // Update view model and remove stored creds
    const url = this.newServiceInfo.url.replace(/\/$/, '');
    this.serviceInfo = {
      ...this.newServiceInfo,
      url
    };
    this.storeSvc
      .remove(StoreKey.SyncInfo)
      .then(() => {
        // Update view model
        this.updateServiceConfirmationVisible = false;
        this.updateServicePanelVisible = false;
        this.syncPassword = undefined;
        this.syncPasswordComplexity = undefined;
        this.syncPasswordConfirmation = undefined;
        this.syncId = undefined;
        this.syncForm.txtId.$setValidity('InvalidSyncId', true);
        this.syncForm.$setPristine();
        this.syncForm.$setUntouched();

        // Focus on first field
        this.appHelperSvc.focusOnElement('.active-login-form input');
      })
      .catch((err) => this.logSvc.logError(err));
  }

  /**
   * Checks if the current locale supports zxcvbn password validation messages.
   * @returns `true` if the current locale supports password validation, otherwise 'false'.
   */
  currentLocaleSupportsPasswordValidation(): ng.IPromise<boolean> {
    return this.platformSvc.getCurrentLocale().then((currentLocale) => {
      // Only english and german are currently supported
      return currentLocale.indexOf('en') === 0 || currentLocale.indexOf('de') === 0;
    });
  }

  disableSync(): ng.IPromise<void> {
    return this.platformSvc.disableSync().then(() => {
      this.syncEnabled = false;
      this.syncPassword = undefined;
      this.syncPasswordComplexity = undefined;
    });
  }

  @boundMethod
  displayExistingSyncPanel(event?: Event): void {
    event?.preventDefault();
    this.newSync = false;
    this.syncPassword = undefined;
    this.appHelperSvc.focusOnElement('input[name="txtId"]');
  }

  @boundMethod
  displayNewSyncPanel(event?: Event): void {
    event?.preventDefault();
    this.newSync = true;
    this.syncPasswordConfirmationVisible = false;
    this.syncPassword = undefined;
    this.syncPasswordComplexity = undefined;
    this.syncPasswordConfirmation = undefined;
    this.syncId = undefined;
    this.syncForm.txtId.$setValidity('InvalidSyncId', true);
    this.appHelperSvc.focusOnElement('.login-form-new input[name="txtPassword"]');
  }

  @boundMethod
  enableManualEntry(event?: Event): void {
    event?.preventDefault();
    this.getSyncIdPanelVisible = false;
  }

  getCountryNameFrom2LetterISOCode(isoCode: string): string {
    if (!isoCode) {
      return;
    }

    const country = countriesList.countries[isoCode];
    if (!country) {
      this.logSvc.logWarning(`No country found matching ISO code: ${isoCode}`);
    }
    return country.name;
  }

  getServiceStatusTextFromStatusCode(statusCode: ApiServiceStatus): string {
    switch (statusCode) {
      case ApiServiceStatus.NoNewSyncs:
        return this.platformSvc.getI18nString(this.Strings.Service.Status.NoNewSyncs);
      case ApiServiceStatus.Offline:
        return this.platformSvc.getI18nString(this.Strings.Service.Status.Offline);
      case ApiServiceStatus.Online:
        return this.platformSvc.getI18nString(this.Strings.Service.Status.Online);
      case ApiServiceStatus.Error:
      default:
        return this.platformSvc.getI18nString(this.Strings.Service.Status.Error);
    }
  }

  ngOnInit(): void {
    this.$q
      .all([
        this.storeSvc.get<ApiXbrowsersyncSyncInfo>(StoreKey.SyncInfo),
        this.utilitySvc.isSyncEnabled(),
        this.currentLocaleSupportsPasswordValidation()
      ])
      .then((data) => {
        const [syncInfo, syncEnabled, currentLocaleIsEnglish] = data;
        this.syncId = syncInfo?.id;
        this.syncEnabled = syncEnabled;
        this.enablePasswordValidation = currentLocaleIsEnglish;

        // Use default service url if not set
        this.serviceInfo = {
          url: syncInfo?.serviceUrl ?? Globals.URL.DefaultServiceUrl
        };

        // Validate sync id if present
        if (this.syncId) {
          this.$timeout(() => this.validateSyncId(), Globals.InterfaceReadyTimeout);
        }

        if (this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)) {
          // Set displayed panels for mobile platform
          this.getSyncIdPanelVisible = !this.syncId;
          this.newSync = false;
        } else {
          // Set displayed panels for browsers
          this.newSync = !this.syncId;

          // Focus on password field
          this.appHelperSvc.focusOnElement('.active-login-form  input[name="txtPassword"]');
        }

        // Refresh service info
        this.refreshServiceStatus()
          // Set links to open in new tabs
          .then(() => this.appHelperSvc.attachClickEventsToNewTabLinks());
      });
  }

  refreshServiceStatus(): ng.IPromise<void> {
    return this.apiSvc
      .checkServiceStatus(this.serviceInfo.url)
      .then((serviceInfoResponse) => {
        this.serviceInfo = {
          ...this.serviceInfo,
          ...this.apiSvc.formatServiceInfo(serviceInfoResponse)
        };
      })
      .catch((err) => {
        const status = err instanceof ServiceOfflineError ? ApiServiceStatus.Offline : ApiServiceStatus.Error;
        this.serviceInfo = {
          ...this.serviceInfo,
          status
        };
      });
  }

  @boundMethod
  scanId(event?: Event) {
    event?.preventDefault();
    this.appHelperSvc.switchView(RoutePath.Scan);
  }

  serviceIsOnline(): boolean {
    return (
      this.serviceInfo.status === ApiServiceStatus.NoNewSyncs || this.serviceInfo.status === ApiServiceStatus.Online
    );
  }

  serviceUrlChanged(): void {
    // Reset form if field is invalid
    if (this.syncForm.newServiceUrl.$invalid) {
      this.syncForm.newServiceUrl.$setValidity('InvalidService', true);
      this.syncForm.newServiceUrl.$setValidity('InvalidUrl', true);
      this.syncForm.newServiceUrl.$setValidity('RequestFailed', true);
      this.syncForm.newServiceUrl.$setValidity('ServiceVersionNotSupported', true);
    }

    if ((this.newServiceInfo.url ?? undefined) === undefined) {
      return;
    }

    // Check url is valid
    if (!new RegExp(`^${Globals.URL.ValidUrlRegex}$`, 'i').test(this.newServiceInfo.url)) {
      this.syncForm.newServiceUrl.$setValidity('InvalidUrl', false);
    }
  }

  @boundMethod
  submitForm(): void {
    this.$timeout(() => {
      // Handle enter key press
      if (this.updateServicePanelVisible) {
        (document.querySelector('.update-service-panel .btn-update-service-url') as HTMLButtonElement).click();
      } else if (this.newSync) {
        if (this.syncPasswordConfirmationVisible) {
          (document.querySelector('.login-form-new .btn-new-sync') as HTMLButtonElement).click();
        } else {
          (document.querySelector('.login-form-new .btn-confirm-password') as HTMLButtonElement).click();
        }
      } else {
        (document.querySelector('.login-form-existing .btn-existing-sync') as HTMLButtonElement).click();
      }
    });
  }

  @boundMethod
  switchService(): void {
    // Reset view
    this.newServiceInfo = {
      url: this.serviceInfo.url
    };
    this.updateServiceConfirmationVisible = false;
    this.updateServicePanelVisible = true;
    this.validatingServiceUrl = false;

    // Validate service url and then focus on url field
    this.validateServiceUrl().finally(() => this.appHelperSvc.focusOnElement('.update-service-panel input'));
  }

  @boundMethod
  sync(): ng.IPromise<void> {
    // Add sync info to store and execute sync
    const syncInfo: ApiXbrowsersyncSyncInfo = {
      serviceType: ApiServiceType.xBrowserSync,
      serviceUrl: this.serviceInfo.url,
      id: this.syncId
    };
    return this.storeSvc.set(StoreKey.SyncInfo, syncInfo).then(() => this.executeSync()(this.syncPassword));
  }

  @boundMethod
  toggleShowPassword(): void {
    // Toggle show password
    this.showPassword = !this.showPassword;
  }

  @boundMethod
  updateServiceUrl(): void {
    // Check for protocol
    if (this.newServiceInfo.url?.trim() && !new RegExp(Globals.URL.ProtocolRegex).test(this.newServiceInfo.url ?? '')) {
      this.newServiceInfo.url = `https://${this.newServiceInfo.url}`;
    }

    // Validate service url
    this.validateServiceUrl().then((newServiceInfo) => {
      if (!newServiceInfo) {
        return;
      }

      // Retrieve new service status and update view model
      this.newServiceInfo = {
        ...this.newServiceInfo,
        ...this.apiSvc.formatServiceInfo(newServiceInfo)
      };
      this.updateServiceConfirmationVisible = true;
      this.appHelperSvc.attachClickEventsToNewTabLinks(document.querySelector('.service-message'));
      this.appHelperSvc.focusOnElement('.focused');
    });
  }

  validateServiceUrl() {
    this.validatingServiceUrl = true;

    // Check service url status
    const url = this.newServiceInfo.url.replace(/\/$/, '');
    return this.apiSvc
      .checkServiceStatus(url)
      .catch((err) => {
        switch (err.constructor) {
          case UnsupportedApiVersionError:
            this.syncForm.newServiceUrl.$setValidity('ServiceVersionNotSupported', false);
            break;
          case InvalidServiceError:
            this.syncForm.newServiceUrl.$setValidity('InvalidService', false);
            break;
          default:
            this.syncForm.newServiceUrl.$setValidity('RequestFailed', false);
        }

        // Focus on url field
        this.appHelperSvc.focusOnElement('input[name=newServiceUrl]', true);
      })
      .finally(() => {
        this.validatingServiceUrl = false;
      });
  }

  validateSyncId(): boolean {
    const isValid = !this.syncId || this.utilitySvc.syncIdIsValid(this.syncId);
    this.syncForm.txtId.$setValidity('InvalidSyncId', isValid);
    return isValid;
  }
}
</file>

<file path="src/modules/app/app-login/password-strength/password-strength.directive.ts">
import { zxcvbn, zxcvbnOptions } from '@zxcvbn-ts/core';
import zxcvbnLanguageCommon from '@zxcvbn-ts/language-common';
import zxcvbnLanguageEn from '@zxcvbn-ts/language-en';
import { Directive, Input, OnInit } from 'angular-ts-decorators';
import { PlatformService } from '../../../shared/global-shared.interface';

@Directive({
  bindToController: true,
  require: {
    ngModel: 'ngModel'
  },
  selector: '[passwordStrength]'
})
export class PasswordStrengthDirective implements OnInit {
  $q: ng.IQService;
  platformSvc: PlatformService;

  ngModel: ng.INgModelController;
  @Input('=passwordStrength') result: any;

  static $inject = ['$q', 'PlatformService'];
  constructor($q: ng.IQService, PlatformSvc: PlatformService) {
    this.$q = $q;
    this.platformSvc = PlatformSvc;
  }

  ngOnInit(): void {
    zxcvbnOptions.setOptions({
      dictionary: {
        ...zxcvbnLanguageCommon.dictionary,
        ...zxcvbnLanguageEn.dictionary
      },
      graphs: zxcvbnLanguageCommon.adjacencyGraphs,
      translations: zxcvbnLanguageEn.translations
    });

    this.ngModel.$validators.passwordStrength = (value) => {
      this.result = zxcvbn(value ?? '');
      return true;
    };
  }
}
</file>

<file path="src/modules/app/app-login/app-login.component.html">
<div class="view-content">
  <div class="header-panel">
    <icon-button type="'help-circle'" size="1.2em" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.Help) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.switchToHelpView)"></icon-button>
    <icon-button type="'settings'" size="1.2em" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.Settings) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.switchToSettingsView)"></icon-button>
  </div>
  <div class="logo"></div>
  <div class="login-form-container animate-fade-in"
       ng-hide="vm.otherSyncsWarningVisible || vm.syncConfirmationVisible || vm.upgradeConfirmationVisible">
    <api-xbrowsersync-login-form execute-sync="vm.executeSync"
                                 ng-if="vm.selectedServiceType === vm.apiServiceType.xBrowserSync">
    </api-xbrowsersync-login-form>
  </div>
  <div class="confirm well well-sm animate-fade-in" ng-show="vm.syncConfirmationVisible">
    <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.Confirm.Title) }}</h4>
    <p>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.Confirm.Content) }}</p>
    <div class="buttons">
      <button type="button" class="btn btn-default btn-confirm-enable-sync"
              ng-click="vm.utilitySvc.handleEvent(vm.confirmSync)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Confirm) }}
      </button>
      <button type="button" class="btn btn-default" ng-click="vm.setSyncConfirmationVisible(false)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Deny) }}
      </button>
    </div>
  </div>
  <div class="otherSyncsWarning confirm well well-sm animate-fade-in" ng-show="vm.otherSyncsWarningVisible">
    <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.DisableOthers.Title) }}</h4>
    <p ng-if="vm.platformSvc.platformName === vm.platformType.Chromium"
       ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.DisableOthers.Content)"></p>
    <p ng-if="vm.platformSvc.platformName === vm.platformType.Firefox"
       ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.DisableOthers.Content)"></p>
    <div class="buttons">
      <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.dismissOtherSyncsWarning)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Continue) }}
      </button>
    </div>
  </div>
  <div class="confirm well well-sm animate-fade-in" ng-show="vm.upgradeConfirmationVisible">
    <div ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
      <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.UpgradeRequired.Title) }}</h4>
      <div ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.UpgradeRequired.Content)"></div>
      <div class="buttons">
        <button type="button" class="btn btn-default" ng-click="vm.upgradeConfirmationVisible = false">
          {{ vm.platformSvc.getI18nString(vm.Strings.Button.OK) }}
        </button>
      </div>
    </div>
    <div ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
      <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.UpgradeReady.Title) }}</h4>
      <div ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Login.Sync.UpgradeReady.Content)"></div>
      <div class="buttons">
        <button type="button" class="btn btn-default btn-confirm-enable-sync"
                ng-click="vm.utilitySvc.handleEvent(vm.upgradeSync)">
          {{ vm.platformSvc.getI18nString(vm.Strings.Button.Confirm) }}
        </button>
        <button type="button" class="btn btn-default" ng-click="vm.upgradeConfirmationVisible = false">
          {{ vm.platformSvc.getI18nString(vm.Strings.Button.Deny) }}
        </button>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/modules/app/app-login/app-login.component.scss">
@import '../../../styles/modules/all';

app-login {
  --color-login-link-hover: #{$color-text2-default};

  display: block;

  @include theme-dark {
    --color-login-link-hover: #{$color-text1-dark};
  }

  form {
    align-items: center;
    display: flex;
    flex-direction: column;
    position: relative;

    .form-content {
      display: flex;
      height: 100%;
      justify-content: center;
      position: relative;
      width: 100%;

      & > div {
        position: absolute;
        top: 0;
        width: 100%;
        z-index: 10;
      }
    }

    @media (hover: hover) {
      a {
        &:active,
        &:focus,
        &:hover {
          border-bottom-color: var(--color-login-link-hover);
          color: var(--color-login-link-hover);
        }
      }
    }
  }

  .form-group {
    input {
      font-family: $font-stack-code;

      &::placeholder {
        font-family: $font-stack-regular;
        font-size: 1.1rem;
      }

      &::-ms-reveal,
      &::-ms-clear {
        display: none;
      }

      &[name='newServiceUrl'] {
        font-family: $font-stack-regular;
        font-size: 1.1rem;
      }
    }
  }

  .header-panel {
    z-index: 10;
  }

  .login-form-container {
    flex-grow: 1;
  }

  .login-form-existing,
  .login-form-new,
  .update-service-panel {
    height: 100%;
    max-width: 22rem;
  }

  .login-form-existing {
    input[name='txtPassword'] {
      padding-right: 2.7rem;
    }
  }

  .login-form-new {
    input[name='txtPassword'] {
      background: transparent !important;
      position: relative;
      z-index: 20;
    }
  }

  .logo {
    background-image: url('../../../../res/images/logo.svg');
    background-position-x: 50%;
    background-position-y: 0.5rem;
    background-repeat: no-repeat;
    background-size: 10rem;
    flex: 0 1 17.5rem;

    @include theme-dark {
      background-image: url('../../../../res/images/logo-dark.svg');
    }
  }

  .secret-form-group {
    .progress,
    .progress-bar-background {
      border-radius: $border-radius-input;
      font-size: 1.2rem;
      height: 100%;
      position: absolute;
      top: 0;
      width: 100%;
    }

    .progress {
      background-color: transparent;
      border-color: var(--color-input-bg);
      border-style: solid;
      border-width: 0.1rem;
      z-index: 10;

      .progress-bar {
        background-color: var(--color-danger);

        @include theme-dark {
          background-color: var(--color-danger);
        }
      }
    }

    .progress-bar-background {
      background-color: var(--color-input-bg);
    }
  }

  .selected-service {
    display: flex;
    justify-content: center;
    margin-bottom: 0.75rem;
    width: 100%;

    a {
      @include text-overflow-ellipsis;
    }

    label {
      flex: 0 0;
      margin: 0 0.3rem 0 0;
      white-space: nowrap;
    }

    .status-icon {
      margin-left: 0.25rem;

      .loading .spinner-border {
        border-color: var(--color-text);
        border-right-color: transparent !important;
      }
    }
  }

  .service-info {
    ul {
      list-style: none;
      margin: 0 1rem 0.75rem;
      padding: 0;
      position: relative;

      li {
        align-items: center;
        display: flex;
        justify-content: space-between;

        label {
          font-weight: 700;
          margin-bottom: 0;
          padding-right: 0.5rem;
        }

        span {
          flex: 1 0 auto;
          text-align: right;
        }
      }
    }

    .service-message {
      margin: 0 1rem 1rem;
      max-height: 5rem;
    }

    .service-warning {
      font-size: 0.9rem;
      line-height: 1.2rem;
    }
  }

  .service-url-container {
    align-items: center;
    display: flex;
  }

  .toggle-form {
    margin-top: 1rem;
    text-align: center;
  }

  .well {
    margin-bottom: 0;

    a {
      border-bottom-color: var(--color-well-text);
      color: var(--color-well-text);

      @media (hover: hover) {
        &:active,
        &:focus,
        &:hover {
          border-bottom-color: var(--color-well-link-hover);
          color: var(--color-well-link-hover);
        }
      }
    }
  }
}
</file>

<file path="src/modules/app/app-login/app-login.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { ApiServiceType } from '../../shared/api/api.enum';
import { ApiSyncInfo } from '../../shared/api/api.interface';
import { CryptoService } from '../../shared/crypto/crypto.service';
import {
  BaseError,
  IncompleteSyncInfoError,
  InvalidCredentialsError,
  SyncVersionNotSupportedError
} from '../../shared/errors/errors';
import { ExceptionHandler } from '../../shared/errors/errors.interface';
import Globals from '../../shared/global-shared.constants';
import { PlatformType } from '../../shared/global-shared.enum';
import { PlatformService } from '../../shared/global-shared.interface';
import { LogService } from '../../shared/log/log.service';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { SyncType } from '../../shared/sync/sync.enum';
import { Sync } from '../../shared/sync/sync.interface';
import { UtilityService } from '../../shared/utility/utility.service';
import { WorkingService } from '../../shared/working/working.service';
import { RoutePath } from '../app.enum';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appLogin',
  styles: [require('./app-login.component.scss')],
  template: require('./app-login.component.html')
})
export class AppLoginComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  cryptoSvc: CryptoService;
  logSvc: LogService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  apiServiceType = ApiServiceType;
  confirmSync: () => ng.IPromise<void>;
  otherSyncsWarningVisible = false;
  platformType = PlatformType;
  selectedServiceType: ApiServiceType;
  syncConfirmationVisible = false;
  upgradeConfirmationVisible = false;
  upgradeSync: () => ng.IPromise<void>;

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$timeout',
    'AppHelperService',
    'CryptoService',
    'LogService',
    'PlatformService',
    'StoreService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    CryptoSvc: CryptoService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$q = $q;
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.cryptoSvc = CryptoSvc;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;
  }

  @boundMethod
  dismissOtherSyncsWarning(): void {
    // Hide disable other syncs warning panel and update cache setting
    this.otherSyncsWarningVisible = false;
    this.storeSvc.set(StoreKey.DisplayOtherSyncsWarning, false);

    // Focus on password field
    this.appHelperSvc.focusOnElement('.active-login-form input[name="txtPassword"]');
  }

  @boundMethod
  executeSync(syncPassword: string, syncConfirmed = false, upgradeConfirmed = false): ng.IPromise<void> {
    this.setSyncConfirmationVisible(false);
    this.confirmSync = undefined;
    this.upgradeSync = undefined;

    return this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => {
      // Check sync info was provided
      if (!syncInfo) {
        throw new IncompleteSyncInfoError();
      }

      // Display overwrite data confirmation panel if sync id provided
      if (syncInfo.id && this.appHelperSvc.confirmBeforeSyncing() && !syncConfirmed) {
        this.setSyncConfirmationVisible(true);
        this.confirmSync = () => this.executeSync(syncPassword, true);
        return;
      }

      const syncData: Sync = {
        type: SyncType.Local
      };
      let syncInfoMessage: string;

      // Display loading panel
      this.otherSyncsWarningVisible = false;
      this.syncConfirmationVisible = false;
      this.upgradeConfirmationVisible = false;
      this.workingSvc.show();

      // Load API service dynamically for selected service type
      return this.utilitySvc.getApiService().then((apiSvc) =>
        this.$q
          .resolve()
          .then(() => {
            // If a sync ID has not been supplied, get a new one
            if (!syncInfo.id) {
              // Set sync type for create new sync
              syncData.type = SyncType.Remote;

              // Get new sync ID
              return apiSvc.createNewSync().then((newSync) => {
                syncInfo.id = newSync.id;
                syncInfo.version = newSync.version;
                syncInfoMessage = `New sync id created: ${newSync.id}`;
              });
            }

            // Check if existing id requires sync upgrade
            return this.$q
              .all([apiSvc.getSyncVersion(syncInfo.id), this.platformSvc.getAppVersion()])
              .then((results) => {
                const [response, appVersion] = results;
                const { version: syncVersion } = response;

                // If sync version is less than app version, confirm upgrade before proceeding with sync
                if (this.utilitySvc.compareVersions(syncVersion ?? '0', appVersion, '<')) {
                  syncData.type = SyncType.Upgrade;
                  if (!upgradeConfirmed) {
                    this.upgradeConfirmationVisible = true;
                    this.upgradeSync = () => this.executeSync(syncPassword, true, true);
                    return;
                  }
                }
                // If sync version is greater than app version, sync version is not supported
                else if (this.utilitySvc.compareVersions(syncVersion ?? '0', appVersion, '>')) {
                  throw new SyncVersionNotSupportedError();
                }

                syncInfo.version = syncVersion;
                syncInfoMessage = `Synced to existing id: ${syncInfo.id}`;
              });
          })
          .then(() => this.storeSvc.set(StoreKey.SyncInfo, syncInfo))
          .then(() => {
            // Don't continue with sync if user needs to confirm sync upgrade
            if (this.upgradeConfirmationVisible) {
              return;
            }

            // Generate a password hash, cache it then queue the sync
            return this.cryptoSvc
              .getPasswordHash(syncPassword, syncInfo.id)
              .then((passwordHash) => {
                syncInfo.password = passwordHash;
                return this.storeSvc.set(StoreKey.SyncInfo, syncInfo).then(() => this.platformSvc.queueSync(syncData));
              })
              .then(() => {
                this.logSvc.logInfo(syncInfoMessage);
                return this.appHelperSvc.syncBookmarksSuccess();
              })
              .catch((err) => this.syncFailed(err, syncData));
          })
          .finally(() => this.workingSvc.hide())
      );
    });
  }

  ngOnInit(): void {
    this.$q
      .all([this.utilitySvc.getCurrentApiServiceType(), this.storeSvc.get<boolean>(StoreKey.DisplayOtherSyncsWarning)])
      .then((data) => {
        const [selectedServiceType, displayOtherSyncsWarning] = data;
        this.selectedServiceType = selectedServiceType;
        this.otherSyncsWarningVisible = displayOtherSyncsWarning;
        if (this.otherSyncsWarningVisible) {
          // Focus on first button
          this.appHelperSvc.focusOnElement('.otherSyncsWarning .buttons > button');
        }
      });
  }

  @boundMethod
  setSyncConfirmationVisible(isVisible = true): void {
    this.syncConfirmationVisible = isVisible;
    if (isVisible) {
      this.appHelperSvc.focusOnElement('.btn-confirm-enable-sync');
    }
  }

  @boundMethod
  switchToHelpView(): void {
    this.appHelperSvc.switchView(RoutePath.Help);
  }

  @boundMethod
  switchToSettingsView(): void {
    this.appHelperSvc.switchView(RoutePath.Settings);
  }

  syncFailed(err: BaseError, sync: Sync): ng.IPromise<void> {
    return this.$q
      .resolve()
      .then(() => {
        // If error occurred whilst creating new sync, remove cached sync ID and password
        if (sync.type === SyncType.Remote) {
          return this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => {
            const { id: syncId, password: syncPassword, ...trimmedSyncInfo } = syncInfo;
            return this.storeSvc.set(StoreKey.SyncInfo, trimmedSyncInfo);
          });
        }
      })
      .then(() => {
        // If creds were incorrect, focus on password field
        if (
          err instanceof InvalidCredentialsError &&
          !this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)
        ) {
          this.$timeout(() => {
            (document.querySelector('.login-form-existing input[name="txtPassword"]') as HTMLInputElement).select();
          }, Globals.InterfaceReadyTimeout);
        }

        throw err;
      });
  }
}
</file>

<file path="src/modules/app/app-login/app-login.controller.html">
<app-login class="view animate-fade-in" ng-if="vm.showComponent"></app-login>
</file>

<file path="src/modules/app/app-login/app-login.module.ts">
import { NgModule } from 'angular-ts-decorators';
import { XbrowsersyncLoginComponent } from './api-xbrowsersync-login-form/api-xbrowsersync-login-form.component';
import { AppLoginComponent } from './app-login.component';
import { PasswordStrengthDirective } from './password-strength/password-strength.directive';

@NgModule({
  declarations: [AppLoginComponent, PasswordStrengthDirective, XbrowsersyncLoginComponent],
  id: 'AppLoginModule'
})
export class AppLoginModule {}
</file>

<file path="src/modules/app/app-main/app-main.component.html">
<div class="theme-container"
     ng-class="{ 'animate-fade-in': vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName), 'disable-transitions': vm.disableTransitions,'theme-dark': vm.darkModeEnabled || vm.darkThemeEnabled }"
     ng-show="vm.initialised">
  <div class="container {{ vm.$location.path().substring(1) }}">
    <app-alert></app-alert>
    <app-working cancel-action="vm.workingCancelAction"></app-working>
    <div class="view" ng-view></div>
  </div>
  <app-background></app-background>
</div>
</file>

<file path="src/modules/app/app-main/app-main.component.scss">
@use 'sass:color';
@import '../../../styles/modules/all';

app {
  .disable-transitions {
    .view-content * {
      transition: none !important;
    }
  }

  .lookahead-container {
    border: 1px solid transparent;
    display: flex;
    flex-direction: row;
    height: 100%;
    left: 1rem;
    line-height: 2.4rem;
    overflow: hidden;
    position: absolute;
    top: 0;
    white-space: nowrap;
    width: 100%;

    .lookahead,
    .measure {
      background-color: transparent;
      color: var(--color-input-placeholder);
      cursor: pointer;
      margin: auto 0;
      user-select: none;
      z-index: 60;
    }

    .lookahead icon {
      @include valign;

      margin-left: 0.1em;
    }

    .measure {
      visibility: hidden;
    }
  }

  .progress-bar {
    &-danger {
      background-color: var(--color-danger) !important;
    }

    &-success {
      background-color: var(--color-success) !important;
    }

    &-warning {
      background-color: var(--color-warning) !important;
    }
  }

  .service-message {
    font-style: italic;
    overflow-y: auto;
    padding: 1px;
    quotes: '\201c''\201d';
    text-align: center;

    &::before {
      content: open-quote;
    }

    &::after {
      content: close-quote;
    }
  }

  .spinner-border {
    @include spinner-colour(var(--color-spinner));

    animation-duration: 1s;

    &-sm {
      border-width: 0.2em;
      height: 1rem;
      vertical-align: baseline;
      width: 1rem;
    }
  }

  .sr-only {
    height: 1px;
    left: -10000px;
    overflow: hidden;
    position: absolute;
    top: auto;
    width: 1px;
  }

  .status-icon {
    height: 1rem !important;
    position: relative;
    width: 1rem !important;
    z-index: 5;

    & > div {
      align-items: center;
      border-radius: 100%;
      display: flex;
      height: 100%;
      justify-content: center;
      width: 100%;

      &.danger {
        background-color: var(--color-danger);
      }

      &.success {
        background-color: var(--color-success);
      }

      &.warning {
        background-color: var(--color-warning);
      }

      icon {
        display: block;
        height: 80%;
        width: 80%;
      }
    }

    svg {
      color: #fff;
      opacity: 0.8;
    }
  }

  .theme-container {
    @mixin theme-dark() {
      @media (prefers-color-scheme: dark) {
        @content;
      }

      &.theme-dark {
        @content;
      }
    }

    --color-bg-primary: #{$color-bg1-default};
    --color-bg-secondary: #{$color-bg2-default};
    --color-text: #{$color-text1-default};
    --color-link: #{$color-text1-default};
    --color-link-hover: #{$color-bg2-default};
    --color-button-default-bg: rgba(#{hex2rgb($color-text1-default)}, 0.3);
    --color-button-default-border: #{$color-bg3-default};
    --color-button-default-text: #{$color-text1-default};
    --color-button-default-bg-disabled: rgba(#{hex2rgb($color-bg3-default)}, 0.3);
    --color-button-default-border-disabled: #{$color-bg3-default};
    --color-button-default-text-disabled: #{$color-text1-default};
    --color-button-default-bg-hover: #{$color-text1-default};
    --color-button-default-border-hover: #{$color-text1-default};
    --color-button-default-text-hover: #{$color-bg2-default};
    --color-button-fab-bg: #{$color-text2-default};
    --color-button-fab-text: #{$color-text1-default};
    --color-button-icon-text: #{$color-text2-default};
    --color-input-bg: #{$color-bg3-default};
    --color-input-border: #{$color-bg3-default};
    --color-input-text: #{$color-text2-default};
    --color-input-placeholder: #{$color-text3-default};
    --color-checkbox-bg: #{$color-text2-default};
    --color-checkbox-toggle: #{$color-bg2-default};
    --color-validation-text: #{$color-text1-default};
    --color-overlay: rgba(#{hex2rgb($color-text2-default)}, 0.5);
    --color-darker-overlay: rgba(#{hex2rgb($color-text2-default)}, 0.9);
    --color-well-bg: #{$color-bg3-default};
    --color-well-text: #{$color-text2-default};
    --color-well-link: #{$color-text2-default};
    --color-well-link-hover: #{$color-bg2-default};
    --color-well-input-border: #{$color-text2-default};
    --color-well-button-bg: #{$color-bg3-default};
    --color-well-button-border: #{$color-text2-default};
    --color-well-button-text: #{$color-text2-default};
    --color-well-button-bg-disabled: #{$color-bg3-default};
    --color-well-button-border-disabled: #{$color-text2-default};
    --color-well-button-text-disabled: #{$color-text2-default};
    --color-well-button-bg-hover: #{$color-text2-default};
    --color-well-button-border-hover: #{$color-text2-default};
    --color-well-button-text-hover: #{$color-bg2-default};
    --color-spinner: #{$color-bg2-default};
    --color-status-bg: #{$color-text1-default};
    --color-bookmark-bg: #{$color-bg3-default};
    --color-bookmark-bg-hover: #{color.scale($color-bg2-default, $lightness: 70%, $saturation: 50%)};
    --color-bookmark-heading: #{$color-text2-default};
    --color-bookmark-menu-bg: rgba(#{hex2rgb($color-text2-default)}, 0.8);
    --color-bookmark-menu-button-delete-icon: #{$color-text1-default};
    --color-bookmark-menu-button-icon: #{$color-text2-default};
    --color-bookmark-menu-button-bg: #{$color-bg3-default};
    --color-bookmark-text: #{$color-text2-default};
    --color-bookmark-url: #{$color-text3-default};
    --color-separator-bg: rgba(#{hex2rgb($color-text2-default)}, 0.2);
    --color-success: #{$color-success-default};
    --color-warning: #{$color-warning-default};
    --color-danger: #{$color-danger-default};

    color: var(--color-text);
    height: 100%;
    width: 100%;

    @include theme-dark {
      --color-bg-primary: #{$color-bg1-dark};
      --color-bg-secondary: #{$color-bg1-dark};
      --color-text: #{$color-text3-dark};
      --color-link: #{$color-text3-dark};
      --color-link-hover: #{$color-text1-dark};
      --color-button-default-bg: #{$color-bg2-dark};
      --color-button-default-border: #{$color-text3-dark};
      --color-button-default-text: #{$color-text3-dark};
      --color-button-default-bg-disabled: rgba(#{hex2rgb($color-bg2-dark)}, 0.3);
      --color-button-default-border-disabled: #{$color-text2-dark};
      --color-button-default-text-disabled: #{$color-text2-dark};
      --color-button-default-bg-hover: #{$color-text2-dark};
      --color-button-default-border-hover: #{$color-text2-dark};
      --color-button-default-text-hover: #{$color-bg2-dark};
      --color-button-fab-bg: #{$color-text3-dark};
      --color-button-fab-text: #{$color-text1-dark};
      --color-button-icon-text: #{$color-text2-dark};
      --color-input-bg: #{$color-bg2-dark};
      --color-input-border: #{$color-bg2-dark};
      --color-input-text: #{$color-text2-dark};
      --color-input-placeholder: #{$color-text3-dark};
      --color-checkbox-bg: #{$color-bg1-dark};
      --color-checkbox-toggle: #{$color-text3-dark};
      --color-validation-text: #{$color-text1-dark};
      --color-overlay: rgba(#{hex2rgb(#222)}, 0.5);
      --color-darker-overlay: rgba(#{hex2rgb(#222)}, 0.9);
      --color-well-bg: #{$color-bg2-dark};
      --color-well-text: #{$color-text2-dark};
      --color-well-link: #{$color-text2-dark};
      --color-well-link-hover: #{$color-text1-dark};
      --color-well-input-border: #{$color-text2-dark};
      --color-well-button-bg: #{$color-bg2-dark};
      --color-well-button-border: #{$color-text2-dark};
      --color-well-button-text: #{$color-text2-dark};
      --color-well-button-bg-disabled: #{$color-bg2-dark};
      --color-well-button-border-disabled: #{$color-text2-dark};
      --color-well-button-text-disabled: #{$color-text2-dark};
      --color-well-button-bg-hover: #{$color-text2-dark};
      --color-well-button-border-hover: #{$color-text2-dark};
      --color-well-button-text-hover: #{$color-bg1-dark};
      --color-spinner: #{$color-text2-dark};
      --color-status-bg: #{$color-text1-dark};
      --color-bookmark-bg: #{$color-bg2-dark};
      --color-bookmark-bg-hover: #{color.adjust($color-bg2-dark, $lightness: 7%)};
      --color-bookmark-heading: #{$color-text2-dark};
      --color-bookmark-menu-bg: rgba(#{hex2rgb($color-bg1-dark)}, 0.5);
      --color-bookmark-menu-button-delete-icon: #{$color-text1-dark};
      --color-bookmark-menu-button-icon: #{$color-text1-dark};
      --color-bookmark-menu-button-bg: #{$color-text3-dark};
      --color-bookmark-text: #{$color-text2-dark};
      --color-bookmark-url: #{$color-text3-dark};
      --color-separator-bg: rgba(#{hex2rgb($color-text3-dark)}, 0.15);
      --color-success: #{$color-success-dark};
      --color-warning: #{$color-warning-dark};
      --color-danger: #{$color-danger-dark};
    }
  }
}
</file>

<file path="src/modules/app/app-main/app-main.component.ts">
import './app-main.component.scss';
import { OnInit } from 'angular-ts-decorators';
import { AlertService } from '../../shared/alert/alert.service';
import { BookmarkHelperService } from '../../shared/bookmark/bookmark-helper/bookmark-helper.service.js';
import { PlatformService } from '../../shared/global-shared.interface';
import { LogService } from '../../shared/log/log.service';
import { NetworkService } from '../../shared/network/network.service';
import { SettingsService } from '../../shared/settings/settings.service';
import { StoreService } from '../../shared/store/store.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { WorkingService } from '../../shared/working/working.service';
import { RoutePath } from '../app.enum';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

export abstract class AppMainComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $location: ng.ILocationService;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  appHelperSvc: AppHelperService;
  bookmarkHelperSvc: BookmarkHelperService;
  logSvc: LogService;
  networkSvc: NetworkService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  RoutePath = RoutePath;
  darkModeEnabled: boolean;
  disableTransitions = true;
  initialised = false;
  vm: AppMainComponent = this;

  constructor(
    $location: ng.ILocationService,
    $q: ng.IQService,
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    LogSvc: LogService,
    NetworkSvc: NetworkService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$location = $location;
    this.$q = $q;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.appHelperSvc = AppHelperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.logSvc = LogSvc;
    this.networkSvc = NetworkSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;

    $scope.$watch(
      () => this.settingsSvc.darkMode,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          this.darkModeEnabled = newVal;
        }
      }
    );
  }

  ngOnInit(): ng.IPromise<void> {
    // Get required view model data from store
    return this.settingsSvc
      .darkModeEnabled()
      .then((darkModeEnabled) => {
        this.darkModeEnabled = darkModeEnabled;

        // Check if a sync is currently in progress
        return this.appHelperSvc.getCurrentSync().then((currentSync) => {
          // Return here if view has already been set or waiting for syncs to finish
          if (this.$location.path() !== '/' || currentSync) {
            return;
          }

          // Set initial view
          return this.appHelperSvc.switchView();
        });
      })
      .catch((err) => {
        this.appHelperSvc.switchView().then(() => {
          throw err;
        });
      })
      .finally(() => {
        this.initialised = true;
        this.disableTransitions = false;
      });
  }

  protected abstract workingCancelAction(): ng.IPromise<void>;
}
</file>

<file path="src/modules/app/app-permissions/app-permissions.component.html">
<div class="view-content">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Permissions.Title) }}</h4>
  <div ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Permissions.Content)"></div>
  <div class="buttons">
    <button type="button" class="btn btn-default focused" ng-click="vm.utilitySvc.handleEvent(vm.requestPermissions)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.OK) }}
    </button>
  </div>
</div>
</file>

<file path="src/modules/app/app-permissions/app-permissions.component.scss">
app-permissions {
  display: block;
}
</file>

<file path="src/modules/app/app-permissions/app-permissions.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../shared/global-shared.interface';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appPermissions',
  styles: [require('./app-permissions.component.scss')],
  template: require('./app-permissions.component.html')
})
export class AppPermissionsComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  static $inject = ['$q', '$timeout', 'AppHelperService', 'PlatformService', 'StoreService', 'UtilityService'];
  constructor(
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  ngOnInit(): void {
    // Set initial focus
    this.appHelperSvc.focusOnElement('.focused');
  }

  @boundMethod
  requestPermissions(): ng.IPromise<void> {
    return this.$q
      .all([this.appHelperSvc.requestPermissions(), this.storeSvc.set(StoreKey.DisplayPermissions, false)])
      .then(() => {})
      .finally(() => this.appHelperSvc.switchView());
  }
}
</file>

<file path="src/modules/app/app-permissions/app-permissions.controller.html">
<app-permissions class="view-overlay animate-fade-in" ng-if="vm.showComponent"></app-permissions>
</file>

<file path="src/modules/app/app-search/bookmark/bookmark.component.html">
<div class="separator" ng-if="vm.isSeparator(vm.bookmark)" data-id="{{vm.bookmark.id}}"></div>
<div class="menu" ng-class="{ 'animate animate-fade-in': vm.enableSelect }" ng-if="vm.enableSelect"
     ng-show="vm.isSelected" tabindex="-1">
  <div class="buttons">
    <icon-button type="'share-2'" fab="true" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.ShareBookmark) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.shareBookmark(), $event, vm.bookmark)"></icon-button>
    <icon-button type="'edit'" fab="true" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.EditBookmark) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.editBookmark(), $event, vm.bookmark)"></icon-button>
    <icon-button type="'trash-2'" fab="true" class="btn-delete-bookmark"
                 title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.DeleteBookmark) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.deleteBookmark(), $event, vm.bookmark)"></icon-button>
  </div>
</div>
<div class="bookmark-content" ng-if="vm.bookmark.url && !vm.isSeparator(vm.bookmark)"
     ng-click="!vm.enableSelect && vm.utilitySvc.handleEvent(vm.appHelperSvc.openUrl, $event,  vm.bookmark.url)"
     hm-tap="vm.utilitySvc.handleEvent(vm.appHelperSvc.openUrl, $event,  vm.bookmark.url)" data-id="{{vm.bookmark.id}}">
  <h4 class="bookmark-heading">
    {{ vm.bookmark.title ? vm.bookmark.title : vm.bookmarkHelperSvc.getBookmarkTitleForDisplay(vm.bookmark) }}
  </h4>
  <div class="bookmark-text">
    <div class="description">{{  vm.bookmark.description }}</div>
    <div class="url">{{  vm.bookmark.url }}</div>
  </div>
</div>
<div class="bookmark-content" ng-if="!vm.bookmark.url && !vm.isSeparator(vm.bookmark)" data-id="{{vm.bookmark.id}}">
  <h4 class="bookmark-heading" ng-class="{ 'opening': vm.bookmark.open && !vm.bookmark.displayChildren }"
      ng-click="vm.utilitySvc.handleEvent(vm.clickBookmarkHeading, $event, vm.bookmark)" ng-if="vm.bookmark.title">
    {{ vm.bookmarkHelperSvc.getBookmarkTitleForDisplay(vm.bookmark) }}
    <icon type="vm.bookmark.open && vm.bookmark.displayChildren  ? 'folder-open' : 'folder'" class="folder"></icon>
    <icon type="vm.bookmark.open && vm.bookmark.displayChildren ? 'chevron-up' : 'chevron-down'" bold="true"
          class="chevron">
    </icon>
    <span ng-show="vm.bookmark.open && !vm.bookmark.displayChildren">
      <span class="spinner-border spinner-border-sm" aria-hidden="true">
      </span>
    </span>
  </h4>
  <div ng-if="vm.bookmark.displayChildren">
    <p class="empty" ng-if="!vm.bookmark.children || vm.bookmark.children.length === 0">
      {{ vm.platformSvc.getI18nString(vm.Strings.View.Search.FolderEmpty) }}
    </p>
    <ng-transclude></ng-transclude>
  </div>
</div>
<icon-button type="'edit'" size="1.2rem" class="btn-edit-bookmark"
             title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.EditBookmark) }}"
             on-click="vm.utilitySvc.handleEvent(vm.editBookmark(), $event,  vm.bookmark)"
             ng-if="vm.enableEditButton && vm.bookmark.url && !vm.isSeparator(vm.bookmark)"></icon-button>
</file>

<file path="src/modules/app/app-search/bookmark/bookmark.component.scss">
@import '../../../../styles/modules/all';

bookmark {
  @include box-shadow;

  border-radius: $border-radius-well;
  border-width: 0;
  display: block;
  margin: 0 0 0.75rem;
  max-height: 25rem;
  overflow: hidden;
  padding: 0;
  position: relative;
  transition: max-height 1s cubic-bezier(0, 1, 0, 1);

  &.ng-leave.ng-leave-active {
    margin-bottom: 0;
    max-height: 0;
    opacity: 0;
  }

  .bookmark-content {
    background-color: var(--color-bookmark-bg);
    border-radius: $border-radius-well;
    padding: 0.5rem 1rem 0.75rem;
    transition: background-color ease-in-out 0.2s;

    .bookmark-heading {
      @include text-overflow-ellipsis;

      color: var(--color-bookmark-heading);
      font-size: 1.2rem;
      font-weight: 400;
      line-height: 1.75rem;
      margin-bottom: 0;
      margin-right: 1.5rem;
      position: relative;
      transition: color ease-in-out 0.2s;
    }

    .bookmark-text {
      color: var(--color-bookmark-text);

      .description {
        font-size: 0.9rem;
        font-style: italic;
        line-height: 1.15rem;
      }

      .url {
        color: var(--color-bookmark-url);
        font-size: 0.85rem;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 100%;
      }
    }
  }

  .btn-edit-bookmark {
    opacity: 0;
    position: absolute;
    right: 1rem;
    top: 0.75rem;

    @media (hover: hover) {
      &:hover {
        opacity: 1 !important;
      }
    }
  }

  .menu {
    background-color: var(--color-bookmark-menu-bg);
    border-radius: $border-radius-well;
    display: flex;
    height: 100%;
    justify-content: center;
    position: absolute;
    text-align: center;
    user-select: none;
    width: 100%;
    z-index: 60;

    icon-button {
      &.btn-delete-bookmark {
        button {
          background-color: var(--color-danger) !important;
          color: var(--color-bookmark-menu-button-delete-icon) !important;
        }
      }

      button {
        background-color: var(--color-bookmark-menu-button-bg) !important;
        color: var(--color-bookmark-menu-button-icon) !important;
        position: static !important;
      }
    }

    .buttons {
      align-items: center;
      display: flex;
      height: 100%;
      justify-content: space-around;
      max-width: 25rem;
      width: 100%;
    }
  }

  .separator {
    background-color: var(--color-separator-bg);
    box-shadow: none;
    height: 0.5rem;

    @media (hover: hover) {
      &:hover {
        cursor: default;
      }
    }
  }

  @media (hover: hover) {
    &:focus,
    &:hover {
      & > .bookmark-content {
        background-color: var(--color-bookmark-bg-hover);
      }
    }

    &:hover {
      cursor: pointer;

      & > .btn-edit-bookmark {
        opacity: 0.8;
      }
    }
  }
}
</file>

<file path="src/modules/app/app-search/bookmark/bookmark.component.ts">
import { Component, Input, Output } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { BookmarkType } from '../../../shared/bookmark/bookmark.enum';
import { Bookmark } from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { PlatformService } from '../../../shared/global-shared.interface';
import { UtilityService } from '../../../shared/utility/utility.service';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';
import { BookmarkTreeItem } from '../app-search.interface';

@Component({
  controllerAs: 'vm',
  selector: 'bookmark',
  styles: [require('./bookmark.component.scss')],
  template: require('./bookmark.component.html'),
  transclude: true
})
export class BookmarkComponent {
  Strings = require('../../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  bookmarkHelperSvc: BookmarkHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;

  @Input('<ngModel') bookmark: Bookmark;
  @Input('<?') enableEditButton = true;
  @Input() enableSelect: boolean;
  @Input() isSelected: boolean;

  @Output() editBookmark: () => any;
  @Output() deleteBookmark: () => any;
  @Output() shareBookmark: () => any;

  static $inject = ['$timeout', 'AppHelperService', 'BookmarkHelperService', 'PlatformService', 'UtilityService'];
  constructor(
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService
  ) {
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  clickBookmarkHeading(event: Event, bookmark: BookmarkTreeItem): void {
    event.stopPropagation();

    // If this is not a folder, return
    if (bookmark.url) {
      return;
    }

    // Toggle display children for this folder
    bookmark.open = !bookmark.open;
    this.$timeout(() => {
      bookmark.displayChildren = !bookmark.displayChildren;

      // Close any open child folders
      if (!bookmark.open) {
        this.bookmarkHelperSvc.eachBookmark((child) => {
          if ((child as BookmarkTreeItem).open) {
            (child as BookmarkTreeItem).open = false;
            (child as BookmarkTreeItem).displayChildren = false;
          }
        }, bookmark.children);
      }
    }, 100);
  }

  isSeparator(bookmark: BookmarkTreeItem): boolean {
    return this.bookmarkHelperSvc.getBookmarkType(bookmark) === BookmarkType.Separator;
  }
}
</file>

<file path="src/modules/app/app-search/bookmark-tree/bookmark-tree.component.html">
<bookmark ng-repeat="bookmark in vm.nodes" ng-model="bookmark" delete-bookmark="vm.deleteBookmark()"
          edit-bookmark="vm.editBookmark()"
          enable-edit-button="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
          enable-select="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
          is-selected="vm.selectedBookmark === bookmark.id" share-bookmark="vm.shareBookmark()"
          ng-class="{ 'folder': vm.isFolder(bookmark), 'open': bookmark.displayChildren, 'animate': vm.selectedBookmark === bookmark.id }"
          hm-press="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) && bookmark.url && vm.utilitySvc.handleEvent(vm.selectBookmark(), $event, bookmark.id)">
  <bookmark-tree ng-model="bookmark.children" selected-bookmark="vm.selectedBookmark" edit-bookmark="vm.editBookmark()"
                 select-bookmark="vm.selectBookmark()" share-bookmark="vm.shareBookmark()"
                 delete-bookmark="vm.deleteBookmark()">
  </bookmark-tree>
</bookmark>
</file>

<file path="src/modules/app/app-search/bookmark-tree/bookmark-tree.component.scss">
@use 'sass:color';
@import '../../../../styles/modules/all';

bookmark-tree {
  --color-bookmark-tree-root-bg: rgba(#{hex2rgb($color-text2-default)}, 0.3);
  --color-bookmark-tree-root-text: #{$color-text1-default};
  --color-bookmark-tree-folder-bg: var(--color-separator-bg);
  --color-bookmark-tree-folder-text: #{$color-text1-default};
  --color-bookmark-tree-folder-icon: #{$color-bg2-default};
  --color-bookmark-tree-bookmark-hover: #{color.scale($color-bg2-default, $lightness: 70%, $saturation: 50%)};

  @include theme-dark {
    --color-bookmark-bg: var(--color-separator-bg);
    --color-bookmark-tree-root-bg: #{$color-bg2-dark};
    --color-bookmark-tree-root-text: #{$color-text2-dark};
    --color-bookmark-tree-folder-bg: var(--color-separator-bg);
    --color-bookmark-tree-folder-text: #{$color-text2-dark};
    --color-bookmark-tree-folder-icon: rgba(#{hex2rgb($color-text1-dark)}, 0.6);
    --color-bookmark-tree-bookmark-hover: rgba(#{hex2rgb($color-text3-dark)}, 0.4);
  }

  &.root > .folder > .bookmark-content {
    background-color: var(--color-bookmark-tree-root-bg);
  }

  bookmark {
    &.folder {
      box-shadow: none;
      color: var(--color-bookmark-tree-root-text);
      max-height: none;
      transition: background-color ease-in-out 0.2s;

      &.open {
        & > .bookmark-content > .bookmark-heading {
          margin-bottom: 0.75rem;
        }
      }

      & > .bookmark-content {
        background-color: var(--color-bookmark-tree-folder-bg);
        padding: 0.5rem 1rem;

        & > .bookmark-heading {
          color: var(--color-bookmark-tree-folder-text);
          margin-right: 0;
          padding-left: 1.5rem;
          padding-right: 1.5rem;

          icon {
            @include valign;

            font-size: 0.9em;

            &.chevron {
              color: var(--color-bookmark-tree-folder-icon);
              font-size: 1.2em;
              opacity: 0;
              right: 0;
            }

            &.folder {
              left: 0;
              top: -0.1em;
            }
          }

          @media (hover: hover) {
            &:hover {
              cursor: pointer;

              &:not(.opening) icon.chevron {
                opacity: 0.6;
              }
            }
          }
        }

        .empty {
          font-style: italic;
          margin: 0.25rem 0 0;
          text-align: center;
        }

        .spinner-border {
          @include spinner-colour(var(--color-bookmark-tree-folder-icon));
          @include valign;

          opacity: 0.6;
          right: 0;
        }
      }
    }

    @media (hover: hover) {
      &:not(.folder) {
        &:focus,
        &:hover {
          & > .bookmark-content {
            background-color: var(--color-bookmark-tree-bookmark-hover);
          }
        }
      }
    }
  }
}
</file>

<file path="src/modules/app/app-search/bookmark-tree/bookmark-tree.component.ts">
import { Component, Input, Output } from 'angular-ts-decorators';
import { BookmarkType } from '../../../shared/bookmark/bookmark.enum';
import { Bookmark } from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { PlatformService } from '../../../shared/global-shared.interface';
import { UtilityService } from '../../../shared/utility/utility.service';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';
import { BookmarkTreeItem } from '../app-search.interface';

@Component({
  controllerAs: 'vm',
  selector: 'bookmarkTree',
  styles: [require('./bookmark-tree.component.scss')],
  template: require('./bookmark-tree.component.html')
})
export class BookmarkTreeComponent {
  Strings = require('../../../../../res/strings/en.json');

  appHelperSvc: AppHelperService;
  bookmarkHelperSvc: BookmarkHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;

  @Input('<ngModel') nodes: Bookmark[];
  @Input() selectedBookmark: Bookmark;

  @Output() deleteBookmark: () => any;
  @Output() editBookmark: () => any;
  @Output() selectBookmark: () => any;
  @Output() shareBookmark: () => any;

  static $inject = ['AppHelperService', 'BookmarkHelperService', 'PlatformService', 'UtilityService'];
  constructor(
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService
  ) {
    this.appHelperSvc = AppHelperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
  }

  isFolder(bookmark: BookmarkTreeItem): boolean {
    const bookmarkType = this.bookmarkHelperSvc.getBookmarkType(bookmark);
    return bookmarkType === BookmarkType.Container || bookmarkType === BookmarkType.Folder;
  }
}
</file>

<file path="src/modules/app/app-search/app-search.component.html">
<div class="view-content" ng-class="{ 'search-bar-bottom': vm.alternateSearchBarPosition }">
  <div class="header-panel" hm-tap="vm.selectedBookmarkId = null">
    <icon-button type="'settings'" size="1.3em" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.Settings) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.switchToSettingsView)" tab-index="5"></icon-button>
    <icon-button type="'bookmark'" size="1.4em"
                 title="{{ vm.currentUrlBookmarked ? vm.platformSvc.getI18nString(vm.Strings.Button.EditBookmark) : vm.platformSvc.getI18nString(vm.Strings.Button.AddBookmark) }}"
                 ng-class="{ 'active': vm.currentUrlBookmarked }"
                 on-click="vm.utilitySvc.handleEvent(vm.switchToBookmarkView)"
                 ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)" tab-index="4"></icon-button>
    <icon-button type="vm.displayFolderView ? 'align-justify' : 'align-left'" size="1.5em"
                 title="{{ vm.displayFolderView ? vm.platformSvc.getI18nString(vm.Strings.View.Search.SearchResults) : vm.platformSvc.getI18nString(vm.Strings.View.Search.BookmarkTree) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.toggleBookmarkTreeView)" tab-index="3"></icon-button>
    <div class="search-form form-group icon-button-container">
      <input type="text" name="txtSearch" ng-model="vm.query" ng-model-options="{ debounce: globals.Debounce }"
             class="form-control" maxlength="200"
             placeholder="{{ vm.platformSvc.getI18nString(vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName) ? vm.Strings.View.Search.Placeholder : vm.Strings.View.Search.Placeholder) }}"
             ng-keydown="vm.utilitySvc.handleEvent(vm.searchBoxKeyDown, $event)" ng-trim="false" autocapitalize="off"
             autocomplete="off" autocorrect="off" spellcheck="false" tabindex="1" />
      <icon type="'search'" bold="true" class="search-icon"></icon>
      <div class="lookahead-container">
        <span class="measure" ng-bind-html="vm.queryMeasure"></span>
        <span class="lookahead" ng-show="vm.lookahead" ng-click="vm.utilitySvc.handleEvent(vm.selectLookahead)">{{
        vm.lookahead }} <icon type="'edit-3'" ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
          </icon></span>
      </div>
      <icon-button type="'x'" bold="true" class="btn-clear" ng-show="vm.query"
                   title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Search.Clear) }}"
                   on-click="vm.utilitySvc.handleEvent(vm.clearSearch)" tab-index="2"></icon-button>
    </div>
  </div>
  <icon-button type="'bookmark'" fab="true" fixed="true" class="btn-add-bookmark"
               title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.AddBookmark) }}"
               on-click="vm.utilitySvc.handleEvent(vm.addBookmark)" tab-index="-1"
               ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"></icon-button>
  <div class="search-results-container pull-to-refresh" ng-if="!vm.displayFolderView" ng-show="vm.results">
    <h4 ng-show="!vm.query && vm.results.length === 0">
      {{ vm.platformSvc.getI18nString(vm.Strings.View.Search.NoBookmarks) }}
    </h4>
    <h4 ng-show="vm.query && vm.results.length === 0">
      {{ vm.platformSvc.getI18nString(vm.Strings.View.Search.NoResults) }}
    </h4>
    <div ng-show="vm.results.length > 0" infinite-scroll="vm.displayMoreSearchResults()"
         infinite-scroll-container="'.search-results-container'">
      <bookmark ng-repeat="result in vm.results | limitTo:vm.resultsDisplayed" ng-model="result"
                delete-bookmark="vm.deleteBookmark" edit-bookmark="vm.editBookmark"
                enable-edit-button="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
                enable-select="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
                is-selected="vm.selectedBookmarkId ===  result.id" share-bookmark="vm.shareBookmark"
                hm-press="vm.utilitySvc.handleEvent(vm.selectBookmark, $event,  result.id)"
                ng-keydown="vm.utilitySvc.handleEvent(vm.searchResultsKeyDown, $event)"
                ng-class="{ 'animate': vm.selectedBookmarkId ===  result.id }" tabindex="{{ $index + 5 }}">
      </bookmark>
    </div>
  </div>
  <div class="bookmark-tree-container pull-to-refresh" ng-if="vm.displayFolderView">
    <bookmark-tree class="root" ng-model="vm.bookmarkTree" selected-bookmark="vm.selectedBookmarkId"
                   edit-bookmark="vm.editBookmark" select-bookmark="vm.selectBookmark" share-bookmark="vm.shareBookmark"
                   delete-bookmark="vm.deleteBookmark" ng-if="vm.bookmarkTree">
    </bookmark-tree>
    <h4 ng-if="vm.bookmarkTree.length === 0">
      {{ vm.platformSvc.getI18nString(vm.Strings.View.Search.NoBookmarks) }}
    </h4>
  </div>
</div>
</file>

<file path="src/modules/app/app-search/app-search.component.scss">
@import '../../../styles/modules/all';

app-search {
  display: block;

  .bookmark-tree-container,
  .search-results-container {
    flex: 0 1 100%;
    overflow: auto;
    padding: 0 0.75rem;

    & > h4 {
      font-size: 1.4rem;
      font-weight: 400;
      text-align: center;
    }
  }

  .search-results-container {
    &.ng-hide {
      margin-top: 0;
    }
  }

  .view-content {
    padding: 0;

    .header-panel {
      height: auto;
      margin-bottom: 0;
      padding: 0.75rem;

      & > icon-button {
        margin-left: 0.2em;

        &.active svg {
          fill: var(--color-button-icon-text);
        }
      }

      .search-form {
        background-color: var(--color-input-bg);
        border-radius: $border-radius-input;
        flex: 0 1 100%;
        margin-bottom: 0;
        position: relative;

        input {
          background: transparent;
          border-width: 0;
          font-size: 1.1em;
          line-height: 1.5em;
          padding: 0 1.5em;
          position: relative;
          width: 100%;
          z-index: 50;

          &::placeholder {
            color: var(--color-input-placeholder);
          }
        }

        .btn-clear {
          font-size: 1rem;
        }

        .lookahead-container {
          border: 0;
          font-size: 1.1em;
          left: 1.5em;
          line-height: 1.5em;
          width: calc(100% - 3em);
        }

        .search-icon {
          @include valign;

          color: var(--color-input-placeholder);
          font-size: 0.9em;
          left: 0.5em;
          z-index: 60;
        }
      }
    }
  }
}
</file>

<file path="src/modules/app/app-search/app-search.component.ts">
import './app-search.component.scss';
import angular, { IScope } from 'angular';
import { OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AndroidAppHelperService } from '../../android/android-app/shared/android-app-helper/android-app-helper.service';
import { AlertService } from '../../shared/alert/alert.service';
import { Bookmark, BookmarkSearchQuery } from '../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { ExceptionHandler } from '../../shared/errors/errors.interface';
import Globals from '../../shared/global-shared.constants';
import { PlatformService } from '../../shared/global-shared.interface';
import { SettingsService } from '../../shared/settings/settings.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { WorkingService } from '../../shared/working/working.service';
import { KeyCode, RoutePath } from '../app.enum';
import { AppHelperService } from '../shared/app-helper/app-helper.service';
import { BookmarkSearchResult, BookmarkTreeItem } from './app-search.interface';

export abstract class AppSearchComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $q: ng.IQService;
  $scope: IScope;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  appHelperSvc: AppHelperService;
  bookmarkHelperSvc: BookmarkHelperService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  alternateSearchBarPosition: boolean;
  RoutePath = RoutePath;
  batchResultsNum = 10;
  bookmarkTree: BookmarkTreeItem[];
  cachedBookmarks: Bookmark[];
  currentUrlBookmarked: boolean;
  disableQueryWatch: () => void;
  displayFolderView: boolean;
  globals = Globals;
  lastWord: string;
  lookahead: string;
  query: string;
  queryMeasure: string;
  results: BookmarkSearchResult[];
  resultsDisplayed = 10;
  selectedBookmarkId: number;
  scrollDisplayMoreEnabled = true;

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'BookmarkHelperService',
    'PlatformService',
    'SettingsService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    BookmarkHelperSvc: BookmarkHelperService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$q = $q;
    this.$scope = $scope;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.appHelperSvc = AppHelperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;

    this.enableQueryWatch();
  }

  @boundMethod
  addBookmark(): void {
    this.appHelperSvc.switchView(RoutePath.Bookmark);
  }

  bookmarksAreEquivalent(b1: Bookmark[], b2: Bookmark[]): boolean {
    const getAllBookmarkProps = (bookmarks: Bookmark[]) => {
      // Convert bookmarks
      const allProps = [];
      this.bookmarkHelperSvc.eachBookmark((bookmark) => {
        const props = Object.entries(bookmark).filter((resultProps) => {
          const [propertyName] = resultProps;
          return (
            propertyName !== '$$hashKey' &&
            propertyName !== 'children' &&
            propertyName !== 'displayChildren' &&
            propertyName !== 'open'
          );
        });
        allProps.push(props);
      }, bookmarks);
      return allProps;
    };

    // Iterate
    const b1Props = getAllBookmarkProps(b1);
    const b2Props = getAllBookmarkProps(b2);
    return angular.equals(b1Props, b2Props);
  }

  @boundMethod
  clearSearch(): void {
    this.resetSearch();
    this.displayFolderView = false;
    this.appHelperSvc.focusOnElement('input[name=txtSearch]');
  }

  displayMoreSearchResults(): void {
    if (this.results?.length && this.scrollDisplayMoreEnabled) {
      // Display next batch of results
      this.resultsDisplayed += this.batchResultsNum;
    }
  }

  displaySearchResults(results: Bookmark[]): void {
    this.scrollDisplayMoreEnabled = false;
    this.resultsDisplayed = this.batchResultsNum;
    this.results = results;

    // Scroll to top of search results
    this.$timeout(() => {
      this.scrollDisplayMoreEnabled = true;
      const resultsPanel = document.querySelector('.search-results-container');
      if (resultsPanel) {
        resultsPanel.scrollTop = 0;
      }
    }, Globals.InterfaceReadyTimeout);
  }

  @boundMethod
  editBookmark(event: Event, bookmarkToUpdate: Bookmark): void {
    // Stop event propogation
    this.utilitySvc.stopEventPropagation(event);

    // On mobiles, display bookmark panel with slight delay to avoid focussing on description field
    if (this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)) {
      this.$timeout(() => {
        this.appHelperSvc.switchView(`${RoutePath.Bookmark}/${bookmarkToUpdate.id}`);
      }, 500);
    } else {
      this.appHelperSvc.switchView(`${RoutePath.Bookmark}/${bookmarkToUpdate.id}`);
    }
  }

  enableQueryWatch(): void {
    this.disableQueryWatch = this.$scope.$watch(
      () => this.query,
      (newVal, oldVal) => {
        if ((newVal ?? null) !== (oldVal ?? null)) {
          this.searchTextChanged();
        }
      }
    );
  }

  getKeywords(text: string): ng.IPromise<string[]> {
    return this.platformSvc
      .getCurrentLocale()
      .then((currentLocale) => this.utilitySvc.splitTextIntoWords(text, currentLocale))
      .then((words) => words.filter((x) => x.length > Globals.LookaheadMinChars));
  }

  getSearchResults(): ng.IPromise<Bookmark[]> {
    let queryText = this.query;
    return (
      this.$q
        .resolve()
        .then(() => {
          const searchQuery: BookmarkSearchQuery = {
            url: undefined,
            keywords: []
          };
          if (!queryText) {
            return searchQuery;
          }
          // Match url in query
          const urlRegex = new RegExp(`^${Globals.URL.ValidUrlRegex}`, 'i');
          const url = queryText.match(urlRegex)?.find(Boolean);
          if (url) {
            searchQuery.url = url;
            queryText = queryText.replace(urlRegex, '').trim();
          }

          // Iterate query words to form query data object
          return this.getKeywords(queryText).then((keywords) => {
            searchQuery.keywords = keywords;
            return searchQuery;
          });
        })
        // Execute search and return results
        .then((searchQuery) => this.bookmarkHelperSvc.searchBookmarks(searchQuery))
    );
  }

  ngOnInit(): ng.IPromise<void> {
    return this.settingsSvc.all().then((settings) => {
      this.alternateSearchBarPosition = settings.alternateSearchBarPosition;
      this.displayFolderView = settings.defaultToFolderView;
      this.refreshBookmarks();
    });
  }

  refreshBookmarks(): ng.IPromise<boolean> {
    return this.bookmarkHelperSvc.getCachedBookmarks().then((cachedBookmarks) => {
      // Update bookmark tree only if bookmarks have changed or if visible bookmarks not set
      const doRefresh =
        !angular.equals(cachedBookmarks, this.cachedBookmarks) ||
        (this.displayFolderView ? !this.bookmarkTree : !this.results);
      if (doRefresh) {
        this.selectedBookmarkId = undefined;
        this.cachedBookmarks = cachedBookmarks;

        if (this.displayFolderView) {
          // When in folder view, sort containers by display title
          const bookmarkTreeItems = angular
            .copy(cachedBookmarks)
            .sort((x, y) =>
              this.bookmarkHelperSvc
                .getBookmarkTitleForDisplay(x)
                .localeCompare(this.bookmarkHelperSvc.getBookmarkTitleForDisplay(y))
            ) as BookmarkTreeItem[];

          this.bookmarkTree = bookmarkTreeItems;
        }
      }
      return doRefresh;
    });
  }

  resetSearch(): void {
    // Clear current query and display default search results
    this.disableQueryWatch();
    this.query = null;
    this.queryMeasure = null;
    this.lookahead = null;
    this.enableQueryWatch();
    this.results = undefined;
  }

  searchBookmarks(): ng.IPromise<void> {
    return this.getSearchResults().then((results) => this.displaySearchResults(results));
  }

  @boundMethod
  searchBoxKeyDown(event: KeyboardEvent): void {
    switch (event.keyCode) {
      case KeyCode.Enter:
        (document.activeElement as HTMLInputElement).blur();

        // Get search results
        this.displayFolderView = false;
        this.$timeout(() => this.searchBookmarks(), Globals.Debounce);

        // Return focus to search box
        this.appHelperSvc.focusOnElement('input[name=txtSearch]');
        break;

      case KeyCode.ArrowDown:
        if (!this.results?.length) {
          break;
        }

        // Focus on first search result
        event.preventDefault();
        Array.prototype.slice
          .call(document.querySelectorAll('.search-results-container bookmark'))
          .every((searchResult: HTMLDivElement) => {
            searchResult.focus();
            return false;
          });
        break;

      case KeyCode.Tab:
      case KeyCode.ArrowRight:
        if (!this.lookahead) {
          break;
        }
        // Add lookahead to search query
        event.preventDefault();
        this.selectLookahead();
        break;
      default:
        // Clear lookahead if any other key was pressed
        this.lookahead = null;
    }
  }

  @boundMethod
  searchResultsKeyDown(event: KeyboardEvent): void {
    let currentIndex: number;
    let newIndex: number;
    let elementToFocus: Element;

    const target = event.target as HTMLDivElement;

    switch (event.keyCode) {
      case KeyCode.Enter:
        (target.querySelector('.bookmark-content') as HTMLDivElement).click();
        break;
      case KeyCode.ArrowUp:
        if (target.previousElementSibling) {
          // Focus on previous result
          elementToFocus = target.previousElementSibling;
        } else {
          // Focus on search box
          elementToFocus = document.querySelector('input[name=txtSearch]');
        }
        break;
      case KeyCode.ArrowDown:
        if (target.nextElementSibling) {
          // Focus on next result
          elementToFocus = target.nextElementSibling;
        }
        break;
      case KeyCode.PageUp:
        // Focus on result 10 up from current
        currentIndex = [...target.parentElement.children].indexOf(target);
        newIndex = currentIndex - 10;
        if (newIndex < 0) {
          elementToFocus = target.parentElement.firstElementChild;
        } else {
          elementToFocus = target.parentElement.children[newIndex];
        }
        break;
      case KeyCode.PageDown:
        // Focus on result 10 down from current
        currentIndex = [...target.parentElement.children].indexOf(target);
        newIndex = currentIndex + 10;
        if (target.parentElement.children.length <= newIndex) {
          elementToFocus = target.parentElement.lastElementChild;
        } else {
          elementToFocus = target.parentElement.children[newIndex];
        }
        break;
      case KeyCode.Home:
        // Focus on first result
        elementToFocus = target.parentElement.firstElementChild;
        break;
      case KeyCode.End:
        // Focus on last result
        elementToFocus = target.parentElement.lastElementChild;
        break;
      case KeyCode.Backspace:
      case KeyCode.Space:
        // Focus on search box
        elementToFocus = document.querySelector('input[name=txtSearch]');
        break;
      default:
        // Numbers and letters
        if (event.keyCode > 47 && event.keyCode < 106) {
          // Focus on search box
          elementToFocus = document.querySelector('input[name=txtSearch]');
        }
    }

    if (elementToFocus) {
      event.preventDefault();
      (elementToFocus as HTMLDivElement).focus();
    }
  }

  searchTextChanged(): void {
    // Hide alerts
    this.alertSvc.clearCurrentAlert();

    // No query, clear results
    if (!this.query?.trim()) {
      this.resetSearch();
      return;
    }

    // Get last word of search query
    const queryWords = this.query.split(/[\s]+/);
    const lastWord = queryWords.slice(-1).find(Boolean);

    // Display lookahead only if word length exceed minimum
    if ((lastWord ?? []).length < Globals.LookaheadMinChars) {
      this.lookahead = null;
      return;
    }

    // Get lookahead, use current results only if multiple query words are present
    this.platformSvc.getCurrentLocale().then((currentLocale) => {
      return this.bookmarkHelperSvc
        .getLookahead(lastWord.toLocaleLowerCase(currentLocale), queryWords.length > 1 ? this.results : undefined)
        .then((results) => {
          if (!results) {
            this.lookahead = null;
            return;
          }

          let lookahead = results[0];
          const word = results[1];

          // If lookahead is already in query, ignore
          if (queryWords.findIndex((x) => this.utilitySvc.stringsAreEquivalent(x, lookahead, currentLocale)) >= 0) {
            this.lookahead = null;
            return;
          }

          if (lookahead && this.utilitySvc.stringsAreEquivalent(word, lastWord, currentLocale)) {
            // Set lookahead after trimming word
            lookahead = lookahead ? lookahead.substring(word.length) : undefined;
            this.queryMeasure = this.query.replace(/\s/g, '&nbsp;');
            this.lookahead = lookahead.replace(/\s/g, '&nbsp;');
          }
        })
        .then(() => {
          this.displayFolderView = false;
          return this.searchBookmarks();
        });
    });
  }

  @boundMethod
  selectBookmark(event: Event, bookmarkId: number): void {
    this.utilitySvc.stopEventPropagation(event);
    if (!this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)) {
      return;
    }

    // Display menu for selected bookmark
    this.selectedBookmarkId = bookmarkId;
  }

  @boundMethod
  selectLookahead(): void {
    this.query = `${this.query}${this.lookahead}`;
    this.lookahead = null;
    this.searchTextChanged();
    this.appHelperSvc.focusOnElement('input[name=txtSearch]');
  }

  @boundMethod
  shareBookmark(event: Event, bookmarkToShare: Bookmark) {
    // Stop event propogation
    this.utilitySvc.stopEventPropagation(event);

    // Trigger native share functionality
    (this.appHelperSvc as AndroidAppHelperService).shareBookmark(bookmarkToShare);
  }

  @boundMethod
  switchToBookmarkView(): void {
    this.appHelperSvc.switchView(RoutePath.Bookmark);
  }

  @boundMethod
  switchToSettingsView(): void {
    this.appHelperSvc.switchView(RoutePath.Settings);
  }

  @boundMethod
  toggleBookmarkTreeView(): ng.IPromise<void> {
    // Clear current query and switch view
    this.resetSearch();
    this.displayFolderView = !this.displayFolderView;
    return this.refreshBookmarks().then(() => {
      // Ensure search results are displayed in results view
      if (!this.displayFolderView) {
        return this.getSearchResults().then((results) => this.displaySearchResults(results));
      }
    });
  }
}
</file>

<file path="src/modules/app/app-search/app-search.controller.html">
<app-search class="animate-fade-in" ng-if="vm.showComponent"></app-search>
</file>

<file path="src/modules/app/app-search/app-search.interface.ts">
import { Bookmark } from '../../shared/bookmark/bookmark.interface';

export interface BookmarkSearchResult extends Bookmark {
  score?: number;
}

export interface BookmarkTreeItem extends Bookmark {
  displayChildren: boolean;
  open: boolean;
}
</file>

<file path="src/modules/app/app-settings/about-settings/about-settings.component.html">
<div>
  <button id="support" type="button" class="btn btn-default"
          ng-click="vm.utilitySvc.handleEvent(vm.switchToSupportView)">
    {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Support) }}
  </button>
</div>
<div class="version">
  <a class="new-tab" href="{{ vm.releaseNotesUrl }}"
     title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.ReleaseNotes) }}">v{{ vm.appVersion }}</a>
</div>
</file>

<file path="src/modules/app/app-settings/about-settings/about-settings.component.scss">
@import '../../../../styles/modules/all';

about-settings {
  --color-settings-about-link-hover: #{$color-text2-default};

  align-items: center;
  display: flex;
  flex-direction: column;
  margin: 2rem 0 0.75rem;

  @include theme-dark {
    --color-settings-about-link-hover: #{$color-text1-dark};
  }

  button.btn.btn-default {
    margin-bottom: 1rem;
    text-transform: none;
  }

  .version {
    font-size: 0.95rem;
  }

  @media (hover: hover) {
    a {
      &:active,
      &:focus,
      &:hover {
        border-bottom-color: var(--color-settings-about-link-hover);
        color: var(--color-settings-about-link-hover);
      }
    }
  }
}
</file>

<file path="src/modules/app/app-settings/about-settings/about-settings.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import Globals from '../../../shared/global-shared.constants';
import { PlatformService } from '../../../shared/global-shared.interface';
import { UtilityService } from '../../../shared/utility/utility.service';
import { RoutePath } from '../../app.enum';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'aboutSettings',
  styles: [require('./about-settings.component.scss')],
  template: require('./about-settings.component.html')
})
export class AboutSettingsComponent implements OnInit {
  Strings = require('../../../../../res/strings/en.json');

  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;

  appVersion: string;
  releaseNotesUrl: string;

  static $inject = ['AppHelperService', 'PlatformService', 'UtilityService'];
  constructor(AppHelperSvc: AppHelperService, PlatformSvc: PlatformService, UtilitySvc: UtilityService) {
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
  }

  ngOnInit(): void {
    // Initialise view model values
    this.platformSvc.getAppVersionName().then((appVersion) => {
      this.appVersion = appVersion;
      this.releaseNotesUrl = `${Globals.ReleaseNotesUrlStem}${appVersion}`;
    });
  }

  @boundMethod
  switchToSupportView(): void {
    this.appHelperSvc.switchView(RoutePath.Support);
  }
}
</file>

<file path="src/modules/app/app-settings/backup-restore-settings/backup-restore-settings.component.html">
<div class="well well-sm">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Title) }}</h4>
  <div class="panel-content">
    <div class="form-group setting-group"
         ng-if="!vm.syncEnabled && vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
      <p class="description text-center"
         ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Settings.NotAvailable)">
      </p>
    </div>
    <div ng-show="vm.syncEnabled || !vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
      <div class="form-group setting-group">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Backup.Title) }}</label>
        <p class="description" ng-if="!vm.syncEnabled">{{
        vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Backup.Local) }}</p>
        <p class="description" ng-if="vm.syncEnabled">{{
        vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Backup.Synced) }}</p>
        <div class="buttons animate-fade-in" ng-hide="vm.backupCompletedMessage != null">
          <button class="btn btn-default" ng-disabled="vm.savingBackup" ng-class="{ 'working': vm.savingBackup }"
                  ng-click="vm.utilitySvc.handleEvent(vm.downloadBackup)" ng-disabled="vm.savingBackup">
            <span class="spinner-border spinner-border-sm" ng-show="vm.savingBackup" aria-hidden="true"></span>
            <span ng-show="vm.savingBackup">{{
            vm.platformSvc.getI18nString(vm.Strings.Button.Saving) }}
            </span>
            <span ng-hide="vm.savingBackup">{{
            vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Backup.Button) }}</span>
          </button>
        </div>
        <div class="confirm animate-fade-in file-downloaded" ng-show="vm.backupCompletedMessage != null">
          <p ng-if="vm.backupCompletedMessage !== ''">{{ vm.backupCompletedMessage }}</p>
          <div class="buttons">
            <button class="btn btn-default focused" ng-click="vm.backupCompletedMessage = null">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Done) }}
            </button>
          </div>
        </div>
      </div>
      <div class="form-group setting-group" ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
        <div class="setting-title">
          <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Title) }}</label>
          <div>
            <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleAutoBackUp)">
              <input type="checkbox" id="autoBackUpEnabled" ng-model="vm.autoBackUpEnabled" />
              <label for="autoBackUpEnabled" ng-class="{ 'animate': true }"></label>
            </div>
          </div>
        </div>
        <p class="description" ng-if="!vm.autoBackUpSchedule">
          {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Description) }}
        </p>
        <p class="description" ng-if="vm.autoBackUpSchedule">
          {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.RunsAt) }}
          {{ vm.autoBackUpSchedule.autoBackUpHour }}:{{ vm.autoBackUpSchedule.autoBackUpMinute }}
          {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Every) }}
          {{ vm.autoBackUpSchedule.autoBackUpNumber }} {{ vm.autoBackUpSchedule.autoBackUpUnit }}.
        </p>
        <form id="autoBackUpForm" name="vm.autoBackUpForm" class="confirm animate-fade-in"
              ng-show="vm.displayAutoBackUpForm && !vm.displayAutoBackUpConfirmation" novalidate>
          <div class="form-group">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.RunsAt) }}
            <select name="autoBackUpAtHour" class="form-select focused" ng-model="vm.autoBackUpAtHour">
              <option ng-repeat="option in vm.autoBackUpHours" value="{{ option }}">{{ option }}</option>
            </select>
            :
            <select name="autoBackUpAtMinute" class="form-select" ng-model="vm.autoBackUpAtMinute">
              <option ng-repeat="option in vm.autoBackUpMinutes" value="{{ option }}">{{ option }}</option>
            </select>
          </div>
          <div class="form-group">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Every) }}
            <select name="autoBackUpEveryNumber" class="form-select" ng-model="vm.autoBackUpEveryNumber">
              <option value="1">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Single) }}
              </option>
              <option value="2">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Two) }}
              </option>
              <option value="3">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Three) }}
              </option>
              <option value="4">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Four) }}
              </option>
              <option value="5">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Five) }}
              </option>
              <option value="6">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Six) }}
              </option>
              <option value="7">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Seven) }}
              </option>
              <option value="8">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Eight) }}
              </option>
              <option value="9">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Nine) }}
              </option>
              <option value="10">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Ten) }}
              </option>
              <option value="11">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Eleven) }}
              </option>
              <option value="12">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Numbers.Twelve) }}
              </option>
            </select>
            <select name="autoBackUpEveryUnit" class="form-select" ng-model="vm.autoBackUpEveryUnit">
              <option value="day">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Units.Day) }}</option>
              <option value="week">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Units.Week) }}
              </option>
              <option value="month">
                {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Units.Month) }}
              </option>
            </select>
          </div>
          <div class="buttons">
            <button class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.submitAutoBackUpForm)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.OK) }}
            </button>
            <button class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.hideAutoBackUpPanel)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Cancel) }}
            </button>
          </div>
        </form>
        <div class="confirm animate-fade-in auto-backups-confirmation" ng-if="vm.displayAutoBackUpConfirmation">
          <p>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.AutoBackup.Confirmation) }}</p>
          <div class="buttons">
            <button class="btn btn-default focused" ng-click="vm.utilitySvc.handleEvent(vm.confirmAutoBackUpForm)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Done) }}
            </button>
          </div>
        </div>
      </div>
      <div class="form-group setting-group">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Title) }}</label>
        <p class="description" ng-if="!vm.syncEnabled">{{
        vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Local.Description) }}</p>
        <p class="description" ng-if="vm.syncEnabled">{{
        vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Synced.Description) }}</p>
        <div class="buttons vertical animate-fade-in"
             ng-hide="vm.backupCompletedMessage != null || vm.displayRestoreForm || vm.displayRestoreConfirmation || vm.restoreCompletedMessage || vm.displayResetConfirmation || vm.resetCompleted || vm.resetUnavailable">
          <button class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.displayRestorePanel)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Button) }}
          </button>
          <button class="btn btn-default" ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
                  ng-click="vm.utilitySvc.handleEvent(vm.displayResetPanel)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Reset.Button) }}
          </button>
        </div>
        <form id="restoreForm" name="vm.restoreForm" class="confirm animate-fade-in" ng-show="vm.displayRestoreForm"
              novalidate>
          <input type="file" name="files[]" id="backupFile" class="display-none" tabindex="-1" />
          <p ng-if="vm.useTextarea">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Copy) }}
          </p>
          <div>
            <label for="dataToRestore"
                   class="sr-only">{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Paste) }}
            </label>
            <div class="form-group" ng-class="{ 'has-error': vm.restoreForm.dataToRestore.$invalid }">
              <input type="hidden" name="dataToRestore" ng-model="vm.dataToRestore" />
              <textarea ng-model="vm.dataToRestore" class="form-control" rows="3" ng-if="vm.useTextarea"
                        ng-change="vm.resetRestoreFormValidity()" autocapitalize="off" autocomplete="off"
                        autocorrect="off" spellcheck="false"></textarea>
              <input type="text" ng-model="vm.backupFileName" class="form-control" readonly
                     placeholder="{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.SelectFile.Placeholder) }}…"
                     ng-if="!vm.useTextarea">
              <div class="validation" ng-if="vm.restoreForm.dataToRestore.$invalid">
                <span ng-if="vm.restoreForm.dataToRestore.$error.InvalidData">
                  {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Invalid) }}
                </span>
              </div>
              <span class="spinner-border spinner-border-sm" ng-show="vm.validatingRestoreData"
                    aria-hidden="true"></span>
            </div>
            <button class="btn btn-default btn-select-file focused" ng-if="!vm.useTextarea"
                    ng-click="vm.utilitySvc.handleEvent(vm.selectBackupFile)">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.SelectFile.Button) }}
            </button>
          </div>
          <div class="buttons">
            <button class="btn btn-default btn-restore"
                    ng-disabled="!vm.dataToRestore || vm.restoreForm.dataToRestore.$invalid"
                    ng-click="vm.utilitySvc.handleEvent(vm.restore)">
              {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.RestoreData) }}
            </button>
            <button type="reset" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.hideRestorePanel)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Cancel) }}
            </button>
          </div>
        </form>
        <div class="confirm animate-fade-in" ng-show="vm.displayRestoreConfirmation">
          <div ng-if="vm.syncEnabled"
               ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Synced.Confirm)">
          </div>
          <div ng-if="!vm.syncEnabled"
               ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Restore.Local.Confirm)">
          </div>
          <div class="buttons">
            <button class="btn btn-default btn-confirm-restore" ng-click="vm.utilitySvc.handleEvent(vm.confirmRestore)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Confirm) }}
            </button>
            <button type="reset" class="btn btn-default" ng-click="vm.displayRestoreConfirmation = false">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Deny) }}
            </button>
          </div>
        </div>
        <div class="confirm animate-fade-in restore-completed" ng-show="vm.restoreCompletedMessage">
          <p>{{ vm.restoreCompletedMessage }}</p>
          <div class="buttons">
            <button class="btn btn-default focused" ng-click="vm.restoreCompletedMessage = null">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Done) }}
            </button>
          </div>
        </div>
        <div class="confirm animate-fade-in" ng-show="vm.displayResetConfirmation">
          <div ng-bind-html="vm.resetConfirmationMessage"></div>
          <div class="buttons">
            <button class="btn btn-default btn-confirm-restore" ng-click="vm.utilitySvc.handleEvent(vm.confirmReset)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Confirm) }}
            </button>
            <button type="reset" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.hideResetPanel)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Deny) }}
            </button>
          </div>
        </div>
        <div class="confirm animate-fade-in reset-completed" ng-show="vm.resetCompleted || vm.resetUnavailable">
          <div></div>
          <p ng-if="vm.resetCompleted">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Reset.Done) }}</p>
          <p ng-if="vm.resetUnavailable">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.BackupRestore.Reset.Unavailable) }}</p>
          <div class="buttons">
            <button class="btn btn-default focused" ng-click="vm.utilitySvc.handleEvent(vm.hideResetPanel)">
              {{ vm.platformSvc.getI18nString(vm.Strings.Button.Done) }}
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/modules/app/app-settings/backup-restore-settings/backup-restore-settings.component.scss">
@import '../../../../styles/modules/all';

backup-restore-settings {
  display: block;

  #autoBackUpForm {
    .buttons {
      margin-top: 1rem;
    }

    .form-group {
      align-items: baseline;
      display: flex;
      justify-content: center;
      margin-bottom: 0.5rem;

      label {
        color: var(--color-settings-description-text);
        font-size: 0.95rem;
        margin-bottom: 0;
      }

      select {
        margin: 0 0.25rem;
      }
    }
  }

  #restoreForm {
    input[type='text'] {
      padding-right: 2rem;
    }

    textarea {
      font-family: $font-stack-code;
      font-size: 0.8rem;
      height: 12rem;
    }

    .btn-select-file {
      display: block;
      margin: 0 auto 1rem;
    }

    .form-group {
      margin-bottom: 0.5rem;
      padding-bottom: 0.4rem;
    }

    .spinner-border {
      position: absolute;
      right: 0.75rem;
      top: 0.6rem;
    }
  }

  .setting-title {
    align-items: flex-start;
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.25rem;
    width: 100%;

    label {
      margin-bottom: 0;
    }
  }
}
</file>

<file path="src/modules/app/app-settings/backup-restore-settings/backup-restore-settings.component.ts">
import angular from 'angular';
import { OnDestroy, OnInit, ViewParent } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { detect } from 'detect-browser';
import { AlertType } from '../../../shared/alert/alert.enum';
import { AlertService } from '../../../shared/alert/alert.service';
import { Backup } from '../../../shared/backup-restore/backup-restore.interface';
import { BackupRestoreService } from '../../../shared/backup-restore/backup-restore.service';
import { BookmarkService } from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { SyncVersionNotSupportedError } from '../../../shared/errors/errors';
import { MessageCommand, PlatformType } from '../../../shared/global-shared.enum';
import { PlatformService } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { SyncType } from '../../../shared/sync/sync.enum';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingContext } from '../../../shared/working/working.enum';
import { WorkingService } from '../../../shared/working/working.service';
import { AppEventType } from '../../app.enum';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';
import { AppSettingsComponent } from '../app-settings.component';

export abstract class BackupRestoreSettingsComponent implements OnInit, OnDestroy {
  Strings = require('../../../../../res/strings/en.json');

  $filter: ng.FilterFactory;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  appHelperSvc: AppHelperService;
  backupRestoreSvc: BackupRestoreService;
  bookmarkHelperSvc: BookmarkHelperService;
  bookmarkSvc: BookmarkService;
  logSvc: LogService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  @ViewParent('^appSettings') appSettingsCtrl: AppSettingsComponent;

  backupCompletedMessage: string;
  backupFileName: string;
  dataToRestore: string;
  displayAutoBackUpForm = false;
  displayAutoBackUpConfirmation = false;
  displayRestoreConfirmation = false;
  displayRestoreForm = false;
  displayResetConfirmation = false;
  restoreCompletedMessage: string;
  restoreForm: ng.IFormController;
  resetCompleted = false;
  resetConfirmationMessage: string;
  resetUnavailable = false;
  savingBackup = false;
  syncEnabled = false;
  useTextarea = false;
  validatingRestoreData = false;

  static $inject = [
    '$filter',
    '$q',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'BackupRestoreService',
    'BookmarkHelperService',
    'BookmarkService',
    'LogService',
    'PlatformService',
    'StoreService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $filter: ng.FilterFactory,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    BackupRestoreSvc: BackupRestoreService,
    BookmarkHelperSvc: BookmarkHelperService,
    BookmarkSvc: BookmarkService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$filter = $filter;
    this.$q = $q;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.appHelperSvc = AppHelperSvc;
    this.backupRestoreSvc = BackupRestoreSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.bookmarkSvc = BookmarkSvc;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;
  }

  @boundMethod
  backupFileChanged(): void {
    const fileInput = document.getElementById('backupFile') as HTMLInputElement;

    if (fileInput.files.length > 0) {
      const [file] = fileInput.files;
      this.backupFileName = file.name;
      const reader = new FileReader();

      reader.onload = ((data) => {
        return () => {
          this.$timeout(() => {
            this.dataToRestore = reader.result as string;

            // Reset validation interface
            this.resetRestoreFormValidity();
            this.validatingRestoreData = true;

            // Trigger restore data validation
            this.$timeout(() => {
              if (this.validateBackupData()) {
                this.appHelperSvc.focusOnElement('#restoreForm .btn-restore');
              }
              this.validatingRestoreData = false;
            });
          });
        };
      })(file);

      // Read the backup file data
      reader.readAsText(file);
    }
  }

  @boundMethod
  confirmRestore(): void {
    if (!this.dataToRestore) {
      // Display alert
      this.alertSvc.currentAlert = {
        message: this.platformSvc.getI18nString(this.Strings.Error.NoDataToRestore.Message),
        title: this.platformSvc.getI18nString(this.Strings.Error.NoDataToRestore.Title),
        type: AlertType.Error
      };
      return;
    }

    // Hide restore confirmation
    this.displayRestoreConfirmation = false;
    this.displayRestoreForm = true;

    // Display loading overlay and start restore
    this.workingSvc.show(WorkingContext.Restoring);
    this.backupRestoreSvc
      .restoreBackupData(JSON.parse(this.dataToRestore))
      .then(() => this.restoreBookmarksSuccess())
      .catch((err) => {
        if (err instanceof SyncVersionNotSupportedError) {
          // Display specific message if user is trying to restore an unsupported backup version
          this.alertSvc.currentAlert = {
            message: this.platformSvc.getI18nString(this.Strings.Error.SyncVersionNotSupported.Restore.Message),
            title: this.platformSvc.getI18nString(this.Strings.Error.SyncVersionNotSupported.Title),
            type: AlertType.Error
          };
          return;
        }
        throw err;
      })
      .finally(() => this.workingSvc.hide());
  }

  @boundMethod
  confirmReset(): void {
    // Display loading overlay
    this.workingSvc.show(WorkingContext.Resetting);

    // Disable sync and restore native bookmarks to installation state
    this.$q
      .all([this.storeSvc.get<any>(StoreKey.InstallBackup), this.platformSvc.disableSync()])
      .then((response) => {
        const [installBackupData] = response;
        const installBackup = JSON.parse(installBackupData);
        const installBackupDate = new Date(installBackup.date);
        const bookmarksToRestore = installBackup.bookmarks;
        this.logSvc.logInfo(`Resetting to installation state from ${installBackupDate.toISOString()}`);

        // Start restore
        return this.platformSvc.queueSync(
          {
            bookmarks: bookmarksToRestore,
            type: SyncType.Local
          },
          MessageCommand.RestoreBookmarks
        );
      })
      .then(() => {
        // Update view model
        this.displayResetConfirmation = false;
        this.resetCompleted = true;
        this.appHelperSvc.focusOnElement('.reset-completed .focused');
        this.utilitySvc.broadcastEvent(AppEventType.SyncDisabled);
      });
  }

  @boundMethod
  displayRestorePanel(): void {
    this.backupFileName = null;
    this.restoreCompletedMessage = null;
    this.displayRestoreConfirmation = false;
    this.dataToRestore = '';
    this.displayRestoreForm = true;
    (document.querySelector('#backupFile') as HTMLInputElement).value = null;
    this.restoreForm.dataToRestore.$setValidity('InvalidData', true);
    if (this.platformSvc.platformName === PlatformType.Firefox) {
      // Focus on restore textarea
      this.$timeout(() => {
        (document.querySelector('#restoreForm textarea') as HTMLTextAreaElement).select();
      });
    } else {
      this.appHelperSvc.focusOnElement('#restoreForm .focused');
    }
  }

  @boundMethod
  displayResetPanel(): void {
    // Retrieve install backup from store
    this.storeSvc.get<any>(StoreKey.InstallBackup).then((installBackup) => {
      if (angular.isUndefined(installBackup)) {
        this.resetUnavailable = true;
        this.appHelperSvc.focusOnElement('.reset-completed .focused');
        return;
      }

      const installBackupObj = JSON.parse(installBackup);
      if (installBackupObj?.date && installBackupObj?.bookmarks) {
        const date = new Date(installBackupObj.date);
        const confirmationMessage = this.platformSvc.getI18nString(
          this.Strings.View.Settings.BackupRestore.Reset.Confirm
        );
        this.resetConfirmationMessage = confirmationMessage.replace(
          '{date}',
          (this.$filter('date') as ng.IFilterDate)(date)
        );
        this.displayResetConfirmation = true;
      } else {
        this.resetUnavailable = true;
      }
    });
  }

  @boundMethod
  downloadBackup(): void {
    this.savingBackup = true;
    this.backupRestoreSvc
      .saveBackupFile()
      .then((filename) => {
        if (!filename) {
          return;
        }
        // Only mobile platforms display a file downloaded message
        this.backupCompletedMessage = this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)
          ? `${this.platformSvc.getI18nString(this.Strings.View.Settings.FileDownloaded)}: ${filename}`
          : undefined;
      })
      .finally(() => {
        this.savingBackup = false;
        this.appHelperSvc.focusOnElement('.file-downloaded .focused');
      });
  }

  @boundMethod
  hideResetPanel(): void {
    this.displayResetConfirmation = false;
    this.resetCompleted = false;
    this.resetConfirmationMessage = null;
    this.resetUnavailable = false;
  }

  @boundMethod
  hideRestorePanel(): void {
    this.displayRestoreForm = false;
    this.restoreForm.$setPristine();
    this.restoreForm.$setUntouched();
  }

  ngOnDestroy(): void {
    document.getElementById('backupFile').removeEventListener('change', this.backupFileChanged, false);
  }

  ngOnInit(): void {
    // Firefox on all platforms and Chromium on linux cannot use backup file select input
    // because extension pop up closes when a file is selected
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1292701
    this.useTextarea =
      this.platformSvc.platformName === PlatformType.Firefox ||
      (this.platformSvc.platformName === PlatformType.Chromium && detect().os.toLowerCase() === 'linux');

    // Set backup file change event if not using textarea fallback
    if (!this.useTextarea) {
      document.getElementById('backupFile').addEventListener('change', this.backupFileChanged, false);
    }

    // Initialise view model values
    this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      this.syncEnabled = syncEnabled;
    });
  }

  @boundMethod
  resetRestoreFormValidity(): void {
    this.restoreForm.dataToRestore.$setValidity('InvalidData', true);
  }

  @boundMethod
  restore(): void {
    if (!this.validateBackupData()) {
      return;
    }

    // Display restore confirmation
    this.displayRestoreForm = false;
    this.displayRestoreConfirmation = true;

    // Focus on confirm button
    this.appHelperSvc.focusOnElement('.btn-confirm-restore');
  }

  @boundMethod
  restoreBookmarksSuccess(): void {
    // Update view model
    this.displayRestoreForm = false;
    this.dataToRestore = undefined;
    this.restoreCompletedMessage = this.platformSvc.getI18nString(
      this.Strings.View.Settings.BackupRestore.Restore.Done
    );

    // Refresh data usage
    this.appSettingsCtrl.refreshSyncDataUsage();

    // Focus on button
    this.appHelperSvc.focusOnElement('.restore-completed .focused');
  }

  @boundMethod
  selectBackupFile(): void {
    (document.querySelector('#backupFile') as HTMLInputElement).click();
  }

  validateBackupData(): boolean {
    if (!this.dataToRestore) {
      return false;
    }

    // Check backup data structure
    let validateData = false;
    try {
      const restoreData: Backup = JSON.parse(this.dataToRestore);
      const bookmarks = restoreData.xBrowserSync?.bookmarks ?? restoreData.xbrowsersync?.data?.bookmarks;
      validateData = !angular.isUndefined(bookmarks ?? undefined);
    } catch (err) {}
    this.restoreForm.dataToRestore.$setValidity('InvalidData', validateData);
    return validateData;
  }
}
</file>

<file path="src/modules/app/app-settings/issues-settings/issues-settings.component.html">
<div class="well well-sm">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Title) }}</h4>
  <div class="panel-content">
    <div class="form-group setting-group">
      <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Help.Title) }}</label>
      <p class="description">{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Help.Description) }}
      </p>
      <div class="buttons">
        <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.switchToHelpView)">
          {{ vm.platformSvc.getI18nString(vm.Strings.Button.Help) }}
        </button>
        <button type="button" class="btn btn-default"
                ng-click="vm.utilitySvc.handleEvent(vm.appHelperSvc.openUrl, $event, 'https://link.xbrowsersync.org/faqs')">
          {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Help.ViewFaqs) }}
        </button>
      </div>
    </div>
    <div class="form-group setting-group">
      <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Tracker.Title) }}</label>
      <p class="description">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Tracker.Description) }}
      </p>
      <div class="buttons">
        <button type="button" class="btn btn-default"
                ng-click="vm.appHelperSvc.openUrl($event, 'https://link.xbrowsersync.org/app-issues')">
          {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Tracker.Report) }}
        </button>
      </div>
    </div>
    <div class="form-group setting-group">
      <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Log.Title) }}</label>
      <p class="description">{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Log.Description) }}
      </p>
      <div class="animate-fade-in" ng-show="vm.downloadLogCompletedMessage == null">
        <p class="description">{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Log.Size) }}:
          <span ng-if="vm.logSize >= 0">{{ vm.logSize | byteFmt : 2 }}</span></p>
        <div class="buttons">
          <button type="button" class="btn btn-default" ng-class="{ 'working': vm.savingLog }"
                  ng-click="vm.utilitySvc.handleEvent(vm.downloadLog)"
                  ng-disabled="vm.savingLog || vm.logSize === 0 || vm.logSize == null">
            <span class="spinner-border spinner-border-sm" ng-show="vm.savingLog" aria-hidden="true"></span>
            <span ng-show="vm.savingLog">{{ vm.platformSvc.getI18nString(vm.Strings.Button.Saving) }}
            </span>
            <span
                  ng-hide="vm.savingLog">{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Log.Download) }}
            </span>
          </button>
          <button type="button" class="btn btn-default" ng-disabled="vm.logSize === 0 || vm.logSize == null"
                  ng-click="vm.utilitySvc.handleEvent(vm.clearLog)">{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Issues.Log.Clear) }}
          </button>
        </div>
      </div>
      <div class="confirm animate-fade-in file-downloaded" ng-show="vm.downloadLogCompletedMessage != null">
        <p ng-if="vm.downloadLogCompletedMessage !== ''">{{ vm.downloadLogCompletedMessage }}</p>
        <div class="buttons">
          <button class="btn btn-default btn-done" ng-click="vm.downloadLogCompletedMessage = null">
            {{ vm.platformSvc.getI18nString(vm.Strings.Button.Done) }}
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/modules/app/app-settings/issues-settings/issues-settings.component.scss">
@import '../../../../styles/modules/all';

issues-settings {
  display: block;
}
</file>

<file path="src/modules/app/app-settings/issues-settings/issues-settings.component.ts">
import angular from 'angular';
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../../shared/global-shared.interface';
import { LogLevel } from '../../../shared/log/log.enum';
import { LogService } from '../../../shared/log/log.service';
import { TelemetryService } from '../../../shared/telemetry/telemetry.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { RoutePath } from '../../app.enum';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'issuesSettings',
  styles: [require('./issues-settings.component.scss')],
  template: require('./issues-settings.component.html')
})
export class IssuesSettingsComponent implements OnInit {
  Strings = require('../../../../../res/strings/en.json');

  appHelperSvc: AppHelperService;
  logSvc: LogService;
  platformSvc: PlatformService;
  telemetrySvc: TelemetryService;
  utilitySvc: UtilityService;

  downloadLogCompletedMessage: string;
  logSize: number;
  savingLog = false;

  static $inject = ['AppHelperService', 'LogService', 'PlatformService', 'TelemetryService', 'UtilityService'];
  constructor(
    AppHelperSvc: AppHelperService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    TelemetrySvc: TelemetryService,
    UtilitySvc: UtilityService
  ) {
    this.appHelperSvc = AppHelperSvc;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.telemetrySvc = TelemetrySvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  clearLog(): void {
    // Clear trace log and update view model
    this.logSvc.clear().then(() => {
      this.logSize = 0;
    });
  }

  @boundMethod
  downloadLog(): void {
    this.savingLog = true;
    this.saveLogFile()
      .then((filename) => {
        if (!filename) {
          return;
        }
        // Only mobile platforms display a file downloaded message
        this.downloadLogCompletedMessage = this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)
          ? `${this.platformSvc.getI18nString(this.Strings.View.Settings.FileDownloaded)}: ${filename}`
          : '';
      })
      .finally(() => {
        this.savingLog = false;
        this.appHelperSvc.focusOnElement('.btn-done');
      });
  }

  getLogFilename(): string {
    const fileName = `xbs_log_${this.utilitySvc.getDateTimeString(new Date())}.txt`;
    return fileName;
  }

  ngOnInit(): void {
    // Calculate log size and initialise view model values
    this.logSvc.getLogEntries().then((traceLogItems) => {
      if (angular.isUndefined(traceLogItems ?? undefined)) {
        this.logSize = 0;
        return;
      }
      this.logSize = new TextEncoder().encode(traceLogItems.join()).length;
    });
  }

  saveLogFile(): ng.IPromise<string | void> {
    // Add telemetry to log before saving
    return this.telemetrySvc
      .getTelemetryPayload()
      .then((telemetry) => this.logSvc.logInfo(telemetry))
      .then(() => this.logSvc.getLogEntries())
      .then((traceLogItems) => {
        // Convert trace log items into string array
        const log = traceLogItems.map((traceLogItem) => {
          let messageLogText = `${new Date(traceLogItem.timestamp).toISOString().replace(/[A-Z]/g, ' ').trim()}\t`;
          switch (traceLogItem.level) {
            case LogLevel.Error:
              messageLogText += '[error]\t';
              break;
            case LogLevel.Warn:
              messageLogText += '[warn]\t';
              break;
            case LogLevel.Trace:
            default:
              messageLogText += '[trace]\t';
          }
          messageLogText += traceLogItem.message;
          return messageLogText;
        });

        // Trigger download
        return this.platformSvc.downloadFile(this.getLogFilename(), log.join('\r\n'));
      });
  }

  @boundMethod
  switchToHelpView(): void {
    this.appHelperSvc.switchView(RoutePath.Help);
  }
}
</file>

<file path="src/modules/app/app-settings/permissions-settings/permissions-settings.component.html">
<div class="well well-sm">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Permissions.Title) }}</h4>
  <div class="panel-content">
    <div class="animate-fade-in">
      <div class="form-group setting-group">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Permissions.Read.Title) }}</label>
        <div class="setting-value status-icon">
          <div class="success animate-fade-in" ng-show="vm.readWebsiteDataPermissionsGranted"
               title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Permissions.Granted) }}">
            <icon type="'check'" bold="true"></icon>
          </div>
          <div class="danger animate-fade-in" ng-show="!vm.readWebsiteDataPermissionsGranted"
               title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Permissions.NotGranted) }}">
            <icon type="'x'" bold="true"></icon>
          </div>
        </div>
        <p class="description"
           ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Settings.Permissions.Read.Description)">
        </p>
        <div class="buttons animate-fade-in" ng-show="vm.readWebsiteDataPermissionsGranted">
          <button class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.revokePermissions)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Permissions.Remove) }}
          </button>
        </div>
        <div class="buttons animate-fade-in" ng-hide="vm.readWebsiteDataPermissionsGranted">
          <button class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.requestPermissions)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Permissions.Add) }}
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/modules/app/app-settings/permissions-settings/permissions-settings.component.scss">
@import '../../../../styles/modules/all';

permissions-settings {
  display: block;
}
</file>

<file path="src/modules/app/app-settings/permissions-settings/permissions-settings.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../../shared/global-shared.interface';
import { UtilityService } from '../../../shared/utility/utility.service';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'permissionsSettings',
  styles: [require('./permissions-settings.component.scss')],
  template: require('./permissions-settings.component.html')
})
export class PermissionsSettingsComponent implements OnInit {
  Strings = require('../../../../../res/strings/en.json');

  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;

  readWebsiteDataPermissionsGranted = false;

  static $inject = ['AppHelperService', 'PlatformService', 'UtilityService'];
  constructor(AppHelperSvc: AppHelperService, PlatformSvc: PlatformService, UtilitySvc: UtilityService) {
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
  }

  ngOnInit(): void {
    // Initialise view model values
    this.platformSvc.checkOptionalNativePermissions().then((permissionsGranted) => {
      this.readWebsiteDataPermissionsGranted = permissionsGranted;
    });
  }

  @boundMethod
  requestPermissions(): void {
    this.appHelperSvc.requestPermissions().then((granted) => {
      this.readWebsiteDataPermissionsGranted = granted;
    });
  }

  @boundMethod
  revokePermissions(): void {
    this.appHelperSvc.removePermissions().then(() => {
      this.readWebsiteDataPermissionsGranted = false;
    });
  }
}
</file>

<file path="src/modules/app/app-settings/preferences-settings/preferences-settings.component.html">
<div class="well well-sm">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.Title) }}</h4>
  <div class="panel-content">
    <div class="form-group setting-group" ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
      <div class="setting-title">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.SyncToolbar.Label) }}</label>
        <div class="animate-fade-in">
          <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleSyncBookmarksToolbar)">
            <input type="checkbox" id="syncBookmarksToolbar" ng-model="vm.settings.syncBookmarksToolbar" />
            <label for="syncBookmarksToolbar" ng-class="{ 'animate': true }"
                   ng-if="vm.settings.syncBookmarksToolbar !== undefined"></label>
          </div>
        </div>
      </div>
      <p class="description">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.SyncToolbar.Description) }}
      </p>
      <div class="confirm animate-fade-in" ng-show="vm.displaySyncBookmarksToolbarConfirmation">
        <div ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.SyncToolbar.Confirmation)">
        </div>
        <div class="buttons">
          <button type="button" class="btn btn-default btn-confirm-sync-toolbar"
                  ng-click="vm.utilitySvc.handleEvent(vm.confirmSyncBookmarksToolbar)">
            {{ vm.platformSvc.getI18nString(vm.Strings.Button.Confirm) }}
          </button>
          <button type="button" class="btn btn-default"
                  ng-click="vm.utilitySvc.handleEvent(vm.cancelSyncBookmarksToolbar)">
            {{ vm.platformSvc.getI18nString(vm.Strings.Button.Deny) }}
          </button>
        </div>
      </div>
    </div>
    <div class="form-group setting-group">
      <div class="setting-title">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.DefaultToFolderView.Label) }}</label>
        <div>
          <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleDefaultToFolderView)">
            <input type="checkbox" id="defaultToFolderView" ng-model="vm.settings.defaultToFolderView" />
            <label for="defaultToFolderView" ng-class="{ 'animate': true }"
                   ng-if="vm.settings.defaultToFolderView !== undefined"></label>
          </div>
        </div>
      </div>
      <p class="description">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.DefaultToFolderView.Description) }}
    </div>
    <div class="form-group setting-group" ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
      <div class="setting-title">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.SearchBar.Label) }}</label>
        <div>
          <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleAlternateSearchBarPosition)">
            <input type="checkbox" id="alternateSearchBarPosition" ng-model="vm.settings.alternateSearchBarPosition" />
            <label for="alternateSearchBarPosition" ng-class="{ 'animate': true }"
                   ng-if="vm.settings.alternateSearchBarPosition !== undefined"></label>
          </div>
        </div>
      </div>
      <p class="description">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.SearchBar.Description) }}
      </p>
    </div>
    <div class="form-group setting-group" ng-if="vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
      <div class="setting-title">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.AutoFetchMetadata.Label) }}</label>
        <div>
          <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleAutoFetchMetadata)">
            <input type="checkbox" id="autoFetchMetadata" ng-model="vm.settings.autoFetchMetadata" />
            <label for="autoFetchMetadata" ng-class="{ 'animate': true }"
                   ng-if="vm.settings.autoFetchMetadata !== undefined"></label>
          </div>
        </div>
      </div>
      <p class="description">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.AutoFetchMetadata.Description) }}
      </p>
    </div>
    <div class="form-group setting-group">
      <div class="setting-title">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.DarkMode.Label) }}</label>
        <div>
          <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleEnableDarkMode)">
            <input type="checkbox" id="enableDarkMode" ng-model="vm.settings.darkModeEnabled" />
            <label for="enableDarkMode" ng-class="{ 'animate': true }"
                   ng-if="vm.settings.darkModeEnabled !== undefined"></label>
          </div>
        </div>
      </div>
      <p class="description">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.DarkMode.Description) }}
      </p>
    </div>
    <div class="form-group setting-group">
      <div class="setting-title">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.CheckForAppUpdates.Label) }}</label>
        <div>
          <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleCheckForAppUpdates)">
            <input type="checkbox" id="checkForAppUpdates" ng-model="vm.settings.checkForAppUpdates" />
            <label for="checkForAppUpdates" ng-class="{ 'animate': true }"
                   ng-if="vm.settings.checkForAppUpdates !== undefined"></label>
          </div>
        </div>
      </div>
      <p class="description">
        {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.CheckForAppUpdates.Description) }}
      </p>
    </div>
    <div class="form-group setting-group">
      <div class="setting-title">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.Telemetry.Label) }}</label>
        <div>
          <div class="checkbox" ng-click="vm.utilitySvc.handleEvent(vm.toggleEnableTelemetry)">
            <input type="checkbox" id="enableTelemetry" ng-model="vm.settings.telemetryEnabled" />
            <label for="enableTelemetry" ng-class="{ 'animate': true }"
                   ng-if="vm.settings.telemetryEnabled !== undefined"></label>
          </div>
        </div>
      </div>
      <p class="description"
         ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Settings.Prefs.Telemetry.Description)"></p>
    </div>
  </div>
</div>
</div>
</file>

<file path="src/modules/app/app-settings/preferences-settings/preferences-settings.component.scss">
@import '../../../../styles/modules/all';

preferences-settings {
  display: block;

  .setting-title {
    align-items: flex-start;
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.25rem;
    width: 100%;

    label {
      margin-bottom: 0;
    }
  }
}
</file>

<file path="src/modules/app/app-settings/preferences-settings/preferences-settings.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../../shared/global-shared.interface';
import { AllSettings } from '../../../shared/settings/settings.interface';
import { SettingsService } from '../../../shared/settings/settings.service';
import { SyncType } from '../../../shared/sync/sync.enum';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingService } from '../../../shared/working/working.service';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'preferencesSettings',
  styles: [require('./preferences-settings.component.scss')],
  template: require('./preferences-settings.component.html')
})
export class PreferencesSettingsComponent implements OnInit {
  Strings = require('../../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  displaySyncBookmarksToolbarConfirmation = false;
  settings: AllSettings;

  static $inject = [
    '$timeout',
    'AppHelperService',
    'PlatformService',
    'SettingsService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;
  }

  @boundMethod
  cancelSyncBookmarksToolbar(): void {
    this.displaySyncBookmarksToolbarConfirmation = false;
    this.settings.syncBookmarksToolbar = false;
  }

  @boundMethod
  confirmSyncBookmarksToolbar(): void {
    this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      if (!syncEnabled) {
        return;
      }

      // Hide sync confirmation and display loading overlay
      this.displaySyncBookmarksToolbarConfirmation = false;
      this.workingSvc.show();

      // Enable setting and refresh local sync data
      return this.settingsSvc
        .syncBookmarksToolbar(true)
        .then(() => this.platformSvc.queueSync({ type: SyncType.Local }));
    });
  }

  ngOnInit(): void {
    // Initialise view model values
    this.settingsSvc.all().then((allSettings) => {
      this.settings = allSettings;
    });
  }

  @boundMethod
  toggleAlternateSearchBarPosition(): void {
    this.settings.alternateSearchBarPosition = !this.settings.alternateSearchBarPosition;
    this.settingsSvc.alternateSearchBarPosition(this.settings.alternateSearchBarPosition);
  }

  @boundMethod
  toggleAutoFetchMetadata(): void {
    this.settings.autoFetchMetadata = !this.settings.autoFetchMetadata;
    this.settingsSvc.autoFetchMetadata(this.settings.autoFetchMetadata);
  }

  @boundMethod
  toggleCheckForAppUpdates(): void {
    this.settings.checkForAppUpdates = !this.settings.checkForAppUpdates;
    this.settingsSvc.checkForAppUpdates(this.settings.checkForAppUpdates);
  }

  @boundMethod
  toggleDefaultToFolderView(): void {
    this.settings.defaultToFolderView = !this.settings.defaultToFolderView;
    this.settingsSvc.defaultToFolderView(this.settings.defaultToFolderView);
  }

  @boundMethod
  toggleEnableDarkMode(): void {
    this.settings.darkModeEnabled = !this.settings.darkModeEnabled;
    this.settingsSvc.darkModeEnabled(this.settings.darkModeEnabled);
  }

  @boundMethod
  toggleEnableTelemetry(): void {
    this.settings.telemetryEnabled = !this.settings.telemetryEnabled;
    this.settingsSvc.telemetryEnabled(this.settings.telemetryEnabled);
  }

  @boundMethod
  toggleSyncBookmarksToolbar(): void {
    this.settingsSvc.syncBookmarksToolbar().then((syncBookmarksToolbar) => {
      this.settings.syncBookmarksToolbar = !this.settings.syncBookmarksToolbar;

      // If confirmation message is currently displayed, hide it and return
      if (this.displaySyncBookmarksToolbarConfirmation) {
        this.displaySyncBookmarksToolbarConfirmation = false;
        return;
      }

      return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
        // If sync not enabled or user just clicked to disable toolbar sync, update stored value and return
        if (!syncEnabled || syncBookmarksToolbar) {
          return this.settingsSvc.syncBookmarksToolbar(this.settings.syncBookmarksToolbar);
        }

        // Otherwise, display sync confirmation
        this.displaySyncBookmarksToolbarConfirmation = true;
        this.appHelperSvc.focusOnElement('.btn-confirm-sync-toolbar');
      });
    });
  }
}
</file>

<file path="src/modules/app/app-settings/qr-panel/qr-panel.component.html">
<div id="qr"></div>
<p>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Qr.Description) }}</p>
<div class="buttons vertical">
  <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.copySyncId)"
          ng-disabled="vm.syncIdCopied">
    {{ vm.syncIdCopied ? vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Qr.Copied) : vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Qr.Copy) }}
  </button>
  <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.close())">
    {{ vm.platformSvc.getI18nString(vm.Strings.Button.Close) }}
  </button>
</div>
</file>

<file path="src/modules/app/app-settings/qr-panel/qr-panel.component.scss">
@import '../../../../styles/modules/all';

qr-panel {
  display: block;
  flex-direction: column;
  padding: 2rem;

  p {
    margin-bottom: 1rem;
    text-align: center;
  }

  .buttons {
    margin-top: 0;

    button {
      display: block;
      margin: 1rem auto 0 !important;
    }
  }

  #qr {
    height: 14rem;
    margin-bottom: 1rem;
    width: 14rem;
  }
}
</file>

<file path="src/modules/app/app-settings/qr-panel/qr-panel.component.ts">
import { Component, OnInit, Output } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import QRCode from 'qrcode-svg';
import { ApiSyncInfo } from '../../../shared/api/api.interface';
import { BackupRestoreService } from '../../../shared/backup-restore/backup-restore.service';
import { PlatformService } from '../../../shared/global-shared.interface';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'qrPanel',
  styles: [require('./qr-panel.component.scss')],
  template: require('./qr-panel.component.html')
})
export class AppQrComponent implements OnInit {
  Strings = require('../../../../../res/strings/en.json');

  $q: ng.IQService;
  appHelperSvc: AppHelperService;
  backupRestoreSvc: BackupRestoreService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  syncIdCopied = false;

  @Output() close: () => void;

  static $inject = [
    '$q',
    'AppHelperService',
    'BackupRestoreService',
    'PlatformService',
    'StoreService',
    'UtilityService'
  ];
  constructor(
    $q: ng.IQService,
    AppHelperSvc: AppHelperService,
    BackupRestoreSvc: BackupRestoreService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.appHelperSvc = AppHelperSvc;
    this.backupRestoreSvc = BackupRestoreSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  copySyncId(): void {
    this.storeSvc
      .get<ApiSyncInfo>(StoreKey.SyncInfo)
      .then((syncInfo) => this.appHelperSvc.copyTextToClipboard(syncInfo.id))
      .then(() => {
        this.syncIdCopied = true;
      });
  }

  ngOnInit(): void {
    // Generate QR code from sync info
    this.backupRestoreSvc.getSyncInfo().then((syncInfo) => {
      const qrcode = new QRCode({
        content: JSON.stringify(syncInfo),
        padding: 4,
        width: 200,
        height: 200,
        color: '#000000',
        background: '#ffffff',
        ecl: 'M'
      });
      const svgString = qrcode
        .svg()
        .replace('width="200" height="200"', 'viewBox="0, 0, 200, 200" preserveAspectRatio="xMidYMid meet"');

      // Add new qr code svg to qr container
      const svg = new DOMParser().parseFromString(svgString, 'text/xml').firstElementChild;
      const qrContainer = document.getElementById('qr');
      while (qrContainer.firstElementChild) {
        qrContainer.removeChild(qrContainer.firstElementChild);
      }
      qrContainer.appendChild(svg);
    });
  }
}
</file>

<file path="src/modules/app/app-settings/sync-settings/api-xbrowsersync-service-info/api-xbrowsersync-service-info.component.html">
<div class="form-group setting-group">
  <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Service) }}</label>
  <div class="setting-value service-url">
    <a href="{{ vm.serviceInfo.url }}" class="new-tab" title="{{ vm.serviceInfo.url }}">
      {{ vm.serviceInfo.url }}
    </a>
    <div class="status-icon">
      <div class="loading animate-fade-in" ng-show="vm.serviceInfo.url !== undefined && vm.serviceInfo.status == null"
           title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Loading) }}">
        <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
      </div>
      <div class="success animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.Online"
           title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Online) }}">
        <icon type="'check'" bold="true"></icon>
      </div>
      <div class="warning animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.NoNewSyncs"
           title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.NoNewSyncs) }}">
        <icon type="'minus'" bold="true"></icon>
      </div>
      <div class="danger animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.Error"
           title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Error) }}">
        <icon type="'x'" bold="true"></icon>
      </div>
      <div class="danger animate-fade-in" ng-show="vm.serviceInfo.status === vm.apiServiceStatus.Offline"
           title="{{ vm.platformSvc.getI18nString(vm.Strings.Service.Status.Offline) }}">
        <icon type="'x'" bold="true"></icon>
      </div>
    </div>
  </div>
  <div
       ng-if="vm.serviceInfo.message && vm.serviceInfo.status !== undefined && vm.serviceInfo.status !== vm.apiServiceStatus.Error">
    <p class="description service-message animate-fade-in" ng-if="vm.serviceInfo.message"
       ng-bind-html="vm.serviceInfo.message"></p>
  </div>
</div>
<div class="form-group setting-group"
     ng-if="vm.serviceInfo.status !== undefined && vm.serviceInfo.status !== vm.apiServiceStatus.Error">
  <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Data.Label) }}</label>
  <div class="setting-value" ng-class="{ 'text-danger': vm.syncDataUsed >= 90 }" ng-show="vm.syncDataUsed != null">{{
vm.syncDataUsed | number : 0 }}%</div>
  <div class="progress">
    <div class="progress-bar" role="progressbar" ng-style=" { 'width': vm.dataUsageProgressWidth + '%' }">
    </div>
  </div>
  <span class="used" ng-show="vm.syncDataSize != null">{{ vm.syncDataSize | byteFmt : 1
}}</span>
  <span class="max" ng-show="vm.maxSyncSize != null">{{ vm.maxSyncSize
| byteFmt : 1 }}</span>
  <p class="description">{{
  vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Data.Description) }}</p>
</div>
</file>

<file path="src/modules/app/app-settings/sync-settings/api-xbrowsersync-service-info/api-xbrowsersync-service-info.component.scss">
@import '../../../../../styles/modules/all';

api-xbrowsersync-service-info {
  --color-sync-settings-data-bg: #{$color-text2-default};
  --color-sync-settings-data-progress: #{$color-bg2-default};
  --color-sync-settings-data-max: #{$color-text2-default};
  --color-sync-settings-data-used: #{$color-bg2-default};

  @include theme-dark {
    --color-sync-settings-data-bg: #{$color-bg1-dark};
    --color-sync-settings-data-progress: #{$color-text2-dark};
    --color-sync-settings-data-max: #{$color-text3-dark};
    --color-sync-settings-data-used: #{$color-text2-dark};
  }

  .setting-group {
    .max,
    .used {
      font-size: 0.8rem;
      margin-top: -1.5rem;
      position: absolute;
    }

    .max {
      color: var(--color-sync-settings-data-max);
      right: 0;
    }

    .progress {
      background-color: var(--color-sync-settings-data-bg);
      border-radius: 1rem;
      height: 0.45rem;
      margin: 0.25rem 0 1.5rem;
      overflow: visible;

      .progress-bar {
        background-color: var(--color-sync-settings-data-progress);
        border-bottom-left-radius: 1rem;
        border-top-left-radius: 1rem;
      }
    }

    .service-message {
      max-height: 7rem;
    }

    .used {
      color: var(--color-sync-settings-data-used);
      left: 0;
    }
  }
}
</file>

<file path="src/modules/app/app-settings/sync-settings/api-xbrowsersync-service-info/api-xbrowsersync-service-info.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { ApiServiceStatus } from '../../../../shared/api/api.enum';
import { ApiSyncInfo } from '../../../../shared/api/api.interface';
import {
  ApiXbrowsersyncServiceInfo,
  ApiXbrowsersyncSyncInfo
} from '../../../../shared/api/api-xbrowsersync/api-xbrowsersync.interface';
import { ApiXbrowsersyncService } from '../../../../shared/api/api-xbrowsersync/api-xbrowsersync.service';
import { ServiceOfflineError } from '../../../../shared/errors/errors';
import { PlatformService } from '../../../../shared/global-shared.interface';
import { StoreKey } from '../../../../shared/store/store.enum';
import { StoreService } from '../../../../shared/store/store.service';
import { SyncService } from '../../../../shared/sync/sync.service';
import { UtilityService } from '../../../../shared/utility/utility.service';
import { AppEventType } from '../../../app.enum';
import { AppHelperService } from '../../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'apiXbrowsersyncServiceInfo',
  styles: [require('./api-xbrowsersync-service-info.component.scss')],
  template: require('./api-xbrowsersync-service-info.component.html')
})
export class ApiXbrowsersyncServiceInfoComponent implements OnInit {
  Strings = require('../../../../../../res/strings/en.json');

  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  apiSvc: ApiXbrowsersyncService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  syncSvc: SyncService;
  utilitySvc: UtilityService;

  apiServiceStatus = ApiServiceStatus;
  dataUsageProgressWidth = 0;
  maxSyncSize = 0;
  serviceInfo: ApiXbrowsersyncServiceInfo;
  syncDataSize: number;
  syncDataUsed: number;
  syncEnabled: boolean;

  static $inject = [
    '$q',
    '$timeout',
    '$scope',
    'ApiXbrowsersyncService',
    'AppHelperService',
    'PlatformService',
    'StoreService',
    'SyncService',
    'UtilityService'
  ];
  constructor(
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    $scope: ng.IScope,
    ApiSvc: ApiXbrowsersyncService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.$timeout = $timeout;
    this.apiSvc = ApiSvc;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.syncSvc = SyncSvc;
    this.utilitySvc = UtilitySvc;

    $scope.$on(AppEventType.RefreshSyncDataUsage, () => this.refreshSyncDataUsage());
  }

  ngOnInit(): void {
    this.$q.all([this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo), this.utilitySvc.isSyncEnabled()]).then((data) => {
      const [syncInfo, syncEnabled] = data;
      this.syncEnabled = syncEnabled;
      this.serviceInfo = {
        url: (syncInfo as ApiXbrowsersyncSyncInfo).serviceUrl
      };

      // Update displayed service info
      this.refreshServiceStatus().then(() => this.refreshSyncDataUsage());
    });
  }

  refreshServiceStatus(): ng.IPromise<void> {
    return this.apiSvc
      .checkServiceStatus()
      .then((serviceInfoResponse) => {
        this.serviceInfo = {
          ...this.serviceInfo,
          ...this.apiSvc.formatServiceInfo(serviceInfoResponse)
        };

        // Set service message links to open in new tabs
        this.appHelperSvc.attachClickEventsToNewTabLinks(document.querySelector('.service-message'));
      })
      .catch((err) => {
        const status = err instanceof ServiceOfflineError ? ApiServiceStatus.Offline : ApiServiceStatus.Error;
        this.serviceInfo = {
          ...this.serviceInfo,
          status
        };
      });
  }

  refreshSyncDataUsage(): ng.IPromise<void> {
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      // Return if not synced
      if (!syncEnabled) {
        return;
      }

      // Get bookmarks sync size and calculate sync data percentage used
      return this.syncSvc.getSyncSize().then((bookmarksSyncSize) => {
        this.maxSyncSize = this.serviceInfo.maxSyncSize * 1024;
        this.syncDataSize = bookmarksSyncSize;
        this.syncDataUsed = Math.ceil((this.syncDataSize / this.maxSyncSize) * 100);
        this.$timeout(() => {
          // Add a slight delay when setting progress bar width to ensure transitions are enabled
          this.dataUsageProgressWidth = this.syncDataUsed;
        }, 250);
      });
    });
  }
}
</file>

<file path="src/modules/app/app-settings/sync-settings/sync-settings.component.html">
<div class="well well-sm">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Title) }}</h4>
  <div class="panel-content">
    <div class="form-group setting-group" ng-if="!vm.syncEnabled">
      <p class="description text-center"
         ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Settings.NotAvailable)">
      </p>
    </div>
    <div ng-if="vm.syncEnabled">
      <div class="form-group setting-group">
        <label>{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Id.Label) }}</label>
        <div class="setting-value id-url">
          <a title="{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Qr.Show) }}"
             ng-click="vm.utilitySvc.handleEvent(vm.displayQrPanel)" href="">{{ vm.syncId }}</a>
        </div>
        <p class="description">{{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Id.Description) }}</p>
      </div>
      <div class="form-group setting-group">
        <div class="buttons">
          <button class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.syncUpdates)"
                  ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"
                  ng-disabled="!vm.updatesAvailable">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.UpdatesAvailable.Sync) }}
          </button>
          <button class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.disableSync)">
            {{ vm.platformSvc.getI18nString(vm.Strings.View.Settings.Sync.Disable) }}
          </button>
        </div>
        <div class="description updates-available"
             ng-if="vm.updatesAvailable !== undefined && !vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)">
          <p ng-if="!vm.updatesAvailable">{{ vm.lastUpdated }}</p>
          <p ng-if="vm.updatesAvailable">{{ vm.nextUpdate }}.</p>
        </div>
      </div>
      <api-xbrowsersync-service-info ng-if="vm.selectedServiceType === vm.apiServiceType.xBrowserSync">
      </api-xbrowsersync-service-info>
    </div>
  </div>
</div>

<qr-panel class="darker-overlay animate-fade-in animate-fade-out" close="vm.closeQrPanel" ng-if="vm.displayQr">
</qr-panel>
</file>

<file path="src/modules/app/app-settings/sync-settings/sync-settings.component.scss">
@import '../../../../styles/modules/all';

sync-settings {
  .setting-group {
    .setting-value {
      &.id-url {
        display: block;
        font-family: $font-stack-code;
        font-size: 0.92rem;
        margin-bottom: 0.5rem;
        position: relative;
        text-align: center;
        width: 100%;
      }

      &.service-url {
        align-items: center;
        display: flex;
        justify-content: center;
        margin-bottom: 0.5rem;
        position: relative;

        & > a {
          @include text-overflow-ellipsis;
        }

        .status-icon {
          margin-left: 0.25rem;
        }
      }
    }

    .updates-available {
      font-size: 0.9rem;
      font-style: italic;
      text-align: center;
    }
  }
}
</file>

<file path="src/modules/app/app-settings/sync-settings/sync-settings.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { ApiServiceType } from '../../../shared/api/api.enum';
import { ApiSyncInfo } from '../../../shared/api/api.interface';
import { PlatformService } from '../../../shared/global-shared.interface';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { SyncService } from '../../../shared/sync/sync.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingService } from '../../../shared/working/working.service';
import { AppEventType, RoutePath } from '../../app.enum';
import { AppHelperService } from '../../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'syncSettings',
  styles: [require('./sync-settings.component.scss')],
  template: require('./sync-settings.component.html')
})
export class SyncSettingsComponent implements OnInit {
  Strings = require('../../../../../res/strings/en.json');

  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  syncSvc: SyncService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  apiServiceType = ApiServiceType;
  displayQr = false;
  lastUpdated: string;
  nextUpdate: string;
  selectedServiceType: ApiServiceType;
  syncEnabled: boolean;
  syncId: string;
  syncIdCopied = false;
  updatesAvailable: boolean;

  static $inject = [
    '$q',
    '$timeout',
    '$scope',
    'AppHelperService',
    'PlatformService',
    'StoreService',
    'SyncService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    $scope: ng.IScope,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$q = $q;
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.syncSvc = SyncSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;

    $scope.$on(AppEventType.SyncDisabled, () => {
      this.syncEnabled = false;
    });
  }

  checkForSyncUpdates(): ng.IPromise<void> {
    return this.$q
      .all([
        this.syncSvc.checkForUpdates().catch(() => {}),
        this.appHelperSvc.getNextScheduledSyncUpdateCheck(),
        this.appHelperSvc.getSyncQueueLength(),
        this.storeSvc.get<string>(StoreKey.LastUpdated)
      ])
      .then((data) => {
        const [updatesAvailable, nextUpdateDate, syncQueueLength, lastUpdated] = data;
        if (updatesAvailable || syncQueueLength > 0) {
          this.updatesAvailable = true;
          this.nextUpdate = this.platformSvc
            .getI18nString(this.Strings.View.Settings.Sync.UpdatesAvailable.True)
            .replace('{date}', nextUpdateDate.toLocaleTimeString());
        } else {
          this.updatesAvailable = false;
          const lastUpdatedDate = new Date(lastUpdated);
          this.lastUpdated = this.platformSvc
            .getI18nString(this.Strings.View.Settings.Sync.UpdatesAvailable.False)
            .replace('{date}', lastUpdatedDate.toLocaleString());
        }
      });
  }

  @boundMethod
  closeQrPanel(): void {
    this.displayQr = false;
  }

  @boundMethod
  disableSync(): void {
    this.platformSvc.disableSync().then(() => this.appHelperSvc.switchView(RoutePath.Login));
  }

  @boundMethod
  displayQrPanel(): void {
    this.displayQr = true;
  }

  ngOnInit(): void {
    this.$q
      .all([
        this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo),
        this.utilitySvc.getCurrentApiServiceType(),
        this.utilitySvc.isSyncEnabled()
      ])
      .then((data) => {
        const [syncInfo, selectedServiceType, syncEnabled] = data;
        this.selectedServiceType = selectedServiceType;
        this.syncId = syncInfo?.id;
        this.syncEnabled = syncEnabled;

        // Check for available sync updates on non-mobile platforms
        if (this.syncEnabled && !this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)) {
          this.checkForSyncUpdates();
        }
      });
  }

  @boundMethod
  syncUpdates() {
    // Display loading panel and sync updates
    this.workingSvc.show();
    return this.platformSvc
      .queueSync()
      .then(() => this.appHelperSvc.syncBookmarksSuccess())
      .catch((err) => {
        return this.appHelperSvc.syncBookmarksFailed(err).then(() => {
          throw err;
        });
      });
  }
}
</file>

<file path="src/modules/app/app-settings/app-settings.component.html">
<div class="view-content">
  <div class="header-panel">
    <h2>{{ vm.platformSvc.getI18nString(vm.Strings.Button.Settings) }}</h2>
    <icon-button type="'x-circle'" size="1.2em" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.Close) }}"
                 on-click="vm.utilitySvc.handleEvent(vm.close)" tab-index="1000"></icon-button>
  </div>
  <div class="panel-container">
    <sync-settings></sync-settings>
    <backup-restore-settings></backup-restore-settings>
    <preferences-settings></preferences-settings>
    <permissions-settings ng-if="!vm.utilitySvc.isMobilePlatform(vm.platformSvc.platformName)"></permissions-settings>
    <issues-settings></issues-settings>
    <about-settings></about-settings>
  </div>
</div>
</file>

<file path="src/modules/app/app-settings/app-settings.component.scss">
@import '../../../styles/modules/all';

app-settings {
  --color-settings-description-text: #{$color-text3-default};
  --color-settings-description-link: #{$color-text3-default};
  --color-settings-description-link-hover: #{$color-bg2-default};
  --color-settings-value-text: #{$color-text2-default};

  display: block;

  @include theme-dark {
    --color-settings-description-text: #{$color-text3-dark};
    --color-settings-description-link: #{$color-text3-dark};
    --color-settings-description-link-hover: #{$color-text1-dark};
    --color-settings-value-text: #{$color-text2-dark};
  }

  .header-panel,
  .panel-container {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
  }

  .header-panel {
    flex: none;
  }

  .panel-container {
    overflow-y: auto;
  }

  .setting-group {
    label {
      display: block;
      margin-bottom: 0.25rem;
    }

    p {
      font-size: 0.95rem;
    }

    .description {
      color: var(--color-settings-description-text);

      a {
        border-bottom-color: var(--color-settings-description-link);
        color: var(--color-settings-description-link);

        @media (hover: hover) {
          &:active,
          &:focus,
          &:hover {
            border-bottom-color: var(--color-settings-description-link-hover);
            color: var(--color-settings-description-link-hover);
          }
        }
      }
    }

    .setting-value {
      background: transparent;
      border: 0;
      border-radius: 0;
      color: var(--color-settings-value-text);
      height: auto;
      padding: 0;
      position: absolute;
      right: 0;
      top: 0;
      transition: none;
      width: auto;
    }
  }

  .view-content {
    padding: 0.75rem 0 0;
  }

  .well {
    overflow: hidden;
    padding: 0;

    h4 {
      margin-bottom: 0;
      padding: 0.75rem 1rem;
    }

    .btn.btn-default {
      font-size: 1.1rem;
      line-height: 2.3rem;
    }

    .panel-content {
      padding: 0 1.25rem;
    }
  }
}
</file>

<file path="src/modules/app/app-settings/app-settings.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../shared/global-shared.interface';
import { UtilityService } from '../../shared/utility/utility.service';
import { AppEventType } from '../app.enum';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appSettings',
  styles: [require('./app-settings.component.scss')],
  template: require('./app-settings.component.html')
})
export class AppSettingsComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;

  syncEnabled: boolean;

  static $inject = ['$timeout', 'AppHelperService', 'PlatformService', 'UtilityService'];
  constructor(
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService
  ) {
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  close(): void {
    this.appHelperSvc.switchView();
  }

  ngOnInit(): void {
    // Initialise view model values
    this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      this.syncEnabled = syncEnabled;

      // Set links to open in new tabs
      this.appHelperSvc.attachClickEventsToNewTabLinks();
    });
  }

  refreshSyncDataUsage(): void {
    this.utilitySvc.broadcastEvent(AppEventType.RefreshSyncDataUsage);
  }
}
</file>

<file path="src/modules/app/app-settings/app-settings.controller.html">
<app-settings class="animate-fade-in" ng-if="vm.showComponent"></app-settings>
</file>

<file path="src/modules/app/app-settings/app-settings.module.ts">
import { NgModule } from 'angular-ts-decorators';
import { AboutSettingsComponent } from './about-settings/about-settings.component';
import { AppSettingsComponent } from './app-settings.component';
import { IssuesSettingsComponent } from './issues-settings/issues-settings.component';
import { PermissionsSettingsComponent } from './permissions-settings/permissions-settings.component';
import { PreferencesSettingsComponent } from './preferences-settings/preferences-settings.component';
import { AppQrComponent } from './qr-panel/qr-panel.component';
import { ApiXbrowsersyncServiceInfoComponent } from './sync-settings/api-xbrowsersync-service-info/api-xbrowsersync-service-info.component';
import { SyncSettingsComponent } from './sync-settings/sync-settings.component';

@NgModule({
  declarations: [
    AboutSettingsComponent,
    ApiXbrowsersyncServiceInfoComponent,
    AppQrComponent,
    AppSettingsComponent,
    IssuesSettingsComponent,
    PermissionsSettingsComponent,
    PreferencesSettingsComponent,
    SyncSettingsComponent
  ],
  id: 'AppSettingsModule'
})
export class AppSettingsModule {}
</file>

<file path="src/modules/app/app-support/app-support.component.html">
<div class="view-content">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Support.Title) }}</h4>
  <div class="support-content" ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Support.Content)"></div>
  <div class="buttons small">
    <button type="button" class="btn btn-default"
            ng-click="vm.utilitySvc.handleEvent(vm.appHelperSvc.openUrl, $event, 'https://link.xbrowsersync.org/liberapay')">
      {{ vm.platformSvc.getI18nString(vm.Strings.View.Support.Liberapay) }}
    </button>
    <button type="button" class="btn btn-default"
            ng-click="vm.utilitySvc.handleEvent(vm.appHelperSvc.openUrl, $event, 'https://link.xbrowsersync.org/patreon')">
      {{ vm.platformSvc.getI18nString(vm.Strings.View.Support.Patreon) }}
    </button>
    <button type="button" class="btn btn-default"
            ng-click="vm.utilitySvc.handleEvent(vm.appHelperSvc.openUrl, $event, 'https://link.xbrowsersync.org/cryptos')">
      {{ vm.platformSvc.getI18nString(vm.Strings.View.Support.Cryptos) }}
    </button>
  </div>
  <div class="footer">
    <a href="#" class="focused" ng-click="vm.utilitySvc.handleEvent(vm.close, $event)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.Continue) }}
    </a>
  </div>
</div>
</file>

<file path="src/modules/app/app-support/app-support.component.scss">
app-support {
  display: block;

  h4 {
    margin-bottom: 1rem;
  }

  p,
  ul {
    font-size: 1rem;
    line-height: 1.25rem;
  }

  .support-content {
    flex: 0 1 auto;
    overflow: auto;
  }
}
</file>

<file path="src/modules/app/app-support/app-support.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../shared/global-shared.interface';
import { UtilityService } from '../../shared/utility/utility.service';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appSupport',
  styles: [require('./app-support.component.scss')],
  template: require('./app-support.component.html')
})
export class AppSupportComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;

  static $inject = ['$timeout', 'AppHelperService', 'PlatformService', 'UtilityService'];
  constructor(
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService
  ) {
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  close(event?: Event): void {
    event?.preventDefault();
    this.appHelperSvc.switchView();
  }

  ngOnInit(): void {
    // Set initial focus
    this.appHelperSvc.focusOnElement('.focused');

    // Set links to open in new tabs
    this.appHelperSvc.attachClickEventsToNewTabLinks();
  }
}
</file>

<file path="src/modules/app/app-support/app-support.controller.html">
<app-support class="view-overlay animate-fade-in" ng-if="vm.showComponent"></app-support>
</file>

<file path="src/modules/app/app-sync-removed/app-sync-removed.component.html">
<div class="view-content">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.SyncRemoved.Title) }}</h4>
  <div ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.SyncRemoved.Content)"></div>
  <div class="buttons vertical animate-fade-in" ng-show="vm.backupCompletedMessage == null">
    <button class="btn btn-default" ng-disabled="vm.savingBackup" ng-class="{ 'working': vm.savingBackup }"
            ng-click="vm.utilitySvc.handleEvent(vm.downloadBackup)" ng-disabled="vm.savingBackup">
      <span class="spinner-border spinner-border-sm" ng-show="vm.savingBackup" aria-hidden="true"></span>
      <span ng-show="vm.savingBackup">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Saving) }}
      </span>
      <span ng-hide="vm.savingBackup">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.DownloadBackup) }}
      </span>
    </button>
    <div class="footer">
      <a href="#" ng-click="vm.utilitySvc.handleEvent(vm.close, $event)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Continue) }}
      </a>
    </div>
  </div>
  <div class="animate-fade-in" ng-show="vm.backupCompletedMessage != null">
    <div class="file-downloaded">
      <p ng-if="vm.backupCompletedMessage !== ''">{{ vm.backupCompletedMessage }}</p>
    </div>
    <div class="buttons">
      <button class="btn btn-default focused" ng-click="vm.utilitySvc.handleEvent(vm.close)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Continue) }}
      </button>
    </div>
  </div>
</div>
</file>

<file path="src/modules/app/app-sync-removed/app-sync-removed.component.scss">
app-sync-removed {
  display: block;

  .file-downloaded {
    margin: 1rem 0 2rem;
  }

  .buttons button {
    display: block;
    margin: 0 auto 1rem;

    &:last-child {
      margin-right: auto;
    }
  }
}
</file>

<file path="src/modules/app/app-sync-removed/app-sync-removed.component.ts">
import { Component } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { BackupRestoreService } from '../../shared/backup-restore/backup-restore.service';
import { PlatformService } from '../../shared/global-shared.interface';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { RemovedSync } from '../../shared/sync/sync.interface';
import { UtilityService } from '../../shared/utility/utility.service';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

/**
 * Panel that is displayed when the active sync is not found or has been removed by the service.
 * Allows the user to download their cached sync data as a backup file before it is cleared locally.
 */
@Component({
  controllerAs: 'vm',
  selector: 'appSyncRemoved',
  styles: [require('./app-sync-removed.component.scss')],
  template: require('./app-sync-removed.component.html')
})
export class AppSyncRemovedComponent {
  Strings = require('../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  backupRestoreSvc: BackupRestoreService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  backupCompletedMessage: string;
  savingBackup = false;

  static $inject = [
    '$timeout',
    'AppHelperService',
    'BackupRestoreService',
    'PlatformService',
    'StoreService',
    'UtilityService'
  ];
  constructor(
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    BackupRestoreSvc: BackupRestoreService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.backupRestoreSvc = BackupRestoreSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  /**
   * Removes removed sync from store and switches to the default view.
   */
  @boundMethod
  close(event?: Event): void {
    event?.preventDefault();
    this.storeSvc.remove(StoreKey.RemovedSync);
    this.appHelperSvc.switchView();
  }

  /**
   * Event handler for Download Backup button.
   * Updates button view model to display saving spinner and triggers backup.
   */
  @boundMethod
  downloadBackup(): void {
    this.savingBackup = true;
    this.saveRemovedSyncAsBackupFile()
      .then((filename) => {
        if (!filename) {
          return;
        }
        // Only mobile platforms display a file downloaded message
        this.backupCompletedMessage = this.utilitySvc.isMobilePlatform(this.platformSvc.platformName)
          ? `${this.platformSvc.getI18nString(this.Strings.View.Settings.FileDownloaded)}: ${filename}`
          : '';
      })
      .finally(() => {
        this.savingBackup = false;
        this.appHelperSvc.focusOnElement('.focused');
      });
  }

  /**
   * Retrieves removed sync from store and saves it as a backup file.
   */
  saveRemovedSyncAsBackupFile(): ng.IPromise<string | void> {
    return this.storeSvc.get<RemovedSync>(StoreKey.RemovedSync).then((removedSync) => {
      const backupData = this.backupRestoreSvc.createBackupData(removedSync.bookmarks, removedSync.syncInfo);
      const beautifiedJson = JSON.stringify(backupData, null, 2);
      const filename = this.backupRestoreSvc.getBackupFilename();
      return this.platformSvc.downloadFile(filename, beautifiedJson);
    });
  }
}
</file>

<file path="src/modules/app/app-sync-removed/app-sync-removed.controller.html">
<app-sync-removed class="view-overlay animate-fade-in" ng-if="vm.showComponent"></app-sync-removed>
</file>

<file path="src/modules/app/app-telemetry/app-telemetry.component.html">
<div class="view-content">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.TelemetryCheck.Title) }}</h4>
  <div ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.TelemetryCheck.Content)"></div>
  <div class="buttons">
    <button type="button" class="btn btn-default focused" ng-click="vm.utilitySvc.handleEvent(vm.confirm)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.Confirm) }}
    </button>
    <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.deny)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.Deny) }}
    </button>
  </div>
</div>
</file>

<file path="src/modules/app/app-telemetry/app-telemetry.component.scss">
app-telemetry {
  display: block;

  .buttons button {
    display: block;
    margin: 0 auto 1rem;

    &:last-child {
      margin-right: auto;
    }
  }
}
</file>

<file path="src/modules/app/app-telemetry/app-telemetry.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { PlatformService } from '../../shared/global-shared.interface';
import { SettingsService } from '../../shared/settings/settings.service';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appTelemetry',
  styles: [require('./app-telemetry.component.scss')],
  template: require('./app-telemetry.component.html')
})
export class AppTelemetryComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $q: ng.IQService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  releaseNotesUrl: string;

  static $inject = ['$q', 'AppHelperService', 'PlatformService', 'SettingsService', 'StoreService', 'UtilityService'];
  constructor(
    $q: ng.IQService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  confirm(): void {
    this.$q
      .all([this.settingsSvc.telemetryEnabled(true), this.storeSvc.set(StoreKey.DisplayTelemetryCheck, false)])
      .then(() => this.appHelperSvc.switchView());
  }

  @boundMethod
  deny(): void {
    this.$q
      .all([this.settingsSvc.telemetryEnabled(false), this.storeSvc.set(StoreKey.DisplayTelemetryCheck, false)])
      .then(() => this.appHelperSvc.switchView());
  }

  @boundMethod
  displayReleaseNotes(): void {
    this.appHelperSvc.openUrl(null, this.releaseNotesUrl);
  }

  ngOnInit(): void {
    // Set initial focus
    this.appHelperSvc.focusOnElement('.focused');

    // Set links to open in new tabs
    this.appHelperSvc.attachClickEventsToNewTabLinks();
  }
}
</file>

<file path="src/modules/app/app-telemetry/app-telemetry.controller.html">
<app-telemetry class="view-overlay animate-fade-in" ng-if="vm.showComponent"></app-telemetry>
</file>

<file path="src/modules/app/app-updated/app-updated.component.html">
<div class="view-content">
  <h4>{{ vm.platformSvc.getI18nString(vm.Strings.View.Updated.Title) }} v{{ vm.appVersion }}</h4>
  <div ng-bind-html="vm.platformSvc.getI18nString(vm.Strings.View.Updated.Content)"></div>
  <div class="buttons vertical">
    <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.displayReleaseNotes)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.ReleaseNotes) }}
    </button>
    <div class="footer">
      <a href="#" class="focused" ng-click="vm.utilitySvc.handleEvent(vm.close, $event)">
        {{ vm.platformSvc.getI18nString(vm.Strings.Button.Continue) }}
      </a>
    </div>
  </div>
</div>
</file>

<file path="src/modules/app/app-updated/app-updated.component.scss">
app-updated {
  display: block;

  .buttons button {
    display: block;
    margin: 0 auto 1rem;

    &:last-child {
      margin-right: auto;
    }
  }
}
</file>

<file path="src/modules/app/app-updated/app-updated.component.ts">
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import Globals from '../../shared/global-shared.constants';
import { PlatformService } from '../../shared/global-shared.interface';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { RoutePath } from '../app.enum';
import { AppHelperService } from '../shared/app-helper/app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appUpdated',
  styles: [require('./app-updated.component.scss')],
  template: require('./app-updated.component.html')
})
export class AppUpdatedComponent implements OnInit {
  Strings = require('../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  appVersion: string;
  releaseNotesUrl: string;

  static $inject = ['$timeout', 'AppHelperService', 'PlatformService', 'StoreService', 'UtilityService'];
  constructor(
    $timeout: ng.ITimeoutService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$timeout = $timeout;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  @boundMethod
  close(event?: Event): void {
    event?.preventDefault();
    this.storeSvc.set(StoreKey.DisplayUpdated, false);
    this.appHelperSvc.switchView(RoutePath.Support);
  }

  @boundMethod
  displayReleaseNotes(): void {
    this.appHelperSvc.openUrl(null, this.releaseNotesUrl);
  }

  ngOnInit(): void {
    // Initialise view model values
    this.platformSvc.getAppVersionName().then((appVersion) => {
      this.appVersion = appVersion;
      this.releaseNotesUrl = `${Globals.ReleaseNotesUrlStem}${appVersion}`;
    });

    // Set initial focus
    this.appHelperSvc.focusOnElement('.focused');

    // Set links to open in new tabs
    this.appHelperSvc.attachClickEventsToNewTabLinks();
  }
}
</file>

<file path="src/modules/app/app-updated/app-updated.controller.html">
<app-updated class="view-overlay animate-fade-in" ng-if="vm.showComponent"></app-updated>
</file>

<file path="src/modules/app/shared/app-helper/app-helper.service.ts">
import angular from 'angular';
import { ExceptionHandler } from '../../../shared/errors/errors.interface';
import Globals from '../../../shared/global-shared.constants';
import { PlatformService } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { Sync } from '../../../shared/sync/sync.interface';
import { SyncService } from '../../../shared/sync/sync.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingService } from '../../../shared/working/working.service';
import { RoutePath } from '../../app.enum';

export abstract class AppHelperService {
  Strings = require('../../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $location: ng.ILocationService;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  logSvc: LogService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  syncSvc: SyncService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  constructor(
    $exceptionHandler: ng.IExceptionHandlerService,
    $location: ng.ILocationService,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$location = $location;
    this.$q = $q;
    this.$timeout = $timeout;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.syncSvc = SyncSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;
  }

  attachClickEventsToNewTabLinks(element?: HTMLElement): void {
    this.$timeout(() => {
      const links = (element ?? document).querySelectorAll('a.new-tab');
      for (let i = 0; i < links.length; i += 1) {
        const link = links[i] as any;
        link.onclick = this.openUrl;
      }
    }, Globals.InterfaceReadyTimeout);
  }

  abstract confirmBeforeSyncing(): boolean;

  abstract copyTextToClipboard(text: string): ng.IPromise<void>;

  focusOnElement(domSelector: string, select = false): void {
    this.$timeout(() => {
      const element = document.querySelector(domSelector) as HTMLInputElement;
      if (angular.isUndefined(element ?? undefined)) {
        return;
      }
      if (select && element.select) {
        element.select();
      } else if (element.setSelectionRange) {
        const strLength = element.value.length * 2;
        element.focus();
        element.setSelectionRange(strLength, strLength);
      } else if (element.focus) {
        element.focus();
      }
    }, Globals.InterfaceReadyTimeout);
  }

  abstract getHelpPages(): string[];

  abstract getCurrentSync(): ng.IPromise<Sync>;

  abstract getNextScheduledSyncUpdateCheck(): ng.IPromise<Date>;

  abstract getSyncQueueLength(): ng.IPromise<number>;

  abstract openUrl(event?: Event, url?: string): void;

  abstract removePermissions(): ng.IPromise<void>;

  abstract requestPermissions(): ng.IPromise<boolean>;

  switchView(view?: string): ng.IPromise<void> {
    return this.$q((resolve, reject) => {
      return this.$q
        .resolve()
        .then(() => {
          if (!angular.isUndefined(view)) {
            return view;
          }
          return this.$q
            .all([
              this.storeSvc.get([
                StoreKey.DisplayHelp,
                StoreKey.DisplayPermissions,
                StoreKey.DisplayTelemetryCheck,
                StoreKey.DisplayUpdated,
                StoreKey.RemovedSync
              ]),
              this.utilitySvc.isSyncEnabled()
            ])
            .then((data) => {
              const [storeContent, syncEnabled] = data;
              switch (true) {
                case storeContent.displayUpdated:
                  return RoutePath.Updated;
                case storeContent.displayHelp:
                  return RoutePath.Help;
                case storeContent.displayTelemetryCheck:
                  return RoutePath.TelemetryCheck;
                case storeContent.displayPermissions:
                  return RoutePath.Permissions;
                case !!storeContent.removedSync:
                  return RoutePath.SyncRemoved;
                case syncEnabled:
                  return RoutePath.Search;
                default:
                  return RoutePath.Login;
              }
            });
        })
        .then((newRoute) => {
          this.$location.path(newRoute);
          this.$timeout(resolve, Globals.InterfaceReadyTimeout);
        })
        .catch(reject);
    });
  }

  syncBookmarksFailed(err: Error): ng.IPromise<void> {
    return this.$q.resolve().then(() => {
      // Switch to default view if determined by sync error
      if (this.syncSvc.shouldDisplayDefaultPageOnError(err)) {
        return this.switchView();
      }
    });
  }

  syncBookmarksSuccess(): ng.IPromise<void> {
    // Switch to default view
    return this.switchView();
  }
}
</file>

<file path="src/modules/app/shared/icon/icon.component.html">
<i aria-hidden="true" ng-bind-html="vm.svg" ng-class="{ 'bold': vm.bold }"></i>
</file>

<file path="src/modules/app/shared/icon/icon.component.scss">
@import '../../../../styles/modules/all';

icon {
  border-radius: 100%;
  display: inline-block;
  height: 1em;
  width: 1em;

  i {
    display: block;
    height: 100%;
    position: relative;
    width: 100%;

    &.bold svg {
      stroke-width: 4;
    }

    svg {
      @include valign;

      height: 100%;
      left: 0;
      width: 100%;
    }
  }
}
</file>

<file path="src/modules/app/shared/icon/icon.component.ts">
import { Component, Input, OnInit } from 'angular-ts-decorators';

@Component({
  controllerAs: 'vm',
  selector: 'icon',
  styles: [require('./icon.component.scss')],
  template: require('./icon.component.html'),
  transclude: true
})
export class IconComponent implements OnInit {
  icons = {
    'align-justify': require('lucide-static/icons/align-justify.svg'),
    'align-left': require('lucide-static/icons/align-left.svg'),
    bookmark: require('lucide-static/icons/bookmark.svg'),
    check: require('lucide-static/icons/check.svg'),
    'chevron-down': require('lucide-static/icons/chevron-down.svg'),
    'chevron-up': require('lucide-static/icons/chevron-up.svg'),
    'download-cloud': require('lucide-static/icons/download-cloud.svg'),
    edit: require('lucide-static/icons/edit.svg'),
    'edit-3': require('lucide-static/icons/edit-3.svg'),
    eye: require('lucide-static/icons/eye.svg'),
    'eye-off': require('lucide-static/icons/eye-off.svg'),
    flashlight: require('lucide-static/icons/flashlight.svg'),
    'flashlight-off': require('lucide-static/icons/flashlight-off.svg'),
    folder: require('lucide-static/icons/folder.svg'),
    'folder-open': require('lucide-static/icons/folder-open.svg'),
    'help-circle': require('lucide-static/icons/help-circle.svg'),
    minus: require('lucide-static/icons/minus.svg'),
    search: require('lucide-static/icons/search.svg'),
    settings: require('lucide-static/icons/settings.svg'),
    'share-2': require('lucide-static/icons/share-2.svg'),
    'trash-2': require('lucide-static/icons/trash-2.svg'),
    x: require('lucide-static/icons/x.svg'),
    'x-circle': require('lucide-static/icons/x-circle.svg')
  };
  svg: string;

  @Input('<?') bold = false;
  @Input('<type') iconType: string;

  $sce: ng.ISCEService;

  static $inject = ['$scope', '$sce'];
  constructor($scope: ng.IScope, $sce: ng.ISCEService) {
    this.$sce = $sce;

    $scope.$watch(
      () => this.iconType,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          this.setSvg();
        }
      }
    );
  }

  ngOnInit(): void {
    this.setSvg();
  }

  setSvg(): void {
    this.svg = this.$sce.trustAsHtml(this.icons[this.iconType]);
  }
}
</file>

<file path="src/modules/app/shared/icon-button/icon-button.component.html">
<div ng-class="{ 'fab': vm.fab }" ng-style="{ 'height': vm.size, 'width': vm.size }">
  <button title="{{ vm.buttonTitle }}" ng-click="vm.onClick()" ng-attr-tabindex="{{ vm.tabIndex }}">
    <icon type="vm.iconType" bold="vm.bold"></icon>
  </button>
</div>
</file>

<file path="src/modules/app/shared/icon-button/icon-button.component.scss">
icon-button {
  color: var(--color-button-icon-text);
  display: inline-block;

  & > div {
    &.fab {
      height: 4rem !important;
      width: 4rem !important;

      button {
        background-color: var(--color-button-fab-bg);
        border-radius: 100%;
        box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.14),
          0 1px 18px 0 rgba(0, 0, 0, 0.12) !important;
        color: var(--color-button-fab-text);
        opacity: 1;
        z-index: 10;

        icon {
          height: 50%;
          width: 50%;
        }

        @media (hover: hover) {
          &:active,
          &:hover {
            background-color: var(--color-button-fab-bg-hover) !important;
            color: var(--color-button-fab-text-hover) !important;
          }
        }
      }
    }

    button {
      align-items: center;
      display: flex;
      justify-content: center;
      background-color: transparent;
      border: none;
      border-radius: 0.25rem;
      color: inherit;
      cursor: pointer;
      height: 100%;
      opacity: 0.5;
      padding: 0;
      transition: opacity ease-in-out 0.2s;
      user-select: none;
      width: 100%;

      icon {
        height: 100%;
        width: 100%;
      }

      @media (hover: hover) {
        &:active {
          opacity: 1 !important;
        }

        &:hover,
        &:focus {
          opacity: 1;
        }
      }
    }
  }
}
</file>

<file path="src/modules/app/shared/icon-button/icon-button.component.ts">
import { Component, Input, Output } from 'angular-ts-decorators';

@Component({
  controllerAs: 'vm',
  selector: 'iconButton',
  styles: [require('./icon-button.component.scss')],
  template: require('./icon-button.component.html'),
  transclude: true
})
export class IconButtonComponent {
  @Input() bold: boolean;
  @Input('@title') buttonTitle: string;
  @Input('<?') fab = false;
  @Input('@?') size = '1.5em';
  @Input('<type') iconType: string;
  @Input() tabIndex: number;

  @Output('&') onClick: () => void;
}
</file>

<file path="src/modules/app/app.controller.ts">
export class AppController {
  showComponent = false;

  static $inject = ['$timeout'];
  constructor($timeout: ng.ITimeoutService) {
    $timeout(() => {
      this.showComponent = true;
    });
  }
}
</file>

<file path="src/modules/app/app.enum.ts">
enum AppEventType {
  RefreshBookmarkSearchResults = 'REFRESH_BOOKMARK_SEARCH_RESULTS',
  RefreshSyncDataUsage = 'REFRESH_SYNC_DATA_USAGE',
  SyncDisabled = 'SYNC_DISABlED',
  WorkingCancelAction = 'WORKING_CANCEL_ACTION'
}

enum KeyCode {
  Enter = 13,
  Backspace = 8,
  Tab = 9,
  Escape = 27,
  Space = 32,
  PageUp = 33,
  PageDown = 34,
  End = 35,
  Home = 36,
  ArrowLeft = 37,
  ArrowUp = 38,
  ArrowRight = 39,
  ArrowDown = 40
}

enum RoutePath {
  Bookmark = '/bookmark',
  Help = '/help',
  Login = '/login',
  Permissions = '/permissions',
  Scan = '/scan',
  Search = '/search',
  Settings = '/settings',
  Support = '/support',
  SyncRemoved = '/sync-removed',
  TelemetryCheck = '/telemetry-check',
  Updated = '/updated'
}

export { AppEventType, KeyCode, RoutePath };
</file>

<file path="src/modules/app/app.module.ts">
import '../../styles/styles.scss';
import NgAnimate from 'angular-animate';
import NgFilter from 'angular-filter';
import NgSanitize from 'angular-sanitize';
import { NgModule } from 'angular-ts-decorators';
import NgInfiniteScroll from 'ng-infinite-scroll';
import { ExceptionHandlerService } from '../shared/errors/exception-handler/exception-handler.service';
import { GlobalSharedModule } from '../shared/global-shared.module';
import { AppRoutesModule } from './app.routes';
import { AppBackgroundComponent } from './app-background/app-background.component';
import { AppHelpComponent } from './app-help/app-help.component';
import { AppLoginModule } from './app-login/app-login.module';
import { AppPermissionsComponent } from './app-permissions/app-permissions.component';
import { BookmarkComponent } from './app-search/bookmark/bookmark.component';
import { BookmarkTreeComponent } from './app-search/bookmark-tree/bookmark-tree.component';
import { AppSettingsModule } from './app-settings/app-settings.module';
import { AppSupportComponent } from './app-support/app-support.component';
import { AppSyncRemovedComponent } from './app-sync-removed/app-sync-removed.component';
import { AppTelemetryComponent } from './app-telemetry/app-telemetry.component';
import { AppUpdatedComponent } from './app-updated/app-updated.component';
import { IconComponent } from './shared/icon/icon.component';
import { IconButtonComponent } from './shared/icon-button/icon-button.component';

@NgModule({
  declarations: [
    AppBackgroundComponent,
    AppHelpComponent,
    AppPermissionsComponent,
    AppSupportComponent,
    AppSyncRemovedComponent,
    AppTelemetryComponent,
    AppUpdatedComponent,
    BookmarkComponent,
    BookmarkTreeComponent,
    IconComponent,
    IconButtonComponent
  ],
  id: 'AppModule',
  imports: [
    AppLoginModule,
    AppRoutesModule,
    AppSettingsModule,
    GlobalSharedModule,
    NgAnimate,
    NgFilter,
    NgInfiniteScroll,
    NgSanitize
  ]
})
export class AppModule {}

(AppModule as NgModule).module
  .config([
    '$animateProvider',
    '$compileProvider',
    '$httpProvider',
    (
      $animateProvider: ng.animate.IAnimateProvider,
      $compileProvider: ng.ICompileProvider,
      $httpProvider: ng.IHttpProvider
    ) => {
      $animateProvider.classNameFilter(/animate/);
      $compileProvider.debugInfoEnabled(false);
      $compileProvider.aHrefSanitizationTrustedUrlList(/^[\w-]+:.*$/);
      $httpProvider.interceptors.push('ApiRequestInterceptorFactory');
    }
  ])
  .factory('$exceptionHandler', ['$injector', 'AlertService', 'LogService', ExceptionHandlerService.Factory]);
</file>

<file path="src/modules/app/app.routes.ts">
import NgRoute from 'angular-route';
import { NgModule } from 'angular-ts-decorators';
import { AppController } from './app.controller';
import { RoutePath } from './app.enum';
import { SyncEnabledController } from './sync-enabled.controller';

@NgModule({
  id: 'AppRoutesModule',
  imports: [NgRoute]
})
export class AppRoutesModule {}

(AppRoutesModule as NgModule).module
  .controller('AppController', AppController)
  .controller('SyncEnabledController', SyncEnabledController)
  .config([
    '$routeProvider',
    ($routeProvider: ng.route.IRouteProvider) => {
      $routeProvider
        .when(`${RoutePath.Bookmark}/:id`, {
          controller: 'SyncEnabledController',
          controllerAs: 'vm',
          template: require('./app-bookmark/app-bookmark.controller.html')
        })
        .when(`${RoutePath.Bookmark}`, {
          controller: 'SyncEnabledController',
          controllerAs: 'vm',
          template: require('./app-bookmark/app-bookmark.controller.html')
        })
        .when(`${RoutePath.Help}/:id`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('./app-help/app-help.controller.html')
        })
        .when(`${RoutePath.Help}`, {
          redirectTo: `${RoutePath.Help}/1`
        })
        .when(`${RoutePath.Login}`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('./app-login/app-login.controller.html')
        })
        .when(`${RoutePath.Permissions}`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('./app-permissions/app-permissions.controller.html')
        })
        .when(`${RoutePath.Scan}`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('../android/android-app/android-app-scan/android-app-scan.controller.html')
        })
        .when(`${RoutePath.Search}`, {
          controller: 'SyncEnabledController',
          controllerAs: 'vm',
          template: require('./app-search/app-search.controller.html')
        })
        .when(`${RoutePath.Settings}`, {
          controller: 'SyncEnabledController',
          controllerAs: 'vm',
          template: require('./app-settings/app-settings.controller.html')
        })
        .when(`${RoutePath.Support}`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('./app-support/app-support.controller.html')
        })
        .when(`${RoutePath.SyncRemoved}`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('./app-sync-removed/app-sync-removed.controller.html')
        })
        .when(`${RoutePath.TelemetryCheck}`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('./app-telemetry/app-telemetry.controller.html')
        })
        .when(`${RoutePath.Updated}`, {
          controller: 'AppController',
          controllerAs: 'vm',
          template: require('./app-updated/app-updated.controller.html')
        })
        .otherwise({
          redirectTo: '/'
        });
    }
  ]);
</file>

<file path="src/modules/app/sync-enabled.controller.ts">
import { SyncService } from '../shared/sync/sync.service';
import { RoutePath } from './app.enum';

export class SyncEnabledController {
  showComponent = false;

  static $inject = ['$location', '$q', '$timeout', 'SyncService'];
  constructor(
    $location: ng.ILocationService,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    syncService: SyncService
  ) {
    $timeout(() => {
      this.showComponent = true;
    });

    // Check if the current sync has been removed before showing page content
    $q.race([syncService.checkSyncExists(), new $q((resolve) => $timeout(() => resolve(true), 1e3))])
      .then((syncExists) => {
        if (!syncExists) {
          $location.path(RoutePath.SyncRemoved);
        }
      })
      .catch(() => {});
  }
}
</file>

<file path="src/modules/shared/alert/alert.enum.ts">
enum AlertType {
  Error = 'ERROR',
  Information = 'INFORMATION',
  Warning = 'WARNING'
}

export { AlertType };
</file>

<file path="src/modules/shared/alert/alert.interface.ts">
import { AlertType } from './alert.enum';

export interface Alert {
  message: string;
  title?: string;
  type?: AlertType;
}
</file>

<file path="src/modules/shared/alert/alert.service.spec.ts">
import { Alert } from './alert.interface';
import { AlertService } from './alert.service';

describe('AlertService', () => {
  afterEach(() => jest.restoreAllMocks());

  test('clearCurrentAlert: Sets the currentAlert property to undefined', () => {
    const alertSvc = new AlertService();
    const testAlert: Alert = {
      message: 'TEST ALERT'
    };

    alertSvc.currentAlert = testAlert;
    alertSvc.clearCurrentAlert();

    expect(alertSvc.currentAlert).toStrictEqual(undefined);
  });
});
</file>

<file path="src/modules/shared/alert/alert.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { Alert } from './alert.interface';

@Injectable('AlertService')
export class AlertService {
  private _currentAlert: Alert | undefined;

  get currentAlert(): Alert | undefined {
    return this._currentAlert;
  }

  set currentAlert(value: Alert) {
    this._currentAlert = value;
  }

  clearCurrentAlert(): void {
    this.currentAlert = undefined;
  }
}
</file>

<file path="src/modules/shared/api/api-request-interceptor/api-request-interceptor.factory.ts">
import { IHttpInterceptor } from 'angular';
import { Injectable } from 'angular-ts-decorators';
import Globals from '../../global-shared.constants';

@Injectable('ApiRequestInterceptorFactory')
export class ApiRequestInterceptorFactory implements IHttpInterceptor {
  $q: ng.IQService;

  static $inject = ['$q'];
  constructor($q: ng.IQService) {
    this.$q = $q;
  }

  request(config: ng.IRequestConfig): ng.IRequestConfig | ng.IPromise<ng.IRequestConfig> {
    // Add the api version to the http Accept-Version header
    if (config.url !== Globals.ReleaseLatestUrl) {
      config.headers!['Accept-Version'] = Globals.MinApiVersion;
    }

    // Set default request timeout
    config.timeout = !config.timeout ? 12000 : config.timeout;

    return config ?? this.$q.when(config);
  }
}
</file>

<file path="src/modules/shared/api/api-xbrowsersync/api-xbrowsersync.enum.ts">
enum ApiXbrowsersyncResource {
  Bookmarks = 'bookmarks',
  LastUpdated = 'lastUpdated',
  ServiceInformation = 'info',
  Version = 'version'
}

export { ApiXbrowsersyncResource };
</file>

<file path="src/modules/shared/api/api-xbrowsersync/api-xbrowsersync.interface.ts">
import { ApiServiceStatus } from '../api.enum';
import { ApiServiceInfo, ApiServiceInfoResponse, ApiSyncInfo } from '../api.interface';

export interface ApiXbrowsersyncErrorResponse {
  code: string;
  message: string;
}

export interface ApiXbrowsersyncServiceInfo extends ApiServiceInfo {
  location?: string;
  maxSyncSize?: number;
  message?: string;
  url?: string;
  version?: string;
}

export interface ApiXbrowsersyncServiceInfoResponse extends ApiServiceInfoResponse {
  location?: string;
  maxSyncSize: number;
  message?: string;
  status: ApiServiceStatus;
  version: string;
}

export interface ApiXbrowsersyncSyncInfo extends ApiSyncInfo {
  serviceUrl: string;
}
</file>

<file path="src/modules/shared/api/api-xbrowsersync/api-xbrowsersync.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import DOMPurify from 'dompurify';
import { marked } from 'marked';
import {
  BaseError,
  DailyNewSyncLimitReachedError,
  DataOutOfSyncError,
  InvalidServiceError,
  NetworkConnectionError,
  NotAcceptingNewSyncsError,
  RequestEntityTooLargeError,
  ServiceOfflineError,
  SyncNotFoundError,
  TooManyRequestsError,
  UnexpectedResponseDataError,
  UnsupportedApiVersionError
} from '../../errors/errors';
import Globals from '../../global-shared.constants';
import { PlatformService } from '../../global-shared.interface';
import { NetworkService } from '../../network/network.service';
import { StoreKey } from '../../store/store.enum';
import { StoreService } from '../../store/store.service';
import { UtilityService } from '../../utility/utility.service';
import {
  ApiCreateBookmarksRequest,
  ApiCreateBookmarksResponse,
  ApiGetBookmarksResponse,
  ApiGetLastUpdatedResponse,
  ApiGetSyncVersionResponse,
  ApiService,
  ApiUpdateBookmarksRequest,
  ApiUpdateBookmarksResponse
} from '../api.interface';
import { ApiXbrowsersyncResource } from './api-xbrowsersync.enum';
import {
  ApiXbrowsersyncErrorResponse,
  ApiXbrowsersyncServiceInfo,
  ApiXbrowsersyncServiceInfoResponse,
  ApiXbrowsersyncSyncInfo
} from './api-xbrowsersync.interface';

@Injectable('ApiXbrowsersyncService')
export class ApiXbrowsersyncService implements ApiService {
  $injector: ng.auto.IInjectorService;
  $http: ng.IHttpService;
  $q: ng.IQService;
  networkSvc: NetworkService;
  _platformSvc: PlatformService | undefined;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  static $inject = ['$injector', '$http', '$q', 'NetworkService', 'StoreService', 'UtilityService'];
  constructor(
    $injector: ng.auto.IInjectorService,
    $http: ng.IHttpService,
    $q: ng.IQService,
    NetworkSvc: NetworkService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$injector = $injector;
    this.$http = $http;
    this.$q = $q;
    this.networkSvc = NetworkSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  get platformSvc(): PlatformService {
    if (angular.isUndefined(this._platformSvc)) {
      this._platformSvc = this.$injector.get('PlatformService');
    }
    return this._platformSvc as PlatformService;
  }

  apiRequestSucceeded<T>(response: T): ng.IPromise<T> {
    return this.$q.resolve(response);
  }

  checkNetworkConnection(): ng.IPromise<void> {
    return this.$q((resolve, reject) => {
      if (this.networkSvc.isNetworkConnected()) {
        return resolve();
      }
      reject(new NetworkConnectionError());
    });
  }

  checkServiceStatus(url?: string): ng.IPromise<ApiXbrowsersyncServiceInfoResponse> {
    return this.checkNetworkConnection().then(() => {
      // Get current service url if not provided
      return (!url ? this.getServiceUrl() : this.$q.resolve(url))
        .then((serviceUrl) => {
          // Request service info
          const requestConfig: ng.IRequestConfig = {
            method: 'GET',
            url: `${serviceUrl}/${ApiXbrowsersyncResource.ServiceInformation}`,
            timeout: 3000
          };
          return this.$http<ApiXbrowsersyncServiceInfoResponse>(requestConfig).catch((err) =>
            this.handleFailedRequest(err)
          );
        })
        .then((response) => this.apiRequestSucceeded(response))
        .then((response) => {
          // Check service is a valid xBrowserSync API
          const { data: serviceInfo } = response;
          if (!serviceInfo?.status || !serviceInfo?.version) {
            throw new InvalidServiceError();
          }

          // Check service version is supported by this client
          if (this.utilitySvc.compareVersions(serviceInfo.version, Globals.MinApiVersion, '<')) {
            throw new UnsupportedApiVersionError();
          }

          return serviceInfo;
        });
    });
  }

  createNewSync(): ng.IPromise<ApiCreateBookmarksResponse> {
    return this.checkNetworkConnection()
      .then(() => {
        return this.$q
          .all([this.platformSvc.getAppVersion(), this.getServiceUrl()])
          .then((data) => {
            const [appVersion, serviceUrl] = data;
            const requestUrl = `${serviceUrl}/${ApiXbrowsersyncResource.Bookmarks}`;
            const requestBody: ApiCreateBookmarksRequest = {
              version: appVersion
            };
            return this.$http
              .post<ApiCreateBookmarksResponse>(requestUrl, JSON.stringify(requestBody))
              .catch((err) => this.handleFailedRequest(err));
          })
          .then((response) => this.apiRequestSucceeded(response))
          .then((response) => {
            // Check response data is valid before returning
            const { data } = response;
            if (!data?.id || !data?.lastUpdated || !data?.version) {
              throw new UnexpectedResponseDataError();
            }
            return data;
          });
      })
      .catch((err) => {
        if (err instanceof InvalidServiceError) {
          throw new ServiceOfflineError();
        }
        throw err;
      });
  }

  getBookmarks(): ng.IPromise<ApiGetBookmarksResponse> {
    // Ensure sync credentials
    return this.utilitySvc
      .checkSyncCredentialsExist()
      .then((syncInfo) => {
        const requestUrl = `${(syncInfo as ApiXbrowsersyncSyncInfo).serviceUrl}/${ApiXbrowsersyncResource.Bookmarks}/${
          syncInfo.id
        }`;
        return this.$http.get<ApiGetBookmarksResponse>(requestUrl).catch((err) => this.handleFailedRequest(err));
      })
      .then((response) => this.apiRequestSucceeded(response))
      .then((response) => {
        // Check response data is valid before returning
        const { data } = response;
        if (!data?.lastUpdated) {
          throw new UnexpectedResponseDataError();
        }
        return data;
      })
      .catch((err) => {
        if (err instanceof InvalidServiceError) {
          throw new ServiceOfflineError();
        }
        throw err;
      });
  }

  getBookmarksLastUpdated(skipNetworkConnectionCheck = false): ng.IPromise<ApiGetLastUpdatedResponse> {
    // Ensure sync credentials
    return this.utilitySvc
      .checkSyncCredentialsExist()
      .then((syncInfo) => {
        return (skipNetworkConnectionCheck ? this.$q.resolve() : this.checkNetworkConnection()).then(() => {
          return this.$q
            .resolve()
            .then(() => {
              const requestUrl = `${(syncInfo as ApiXbrowsersyncSyncInfo).serviceUrl}/${
                ApiXbrowsersyncResource.Bookmarks
              }/${syncInfo.id}/${ApiXbrowsersyncResource.LastUpdated}`;
              return this.$http
                .get<ApiGetLastUpdatedResponse>(requestUrl)
                .catch((err) => this.handleFailedRequest(err));
            })
            .then((response) => this.apiRequestSucceeded(response))
            .then((response) => {
              // Check response data is valid before returning
              const { data } = response;
              if (!data?.lastUpdated) {
                throw new UnexpectedResponseDataError();
              }
              return data;
            });
        });
      })
      .catch((err) => {
        if (err instanceof InvalidServiceError) {
          throw new ServiceOfflineError();
        }
        throw err;
      });
  }

  getServiceUrl(): ng.IPromise<string> {
    // Get service url from store
    return this.storeSvc.get<ApiXbrowsersyncSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => syncInfo?.serviceUrl);
  }

  getSyncVersion(syncId: string): ng.IPromise<ApiGetSyncVersionResponse> {
    return this.checkNetworkConnection()
      .then(() => {
        // Get current service url
        return this.getServiceUrl()
          .then((serviceUrl) => {
            const requestUrl = `${serviceUrl}/${ApiXbrowsersyncResource.Bookmarks}/${syncId}/${ApiXbrowsersyncResource.Version}`;
            return this.$http.get<ApiGetSyncVersionResponse>(requestUrl).catch((err) => this.handleFailedRequest(err));
          })
          .then((response) => this.apiRequestSucceeded(response))
          .then((response) => {
            // Check response data is valid before returning
            const { data: version } = response;
            if (!version) {
              throw new UnexpectedResponseDataError();
            }
            return version;
          });
      })
      .catch((err) => {
        if (err instanceof InvalidServiceError) {
          throw new ServiceOfflineError();
        }
        throw err;
      });
  }

  getErrorFromHttpResponse(response: ng.IHttpResponse<ApiXbrowsersyncErrorResponse>): BaseError {
    let error: BaseError;
    const message = response.data?.message;
    switch (true) {
      // 401 Unauthorized: sync data not found
      case response.status === 401:
        error = new SyncNotFoundError(message);
        break;
      // 404 Not Found: invalid service
      case response.status === 404:
        error = new InvalidServiceError(message);
        break;
      // 405 Method Not Allowed: service not accepting new syncs
      case response.status === 405:
        error = new NotAcceptingNewSyncsError(message);
        break;
      // 406 Not Acceptable: daily new sync limit reached
      case response.status === 406:
        error = new DailyNewSyncLimitReachedError(message);
        break;
      // 409 Conflict: sync update conflict
      case response.status === 409:
        error = new DataOutOfSyncError(message);
        break;
      // 413 Request Entity Too Large: sync data size exceeds service limit
      case response.status === 413:
        error = new RequestEntityTooLargeError(message);
        break;
      // 429 Too Many Requests: daily new sync limit reached
      case response.status === 429:
        error = new TooManyRequestsError(message);
        break;
      // 500 server error responses
      case response.status >= 500:
        error = new ServiceOfflineError(message);
        break;
      default:
        error = this.networkSvc.getErrorFromHttpResponse(response);
    }
    return error;
  }

  handleFailedRequest(response: ng.IHttpResponse<ApiXbrowsersyncErrorResponse>): never {
    throw this.getErrorFromHttpResponse(response);
  }

  formatServiceInfo(serviceInfoResponse?: ApiXbrowsersyncServiceInfoResponse): ApiXbrowsersyncServiceInfo {
    if (!serviceInfoResponse) {
      return;
    }

    // Render markdown and add link classes to service message
    let message = serviceInfoResponse.message ? marked(serviceInfoResponse.message) : '';
    if (message) {
      const messageDom = new DOMParser().parseFromString(message, 'text/html');
      messageDom.querySelectorAll('a').forEach((hyperlink) => {
        hyperlink.className = 'new-tab';
      });
      message = DOMPurify.sanitize(messageDom.body.firstElementChild.innerHTML);
    }

    return {
      location: serviceInfoResponse.location,
      maxSyncSize: serviceInfoResponse.maxSyncSize / 1024,
      message,
      status: serviceInfoResponse.status,
      version: serviceInfoResponse.version
    };
  }

  updateBookmarks(
    encryptedBookmarks: string,
    updateSyncVersion = false,
    skipNetworkConnectionCheck = false
  ): ng.IPromise<ApiUpdateBookmarksResponse> {
    // Ensure sync credentials
    return this.$q
      .all([this.utilitySvc.checkSyncCredentialsExist(), this.storeSvc.get<string>(StoreKey.LastUpdated)])
      .then((data) => {
        const [syncInfo, lastUpdated] = data;
        return (skipNetworkConnectionCheck ? this.$q.resolve() : this.checkNetworkConnection()).then(() => {
          return this.platformSvc
            .getAppVersion()
            .then((appVersion) => {
              const requestUrl = `${(syncInfo as ApiXbrowsersyncSyncInfo).serviceUrl}/${
                ApiXbrowsersyncResource.Bookmarks
              }/${syncInfo.id}`;
              const requestBody: ApiUpdateBookmarksRequest = {
                bookmarks: encryptedBookmarks,
                lastUpdated
              };

              // If updating sync version, set as current app version
              if (updateSyncVersion) {
                requestBody.version = appVersion;
              }

              return this.$http
                .put<ApiUpdateBookmarksResponse>(requestUrl, JSON.stringify(requestBody))
                .catch((err) => this.handleFailedRequest(err));
            })
            .then((response) => this.apiRequestSucceeded(response))
            .then((response) => {
              // Check response data is valid before returning
              const { data: responseData } = response;
              if (!responseData?.lastUpdated) {
                throw new UnexpectedResponseDataError();
              }
              return responseData;
            });
        });
      })
      .catch((err) => {
        if (err instanceof InvalidServiceError) {
          throw new ServiceOfflineError();
        }
        throw err;
      });
  }
}
</file>

<file path="src/modules/shared/api/api.enum.ts">
enum ApiServiceStatus {
  Error = -1,
  Online = 1,
  Offline = 2,
  NoNewSyncs = 3
}

enum ApiServiceType {
  xBrowserSync = 'xbrowsersync'
}

export { ApiServiceStatus, ApiServiceType };
</file>

<file path="src/modules/shared/api/api.interface.ts">
import { ApiServiceStatus, ApiServiceType } from './api.enum';

export interface ApiCreateBookmarksRequest {
  version: string;
}

export interface ApiCreateBookmarksResponse {
  id: string;
  lastUpdated: string;
  version: string;
}

export interface ApiGetBookmarksResponse {
  bookmarks: string;
  lastUpdated: string;
  version: string;
}

export interface ApiGetLastUpdatedResponse {
  lastUpdated: string;
}

export interface ApiGetSyncVersionResponse {
  version: string;
}

export interface ApiService {
  checkServiceStatus: (url?: string) => ng.IPromise<ApiServiceInfoResponse>;
  createNewSync: () => ng.IPromise<ApiCreateBookmarksResponse>;
  getBookmarks: () => ng.IPromise<ApiGetBookmarksResponse>;
  getBookmarksLastUpdated: (skipNetworkConnectionCheck?: boolean) => ng.IPromise<ApiGetLastUpdatedResponse>;
  getSyncVersion: (syncId: string) => ng.IPromise<ApiGetSyncVersionResponse>;
  updateBookmarks: (
    encryptedBookmarks: string,
    updateSyncVersion?: boolean,
    backgroundUpdate?: boolean
  ) => ng.IPromise<ApiUpdateBookmarksResponse>;
}

export interface ApiServiceInfo {
  status?: ApiServiceStatus;
}

export interface ApiServiceInfoResponse {}

export enum ApiServiceNames {
  XbrowsersyncService = 'ApiXbrowsersyncService'
}

export interface ApiSyncInfo {
  id?: string;
  password?: string;
  serviceType: ApiServiceType;
  version?: string;
}

export interface ApiUpdateBookmarksRequest {
  bookmarks: string;
  lastUpdated: string;
  version?: string;
}

export interface ApiUpdateBookmarksResponse {
  lastUpdated: string;
}
</file>

<file path="src/modules/shared/backup-restore/backup-restore.interface.ts">
import { ApiServiceType } from '../api/api.enum';
import { ApiSyncInfo } from '../api/api.interface';
import { Bookmark } from '../bookmark/bookmark.interface';

export interface AutoBackUpSchedule {
  autoBackUpNumber: string;
  autoBackUpUnit: string;
  autoBackUpHour: string;
  autoBackUpMinute: string;
}

export interface Backup {
  xbrowsersync?: BackupRoot;
  xBrowserSync?: LegacyBackupRoot;
}

export interface BackupRoot {
  data: BackupData;
  date: string;
  sync: ApiSyncInfo | BackupSync;
}

export interface BackupData {
  bookmarks?: Bookmark[];
}

/**
 * @deprecated Replaced by {@link ApiSyncInfo} as of v1.6.0
 */
export interface BackupSync {
  id?: string;
  type?: ApiServiceType;
  url?: string;
  version?: string;
}

export interface LegacyBackupRoot {
  bookmarks?: Bookmark[];
  id?: string;
}
</file>

<file path="src/modules/shared/backup-restore/backup-restore.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { ApiSyncInfo } from '../api/api.interface';
import { ApiXbrowsersyncSyncInfo } from '../api/api-xbrowsersync/api-xbrowsersync.interface';
import { Bookmark, BookmarkService } from '../bookmark/bookmark.interface';
import { FailedRestoreDataError } from '../errors/errors';
import { MessageCommand } from '../global-shared.enum';
import { PlatformService } from '../global-shared.interface';
import { LogService } from '../log/log.service';
import { StoreKey } from '../store/store.enum';
import { StoreService } from '../store/store.service';
import { SyncType } from '../sync/sync.enum';
import { UpgradeService } from '../upgrade/upgrade.service';
import { UtilityService } from '../utility/utility.service';
import { AutoBackUpSchedule, Backup } from './backup-restore.interface';

@Injectable('BackupRestoreService')
export class BackupRestoreService {
  $q: ng.IQService;
  bookmarkSvc: BookmarkService;
  logSvc: LogService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  upgradeSvc: UpgradeService;
  utilitySvc: UtilityService;

  static $inject = [
    '$q',
    'BookmarkService',
    'LogService',
    'PlatformService',
    'StoreService',
    'UpgradeService',
    'UtilityService'
  ];
  constructor(
    $q: ng.IQService,
    BookmarkSvc: BookmarkService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UpgradeSvc: UpgradeService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.bookmarkSvc = BookmarkSvc;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.upgradeSvc = UpgradeSvc;
    this.utilitySvc = UtilitySvc;
  }

  createBackupData(bookmarks: Bookmark[], syncInfo: ApiSyncInfo): Backup {
    return {
      xbrowsersync: {
        date: this.utilitySvc.getDateTimeString(new Date()),
        sync: syncInfo,
        data: {
          bookmarks
        }
      }
    } as Backup;
  }

  getBackupFilename(): string {
    const fileName = `xbs_backup_${this.utilitySvc.getDateTimeString(new Date())}.txt`;
    return fileName;
  }

  getSetAutoBackUpSchedule(newValue?: AutoBackUpSchedule | null): ng.IPromise<AutoBackUpSchedule> {
    if (angular.isUndefined(newValue)) {
      return this.storeSvc.get<AutoBackUpSchedule>(StoreKey.AutoBackUpSchedule);
    }
    return this.storeSvc.set(StoreKey.AutoBackUpSchedule, newValue).then(() => {
      if (newValue === null) {
        this.logSvc.logInfo(`Auto back up schedule cleared`);
      } else {
        this.logSvc.logInfo(
          `Auto back up schedule: ${newValue.autoBackUpHour}:${newValue.autoBackUpMinute} every ${newValue.autoBackUpNumber} ${newValue.autoBackUpUnit}`
        );
      }
      return newValue;
    });
  }

  getSyncInfo(): ng.IPromise<ApiSyncInfo> {
    // Remove sensitive data from sync info before returning
    return this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => {
      const { password, ...syncInfoNoPassword } = syncInfo;
      return syncInfoNoPassword;
    });
  }

  restoreBackupData(backupData: Backup): ng.IPromise<void> {
    let bookmarksToRestore: Bookmark[];
    let syncEnabled: boolean;
    let syncId: string;
    let syncInfo: ApiSyncInfo;
    let syncVersion: string;

    if (backupData.xbrowsersync) {
      // > v1.5.2
      if (backupData.xbrowsersync?.sync && 'serviceType' in backupData.xbrowsersync.sync) {
        syncInfo = backupData.xbrowsersync.sync;
      }
      // v1.5.0 - v1.5.2
      else if (backupData.xbrowsersync?.sync && 'type' in backupData.xbrowsersync.sync) {
        const { id, url, version } = backupData.xbrowsersync.sync;
        syncInfo = {
          id,
          serviceUrl: url,
          version
        } as ApiXbrowsersyncSyncInfo;
      }
      bookmarksToRestore = backupData.xbrowsersync.data?.bookmarks;
    }
    // < v1.5.0
    else if (backupData.xBrowserSync) {
      bookmarksToRestore = backupData.xBrowserSync.bookmarks;
    } else {
      // Invalid restore data
      throw new FailedRestoreDataError('Unsupported backup data format');
    }

    this.logSvc.logInfo('Restoring data');

    // Upgrade the bookmarks if required
    return this.platformSvc
      .getAppVersion()
      .then((currentVersion) => {
        return syncVersion === currentVersion
          ? bookmarksToRestore
          : this.upgradeSvc.upgradeBookmarks(currentVersion, syncVersion, bookmarksToRestore);
      })
      .then((upgradedBookmarks) =>
        this.utilitySvc
          .isSyncEnabled()
          .then((cachedSyncEnabled) => {
            syncEnabled = cachedSyncEnabled;

            // If synced, check service status before starting restore, otherwise restore sync info
            return syncEnabled
              ? this.utilitySvc
                  .getApiService()
                  .then((apiSvc) => apiSvc.checkServiceStatus())
                  .then(() => {})
              : this.storeSvc.set(StoreKey.SyncInfo, syncInfo);
          })
          // Start restore
          .then(() =>
            this.platformSvc.queueSync(
              {
                bookmarks: upgradedBookmarks,
                type: !syncEnabled ? SyncType.Local : SyncType.LocalAndRemote
              },
              MessageCommand.RestoreBookmarks
            )
          )
      )
      .then(() => {});
  }

  runAutoBackUp(): void {
    this.logSvc.logInfo('Running auto back up');
    this.saveBackupFile(false);
  }

  saveBackupFile(displaySaveDialog?: boolean): ng.IPromise<string | void> {
    let filename: string;
    return this.$q
      .all([this.getSyncInfo(), this.bookmarkSvc.getBookmarksForExport(), this.utilitySvc.isSyncEnabled()])
      .then((data) => {
        const [syncInfo, bookmarksData, syncEnabled] = data;
        const backupData = this.createBackupData(bookmarksData, syncEnabled ? syncInfo : undefined);

        // Beautify json and download data
        const beautifiedJson = JSON.stringify(backupData, null, 2);
        filename = this.getBackupFilename();
        return this.platformSvc.downloadFile(filename, beautifiedJson, displaySaveDialog);
      });
  }
}
</file>

<file path="src/modules/shared/bookmark/bookmark-helper/bookmark-helper.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { Bookmarks as NativeBookmarks } from 'webextension-polyfill';
import { BookmarkSearchResult } from '../../../app/app-search/app-search.interface';
import { CryptoService } from '../../crypto/crypto.service';
import { BookmarkNotFoundError, HttpRequestAbortedError } from '../../errors/errors';
import Globals from '../../global-shared.constants';
import { PlatformService } from '../../global-shared.interface';
import { StoreKey } from '../../store/store.enum';
import { StoreService } from '../../store/store.service';
import { UtilityService } from '../../utility/utility.service';
import { BookmarkContainer, BookmarkType } from '../bookmark.enum';
import { Bookmark, BookmarkMetadata, BookmarkSearchQuery } from '../bookmark.interface';

@Injectable('BookmarkHelperService')
export class BookmarkHelperService {
  Strings = require('../../../../../res/strings/en.json');

  $injector: ng.auto.IInjectorService;
  $q: ng.IQService;
  cryptoSvc: CryptoService;
  _platformSvc: PlatformService | undefined;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  cachedBookmarks_encrypted: string | undefined;
  cachedBookmarks_plain: Bookmark[] | undefined;

  static $inject = ['$injector', '$q', 'CryptoService', 'StoreService', 'UtilityService'];
  constructor(
    $injector: ng.auto.IInjectorService,
    $q: ng.IQService,
    CryptoSvc: CryptoService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$injector = $injector;
    this.$q = $q;
    this.cryptoSvc = CryptoSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  get platformSvc(): PlatformService {
    if (angular.isUndefined(this._platformSvc)) {
      this._platformSvc = this.$injector.get('PlatformService');
    }
    return this._platformSvc as PlatformService;
  }

  cleanAllBookmarks(bookmarks: Bookmark[]): Bookmark[] {
    return bookmarks.map((bookmark) => {
      const cleanedBookmark = this.cleanBookmark(bookmark);
      if (angular.isArray(cleanedBookmark.children)) {
        cleanedBookmark.children = this.cleanAllBookmarks(cleanedBookmark.children);
      }
      return cleanedBookmark;
    });
  }

  cleanBookmark(bookmark: Bookmark): Bookmark {
    const validKeys = ['children', 'description', 'id', 'tags', 'title', 'url'];

    // Remove invalid and empty properties (except for children array)
    const cleanedBookmark: Bookmark = {};
    Object.keys(bookmark).forEach((key) => {
      const keyValue = Object.entries(bookmark).find(({ 0: prop }) => prop === key)?.[1];

      // Remove invalid keys
      if (!validKeys.includes(key)) {
        return;
      }

      // Remove undefined keys
      if (angular.isUndefined(keyValue ?? undefined)) {
        return;
      }

      // Remove empty description
      if (key === 'description' && (keyValue ?? '').trim() === '') {
        return;
      }

      // Remove empty tags
      if (key === 'tags' && (keyValue ?? []).length === 0) {
        return;
      }

      // Copy key value to clean bookmark
      Object.assign(cleanedBookmark, { [key]: keyValue });
    });

    return cleanedBookmark;
  }

  eachBookmark<T = Bookmark>(
    iteratee: (rootBookmark: T) => void,
    bookmarks: T[] = [],
    untilCondition?: () => boolean
  ): void {
    // Run the iteratee function for every bookmark until the condition is met
    const iterateBookmarks = (bookmarksToIterate: T[]): void => {
      for (let i = 0; i < bookmarksToIterate.length; i += 1) {
        if (untilCondition?.() === true) {
          break;
        }
        iteratee(bookmarksToIterate[i]);
        if ((bookmarksToIterate[i] as any).children?.length) {
          iterateBookmarks((bookmarksToIterate[i] as any).children);
        }
      }
    };
    iterateBookmarks(bookmarks);
  }

  extractBookmarkMetadata(bookmark: Bookmark | NativeBookmarks.BookmarkTreeNode): BookmarkMetadata {
    const metadata: BookmarkMetadata = {
      description: (bookmark as Bookmark).description,
      tags: (bookmark as Bookmark).tags,
      title: bookmark.title,
      url: bookmark.url
    };

    // Check if separator
    if (
      this.getBookmarkType(bookmark as Bookmark) === BookmarkType.Separator ||
      this.nativeBookmarkIsSeparator(bookmark as NativeBookmarks.BookmarkTreeNode)
    ) {
      metadata.url = Globals.Bookmarks.SeparatorUrl;
    }

    // Remove empty properties
    Object.keys(metadata).forEach((key) => {
      if (angular.isUndefined(metadata[key] ?? undefined)) {
        delete metadata[key];
      }
    });

    return metadata;
  }

  findBookmarkById(
    id: number | string,
    bookmarks: Bookmark[] | NativeBookmarks.BookmarkTreeNode[] = []
  ): Bookmark | NativeBookmarks.BookmarkTreeNode | undefined {
    if (angular.isUndefined(id)) {
      return;
    }

    // Recursively iterate through all bookmarks until id match is found
    let bookmark: Bookmark | NativeBookmarks.BookmarkTreeNode | undefined;
    const index = bookmarks.findIndex((x: Bookmark | NativeBookmarks.BookmarkTreeNode) => {
      return x.id === id;
    });
    if (index === -1) {
      (bookmarks as Bookmark[]).forEach((x) => {
        if (!bookmark) {
          bookmark = this.findBookmarkById(id, x.children);
        }
      });
    } else {
      bookmark = bookmarks[index];
      // Set index as bookmark indexes in Firefox are unreliable!
      // https://bugzilla.mozilla.org/show_bug.cgi?id=1556427
      if ((bookmark as NativeBookmarks.BookmarkTreeNode).index != null) {
        (bookmark as NativeBookmarks.BookmarkTreeNode).index = index;
      }
    }

    return bookmark;
  }

  findCurrentUrlInBookmarks(): ng.IPromise<Bookmark | undefined> {
    // Check if current url is contained in bookmarks
    return this.$q.all([this.platformSvc.getCurrentUrl(), this.platformSvc.getCurrentLocale()]).then((results) => {
      const [currentUrl, currentLocale] = results;
      if (!currentUrl) {
        return;
      }
      return this.getCachedBookmarks().then((bookmarks) => {
        let targetBookmark: Bookmark | undefined;
        this.eachBookmark(
          (bookmark) => {
            if (this.utilitySvc.stringsAreEquivalent(bookmark?.url, currentUrl, currentLocale)) {
              targetBookmark = bookmark;
            }
          },
          bookmarks,
          () => !!targetBookmark
        );
        return targetBookmark;
      });
    });
  }

  getBookmarkById(id: number): ng.IPromise<Bookmark | undefined> {
    return this.getCachedBookmarks().then((bookmarks) => {
      let targetBookmark: Bookmark;
      this.eachBookmark(
        (bookmark) => {
          if (bookmark.id === id) {
            targetBookmark = bookmark;
          }
        },
        bookmarks,
        () => !!targetBookmark
      );
      return targetBookmark;
    });
  }

  getBookmarkTitleForDisplay(bookmark: Bookmark): string | undefined {
    const bookmarkType = this.getBookmarkType(bookmark);

    // If normal bookmark, return title or if blank url to display
    if (bookmarkType === BookmarkType.Bookmark) {
      return bookmark.title ? bookmark.title : bookmark.url.replace(/^https?:\/\//i, '');
    }

    if (bookmarkType === BookmarkType.Container) {
      let containerTitle: string;
      switch (bookmark.title) {
        case BookmarkContainer.Menu:
          containerTitle = this.platformSvc.getI18nString(this.Strings.Bookmarks.Container.Menu);
          break;
        case BookmarkContainer.Other:
          containerTitle = this.platformSvc.getI18nString(this.Strings.Bookmarks.Container.Other);
          break;
        case BookmarkContainer.Toolbar:
          containerTitle = this.platformSvc.getI18nString(this.Strings.Bookmarks.Container.Toolbar);
          break;
        default:
          containerTitle = `${undefined}`;
      }
      return containerTitle;
    }

    // Otherwise bookmark is a folder, return title if not a container
    return bookmark.title;
  }

  getBookmarkType(bookmark: Bookmark): BookmarkType {
    const bookmarkType = BookmarkType.Bookmark;

    // Check if container
    if (
      bookmark.title === BookmarkContainer.Menu ||
      bookmark.title === BookmarkContainer.Other ||
      bookmark.title === BookmarkContainer.Toolbar
    ) {
      return BookmarkType.Container;
    }

    // Check if folder
    if (angular.isArray(bookmark.children)) {
      return BookmarkType.Folder;
    }

    // Check if separator
    if (bookmark.url === Globals.Bookmarks.SeparatorUrl) {
      return BookmarkType.Separator;
    }

    return bookmarkType;
  }

  getCachedBookmarks(): ng.IPromise<Bookmark[] | undefined> {
    // Get cached encrypted bookmarks from store
    return this.storeSvc.get<string>(StoreKey.Bookmarks).then((encryptedBookmarksFromStore) => {
      return (
        this.$q<Bookmark[] | undefined>((resolve, reject) => {
          // Return unencrypted cached bookmarks from memory if encrypted bookmarks
          // in storage match cached encrypted bookmarks in memory
          if (
            !angular.isUndefined(encryptedBookmarksFromStore ?? undefined) &&
            !angular.isUndefined(this.cachedBookmarks_encrypted ?? undefined) &&
            !angular.isUndefined(this.cachedBookmarks_plain ?? undefined) &&
            encryptedBookmarksFromStore === this.cachedBookmarks_encrypted
          ) {
            return resolve(this.cachedBookmarks_plain);
          }

          // If encrypted bookmarks not cached in storage, retrieve synced data
          (!angular.isUndefined(encryptedBookmarksFromStore ?? undefined)
            ? this.$q.resolve(encryptedBookmarksFromStore)
            : this.utilitySvc.getApiService().then((apiSvc) =>
                apiSvc.getBookmarks().then((response) => {
                  return response.bookmarks;
                })
              )
          )
            .then((encryptedBookmarks) => {
              // Decrypt bookmarks
              return this.cryptoSvc.decryptData(encryptedBookmarks).then((bookmarksJson) => {
                // Update cache with retrieved bookmarks data
                const bookmarks: Bookmark[] = bookmarksJson ? JSON.parse(bookmarksJson) : [];
                return this.updateCachedBookmarks(bookmarks, encryptedBookmarks).then(() => {
                  resolve(bookmarks);
                });
              });
            })
            .catch(reject);
        })
          // Return a copy so as not to affect cached bookmarks in memory
          .then((bookmarks) => {
            return angular.copy(bookmarks);
          })
      );
    });
  }

  getContainer(containerName: string, bookmarks: Bookmark[], createIfNotPresent = false): Bookmark | undefined {
    // If container does not exist, create it if specified
    let container = bookmarks.find((x) => x.title === containerName);
    if (!container && createIfNotPresent) {
      container = this.newBookmark(containerName, undefined, undefined, undefined, bookmarks);
      bookmarks.push(container);
    }
    return container;
  }

  getContainerByBookmarkId(id: number, bookmarks: Bookmark[]): Bookmark | undefined {
    // Check if the id corresponds to a container
    const bookmark = this.findBookmarkById(id, bookmarks) as Bookmark;
    if (this.getBookmarkType(bookmark) === BookmarkType.Container) {
      return bookmark as Bookmark;
    }

    // Search through the child bookmarks of each container to find the bookmark
    let container: Bookmark | undefined;
    bookmarks.forEach((x) => {
      this.eachBookmark(
        (child) => {
          if (child.id === id) {
            container = x;
          }
        },
        x.children,
        () => !!container
      );
    });
    return container;
  }

  getKeywordsFromBookmark(bookmark: Bookmark, locale: string, tagsOnly = false, includeUrl = false): string[] {
    let keywords: string[] = [];
    if (!tagsOnly) {
      // Add all words in title and description
      keywords = keywords.concat(this.utilitySvc.splitTextIntoWords(bookmark.title, locale));
      keywords = keywords.concat(this.utilitySvc.splitTextIntoWords(bookmark.description, locale));

      if (includeUrl) {
        // Add url host
        try {
          const url = new URL(bookmark.url);
          const noProtocolUrl = bookmark.url.replace(new RegExp(`^${url.protocol}[/]*`), '');
          const relativeUrl = `${url.pathname}${url.search}${url.hash}`;
          if (relativeUrl !== '/') {
            keywords.push(noProtocolUrl.toLocaleLowerCase(locale).replace(/\/$/, ''));
          } else {
            keywords.push(noProtocolUrl.substring(0, noProtocolUrl.indexOf(relativeUrl)).toLocaleLowerCase(locale));
          }
        } catch {}
      }
    }

    // Add tags
    keywords = keywords.concat(this.utilitySvc.splitTextIntoWords(bookmark.tags?.join(' '), locale));

    // Remove words of two chars or less
    keywords = keywords.filter((item) => {
      return item.length > 2;
    });

    // Sort keywords and return
    return this.utilitySvc.sortWords(keywords);
  }

  getLookahead(word: string, bookmarks: Bookmark[], tagsOnly = false, exclusions: string[] = []): ng.IPromise<any> {
    if (!word) {
      return this.$q.resolve('');
    }

    let getBookmarks: ng.IPromise<Bookmark[] | undefined>;
    if ((bookmarks ?? undefined) === undefined) {
      // Get cached bookmarks
      getBookmarks = this.getCachedBookmarks();
    } else {
      // Use supplied bookmarks
      getBookmarks = this.$q.resolve(bookmarks);
    }

    // Get lookaheads
    return this.$q
      .all([getBookmarks, this.platformSvc.getCurrentLocale()])
      .then((results) => {
        const [bookmarksToSearch, currentLocale] = results;
        return this.searchBookmarksForLookaheads(word, currentLocale, tagsOnly, bookmarksToSearch);
      })
      .then((lookaheads) => {
        // Remove exclusions from lookaheads
        if (exclusions) {
          lookaheads = lookaheads.filter((x) => !exclusions.includes(x));
        }

        if (lookaheads.length === 0) {
          return;
        }

        // Count lookaheads and return most common
        const counts = lookaheads.reduce((acc, val) => {
          acc[val] = acc[val] === undefined ? 1 : (acc[val] += 1);
          return acc;
        }, {});
        const lookahead = Object.keys(counts).reduce((x, y) => {
          return counts[x] > counts[y] ? x : y;
        });

        return [lookahead, word];
      })
      .catch((err) => {
        // Swallow error if request was cancelled
        if (err instanceof HttpRequestAbortedError) {
          return;
        }

        throw err;
      });
  }

  getNativeBookmarksAsBookmarks(nativeBookmarks: NativeBookmarks.BookmarkTreeNode[] = []): Bookmark[] {
    const bookmarks: Bookmark[] = [];
    for (let i = 0; i < nativeBookmarks.length; i += 1) {
      // Check if current native bookmark is a separator
      const nativeBookmark = nativeBookmarks[i];
      const metadata = this.extractBookmarkMetadata(nativeBookmark);
      const bookmark = this.newBookmark(metadata.title, metadata.url, metadata.description, metadata.tags);

      // If this is a folder and has children, process them
      if (nativeBookmark.children?.length) {
        bookmark.children = this.getNativeBookmarksAsBookmarks(nativeBookmark.children);
      }
      bookmarks.push(bookmark);
    }
    return bookmarks;
  }

  getNewBookmarkId(bookmarks: Bookmark[], takenIds: number[] = [0]): number {
    // Check existing bookmarks for highest id
    let highestId = 0;
    this.eachBookmark((bookmark) => {
      if (!angular.isUndefined(bookmark.id ?? undefined) && parseInt(bookmark.id!.toString(), 10) > highestId) {
        highestId = parseInt(bookmark.id!.toString(), 10);
      }
    }, bookmarks);

    // Compare highest id with supplied taken ids
    const highestTakenId = takenIds.reduce((x, y) => (x > y ? x : y));
    highestId = highestTakenId > highestId ? highestTakenId : highestId;
    return highestId + 1;
  }

  nativeBookmarkIsSeparator(nativeBookmark: NativeBookmarks.BookmarkTreeNode): boolean {
    if (angular.isUndefined(nativeBookmark ?? undefined)) {
      return false;
    }
    return (
      nativeBookmark.type === BookmarkType.Separator ||
      ((nativeBookmark.title === Globals.Bookmarks.HorizontalSeparatorTitle ||
        nativeBookmark.title === Globals.Bookmarks.VerticalSeparatorTitle) &&
        nativeBookmark.url === this.platformSvc.getNewTabUrl())
    );
  }

  modifyBookmarkById(id: number, newMetadata: BookmarkMetadata, bookmarks: Bookmark[]): ng.IPromise<Bookmark[]> {
    const updatedBookmarks = angular.copy(bookmarks);
    const bookmarkToModify = this.findBookmarkById(id, updatedBookmarks) as Bookmark;
    if (!bookmarkToModify) {
      throw new BookmarkNotFoundError();
    }

    // Create a new bookmark with the new metadata
    const bookmarkFromNewMetadata = this.newBookmark(
      newMetadata.title,
      newMetadata.url,
      newMetadata.description,
      newMetadata.tags
    );

    // Copy id and children
    bookmarkFromNewMetadata.id = bookmarkToModify.id;
    if (
      this.getBookmarkType(bookmarkToModify) === BookmarkType.Folder &&
      this.getBookmarkType(bookmarkFromNewMetadata) === BookmarkType.Folder
    ) {
      bookmarkFromNewMetadata.children = bookmarkToModify.children;
    }

    // Overwrite existing bookmark and return updated bookmarks
    angular.copy(bookmarkFromNewMetadata, bookmarkToModify);
    return this.$q.resolve(updatedBookmarks);
  }

  newBookmark(
    title: string,
    url?: string,
    description?: string,
    tags?: string[],
    bookmarksToGenerateNewId?: Bookmark[]
  ): Bookmark {
    const newBookmark: Bookmark = {
      children: [],
      description: this.utilitySvc.trimToNearestWord(description, Globals.Bookmarks.DescriptionMaxLength),
      tags,
      title: title?.trim(),
      url: url?.trim()
    };

    // If bookmark has a url it is not a folder so delete children prop, otherwise delete url prop
    if (url) {
      delete newBookmark.children;
    } else {
      delete newBookmark.url;
    }

    // If the bookmark is a separator remove other properties
    if (this.getBookmarkType(newBookmark) === BookmarkType.Separator) {
      Object.keys(newBookmark).forEach((key) => {
        if (key !== 'url') {
          delete newBookmark[key];
        }
      });
    }

    // If bookmarks provided, generate new id
    if (bookmarksToGenerateNewId) {
      newBookmark.id = this.getNewBookmarkId(bookmarksToGenerateNewId);
    }

    // Clean new bookmark of empty attributes before returning
    return this.cleanBookmark(newBookmark);
  }

  removeBookmarkById(id: number, bookmarks: Bookmark[]): ng.IPromise<Bookmark[]> {
    // Iterate through bookmarks and remove the bookmark that matches the id param
    const updatedBookmarks = angular.copy(bookmarks);
    this.eachBookmark((bookmark) => {
      if (!bookmark.children) {
        return;
      }
      const indexToRemove = bookmark.children.findIndex((child) => child.id === id);
      if (indexToRemove >= 0) {
        bookmark.children.splice(indexToRemove, 1);
      }
    }, updatedBookmarks);
    return this.$q.resolve(updatedBookmarks);
  }

  removeEmptyContainers(bookmarks: Bookmark[]): Bookmark[] {
    const menuContainer = this.getContainer(BookmarkContainer.Menu, bookmarks);
    const otherContainer = this.getContainer(BookmarkContainer.Other, bookmarks);
    const toolbarContainer = this.getContainer(BookmarkContainer.Toolbar, bookmarks);
    const removeArr: Bookmark[] = [];

    if (!menuContainer?.children?.length) {
      removeArr.push(menuContainer);
    }

    if (!otherContainer?.children?.length) {
      removeArr.push(otherContainer);
    }

    if (!toolbarContainer?.children?.length) {
      removeArr.push(toolbarContainer);
    }

    return bookmarks.filter((x) => !removeArr.includes(x));
  }

  searchBookmarks(query: BookmarkSearchQuery): ng.IPromise<Bookmark[]> {
    if (!query) {
      query = { keywords: [] };
    }
    return this.$q.all([this.getCachedBookmarks(), this.platformSvc.getCurrentLocale()]).then((response) => {
      const [bookmarks, currentLocale] = response;
      let results: BookmarkSearchResult[];

      // If url supplied, first search by url
      if (query.url) {
        results = this.searchBookmarksByUrl(bookmarks, query.url, currentLocale) ?? [];
      }

      // Search by keywords and sort (score desc, id desc) using results from url search if relevant
      results = this.searchBookmarksByKeywords(
        results ?? (bookmarks as BookmarkSearchResult[]),
        currentLocale,
        query.keywords
      );
      return results
        .sort((x, y) => {
          return x.id - y.id;
        })
        .sort((x, y) => {
          return x.score - y.score;
        })
        .reverse();
    });
  }

  searchBookmarksByKeywords(
    bookmarks: Bookmark[],
    locale: string,
    keywords: string[] = [],
    results: BookmarkSearchResult[] = []
  ): BookmarkSearchResult[] {
    bookmarks.forEach((bookmark) => {
      const bookmarkType = this.getBookmarkType(bookmark);

      // Ignore separators
      if (bookmarkType === BookmarkType.Separator) {
        return;
      }

      // If bookmark is a container or folder, search children
      if (bookmarkType === BookmarkType.Container || bookmarkType === BookmarkType.Folder) {
        if (bookmark.children?.length) {
          this.searchBookmarksByKeywords(bookmark.children, locale, keywords, results);
        }
      } else {
        // Get match scores for each keyword against bookmark words
        const bookmarkWords = this.getKeywordsFromBookmark(bookmark, locale);
        const scores = keywords.map((keyword) => {
          let count = 0;
          bookmarkWords.forEach((word) => {
            if (word?.toLocaleLowerCase(locale).indexOf(keyword.toLocaleLowerCase(locale)) === 0) {
              count += 1;
            }
          });

          return count;
        });

        // Check all keywords match
        if (angular.isUndefined(scores.find((x) => x === 0))) {
          // Calculate score
          const score = scores.reduce((memo, num) => memo + num, 0);

          // Add result
          const result: BookmarkSearchResult = angular.copy(bookmark);
          result.score = score;
          results.push(result);
        }
      }
    });

    return results;
  }

  searchBookmarksByUrl(
    bookmarks: Bookmark[],
    url: string,
    locale: string,
    results: BookmarkSearchResult[] = []
  ): BookmarkSearchResult[] {
    results = results.concat(
      bookmarks.filter((bookmark) => {
        // Consider only actual bookmarks
        const bookmarkType = this.getBookmarkType(bookmark);
        if (bookmarkType !== BookmarkType.Bookmark) {
          return false;
        }

        // Check if the bookmark url contains the url param
        return bookmark.url.toLocaleLowerCase(locale).indexOf(url.toLocaleLowerCase(locale)) >= 0;
      })
    );

    for (let i = 0; i < bookmarks.length; i += 1) {
      if (bookmarks[i].children?.length) {
        results = this.searchBookmarksByUrl(bookmarks[i].children, url, locale, results);
      }
    }

    return results;
  }

  searchBookmarksForLookaheads(
    word: string,
    locale: string,
    tagsOnly = false,
    bookmarks: Bookmark[] = [],
    results: string[] = []
  ): string[] {
    bookmarks.forEach((bookmark) => {
      const bookmarkType = this.getBookmarkType(bookmark);

      // Ignore separators
      if (bookmarkType === BookmarkType.Separator) {
        return;
      }

      // If bookmark is a container or folder, search children
      if (bookmarkType === BookmarkType.Container || bookmarkType === BookmarkType.Folder) {
        results = this.searchBookmarksForLookaheads(word, locale, tagsOnly, bookmark.children, results);
      } else {
        // Find all words that begin with lookahead word
        const bookmarkWords = this.getKeywordsFromBookmark(bookmark, locale, tagsOnly, true);
        results = results.concat(
          bookmarkWords.filter((innerbookmark) => {
            return innerbookmark.indexOf(word) === 0;
          })
        );
      }
    });

    return results;
  }

  updateCachedBookmarks(bookmarks: Bookmark[], encryptedBookmarks: string): ng.IPromise<void> {
    return this.$q<void>((resolve) => {
      if (angular.isUndefined(encryptedBookmarks ?? undefined)) {
        return resolve();
      }

      // Update storage cache with new encrypted bookmarks
      return this.storeSvc.set(StoreKey.Bookmarks, encryptedBookmarks).then(() => {
        // Update memory cached bookmarks
        this.cachedBookmarks_encrypted = angular.copy(encryptedBookmarks);
        if (bookmarks !== undefined) {
          this.cachedBookmarks_plain = angular.copy(bookmarks);
        }
        resolve();
      });
    });
  }
}
</file>

<file path="src/modules/shared/bookmark/bookmark.enum.ts">
enum BookmarkChangeType {
  Add = 'add',
  ChildrenReordered = 'childrenReordered',
  Modify = 'modify',
  Move = 'move',
  Remove = 'remove'
}

enum BookmarkContainer {
  Menu = '[xbs] Menu',
  Other = '[xbs] Other',
  Toolbar = '[xbs] Toolbar'
}

enum BookmarkType {
  Bookmark = 'bookmark',
  Container = 'container',
  Folder = 'folder',
  Separator = 'separator'
}

export { BookmarkChangeType, BookmarkContainer, BookmarkType };
</file>

<file path="src/modules/shared/bookmark/bookmark.interface.ts">
import { Bookmarks as NativeBookmarks } from 'webextension-polyfill';
import { BookmarkChangeType } from './bookmark.enum';

export interface AddBookmarkChangeData {
  metadata: BookmarkMetadata;
}

export interface AddNativeBookmarkChangeData {
  nativeBookmark: NativeBookmarkWithAdditionalMetadata;
}

export interface Bookmark extends BookmarkMetadata {
  children?: Bookmark[];
  id?: number;
}

export type ChangeData =
  | AddBookmarkChangeData
  | AddNativeBookmarkChangeData
  | ModifyBookmarkChangeData
  | ModifyNativeBookmarkChangeData
  | MoveNativeBookmarkChangeData
  | RemoveBookmarkChangeData
  | RemoveNativeBookmarkChangeData
  | ReorderNativeBookmarkChangeData;

export interface BookmarkChange {
  changeData: ChangeData;
  type: BookmarkChangeType;
}

export interface BookmarkMetadata {
  description?: string;
  tags?: string[];
  title?: string;
  url?: string;
}

export interface BookmarkSearchQuery {
  keywords?: string[];
  url?: string;
}

export interface BookmarkService {
  buildIdMappings: (bookmarks: Bookmark[]) => ng.IPromise<void>;
  clearNativeBookmarks: () => ng.IPromise<void>;
  createNativeBookmarksFromBookmarks: (bookmarks: Bookmark[]) => ng.IPromise<number>;
  ensureContainersExist: (bookmarks: Bookmark[]) => Bookmark[];
  getBookmarksForExport: () => ng.IPromise<Bookmark[]>;
  processNativeChangeOnBookmarks: (changeInfo: BookmarkChange, bookmarks: Bookmark[]) => ng.IPromise<Bookmark[]>;
  processChangeOnNativeBookmarks: (
    id: number,
    changeType: BookmarkChangeType,
    changeInfo: BookmarkMetadata
  ) => ng.IPromise<void>;
}

export interface ModifyBookmarkChangeData {
  bookmark: Bookmark;
}

export interface ModifyNativeBookmarkChangeData {
  nativeBookmark: NativeBookmarks.BookmarkTreeNode;
}

export interface MoveNativeBookmarkChangeData extends NativeBookmarks.OnMovedMoveInfoType {
  id: string;
}

export interface NativeBookmarkWithAdditionalMetadata extends NativeBookmarks.BookmarkTreeNode {
  description?: string;
  tags?: string[];
}

export interface OnChildrenReorderedReorderInfoType {
  childIds: string[];
}

export interface RemoveBookmarkChangeData {
  id: number;
}

export interface RemoveNativeBookmarkChangeData {
  nativeBookmark: NativeBookmarks.BookmarkTreeNode;
}

export interface ReorderNativeBookmarkChangeData {
  childIds: string[];
  parentId: string;
}

export interface UpdateBookmarksResult {
  bookmark: Bookmark;
  bookmarks: Bookmark[];
  container?: string;
}
</file>

<file path="src/modules/shared/crypto/crypto.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import base64js from 'base64-js';
import lzutf8 from 'lzutf8';
import { ArgumentError, InvalidCredentialsError } from '../errors/errors';
import { LogService } from '../log/log.service';
import { StoreService } from '../store/store.service';
import { UtilityService } from '../utility/utility.service';

@Injectable('CryptoService')
export class CryptoService {
  $q: ng.IQService;
  logSvc: LogService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  keyGenAlgorithm = 'PBKDF2';
  keyGenIterations = 250000;
  keyGenHashFunction = 'SHA-256';
  encryptionAlgorithm = 'AES-GCM';

  static $inject = ['$q', 'LogService', 'StoreService', 'UtilityService'];
  constructor($q: ng.IQService, LogSvc: LogService, StoreSvc: StoreService, UtilitySvc: UtilityService) {
    this.$q = $q;
    this.logSvc = LogSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  concatUint8Arrays(firstArr: Uint8Array = new Uint8Array(), secondArr: Uint8Array = new Uint8Array()): Uint8Array {
    const totalLength = firstArr.length + secondArr.length;
    const result = new Uint8Array(totalLength);
    result.set(firstArr, 0);
    result.set(secondArr, firstArr.length);
    return result;
  }

  decryptData(encryptedData: string): ng.IPromise<string> {
    // If no data provided, return an empty string
    if (!encryptedData) {
      return this.$q.resolve('');
    }

    // Ensure sync credentials
    return this.utilitySvc
      .checkSyncCredentialsExist()
      .then((syncInfo) => {
        // Convert hashed password to bytes
        const keyData = base64js.toByteArray(syncInfo.password);

        // Convert base64 encoded encrypted data to bytes and extract initialization vector
        const encryptedBytes = base64js.toByteArray(encryptedData);
        const iv = encryptedBytes.slice(0, 16);
        const encryptedDataBytes = encryptedBytes.slice(16).buffer;

        // Generate a cryptokey using the stored password hash for decryption
        return crypto.subtle
          .importKey('raw', keyData, { length: keyData.length, name: this.encryptionAlgorithm }, false, ['decrypt'])
          .then((key) => {
            // Convert base64 encoded encrypted data to bytes
            return crypto.subtle.decrypt({ name: this.encryptionAlgorithm, iv }, key, encryptedDataBytes);
          })
          .then((decryptedBytes) => {
            if (!decryptedBytes) {
              throw new Error('Failed to decrypt data.');
            }

            // Uncompress the decrypted data and return
            const decryptedData = lzutf8.decompress(new Uint8Array(decryptedBytes)) as string;
            return decryptedData;
          });
      })
      .catch((err) => {
        this.logSvc.logWarning('Decryption failed');
        throw new InvalidCredentialsError(undefined, err);
      });
  }

  encryptData(data: string): ng.IPromise<string> {
    // If no data provided, return an empty string
    if (!data) {
      return this.$q.resolve('');
    }

    // Ensure data is a string
    if (!angular.isString(data)) {
      throw new ArgumentError('Argument must be a string');
    }

    return this.utilitySvc
      .checkSyncCredentialsExist()
      .then((syncInfo) => {
        // Convert hashed password to bytes
        const keyData = base64js.toByteArray(syncInfo.password);

        // Generate a random 16 byte initialization vector
        const iv = crypto.getRandomValues(new Uint8Array(16));

        // Generate a new cryptokey using the stored password hash
        return crypto.subtle
          .importKey('raw', keyData, { length: keyData.length, name: this.encryptionAlgorithm }, false, ['encrypt'])
          .then((key) => {
            // Compress the data before encryption
            const compressedData = lzutf8.compress(data);

            // Encrypt the data using AES
            return crypto.subtle.encrypt({ name: this.encryptionAlgorithm, iv }, key, compressedData);
          })
          .then((encryptedData) => {
            // Combine initialization vector and encrypted data and return as base64 encoded string
            const combinedData = this.concatUint8Arrays(iv, new Uint8Array(encryptedData));
            return base64js.fromByteArray(combinedData);
          });
      })
      .catch((err) => {
        this.logSvc.logWarning('Encryption failed');
        throw new InvalidCredentialsError(undefined, err);
      });
  }

  getPasswordHash(password: string, salt: string): ng.IPromise<string> {
    const encoder = new TextEncoder();
    const encodedSalt = encoder.encode(salt);

    // Get cached sync version
    return this.utilitySvc.getSyncVersion().then((syncVersion) => {
      // If old sync version, don't hash password for legacy encryption
      if (!syncVersion) {
        return this.$q.resolve(password);
      }

      // Generate a new cryptokey using the stored password hash
      const keyData = encoder.encode(password);
      return crypto.subtle
        .importKey('raw', keyData, { length: keyData.length, name: this.keyGenAlgorithm }, false, ['deriveKey'])
        .then((importedKey) => {
          // Run the key through PBKDF2 with many iterations using the provided salt
          return crypto.subtle.deriveKey(
            {
              name: this.keyGenAlgorithm,
              salt: encodedSalt,
              iterations: this.keyGenIterations,
              hash: this.keyGenHashFunction
            },
            importedKey,
            { name: this.encryptionAlgorithm, length: 256 },
            true,
            ['encrypt', 'decrypt']
          );
        })
        .then((derivedKey) => {
          // Export the hashed key
          return crypto.subtle.exportKey('raw', derivedKey);
        })
        .then((exportedKey) => {
          // Convert exported key to base64 encoded string and return
          const base64Key = base64js.fromByteArray(new Uint8Array(exportedKey));
          return base64Key;
        });
    });
  }
}
</file>

<file path="src/modules/shared/errors/exception-handler/exception-handler.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AlertType } from '../../alert/alert.enum';
import { Alert } from '../../alert/alert.interface';
import { AlertService } from '../../alert/alert.service';
import { PlatformService } from '../../global-shared.interface';
import { LogService } from '../../log/log.service';
import * as Errors from '../errors';

@Injectable('ExceptionHandler')
export class ExceptionHandlerService {
  Strings = require('../../../../../res/strings/en.json');

  $injector: ng.auto.IInjectorService;
  alertSvc: AlertService;
  logSvc: LogService;
  _platformSvc: PlatformService;

  static $inject = ['$injector', 'AlertService', 'LogService'];
  constructor($injector: ng.auto.IInjectorService, AlertSvc: AlertService, LogSvc: LogService) {
    this.$injector = $injector;
    this.alertSvc = AlertSvc;
    this.logSvc = LogSvc;
  }

  get platformSvc(): PlatformService {
    if (angular.isUndefined(this._platformSvc)) {
      this._platformSvc = this.$injector.get('PlatformService');
    }
    return this._platformSvc;
  }

  getAlertFromError(error: Errors.BaseError): Alert {
    const alertMessage: Alert = {
      message: '',
      title: '',
      type: AlertType.Error
    };

    switch (error.constructor) {
      case Errors.HttpRequestTimedOutError:
      case Errors.NetworkConnectionError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.NetworkConnection.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.NetworkConnection.Message);
        break;
      case Errors.HttpRequestFailedError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.HttpRequestFailed.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.HttpRequestFailed.Message);
        break;
      case Errors.TooManyRequestsError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.TooManyRequests.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.TooManyRequests.Message);
        break;
      case Errors.RequestEntityTooLargeError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.RequestEntityTooLarge.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.RequestEntityTooLarge.Message);
        break;
      case Errors.NotAcceptingNewSyncsError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.NotAcceptingNewSyncs.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.NotAcceptingNewSyncs.Message);
        break;
      case Errors.DailyNewSyncLimitReachedError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.DailyNewSyncLimitReached.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.DailyNewSyncLimitReached.Message);
        break;
      case Errors.IncompleteSyncInfoError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.IncompleteSyncInfo.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.IncompleteSyncInfo.Message);
        break;
      case Errors.SyncNotFoundError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.SyncRemoved.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.SyncRemoved.Message);
        break;
      case Errors.SyncVersionNotSupportedError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.SyncVersionNotSupported.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.SyncVersionNotSupported.Message);
        break;
      case Errors.InvalidCredentialsError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.InvalidCredentials.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.InvalidCredentials.Message);
        break;
      case Errors.ContainerChangedError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.ContainerChanged.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.ContainerChanged.Message);
        break;
      case Errors.ContainerNotFoundError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.LocalContainerNotFound.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.LocalContainerNotFound.Message);
        break;
      case Errors.DataOutOfSyncError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.OutOfSync.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.OutOfSync.Message);
        break;
      case Errors.InvalidServiceError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.InvalidService.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.InvalidService.Message);
        break;
      case Errors.ServiceOfflineError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.ServiceOffline.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.ServiceOffline.Message);
        break;
      case Errors.UnsupportedApiVersionError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.UnsupportedServiceApiVersion.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.UnsupportedServiceApiVersion.Message);
        break;
      case Errors.FailedGetPageMetadataError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.FailedGetPageMetadata.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.FailedGetPageMetadata.Message);
        break;
      case Errors.FailedScanError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.ScanFailed.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.ScanFailed.Message);
        break;
      case Errors.FailedShareBookmarkError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.ShareFailed.Title);
        break;
      case Errors.FailedDownloadFileError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.FailedDownloadFile.Title);
        break;
      case Errors.FailedGetDataToRestoreError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.FailedGetDataToRestore.Title);
        break;
      case Errors.FailedRestoreDataError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.FailedRestoreData.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.FailedRestoreData.Message);
        break;
      case Errors.FailedShareUrlError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.FailedShareUrl.Title);
        break;
      case Errors.FailedShareUrlNotSyncedError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.FailedShareUrlNotSynced.Title);
        break;
      case Errors.FailedRefreshBookmarksError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.FailedRefreshBookmarks.Title);
        break;
      case Errors.SyncUncommittedError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.UncommittedSyncs.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.UncommittedSyncs.Message);
        alertMessage.type = AlertType.Information;
        break;
      case Errors.UpgradeFailedError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.UpgradeFailed.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.UpgradeFailed.Message);
        break;
      case Errors.FailedCreateNativeBookmarksError:
      case Errors.FailedGetNativeBookmarksError:
      case Errors.FailedRemoveNativeBookmarksError:
      case Errors.NativeBookmarkNotFoundError:
      case Errors.BookmarkNotFoundError:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.LocalSyncError.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.LocalSyncError.Message);
        break;
      default:
        alertMessage.title = this.platformSvc.getI18nString(this.Strings.Error.Default.Title);
        alertMessage.message = this.platformSvc.getI18nString(this.Strings.Error.Default.Message);
    }

    return alertMessage;
  }

  @boundMethod
  handleError(error: Errors.BaseError, cause?: string, displayAlert = true): void {
    switch (error.constructor) {
      case Errors.HttpRequestAbortedError:
        displayAlert = false;
        return;
      case Errors.NetworkConnectionError:
        if (!error.logged) {
          this.logSvc.logWarning('Connection lost');
        }
        error.logged = true;
        break;
      case Errors.ServiceOfflineError:
        if (!error.logged) {
          this.logSvc.logWarning('Service offline');
        }
        error.logged = true;
        break;
      case Errors.InvalidCredentialsError:
      case Errors.SyncUncommittedError:
        break;
      default:
        this.logSvc.logError(error, cause);
    }

    if (displayAlert) {
      this.alertSvc.currentAlert = this.getAlertFromError(error);
    }
  }

  static Factory($injector: ng.auto.IInjectorService, AlertSvc: AlertService, LogSvc: LogService) {
    const errorHandler = new ExceptionHandlerService($injector, AlertSvc, LogSvc);
    return errorHandler.handleError;
  }
}
</file>

<file path="src/modules/shared/errors/errors.interface.ts">
export interface ExceptionHandler {
  (exception: Error, cause?: string, displayAlert?: boolean): void;
}
</file>

<file path="src/modules/shared/errors/errors.ts">
/* eslint-disable max-classes-per-file */

export class BaseError extends Error {
  logged: boolean;

  constructor(message?: string, error?: Error) {
    let errMessage = message;
    if (error && !message) {
      errMessage = error.message;
    }

    super(errMessage);

    // Use error param stacktrace if provided and add error class name
    if (error && error.stack) {
      this.stack = error.stack;
    }
    this.stack = this.stack.replace(/^(Error)/, `$1 (${this.constructor.name})`);

    // Set logged flag to default value
    this.logged = false;
  }
}

export class AmbiguousSyncRequestError extends BaseError {}

export class AndroidError extends BaseError {}

export class ApiRequestError extends BaseError {}

export class ArgumentError extends BaseError {}

export class BookmarkMappingNotFoundError extends BaseError {}

export class BookmarkNotFoundError extends BaseError {}

export class ContainerChangedError extends BaseError {}

export class ContainerNotFoundError extends BaseError {}

export class DailyNewSyncLimitReachedError extends BaseError {}

export class DataOutOfSyncError extends BaseError {}

export class FailedGetNativeBookmarksError extends BaseError {}

export class FailedCreateNativeBookmarksError extends BaseError {}

export class FailedDownloadFileError extends BaseError {}

export class FailedGetDataToRestoreError extends BaseError {}

export class FailedGetPageMetadataError extends BaseError {}

export class FailedLocalStorageError extends BaseError {}

export class FailedRefreshBookmarksError extends BaseError {}

export class FailedRegisterAutoUpdatesError extends BaseError {}

export class FailedRemoveNativeBookmarksError extends BaseError {}

export class FailedRestoreDataError extends BaseError {}

export class FailedSaveBackupError extends BaseError {}

export class FailedScanError extends BaseError {}

export class FailedShareBookmarkError extends BaseError {}

export class FailedShareUrlError extends BaseError {}

export class FailedShareUrlNotSyncedError extends BaseError {}

export class FailedUpdateNativeBookmarksError extends BaseError {}

export class HttpRequestAbortedError extends BaseError {}

export class HttpRequestFailedError extends BaseError {}

export class HttpRequestTimedOutError extends BaseError {}

export class I18nError extends BaseError {}

export class IncompleteSyncInfoError extends BaseError {}

export class InvalidBookmarkIdsError extends BaseError {}

export class InvalidCredentialsError extends BaseError {}

export class InvalidServiceError extends BaseError {}

export class InvalidSyncInfoError extends BaseError {}

export class NativeBookmarkNotFoundError extends BaseError {}

export class LocalStorageNotAvailableError extends BaseError {}

export class NetworkConnectionError extends BaseError {}

export class NotAcceptingNewSyncsError extends BaseError {}

export class RequestEntityTooLargeError extends BaseError {}

export class ServiceOfflineError extends BaseError {}

export class SyncDisabledError extends BaseError {}

export class SyncFailedError extends BaseError {}

export class SyncNotFoundError extends BaseError {}

export class SyncUncommittedError extends BaseError {}

export class SyncVersionNotSupportedError extends BaseError {}

export class TooManyRequestsError extends BaseError {}

export class UnexpectedResponseDataError extends BaseError {}

export class UnsupportedApiVersionError extends BaseError {}

export class UpgradeFailedError extends BaseError {}
</file>

<file path="src/modules/shared/log/log.enum.ts">
enum LogLevel {
  Error = 'ERROR',
  Trace = 'TRACE',
  Warn = 'WARN'
}

export { LogLevel };
</file>

<file path="src/modules/shared/log/log.interface.ts">
import { BaseError } from '../errors/errors';
import { LogLevel } from './log.enum';

export interface LogQueueItem {
  level: LogLevel;
  message: object | string;
  error?: BaseError;
}
</file>

<file path="src/modules/shared/log/log.service.spec.ts">
// eslint-disable-next-line unused-imports/no-unused-imports-ts
import stackTrace from 'stacktrace-js';
import { $injector, $log, $q } from '../../../test/mock-services';
import { BaseError } from '../errors/errors';
import { StoreKey } from '../store/store.enum';
import { TraceLogItem } from '../store/store.interface';
import { StoreService } from '../store/store.service';
import { LogLevel } from './log.enum';
import { LogService } from './log.service';

jest.mock('stacktrace-js', () => {
  return {
    default: {
      fromError: jest.fn()
    }
  };
});

describe('LogService', () => {
  beforeEach(() => {
    jest.spyOn($injector, 'get').mockImplementation((name: string) => {
      const mock$q = $q;
      switch (name) {
        case '$q':
          return mock$q;
        case 'StoreService':
          return StoreService.prototype as any;
        default:
      }
    });
  });

  afterEach(() => jest.restoreAllMocks());

  test('getLogEntries: Returns log entries retrieved from store service using TraceLog store key', async () => {
    const testLogEntries: TraceLogItem[] = [
      {
        level: LogLevel.Trace,
        message: 'TEST MESSAGE',
        timestamp: 0
      }
    ];
    jest.spyOn(StoreService.prototype, 'get').mockImplementation((key) => {
      if (key === StoreKey.TraceLog) {
        return Promise.resolve(testLogEntries);
      }
    });
    const logSvc = new LogService($injector, $log);

    const result = await logSvc.getLogEntries();

    expect(result).toStrictEqual(testLogEntries);
  });

  test('clear: Removes TraceLog store key from store service', async () => {
    const storeSvcRemoveSpy = jest.spyOn(StoreService.prototype, 'remove').mockResolvedValue();
    const logSvc = new LogService($injector, $log);

    await logSvc.clear();

    expect(storeSvcRemoveSpy).toBeCalledWith(StoreKey.TraceLog);
  });

  test('logError: Does not log an error that has already been logged', async () => {
    const logSvc = new LogService($injector, $log);
    const $logWarnSpy = jest.spyOn($log, 'warn');
    const testError: Partial<BaseError> = {
      logged: true
    };

    await logSvc.logError(testError as BaseError);

    expect($logWarnSpy).not.toBeCalled();
  });

  test('logError: Logs error to console', async () => {
    const logSvc = new LogService($injector, $log);
    jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const $logWarnSpy = jest.spyOn($log, 'warn');
    const testError: Partial<BaseError> = {
      name: 'TEST_ERROR'
    };

    await logSvc.logError(testError as BaseError);

    expect($logWarnSpy).toBeCalledWith(
      expect.objectContaining({
        name: 'TEST_ERROR'
      })
    );
  });

  test('logError: Logs message to console if no error supplied', async () => {
    const logSvc = new LogService($injector, $log);
    jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const $logWarnSpy = jest.spyOn($log, 'warn');
    const testError: Partial<BaseError> = {
      name: 'TEST_ERROR'
    };
    const testMessage = 'TEST_LOG_MESSAGE';

    await logSvc.logError(testError as BaseError, testMessage);

    expect($logWarnSpy).toBeCalledWith(
      'TEST_LOG_MESSAGE',
      expect.objectContaining({
        name: 'TEST_ERROR'
      })
    );
  });

  test('logError: Adds trace log entry to store service using TraceLog store key', async () => {
    const logSvc = new LogService($injector, $log);
    const storeSvcSetSpy = jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const testError: Partial<BaseError> = {};

    await logSvc.logError(testError as BaseError);

    expect(storeSvcSetSpy).toBeCalledTimes(1);
    expect(storeSvcSetSpy).toBeCalledWith(
      StoreKey.TraceLog,
      expect.objectContaining({
        level: LogLevel.Error,
        message: '',
        timestamp: expect.any(Number)
      })
    );
  });

  test('logError: Adds trace log entry containing stack trace message to store service', async () => {
    jest.spyOn(stackTrace, 'fromError').mockResolvedValue([{} as any]);
    const storeSvcSetSpy = jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const logSvc = new LogService($injector, $log);
    const testError: Partial<BaseError> = {
      stack: 'TEST_STACK_TRACE'
    };

    await logSvc.logError(testError as BaseError);

    expect(storeSvcSetSpy).toBeCalledWith(
      expect.any(String),
      expect.not.objectContaining({
        message: ''
      })
    );
  });

  test('logInfo: Does not log anything if no message is supplied', async () => {
    const logSvc = new LogService($injector, $log);
    const $logInfoSpy = jest.spyOn($log, 'info');
    const testMessage = undefined;

    await logSvc.logInfo(testMessage);

    expect($logInfoSpy).not.toBeCalled();
  });

  test('logInfo: Logs supplied message to console', async () => {
    const logSvc = new LogService($injector, $log);
    const $logInfoSpy = jest.spyOn($log, 'info');
    jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const testMessage = 'TEST_LOG_MESSAGE';

    await logSvc.logInfo(testMessage);

    expect($logInfoSpy).toBeCalledWith('TEST_LOG_MESSAGE');
  });

  test('logInfo: Adds trace log entry to store service using TraceLog store key', async () => {
    const logSvc = new LogService($injector, $log);
    const storeSvcSetSpy = jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const testMessage = 'TEST_LOG_MESSAGE';

    await logSvc.logInfo(testMessage);

    expect(storeSvcSetSpy).toBeCalledTimes(1);
    expect(storeSvcSetSpy).toBeCalledWith(
      StoreKey.TraceLog,
      expect.objectContaining({
        level: LogLevel.Trace,
        message: 'TEST_LOG_MESSAGE',
        timestamp: expect.any(Number)
      })
    );
  });

  test('logWarning: Does not log anything if no message is supplied', async () => {
    const logSvc = new LogService($injector, $log);
    const $logWarnSpy = jest.spyOn($log, 'warn');
    const testMessage = undefined;

    await logSvc.logWarning(testMessage);

    expect($logWarnSpy).not.toBeCalled();
  });

  test('logWarning: Logs supplied message to console', async () => {
    const logSvc = new LogService($injector, $log);
    const $logWarnSpy = jest.spyOn($log, 'warn');
    jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const testMessage = 'TEST_LOG_MESSAGE';

    await logSvc.logWarning(testMessage);

    expect($logWarnSpy).toBeCalledWith('TEST_LOG_MESSAGE');
  });

  test('logWarning: Adds trace log entry to store service using TraceLog store key', async () => {
    const logSvc = new LogService($injector, $log);
    const storeSvcSetSpy = jest.spyOn(StoreService.prototype, 'set').mockResolvedValue();
    const testMessage = 'TEST_LOG_MESSAGE';

    await logSvc.logWarning(testMessage);

    expect(storeSvcSetSpy).toBeCalledTimes(1);
    expect(storeSvcSetSpy).toBeCalledWith(
      StoreKey.TraceLog,
      expect.objectContaining({
        level: LogLevel.Warn,
        message: 'TEST_LOG_MESSAGE',
        timestamp: expect.any(Number)
      })
    );
  });
});
</file>

<file path="src/modules/shared/log/log.service.ts">
import { Injectable } from 'angular-ts-decorators';
import stackTrace from 'stacktrace-js';
import { BaseError } from '../errors/errors';
import { StoreKey } from '../store/store.enum';
import { TraceLogItem } from '../store/store.interface';
import { StoreService } from '../store/store.service';
import { LogLevel } from './log.enum';
import { LogQueueItem } from './log.interface';

@Injectable('LogService')
export class LogService {
  private $injector: ng.auto.IInjectorService;
  private $log: ng.ILogService;
  private _$q: ng.IQService;
  private _storeSvc: StoreService;

  private currentLogQueueItem: LogQueueItem;
  private logItemQueue = [];

  static $inject = ['$injector', '$log'];
  constructor($injector: ng.auto.IInjectorService, $log: ng.ILogService) {
    this.$injector = $injector;
    this.$log = $log;
  }

  private get $q(): ng.IQService {
    if (!this._$q) {
      this._$q = this.$injector.get('$q');
    }
    return this._$q;
  }

  private get storeSvc(): StoreService {
    if (!this._storeSvc) {
      this._storeSvc = this.$injector.get('StoreService');
    }
    return this._storeSvc;
  }

  private addLogItemToQueue(logItem: LogQueueItem): void {
    this.logItemQueue.push(logItem);
  }

  getLogEntries(): ng.IPromise<TraceLogItem[]> {
    return this.storeSvc.get<TraceLogItem[]>(StoreKey.TraceLog);
  }

  clear(): ng.IPromise<void> {
    return this.storeSvc.remove(StoreKey.TraceLog);
  }

  logError(error: BaseError, message?: string): ng.IPromise<void> {
    // Return if no error supplied or has already been logged
    if (error.logged) {
      return;
    }

    // Mark this error as logged to prevent duplication in logs
    error.logged = true;

    // Output message to console
    if (message) {
      this.$log.warn(message, error);
    } else {
      this.$log.warn(error);
    }

    // Convert stack trace to show source files then add to queue and process
    return (
      !error.stack
        ? this.$q.resolve()
        : stackTrace.fromError(error).then((frames) => {
            if (frames) {
              const stack = `${error.name} (${error.constructor.name}): ${error.message}\n${frames
                .map((f) => `\tat ${f.functionName} (${f.fileName}:${f.lineNumber}:${f.columnNumber})`)
                .join('\n')}`;
              error.stack = stack;
            }
          })
    ).then(() => {
      this.addLogItemToQueue({
        level: LogLevel.Error,
        message,
        error
      });
      return this.processLogItemQueue();
    });
  }

  logInfo(message: object | string): ng.IPromise<void> {
    if (!message) {
      return;
    }

    // Output message to console, add to queue and process
    this.$log.info(message);
    this.addLogItemToQueue({
      level: LogLevel.Trace,
      message
    });
    return this.processLogItemQueue();
  }

  logWarning(message: object | string): ng.IPromise<void> {
    if (!message) {
      return;
    }

    // Output message to console, add to queue and process
    this.$log.warn(message);
    this.addLogItemToQueue({
      level: LogLevel.Warn,
      message
    });
    return this.processLogItemQueue();
  }

  private processLogItemQueue(): ng.IPromise<void> {
    // Return if currently processing or no more items to process
    if (this.currentLogQueueItem || this.logItemQueue.length === 0) {
      return this.$q.resolve();
    }

    // Get the next log item to process
    this.currentLogQueueItem = this.logItemQueue.shift();

    // Format log message
    let message =
      typeof this.currentLogQueueItem.message === 'object'
        ? JSON.stringify(this.currentLogQueueItem.message)
        : this.currentLogQueueItem.message ?? '';
    if (this.currentLogQueueItem.error) {
      message += this.currentLogQueueItem.error.stack
        ? `${this.currentLogQueueItem.error.stack.replace(/\s+/g, ' ')}`
        : '';
    }

    // Add log item to store
    const logItem: TraceLogItem = {
      level: this.currentLogQueueItem.level,
      message,
      timestamp: new Date().getTime()
    };
    return this.storeSvc.set(StoreKey.TraceLog, logItem).then(() => {
      // Process remaining messages
      this.currentLogQueueItem = undefined;
      this.processLogItemQueue();
    });
  }
}
</file>

<file path="src/modules/shared/metadata/get-metadata.ts">
import { WebpageMetadata } from '../global-shared.interface';

export const getMetadata = (url: string, html: string): WebpageMetadata => {
  // Extract metadata values
  const parser = new DOMParser();
  const htmlDoc = parser.parseFromString(html, 'text/html');
  const locale = navigator.language;

  const getDecodedTextValue = (text: string): string => {
    if (!text) {
      return '';
    }
    const txt = htmlDoc.createElement('textarea');
    txt.innerHTML = text.trim();
    return txt.value;
  };

  const getMetaElements = (metaName: string, returnAll = false): Element | Element[] => {
    const elements = Array.from(
      htmlDoc.querySelectorAll(
        `meta[name="${metaName.toLowerCase()}"],meta[property="${metaName.toLowerCase()}"],meta[name="${metaName.toUpperCase()}"],meta[property="${metaName.toUpperCase()}"]`
      )
    );
    if (!elements?.length) {
      return;
    }
    return returnAll ? elements : elements.slice(-1)[0];
  };

  const getYouTubeData = (): any => {
    return JSON.parse(document.querySelector<HTMLScriptElement>('#microformat script')?.text ?? 'null');
  };

  const getPageDescription = (): string => {
    const ytData = getYouTubeData();
    if (ytData?.description) {
      return getDecodedTextValue(ytData?.description);
    }
    const ogDescription = getMetaElements('og:description') as HTMLMetaElement;
    if (ogDescription?.content) {
      return getDecodedTextValue(ogDescription.content);
    }
    const twitterDescription = getMetaElements('twitter:description') as HTMLMetaElement;
    if (twitterDescription?.content) {
      return getDecodedTextValue(twitterDescription.content);
    }
    const defaultDescription = getMetaElements('description') as HTMLMetaElement;
    if (defaultDescription?.content) {
      return getDecodedTextValue(defaultDescription.content);
    }
  };

  const getPageKeywords = (): string => {
    const keywordsArr = new Set<string>();
    const ogVideoTags = getMetaElements('og:video:tag', true) as HTMLMetaElement[];
    ogVideoTags?.forEach((tag) => {
      if (tag?.content) {
        keywordsArr.add(getDecodedTextValue(tag.content?.toLocaleLowerCase(locale)));
      }
    });
    const metaKeywords = getMetaElements('keywords') as HTMLMetaElement;
    if (metaKeywords?.content) {
      metaKeywords.content.split(',').forEach((keyword) => {
        if (keyword) {
          keywordsArr.add(getDecodedTextValue(keyword?.toLocaleLowerCase(locale)));
        }
      });
    }
    const keywords = [...keywordsArr].filter(Boolean).join();
    if (keywords.length) {
      return keywords;
    }
  };

  const getPageTitle = (): string => {
    const ytData = getYouTubeData();
    if (ytData?.name) {
      return getDecodedTextValue(ytData?.name);
    }
    const ogTitle = getMetaElements('og:title') as HTMLMetaElement;
    if (ogTitle?.content) {
      return getDecodedTextValue(ogTitle.content);
    }
    const twitterTitle = getMetaElements('twitter:title') as HTMLMetaElement;
    if (twitterTitle?.content) {
      return getDecodedTextValue(twitterTitle.content);
    }
    return getDecodedTextValue(htmlDoc.title);
  };

  // Return metadata object
  const title = getPageTitle();
  const description = getPageDescription();
  const tags = getPageKeywords();
  return {
    description,
    tags,
    title,
    url
  };
};
</file>

<file path="src/modules/shared/metadata/metadata.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { WebpageMetadata } from '../global-shared.interface';
import { getMetadata } from './get-metadata';

@Injectable('MetadataService')
export class MetadataService {
  getMetadata(url: string, html: string): WebpageMetadata {
    return getMetadata(url, html);
  }
}
</file>

<file path="src/modules/shared/network/network.service.spec.ts">
import { $q } from '../../../test/mock-services';
import {
  BaseError,
  HttpRequestAbortedError,
  HttpRequestFailedError,
  HttpRequestTimedOutError,
  NetworkConnectionError
} from '../errors/errors';
import { NetworkService } from './network.service';

describe('NetworkService', () => {
  beforeEach(() => {
    (window as any).Connection = {
      NONE: 'NONE',
      UNKNOWN: 'UNKNOWN'
    };
  });

  afterEach(() => jest.restoreAllMocks());

  test('checkNetworkConnection: Does not throw when isNetworkConnected returns true', async () => {
    const networkSvc = new NetworkService($q);
    jest.spyOn(networkSvc, 'isNetworkConnected').mockReturnValue(true);

    await expect(networkSvc.checkNetworkConnection()).resolves;
  });

  test('checkNetworkConnection: Throws NetworkConnectionError when isNetworkConnected returns false', async () => {
    const networkSvc = new NetworkService($q);
    jest.spyOn(networkSvc, 'isNetworkConnected').mockReturnValue(false);

    await expect(networkSvc.checkNetworkConnection()).rejects.toThrow(NetworkConnectionError);
  });

  test('getErrorFromHttpResponse: Returns HttpRequestFailedError by default', () => {
    const networkSvc = new NetworkService($q);
    const testResponse = {
      status: 'TEST_STATUS'
    } as unknown as ng.IHttpResponse<unknown>;

    const result = networkSvc.getErrorFromHttpResponse(testResponse);

    expect(result).toStrictEqual(new HttpRequestFailedError('status: TEST_STATUS'));
  });

  test('getErrorFromHttpResponse: Returns HttpRequestTimedOutError when response timed out', () => {
    const networkSvc = new NetworkService($q);
    const testResponse = {
      xhrStatus: 'timeout'
    } as unknown as ng.IHttpResponse<unknown>;

    const result = networkSvc.getErrorFromHttpResponse(testResponse);

    expect(result).toStrictEqual(new HttpRequestTimedOutError());
  });

  test('getErrorFromHttpResponse: Returns HttpRequestAbortedError when response was aborted', () => {
    const networkSvc = new NetworkService($q);
    const testResponse = {
      xhrStatus: 'abort'
    } as unknown as ng.IHttpResponse<unknown>;

    const result = networkSvc.getErrorFromHttpResponse(testResponse);

    expect(result).toStrictEqual(new HttpRequestAbortedError());
  });

  test('isNetworkConnected: Returns true when navigator.Online is true', () => {
    const networkSvc = new NetworkService($q);
    jest.spyOn(window.navigator, 'onLine', 'get').mockReturnValue(true);

    const result = networkSvc.isNetworkConnected();

    expect(result).toStrictEqual(true);
  });

  test('isNetworkConnected: Returns false when navigator.Online is false', async () => {
    const networkSvc = new NetworkService($q);
    jest.spyOn(window.navigator, 'onLine', 'get').mockReturnValue(false);

    const result = networkSvc.isNetworkConnected();

    expect(result).toStrictEqual(false);
  });

  test('isNetworkConnected: Returns true when connection type is WIFI', async () => {
    const networkSvc = new NetworkService($q);
    (window.navigator as any).connection = {
      type: 'WIFI'
    };

    const result = networkSvc.isNetworkConnected();

    expect(result).toStrictEqual(true);
  });

  test('isNetworkConnected: Returns false when connection type is NONE', async () => {
    const networkSvc = new NetworkService($q);
    (window.navigator as any).connection = {
      type: 'NONE'
    };

    const result = networkSvc.isNetworkConnected();

    expect(result).toStrictEqual(false);
  });

  test('isNetworkConnected: Returns false when connection type is UNKNOWN', async () => {
    const networkSvc = new NetworkService($q);
    (window.navigator as any).connection = {
      type: 'UNKNOWN'
    };

    const result = networkSvc.isNetworkConnected();

    expect(result).toStrictEqual(false);
  });

  test('isNetworkConnectionError: Returns true for NetworkConnectionError', () => {
    const networkSvc = new NetworkService($q);

    const result = networkSvc.isNetworkConnectionError(new NetworkConnectionError());

    expect(result).toBe(true);
  });

  test('isNetworkConnectionError: Returns false for BaseError', () => {
    const networkSvc = new NetworkService($q);

    const result = networkSvc.isNetworkConnectionError(new BaseError());

    expect(result).toBe(false);
  });
});
</file>

<file path="src/modules/shared/network/network.service.ts">
import { Injectable } from 'angular-ts-decorators';
import {
  BaseError,
  HttpRequestAbortedError,
  HttpRequestFailedError,
  HttpRequestTimedOutError,
  NetworkConnectionError
} from '../errors/errors';

@Injectable('NetworkService')
export class NetworkService {
  private $q: ng.IQService;

  static $inject = ['$q'];
  constructor($q: ng.IQService) {
    this.$q = $q;
  }

  checkNetworkConnection(): ng.IPromise<void> {
    return this.$q((resolve, reject) => {
      if (this.isNetworkConnected()) {
        return resolve();
      }
      reject(new NetworkConnectionError());
    });
  }

  getErrorFromHttpResponse(response: ng.IHttpResponse<unknown>): BaseError {
    let error: BaseError;
    switch (true) {
      // Request timed out
      case response.xhrStatus === 'timeout':
        error = new HttpRequestTimedOutError();
        break;
      // Request timed out
      case response.xhrStatus === 'abort':
        error = new HttpRequestAbortedError();
        break;
      // Otherwise generic request failed
      default:
        error = new HttpRequestFailedError(`status: ${response.status}`);
    }
    return error;
  }

  isNetworkConnected(): boolean {
    return (window as any).Connection &&
      (window.navigator as any).connection &&
      (window.navigator as any).connection.type
      ? (window.navigator as any).connection.type !== (window as any).Connection.NONE &&
          (window.navigator as any).connection.type !== (window as any).Connection.UNKNOWN
      : window.navigator.onLine;
  }

  isNetworkConnectionError(err: Error): boolean {
    return err instanceof HttpRequestTimedOutError || err instanceof NetworkConnectionError;
  }
}
</file>

<file path="src/modules/shared/settings/settings.interface.ts">
export interface AllSettings {
  alternateSearchBarPosition: boolean;
  autoFetchMetadata: boolean;
  checkForAppUpdates: boolean;
  darkModeEnabled: boolean;
  defaultToFolderView: boolean;
  syncBookmarksToolbar: boolean;
  telemetryEnabled: boolean;
}
</file>

<file path="src/modules/shared/settings/settings.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { LogService } from '../log/log.service';
import { StoreKey } from '../store/store.enum';
import { StoreService } from '../store/store.service';
import { AllSettings } from './settings.interface';

@Injectable('SettingsService')
export class SettingsService {
  logSvc: LogService;
  storeSvc: StoreService;

  darkMode: boolean;

  static $inject = ['LogService', 'StoreService'];
  constructor(LogSvc: LogService, StoreSvc: StoreService) {
    this.logSvc = LogSvc;
    this.storeSvc = StoreSvc;
  }

  all(): ng.IPromise<AllSettings> {
    return this.storeSvc
      .get([
        StoreKey.AlternateSearchBarPosition,
        StoreKey.AutoFetchMetadata,
        StoreKey.CheckForAppUpdates,
        StoreKey.DarkModeEnabled,
        StoreKey.DefaultToFolderView,
        StoreKey.SyncBookmarksToolbar,
        StoreKey.TelemetryEnabled
      ])
      .then((values) => {
        return {
          ...values
        };
      });
  }

  alternateSearchBarPosition(newValue?: boolean): ng.IPromise<boolean> {
    if (angular.isUndefined(newValue ?? undefined)) {
      return this.storeSvc.get<boolean>(StoreKey.AlternateSearchBarPosition);
    }

    return this.storeSvc.set(StoreKey.AlternateSearchBarPosition, newValue).then(() => {
      this.logSvc.logInfo(`Search bar position setting: ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }

  autoFetchMetadata(newValue?: boolean): ng.IPromise<boolean> {
    if (angular.isUndefined(newValue ?? undefined)) {
      return this.storeSvc.get<boolean>(StoreKey.AutoFetchMetadata);
    }

    return this.storeSvc.set(StoreKey.AutoFetchMetadata, newValue).then(() => {
      this.logSvc.logInfo(`Auto-fetch metadata setting: ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }

  checkForAppUpdates(newValue?: boolean): ng.IPromise<boolean> {
    if (angular.isUndefined(newValue ?? undefined)) {
      return this.storeSvc.get<boolean>(StoreKey.CheckForAppUpdates);
    }

    return this.storeSvc.set(StoreKey.CheckForAppUpdates, newValue).then(() => {
      this.logSvc.logInfo(`Check for app updates setting: ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }

  darkModeEnabled(newValue?: boolean): ng.IPromise<boolean> {
    if (angular.isUndefined(newValue ?? undefined)) {
      return this.storeSvc.get<boolean>(StoreKey.DarkModeEnabled).then((darkModeEnabled) => {
        this.darkMode = darkModeEnabled;
        return darkModeEnabled;
      });
    }

    return this.storeSvc.set(StoreKey.DarkModeEnabled, newValue).then(() => {
      this.logSvc.logInfo(`Dark mode setting: ${newValue ? 'enabled' : 'disabled'}`);
      this.darkMode = newValue;
      return newValue;
    });
  }

  defaultToFolderView(newValue?: boolean): ng.IPromise<boolean> {
    if (angular.isUndefined(newValue ?? undefined)) {
      return this.storeSvc.get<boolean>(StoreKey.DefaultToFolderView);
    }

    return this.storeSvc.set(StoreKey.DefaultToFolderView, newValue).then(() => {
      this.logSvc.logInfo(`Folder view setting: ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }

  syncBookmarksToolbar(newValue?: boolean): ng.IPromise<boolean> {
    if (angular.isUndefined(newValue ?? undefined)) {
      return this.storeSvc.get<boolean>(StoreKey.SyncBookmarksToolbar);
    }

    return this.storeSvc.set(StoreKey.SyncBookmarksToolbar, newValue).then(() => {
      this.logSvc.logInfo(`Toolbar sync setting: ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }

  telemetryEnabled(newValue?: boolean): ng.IPromise<boolean> {
    if (angular.isUndefined(newValue ?? undefined)) {
      return this.storeSvc.get<boolean>(StoreKey.TelemetryEnabled);
    }

    return this.storeSvc.set(StoreKey.TelemetryEnabled, newValue).then(() => {
      this.logSvc.logInfo(`Telemetry setting: ${newValue ? 'enabled' : 'disabled'}`);
      return newValue;
    });
  }
}
</file>

<file path="src/modules/shared/store/store.enum.ts">
enum StoreKey {
  AlternateSearchBarPosition = 'alternateSearchBarPosition',
  AutoFetchMetadata = 'autoFetchMetadata',
  AutoBackUpSchedule = 'autoBackUpSchedule',
  BookmarkIdMappings = 'bookmarkIdMappings',
  Bookmarks = 'bookmarks',
  CheckForAppUpdates = 'checkForAppUpdates',
  DarkModeEnabled = 'darkModeEnabled',
  DisplayHelp = 'displayHelp',
  DisplayOtherSyncsWarning = 'displayOtherSyncsWarning',
  DisplayPermissions = 'displayPermissions',
  DisplayTelemetryCheck = 'displayTelemetryCheck',
  DisplayUpdated = 'displayUpdated',
  DefaultToFolderView = 'defaultToFolderView',
  InstallBackup = 'installBackup',
  InstallationId = 'installationId',
  LastUpdated = 'lastUpdated',
  LastUpgradeVersion = 'lastUpgradeVersion',
  RemovedSync = 'removedSync',
  SyncBookmarksToolbar = 'syncBookmarksToolbar',
  SyncEnabled = 'syncEnabled',
  SyncInfo = 'syncInfo',
  TelemetryEnabled = 'telemetryEnabled',
  TraceLog = 'traceLog'
}

export { StoreKey };
</file>

<file path="src/modules/shared/store/store.interface.ts">
import { BookmarkIdMapping } from '../../webext/shared/bookmark-id-mapper/bookmark-id-mapper.interface';
import { ApiSyncInfo } from '../api/api.interface';
import { AutoBackUpSchedule } from '../backup-restore/backup-restore.interface';
import { LogLevel } from '../log/log.enum';
import { RemovedSync } from '../sync/sync.interface';

export interface StoreContent {
  alternateSearchBarPosition: boolean;
  appVersion: string;
  autoBackUpSchedule: AutoBackUpSchedule;
  autoFetchMetadata: boolean;
  bookmarkIdMappings: BookmarkIdMapping[];
  bookmarks: string;
  checkForAppUpdates: boolean;
  darkModeEnabled: boolean;
  displayHelp: boolean;
  displayOtherSyncsWarning: boolean;
  displayPermissions: boolean;
  displayTelemetryCheck: boolean;
  displayUpdated: boolean;
  defaultToFolderView: boolean;
  installBackup: string;
  lastUpdated: string;
  removedSync: RemovedSync;
  syncBookmarksToolbar: boolean;
  syncEnabled: boolean;
  syncInfo: ApiSyncInfo;
  telemetryEnabled: boolean;
  traceLog: string[];
}

export interface TraceLogItem {
  level: LogLevel;
  message: string;
  timestamp: number;
}
</file>

<file path="src/modules/shared/store/store.service.ts">
import angular from 'angular';
import { StoreKey } from './store.enum';
import { StoreContent } from './store.interface';

export abstract class StoreService {
  $q: ng.IQService;
  dbName = 'xbs-store';
  storeName = 'xbs';

  constructor($q: ng.IQService) {
    this.$q = $q;
  }

  protected abstract clear(): ng.IPromise<void>;

  get<T = StoreContent>(keys?: string | string[]): ng.IPromise<T> {
    // If no keys provided, get all keys from store
    return (angular.isUndefined(keys ?? undefined) ? this.keys() : this.$q.resolve(keys)).then((allKeys) => {
      // Ensure the keys param is an array before processing
      const keysArr = Array.isArray(allKeys) ? (allKeys as string[]) : [allKeys];
      return this.getFromStore(keysArr)
        .then((keyValues) => {
          // Convert the keys and key values into a return object
          return keysArr.reduce((prev, current, index) => {
            const next = angular.copy(prev);
            next[current as string] = keyValues[index];
            return next;
          }, {} as T);
        })
        .then((storeContent) => {
          // If result object only has one key, simply return the key value
          if (storeContent && Object.keys(storeContent).length === 1) {
            return storeContent[keysArr[0] as string];
          }
          return storeContent;
        });
    });
  }

  protected abstract getFromStore<T = StoreContent>(keys: string[]): ng.IPromise<T[]>;

  init(): ng.IPromise<void> {
    return this.clear()
      .then(() => {
        return this.$q.all([
          this.setInStore(StoreKey.AlternateSearchBarPosition, false),
          this.setInStore(StoreKey.AutoFetchMetadata, true),
          this.setInStore(StoreKey.CheckForAppUpdates, true),
          this.setInStore(StoreKey.DarkModeEnabled, false),
          this.setInStore(StoreKey.DefaultToFolderView, false),
          this.setInStore(StoreKey.DisplayHelp, true),
          this.setInStore(StoreKey.DisplayOtherSyncsWarning, false),
          this.setInStore(StoreKey.DisplayPermissions, false),
          this.setInStore(StoreKey.DisplayTelemetryCheck, true),
          this.setInStore(StoreKey.DisplayUpdated, false),
          this.setInStore(StoreKey.SyncBookmarksToolbar, false),
          this.setInStore(StoreKey.SyncEnabled, false),
          this.setInStore(StoreKey.TelemetryEnabled, true)
        ]);
      })
      .then(() => {});
  }

  protected abstract keys(): ng.IPromise<string[]>;

  remove(keys: string | string[]): ng.IPromise<void> {
    const keysArr = Array.isArray(keys) ? keys : [keys];
    return this.removeFromStore(keysArr);
  }

  protected abstract removeFromStore(keys: string[]): ng.IPromise<void>;

  set(key: string, value?: any): ng.IPromise<void> {
    if (angular.isUndefined(key ?? undefined)) {
      return this.$q.resolve();
    }

    return this.$q((resolve, reject) => {
      (angular.isUndefined(value ?? undefined)
        ? this.removeFromStore(Array.isArray(key) ? key : [key])
        : this.setInStore(key, value)
      )
        .then(resolve)
        .catch(reject);
    });
  }

  protected abstract setInStore(key: string, value: any): ng.IPromise<void>;
}
</file>

<file path="src/modules/shared/sync/bookmark-sync-provider/bookmark-sync-provider.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { BookmarkChangeType, BookmarkContainer } from '../../bookmark/bookmark.enum';
import {
  AddBookmarkChangeData,
  Bookmark,
  BookmarkChange,
  BookmarkService,
  ModifyBookmarkChangeData,
  RemoveBookmarkChangeData,
  UpdateBookmarksResult
} from '../../bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../bookmark/bookmark-helper/bookmark-helper.service';
import { CryptoService } from '../../crypto/crypto.service';
import { AmbiguousSyncRequestError } from '../../errors/errors';
import { PlatformService } from '../../global-shared.interface';
import { LogService } from '../../log/log.service';
import { NetworkService } from '../../network/network.service';
import { SettingsService } from '../../settings/settings.service';
import { StoreKey } from '../../store/store.enum';
import { StoreService } from '../../store/store.service';
import { UpgradeService } from '../../upgrade/upgrade.service';
import { UtilityService } from '../../utility/utility.service';
import { SyncType } from '../sync.enum';
import { ProcessSyncResult, Sync, SyncProvider } from '../sync.interface';

@Injectable('BookmarkSyncProviderService')
export class BookmarkSyncProviderService implements SyncProvider {
  $q: ng.IQService;
  bookmarkHelperSvc: BookmarkHelperService;
  bookmarkSvc: BookmarkService;
  cryptoSvc: CryptoService;
  logSvc: LogService;
  networkSvc: NetworkService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  storeSvc: StoreService;
  upgradeSvc: UpgradeService;
  utilitySvc: UtilityService;

  static $inject = [
    '$q',
    'BookmarkHelperService',
    'BookmarkService',
    'CryptoService',
    'LogService',
    'NetworkService',
    'PlatformService',
    'SettingsService',
    'StoreService',
    'UpgradeService',
    'UtilityService'
  ];
  constructor(
    $q: ng.IQService,
    BookmarkHelperSvc: BookmarkHelperService,
    BookmarkSvc: BookmarkService,
    CryptoSvc: CryptoService,
    LogSvc: LogService,
    NetworkSvc: NetworkService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    StoreSvc: StoreService,
    UpgradeSvc: UpgradeService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.bookmarkSvc = BookmarkSvc;
    this.cryptoSvc = CryptoSvc;
    this.logSvc = LogSvc;
    this.networkSvc = NetworkSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.storeSvc = StoreSvc;
    this.upgradeSvc = UpgradeSvc;
    this.utilitySvc = UtilitySvc;
  }

  disable(): ng.IPromise<void> {
    // Stop listening for native bookmark events and clear cached data
    return this.$q
      .all([
        this.platformSvc.disableNativeEventListeners(),
        this.storeSvc.remove(StoreKey.BookmarkIdMappings),
        this.storeSvc.remove(StoreKey.Bookmarks),
        this.bookmarkHelperSvc.updateCachedBookmarks(null, null)
      ])
      .then(() => {});
  }

  enable(): ng.IPromise<void> {
    // Start listening for native bookmark events
    return this.platformSvc.enableNativeEventListeners();
  }

  handleUpdateRemoteFailed(err: Error, lastResult: Bookmark[], sync: Sync): ng.IPromise<void> {
    if (angular.isUndefined(lastResult ?? undefined)) {
      return this.$q.resolve();
    }

    // If connection failed, update cache and then throw error
    return this.networkSvc.isNetworkConnectionError(err)
      ? (() =>
          this.cryptoSvc.encryptData(JSON.stringify(lastResult)).then((encryptedBookmarks) =>
            this.bookmarkHelperSvc.updateCachedBookmarks(lastResult, encryptedBookmarks).then(() => {
              // Prepare sync data before it is placed back on the queue
              sync.changeInfo = undefined;
              sync.bookmarks = lastResult;
              sync.type = SyncType.Remote;
            })
          ))()
      : this.$q.resolve();
  }

  populateNativeBookmarks(bookmarks: Bookmark[]): ng.IPromise<void> {
    // Clear native bookmarks and then populate with provided bookmarks
    return this.bookmarkSvc.clearNativeBookmarks().then(() => {
      const populateStartTime = new Date();
      return this.bookmarkSvc.createNativeBookmarksFromBookmarks(bookmarks).then((numBookmarksCreated) => {
        if (!angular.isUndefined(numBookmarksCreated)) {
          this.logSvc.logInfo(
            `${numBookmarksCreated} bookmarks populated in ${
              ((new Date() as any) - (populateStartTime as any)) / 1000
            }s`
          );
        }
      });
    });
  }

  processSync(sync: Sync): ng.IPromise<ProcessSyncResult> {
    // Process sync
    switch (sync.type) {
      // Sync native bookmarks to service
      case SyncType.Remote:
        return this.processRemoteSync(sync);
      // Overwrite native bookmarks with synced bookmarks
      case SyncType.Local:
        return this.processLocalSync(sync);
      // Sync bookmarks to service and overwrite native bookmarks
      case SyncType.LocalAndRemote:
        return this.processLocalAndRemoteSync(sync);
      // Upgrade sync to current version
      case SyncType.Upgrade:
        return this.processUpgradeSync();
      // Ambiguous sync
      default:
        throw new AmbiguousSyncRequestError();
    }
  }

  processLocalAndRemoteSync(sync: Sync): ng.IPromise<ProcessSyncResult> {
    const processResult: ProcessSyncResult = {
      updateRemote: false
    };
    let rebuildIdMappings = false;

    // Ensure sync credentials exist before continuing
    return (
      this.utilitySvc
        .checkSyncCredentialsExist()
        // changeInfo can be an object or a promise
        .then(() => this.$q.resolve(sync.changeInfo))
        .then((changeInfo) =>
          this.$q<Bookmark[]>((resolve, reject) => {
            this.$q
              .resolve()
              .then(() => {
                // Use bookmarks provided or retrieve cached bookmarks
                if (sync.bookmarks) {
                  // Validate provided bookmark ids first
                  if (this.validateBookmarkIds(sync.bookmarks)) {
                    return sync.bookmarks;
                  }
                  const repairedBookmarks = this.repairBookmarkIds(sync.bookmarks);
                  return repairedBookmarks;
                }

                if (!changeInfo) {
                  throw new AmbiguousSyncRequestError();
                }
                return this.bookmarkHelperSvc.getCachedBookmarks();
              })
              .then(resolve)
              .catch(reject);
          })
            .then((bookmarks) => {
              // Process bookmark updates if change info provided
              return (
                (
                  angular.isUndefined(changeInfo)
                    ? this.$q.resolve(undefined)
                    : this.updateBookmarks(bookmarks, changeInfo)
                )
                  // Update native bookmarks
                  .then((updateResults) =>
                    this.platformSvc
                      .disableNativeEventListeners()
                      .then(() => {
                        // If no change info provided, populate native bookmarks from bookmarks provided or
                        // return unmodified bookmarks
                        if (angular.isUndefined(updateResults)) {
                          if (angular.isUndefined(sync.bookmarks)) {
                            return bookmarks;
                          }
                          rebuildIdMappings = true;
                          return this.populateNativeBookmarks(bookmarks).then(() => bookmarks);
                        }

                        // Check if bookmark container is toolbar and toolbar syncing is enabled
                        return this.settingsSvc.syncBookmarksToolbar().then((syncBookmarksToolbar) => {
                          if (updateResults.container === BookmarkContainer.Toolbar && !syncBookmarksToolbar) {
                            return updateResults.bookmarks;
                          }

                          // Process updates on native bookmarks
                          return this.bookmarkSvc
                            .processChangeOnNativeBookmarks(
                              updateResults.bookmark.id,
                              changeInfo.type,
                              updateResults.bookmark
                            )
                            .then(() => updateResults.bookmarks);
                        });
                      })
                      .finally(() => this.platformSvc.enableNativeEventListeners())
                  )
              );
            })
            // Create containers if required
            .then((bookmarks) => this.bookmarkSvc.ensureContainersExist(bookmarks))
            .then((bookmarks) => {
              // Build id mappings if required
              processResult.data = bookmarks;
              if (rebuildIdMappings) {
                return this.bookmarkSvc.buildIdMappings(bookmarks);
              }
            })
            .then(() => {
              processResult.updateRemote = true;
              return processResult;
            })
        )
    );
  }

  processLocalSync(sync: Sync): ng.IPromise<ProcessSyncResult> {
    const processResult: ProcessSyncResult = {
      updateRemote: false
    };

    // Bookmarks will be provided if this is a restore, if so update native bookmarks and return
    if (sync.bookmarks) {
      return this.populateNativeBookmarks(sync.bookmarks).then(() => processResult);
    }

    return (
      // Ensure sync credentials exist before continuing
      this.utilitySvc
        .checkSyncCredentialsExist()
        // Get synced bookmarks
        .then(() => this.utilitySvc.getApiService().then((apiSvc) => apiSvc.getBookmarks()))
        .then((response) => {
          const { bookmarks: encryptedBookmarks, lastUpdated } = response;

          // Decrypt bookmarks
          let bookmarks: Bookmark[];
          return (
            this.cryptoSvc
              .decryptData(encryptedBookmarks)
              .then((bookmarksJson) => {
                bookmarks = JSON.parse(bookmarksJson);

                // Check bookmark ids are all valid
                if (!this.validateBookmarkIds(bookmarks)) {
                  bookmarks = this.repairBookmarkIds(bookmarks);
                  processResult.updateRemote = true;
                }

                // Create any missing containers
                const bookmarksWithMissingContainers = this.bookmarkSvc.ensureContainersExist(bookmarks);
                if (!angular.equals(bookmarks, bookmarksWithMissingContainers)) {
                  bookmarks = bookmarksWithMissingContainers;
                  processResult.updateRemote = true;
                }

                processResult.data = bookmarks;

                // Update browser bookmarks
                return this.platformSvc
                  .disableNativeEventListeners()
                  .then(() => this.populateNativeBookmarks(bookmarks))
                  .then(() => this.bookmarkSvc.buildIdMappings(bookmarks))
                  .finally(() => this.platformSvc.enableNativeEventListeners());
              })
              // Update cached last updated date
              .then(() => this.storeSvc.set(StoreKey.LastUpdated, lastUpdated))
              .then(() => processResult)
          );
        })
    );
  }

  processRemoteSync(sync: Sync): ng.IPromise<ProcessSyncResult> {
    const processResult: ProcessSyncResult = {
      updateRemote: false
    };

    // Ensure sync credentials exist before continuing
    return this.utilitySvc
      .checkSyncCredentialsExist()
      .then(() => this.utilitySvc.isSyncEnabled())
      .then((syncEnabled) => {
        // If this is a new sync, get native bookmarks and build id mappings
        if (!syncEnabled) {
          // TODO: Fix this circular dependency
          return (this.bookmarkSvc as any).getNativeBookmarksAsBookmarks().then((bookmarks) => {
            processResult.data = bookmarks;
            processResult.updateRemote = true;
            return this.bookmarkSvc.buildIdMappings(bookmarks);
          });
        }

        // Retrieve cached bookmarks and then process changes
        return this.bookmarkHelperSvc.getCachedBookmarks().then((cachedBookmarks) => {
          // Use bookmarks provided with sync if exists
          const bookmarksToSync = angular.isUndefined(sync.bookmarks) ? cachedBookmarks : sync.bookmarks;
          processResult.data = bookmarksToSync;
          return (
            angular.isUndefined(sync.changeInfo)
              ? this.$q.resolve(bookmarksToSync)
              : this.bookmarkSvc
                  .processNativeChangeOnBookmarks(sync.changeInfo, bookmarksToSync)
                  .then((updatedBookmarks) => this.bookmarkSvc.ensureContainersExist(updatedBookmarks))
          ).then((updatedBookmarks) => {
            // If no data returned, do not sync
            if (angular.isUndefined(updatedBookmarks)) {
              return processResult;
            }

            // If changes made, add updated bookmarks to process result and mark for remote update
            processResult.data = updatedBookmarks;
            processResult.updateRemote = true;
          });
        });
      })
      .then(() => processResult);
  }

  processUpgradeSync(): ng.IPromise<ProcessSyncResult> {
    const processResult: ProcessSyncResult = {
      updateRemote: false
    };

    return this.utilitySvc.checkSyncCredentialsExist().then(() => {
      // Get synced bookmarks and decrypt
      return this.utilitySvc
        .getApiService()
        .then((apiSvc) => apiSvc.getBookmarks())
        .then((response) => {
          const lastUpdated = response.lastUpdated;
          return (
            this.cryptoSvc
              .decryptData(response.bookmarks)
              .then((bookmarksJson) => {
                const bookmarks = JSON.parse(bookmarksJson);
                return this.$q
                  .all([this.platformSvc.getAppVersion(), this.utilitySvc.getSyncVersion()])
                  .then((result) => {
                    // Upgrade bookmarks
                    const [appVersion, syncVersion] = result;
                    return this.upgradeSvc
                      .upgradeBookmarks(appVersion, syncVersion, bookmarks)
                      .then((upgradedBookmarks) => {
                        // Check bookmark ids are all valid
                        if (!this.validateBookmarkIds(upgradedBookmarks)) {
                          upgradedBookmarks = this.repairBookmarkIds(upgradedBookmarks);
                        }

                        // Create any missing containers
                        const bookmarksWithMissingContainers =
                          this.bookmarkSvc.ensureContainersExist(upgradedBookmarks);
                        if (!angular.equals(upgradedBookmarks, bookmarksWithMissingContainers)) {
                          upgradedBookmarks = bookmarksWithMissingContainers;
                        }

                        processResult.data = upgradedBookmarks;
                        processResult.updateRemote = true;

                        // Update browser bookmarks
                        return this.populateNativeBookmarks(upgradedBookmarks).then(() =>
                          this.bookmarkSvc.buildIdMappings(upgradedBookmarks)
                        );
                      });
                  });
              })
              // Update cached last updated date to avoid update conflict response
              .then(() => this.storeSvc.set(StoreKey.LastUpdated, lastUpdated))
              .then(() => processResult)
          );
        });
    });
  }

  repairBookmarkIds(bookmarks: Bookmark[]): Bookmark[] {
    let allBookmarks: Bookmark[] = [];
    let idCounter = 1;

    // Get all bookmarks into flat array
    this.bookmarkHelperSvc.eachBookmark((bookmark) => {
      allBookmarks.push(bookmark as Bookmark);
    }, bookmarks);

    // Remove any invalid ids
    allBookmarks.forEach((bookmark) => {
      if (typeof bookmark.id !== 'number') {
        delete bookmark.id;
      }
    });

    // Sort by id asc
    allBookmarks = allBookmarks.sort((x, y) => {
      return x.id - y.id;
    });

    // Re-add ids
    allBookmarks.forEach((bookmark) => {
      bookmark.id = idCounter;
      idCounter += 1;
    });

    return bookmarks;
  }

  updateBookmarks(bookmarks: Bookmark[], changeInfo: BookmarkChange): ng.IPromise<UpdateBookmarksResult> {
    // Update bookmarks according to change info
    switch (changeInfo.type) {
      // Add bookmark
      case BookmarkChangeType.Add:
        return this.updateBookmarksForChangeTypeAdd(bookmarks, changeInfo.changeData as AddBookmarkChangeData);
      // Modify bookmark
      case BookmarkChangeType.Modify:
        return this.updateBookmarksForChangeTypeUpdate(bookmarks, changeInfo.changeData as ModifyBookmarkChangeData);
      // Remove bookmark
      case BookmarkChangeType.Remove:
        return this.updateBookmarksForChangeTypeRemove(bookmarks, changeInfo.changeData as RemoveBookmarkChangeData);
      default:
        throw new AmbiguousSyncRequestError();
    }
  }

  updateBookmarksForChangeTypeAdd(
    bookmarks: Bookmark[],
    changeData: AddBookmarkChangeData
  ): ng.IPromise<UpdateBookmarksResult> {
    // Get or create other bookmarks container to add create bookmark to
    const otherContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, bookmarks, true);

    // Create new bookmark and add to container
    const newBookmark = this.bookmarkHelperSvc.newBookmark(
      changeData.metadata.title,
      changeData.metadata.url,
      changeData.metadata.description,
      changeData.metadata.tags,
      bookmarks
    );
    otherContainer.children.push(newBookmark);

    // Return updated info
    return this.$q.resolve({
      bookmark: newBookmark,
      bookmarks,
      container: otherContainer.title
    } as UpdateBookmarksResult);
  }

  updateBookmarksForChangeTypeRemove(
    bookmarks: Bookmark[],
    changeData: RemoveBookmarkChangeData
  ): ng.IPromise<UpdateBookmarksResult> {
    const container = this.bookmarkHelperSvc.getContainerByBookmarkId(changeData.id, bookmarks).title;
    return this.bookmarkHelperSvc.removeBookmarkById(changeData.id, bookmarks).then((updatedBookmarks) => {
      return {
        bookmark: {
          id: changeData.id
        },
        bookmarks: updatedBookmarks,
        container
      } as UpdateBookmarksResult;
    });
  }

  updateBookmarksForChangeTypeUpdate(
    bookmarks: Bookmark[],
    changeData: ModifyBookmarkChangeData
  ): ng.IPromise<UpdateBookmarksResult> {
    const container = this.bookmarkHelperSvc.getContainerByBookmarkId(changeData.bookmark.id, bookmarks).title;
    const updateInfo = this.bookmarkHelperSvc.extractBookmarkMetadata(changeData.bookmark);
    return this.bookmarkHelperSvc
      .modifyBookmarkById(changeData.bookmark.id, updateInfo, bookmarks)
      .then((updatedBookmarks) => {
        return {
          bookmark: changeData.bookmark,
          bookmarks: updatedBookmarks,
          container
        } as UpdateBookmarksResult;
      });
  }

  validateBookmarkIds(bookmarks: Bookmark[]): boolean {
    if (!bookmarks?.length) {
      return true;
    }

    // Find any bookmark without an id
    let bookmarksHaveIds = true;
    this.bookmarkHelperSvc.eachBookmark((bookmark) => {
      if (angular.isUndefined(bookmark.id ?? undefined)) {
        bookmarksHaveIds = false;
      }
    }, bookmarks);

    if (!bookmarksHaveIds) {
      this.logSvc.logWarning('Bookmarks missing ids');
      return false;
    }

    // Get all bookmarks into flat array
    const allBookmarks: Bookmark[] = [];
    this.bookmarkHelperSvc.eachBookmark((bookmark) => {
      allBookmarks.push(bookmark as Bookmark);
    }, bookmarks);

    // Find a bookmark with a non-numeric id
    const invalidId = allBookmarks.find((bookmark) => {
      return !angular.isNumber(bookmark.id);
    });

    if (!angular.isUndefined(invalidId ?? undefined)) {
      this.logSvc.logWarning(`Invalid bookmark id detected: ${invalidId.id} (${invalidId.url})`);
      return false;
    }

    // Check for duplicate ids
    const uniqueIds = new Set(allBookmarks.map((x) => x.id));
    const duplicatesFound = uniqueIds.size < allBookmarks.length;
    if (duplicatesFound) {
      this.logSvc.logWarning('Duplicate bookmark ids detected');
      return false;
    }

    return true;
  }
}
</file>

<file path="src/modules/shared/sync/sync.enum.ts">
enum SyncType {
  Cancel = 'CANCEL', // Stop current sync, clear sync queue and don't update remote
  Local = 'LOCAL', // Update local data
  LocalAndRemote = 'LOCAL_REMOTE', // Update both local and remote data
  Remote = 'REMOTE', // Update remote data
  Upgrade = 'UPGRADE' // Upgrade synced data
}

export { SyncType };
</file>

<file path="src/modules/shared/sync/sync.interface.ts">
import { ApiSyncInfo } from '../api/api.interface';
import { Bookmark, BookmarkChange } from '../bookmark/bookmark.interface';
import { SyncType } from './sync.enum';

export interface RemovedSync {
  bookmarks: Bookmark[];
  lastUpdated: string;
  syncInfo: ApiSyncInfo;
}

export interface Sync {
  bookmarks?: Bookmark[];
  changeInfo?: BookmarkChange;
  deferred?: ng.IDeferred<void>;
  type: SyncType;
  uniqueId?: string;
}

export interface ProcessSyncResult {
  data?: Bookmark[];
  updateRemote?: boolean;
}

export interface SyncProvider {
  disable: () => ng.IPromise<void>;
  enable: () => ng.IPromise<void>;
  processSync: (sync: Sync) => ng.IPromise<ProcessSyncResult>;
  handleUpdateRemoteFailed: (err: Error, lastResult: Bookmark[], sync: Sync) => ng.IPromise<void>;
}
</file>

<file path="src/modules/shared/sync/sync.module.ts">
import { NgModule } from 'angular-ts-decorators';
import { BookmarkSyncProviderService } from './bookmark-sync-provider/bookmark-sync-provider.service';
import { SyncService } from './sync.service';

@NgModule({
  id: 'SyncModule',
  providers: [BookmarkSyncProviderService, SyncService]
})
export class SyncModule {}
</file>

<file path="src/modules/shared/sync/sync.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { ApiSyncInfo } from '../api/api.interface';
import { Bookmark } from '../bookmark/bookmark.interface';
import { BookmarkHelperService } from '../bookmark/bookmark-helper/bookmark-helper.service';
import { CryptoService } from '../crypto/crypto.service';
import {
  BaseError,
  BookmarkMappingNotFoundError,
  BookmarkNotFoundError,
  ContainerChangedError,
  DataOutOfSyncError,
  FailedCreateNativeBookmarksError,
  FailedGetNativeBookmarksError,
  FailedRemoveNativeBookmarksError,
  IncompleteSyncInfoError,
  NativeBookmarkNotFoundError,
  SyncDisabledError,
  SyncFailedError,
  SyncNotFoundError,
  SyncUncommittedError,
  SyncVersionNotSupportedError,
  TooManyRequestsError
} from '../errors/errors';
import { ExceptionHandler } from '../errors/errors.interface';
import { PlatformService } from '../global-shared.interface';
import { LogService } from '../log/log.service';
import { NetworkService } from '../network/network.service';
import { StoreKey } from '../store/store.enum';
import { StoreService } from '../store/store.service';
import { UtilityService } from '../utility/utility.service';
import { BookmarkSyncProviderService } from './bookmark-sync-provider/bookmark-sync-provider.service';
import { SyncType } from './sync.enum';
import { RemovedSync, Sync, SyncProvider } from './sync.interface';

@Injectable('SyncService')
export class SyncService {
  $exceptionHandler: ExceptionHandler;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  bookmarkHelperSvc: BookmarkHelperService;
  cryptoSvc: CryptoService;
  logSvc: LogService;
  networkSvc: NetworkService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  currentSync: Sync;
  providers: SyncProvider[];

  // IMPORTANT: For web extension platforms, as syncQueue is stored in memory it should NEVER be
  // referenced directly in code running in the context of the browser action, only in the background page
  syncQueue: Sync[] = [];

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$timeout',
    'BookmarkHelperService',
    'BookmarkSyncProviderService',
    'CryptoService',
    'LogService',
    'NetworkService',
    'PlatformService',
    'StoreService',
    'UtilityService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    BookmarkHelperSvc: BookmarkHelperService,
    BookmarkSyncProviderSvc: BookmarkSyncProviderService,
    CryptoSvc: CryptoService,
    LogSvc: LogService,
    NetworkSvc: NetworkService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$q = $q;
    this.$timeout = $timeout;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.cryptoSvc = CryptoSvc;
    this.logSvc = LogSvc;
    this.networkSvc = NetworkSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;

    // Register sync providers
    this.providers = [BookmarkSyncProviderSvc];
  }

  cancelSync(): ng.IPromise<void> {
    return this.disableSync();
  }

  checkIfDisableSyncOnError(err: Error): boolean {
    return (
      err &&
      (err instanceof IncompleteSyncInfoError ||
        err instanceof SyncNotFoundError ||
        err instanceof SyncVersionNotSupportedError ||
        err instanceof TooManyRequestsError)
    );
  }

  checkIfRefreshSyncedDataOnError(err: Error): boolean {
    return (
      err &&
      (err instanceof BookmarkMappingNotFoundError ||
        err instanceof ContainerChangedError ||
        err instanceof DataOutOfSyncError ||
        err instanceof FailedCreateNativeBookmarksError ||
        err instanceof FailedGetNativeBookmarksError ||
        err instanceof FailedRemoveNativeBookmarksError ||
        err instanceof NativeBookmarkNotFoundError ||
        err instanceof BookmarkNotFoundError)
    );
  }

  checkForUpdates(isBackgroundSync = false, outputToLog = true): ng.IPromise<boolean> {
    return this.storeSvc.get<string>(StoreKey.LastUpdated).then((storedLastUpdated) => {
      // Get last updated date from cache
      const storedLastUpdatedDate = new Date(storedLastUpdated);

      // Check if bookmarks have been updated
      return this.utilitySvc
        .getApiService()
        .then((apiSvc) => apiSvc.getBookmarksLastUpdated(isBackgroundSync))
        .then((response) => {
          // If last updated is different to the cached date, refresh bookmarks
          const remoteLastUpdated = new Date(response.lastUpdated);
          const updatesAvailable = storedLastUpdatedDate?.getTime() !== remoteLastUpdated.getTime();

          if (updatesAvailable && outputToLog) {
            this.logSvc.logInfo(
              `Updates available, local:${
                storedLastUpdatedDate?.toISOString() ?? 'none'
              } remote:${remoteLastUpdated.toISOString()}`
            );
          }

          return updatesAvailable;
        });
    });
  }

  checkSyncExists(): ng.IPromise<boolean> {
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      if (!syncEnabled) {
        throw new SyncDisabledError();
      }
      return this.utilitySvc
        .getApiService()
        .then((apiSvc) => apiSvc.getBookmarksLastUpdated())
        .then(() => true)
        .catch((err) => {
          // Handle sync removed from service
          if (err instanceof SyncNotFoundError) {
            this.setSyncRemoved();
            return false;
          }
          return true;
        });
    });
  }

  checkSyncVersionIsSupported(): ng.IPromise<void> {
    return this.utilitySvc.checkSyncCredentialsExist().then((syncInfo) =>
      this.$q
        .all([
          this.utilitySvc.getApiService().then((apiSvc) => apiSvc.getSyncVersion(syncInfo.id)),
          this.platformSvc.getAppVersion()
        ])
        .then((results) => {
          const [response, appVersion] = results;
          const { version: bookmarksVersion } = response;
          if (this.utilitySvc.compareVersions(bookmarksVersion ?? '0', appVersion, '>')) {
            throw new SyncVersionNotSupportedError();
          }
        })
    );
  }

  disableSync(): ng.IPromise<void> {
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      if (!syncEnabled) {
        return;
      }

      // Disable sync update check and clear cached data
      return this.$q
        .all([
          this.platformSvc.stopSyncUpdateChecks(),
          this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => {
            const { password, ...syncInfoNoPassword } = syncInfo;
            return this.storeSvc.set(StoreKey.SyncInfo, syncInfoNoPassword);
          }),
          this.storeSvc.remove(StoreKey.LastUpdated),
          this.storeSvc.set(StoreKey.SyncEnabled, false)
        ])
        .then(() => {
          // Disable syncing for registered providers
          return this.$q.all(this.providers.map((provider) => provider.disable()));
        })
        .then(() => {
          // Clear sync queue
          this.syncQueue = [];

          // Reset syncing flag
          this.showInterfaceAsSyncing();

          // Update browser action icon
          this.platformSvc.refreshNativeInterface();
          this.logSvc.logInfo('Sync disabled');
        });
    });
  }

  enableSync(): ng.IPromise<void> {
    return this.$q
      .all([
        this.storeSvc.remove(StoreKey.RemovedSync),
        this.storeSvc.set(StoreKey.SyncEnabled, true),
        this.platformSvc.startSyncUpdateChecks()
      ])
      .then(() => {
        // Enable syncing for registered providers
        return this.$q.all(this.providers.map((provider) => provider.enable()));
      })
      .then(() => this.platformSvc.refreshNativeInterface(true));
  }

  executeSync(isBackgroundSync = false): ng.IPromise<void> {
    // Check if sync enabled before running sync
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      if (!syncEnabled) {
        throw new SyncDisabledError();
      }

      // Get available updates if there are no queued syncs, finally process the queue
      return (
        this.syncQueue.length === 0 ? this.checkForUpdates(isBackgroundSync).catch(() => true) : this.$q.resolve(false)
      )
        .then((updatesAvailable) => {
          return (
            updatesAvailable &&
            this.queueSync({
              type: SyncType.Local
            })
          );
        })
        .then(() => this.processSyncQueue(isBackgroundSync));
    });
  }

  getCurrentSync(): Sync {
    return this.currentSync;
  }

  getSyncQueueLength(): number {
    return this.syncQueue.length;
  }

  getSyncSize(): ng.IPromise<number> {
    return this.bookmarkHelperSvc
      .getCachedBookmarks()
      .then(() => this.storeSvc.get<string>(StoreKey.Bookmarks))
      .then((encryptedBookmarks) => {
        // Return size in bytes of cached encrypted bookmarks
        const sizeInBytes = new TextEncoder().encode(encryptedBookmarks).byteLength;
        return sizeInBytes;
      });
  }

  handleFailedSync(failedSync: Sync, err: Error, isBackgroundSync = false): ng.IPromise<void> {
    let syncError = err;
    return this.$q
      .resolve()
      .then(() => {
        // If connection failed and sync is a change, swallow error and place failed sync back on the queue
        if (this.networkSvc.isNetworkConnectionError(err) && failedSync.type !== SyncType.Local) {
          this.syncQueue.unshift(failedSync);
          if (!isBackgroundSync) {
            this.logSvc.logWarning('No connection, changes re-queued for syncing');
          }
          syncError = new SyncUncommittedError(undefined, err);
          return;
        }

        // Set default error if none set
        if (!(err instanceof BaseError)) {
          syncError = new SyncFailedError(undefined, err);
        }

        // Handle failed sync
        this.logSvc.logWarning(`Sync ${failedSync.uniqueId} failed`);
        this.$exceptionHandler(syncError, null, false);
        if (failedSync.changeInfo && failedSync.changeInfo.type) {
          this.logSvc.logInfo(failedSync.changeInfo);
        }
        return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
          return this.showInterfaceAsSyncing().then(() => {
            if (!syncEnabled) {
              return;
            }

            // Handle sync removed from service
            if (err instanceof SyncNotFoundError) {
              return this.setSyncRemoved();
            }

            return this.$q
              .resolve()
              .then(() => {
                // If local changes made, clear sync queue and refresh sync data if necessary
                if (failedSync.type !== SyncType.Local) {
                  this.syncQueue = [];
                  if (this.checkIfRefreshSyncedDataOnError(syncError)) {
                    this.currentSync = undefined;
                    return this.platformSvc.queueLocalResync().catch((refreshErr) => {
                      syncError = refreshErr;
                    });
                  }
                }
              })
              .then(() => {
                // Check if sync should be disabled
                if (this.checkIfDisableSyncOnError(syncError)) {
                  return this.disableSync();
                }
              });
          });
        });
      })
      .then(() => {
        throw syncError;
      })
      .finally(() => {
        // Return sync error back to process that queued the sync
        failedSync.deferred.reject(syncError);
        return this.showInterfaceAsSyncing();
      });
  }

  processSyncQueue(isBackgroundSync = false): ng.IPromise<void> {
    let cancel = false;
    let processedBookmarksData: Bookmark[];
    let updateRemote = false;
    let updateSyncVersion = false;

    // If a sync is in progress, retry later
    if (this.currentSync || this.syncQueue.length === 0) {
      return this.$q.resolve();
    }

    const condition = (): ng.IPromise<boolean> => {
      return this.$q.resolve(this.syncQueue.length > 0);
    };

    const action = (): ng.IPromise<void> => {
      // Get first sync in the queue
      this.currentSync = this.syncQueue.shift();
      this.logSvc.logInfo(
        `Processing sync ${this.currentSync.uniqueId}${isBackgroundSync ? ' in background' : ''} (${
          this.syncQueue.length
        } waiting in queue)`
      );

      // Enable syncing flag
      return this.showInterfaceAsSyncing(this.currentSync.type)
        .then(() => {
          // Process here if this is a cancel
          if (this.currentSync.type === SyncType.Cancel) {
            return this.cancelSync().then(() => {
              cancel = true;
              return false;
            });
          }

          // Set update sync version flag if upgrading
          if (this.currentSync.type === SyncType.Upgrade) {
            updateSyncVersion = true;
          }

          // Set sync bookmarks to last processed result if applicable
          if (angular.isUndefined(this.currentSync.bookmarks) && !angular.isUndefined(processedBookmarksData)) {
            this.currentSync.bookmarks = processedBookmarksData;
          }

          // Process sync for each registered provider
          return this.$q
            .all(this.providers.map((provider) => provider.processSync(this.currentSync)))
            .then((processSyncResults) => {
              // Iterate through process results and extract resultant data
              processSyncResults.forEach((result, index) => {
                switch (this.providers[index].constructor) {
                  case BookmarkSyncProviderService:
                    processedBookmarksData = result.data;
                    break;
                  default:
                    this.logSvc.logWarning('Sync provider not specified');
                }
              });

              // Combine all results to determine whether to proceed with update
              return processSyncResults.reduce((prev, current) => {
                return current.updateRemote ? prev : prev && current.updateRemote;
              }, true);
            });
        })
        .then((syncChange) => {
          // Resolve the current sync's promise
          this.currentSync.deferred.resolve();

          // Set flag if remote bookmarks data should be updated
          updateRemote = !!syncChange;

          // Reset syncing flag
          return this.showInterfaceAsSyncing();
        });
    };

    // Disable automatic updates whilst processing syncs
    return (
      this.utilitySvc
        .isSyncEnabled()
        .then((syncEnabled) => {
          if (syncEnabled) {
            return this.platformSvc.stopSyncUpdateChecks();
          }
        })
        // Process sync queue
        .then(() => this.utilitySvc.asyncWhile<any>(this.syncQueue, condition, action))
        .then(() => {
          // If sync was cancelled stop here
          if (cancel) {
            return;
          }

          return this.cryptoSvc.encryptData(JSON.stringify(processedBookmarksData)).then((encryptedBookmarks) => {
            // Update remote bookmarks if required
            return (
              !updateRemote
                ? this.$q.resolve().then(() => this.logSvc.logInfo('No changes made, skipping remote update.'))
                : this.checkSyncVersionIsSupported()
                    .then(() =>
                      this.utilitySvc
                        .getApiService()
                        .then((apiSvc) =>
                          apiSvc.updateBookmarks(encryptedBookmarks, updateSyncVersion, isBackgroundSync)
                        )
                    )
                    .then((response) => {
                      const updateCache = [this.storeSvc.set(StoreKey.LastUpdated, response.lastUpdated)];
                      if (updateSyncVersion) {
                        updateCache.push(
                          this.platformSvc.getAppVersion().then((appVersion) =>
                            this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => {
                              syncInfo.version = appVersion;
                              return this.storeSvc.set(StoreKey.SyncInfo, syncInfo);
                            })
                          )
                        );
                      }
                      return this.$q.all(updateCache).then(() => {
                        this.logSvc.logInfo(`Remote bookmarks updated at ${response.lastUpdated}`);
                      });
                    })
                    .catch((err) => {
                      return this.$q
                        .all(
                          this.providers.map((provider) => {
                            let lastResult: any;
                            switch (provider.constructor) {
                              case BookmarkSyncProviderService:
                                lastResult = processedBookmarksData;
                                break;
                              default:
                            }
                            return provider.handleUpdateRemoteFailed(err, lastResult, this.currentSync);
                          })
                        )
                        .then(() => {
                          throw err;
                        });
                    })
            ).then(() => this.bookmarkHelperSvc.updateCachedBookmarks(processedBookmarksData, encryptedBookmarks));
          });
        })
        .catch((err) => this.handleFailedSync(this.currentSync, err, isBackgroundSync))
        .finally(() => {
          // Clear current sync
          this.currentSync = undefined;

          // Start auto updates if sync enabled
          return this.utilitySvc.isSyncEnabled().then((cachedSyncEnabled) => {
            if (cachedSyncEnabled) {
              return this.platformSvc.startSyncUpdateChecks();
            }
          });
        })
    );
  }

  queueSync(syncToQueue: Sync, runSync = true): ng.IPromise<void> {
    return this.$q<void>((resolve, reject) => {
      this.utilitySvc
        .isSyncEnabled()
        .then((syncEnabled) => {
          // If new sync ensure sync queue is clear
          if (!syncEnabled) {
            this.syncQueue = [];
          }

          let queuedSync: ng.IDeferred<void>;
          if (syncToQueue) {
            // If sync is type cancel, clear queue first
            if (syncToQueue.type === SyncType.Cancel) {
              this.syncQueue = [];
            }

            // Add sync to queue
            queuedSync = this.$q.defer<void>();
            syncToQueue.deferred = queuedSync;
            syncToQueue.uniqueId = syncToQueue.uniqueId ?? this.utilitySvc.getUniqueishId();
            this.syncQueue.push(syncToQueue);
            this.logSvc.logInfo(`Sync ${syncToQueue.uniqueId} (${syncToQueue.type}) queued`);
          }

          // Prepare sync promises to return and check if should also run sync
          const promises = [queuedSync.promise];
          if (runSync) {
            promises.push(
              this.$q<void>((syncedResolve, syncedReject) =>
                this.$timeout(() => this.processSyncQueue().then(syncedResolve).catch(syncedReject))
              )
            );
          }

          return this.$q
            .all(promises)
            .then(() => {
              // Enable sync if required
              if (
                !syncEnabled &&
                ((syncToQueue.type === SyncType.Local && angular.isUndefined(syncToQueue.bookmarks ?? undefined)) ||
                  syncToQueue.type === SyncType.Remote ||
                  syncToQueue.type === SyncType.Upgrade)
              ) {
                return this.enableSync().then(() => {
                  this.logSvc.logInfo('Sync enabled');
                });
              }
            })
            .then(resolve);
        })
        .catch(reject);
    });
  }

  setSyncRemoved(): ng.IPromise<void> {
    return this.$q
      .all([this.bookmarkHelperSvc.getCachedBookmarks(), this.storeSvc.get([StoreKey.LastUpdated, StoreKey.SyncInfo])])
      .then((data) => {
        const [bookmarks, storeContent] = data;
        const { lastUpdated, syncInfo } = storeContent;
        const { id, password, version, ...trimmedSyncInfo } = syncInfo;
        const removedSync: RemovedSync = {
          bookmarks,
          lastUpdated,
          syncInfo: trimmedSyncInfo
        };
        return this.storeSvc
          .set(StoreKey.RemovedSync, removedSync)
          .then(() => {
            this.logSvc.logWarning(
              `Sync ID ${syncInfo.id} was not found on remote servuce (last updated ${lastUpdated})`
            );
            this.logSvc.logInfo(trimmedSyncInfo);
          })
          .then(() => this.disableSync())
          .then(() => this.storeSvc.set(StoreKey.SyncInfo, trimmedSyncInfo));
      });
  }

  shouldDisplayDefaultPageOnError(err: Error): boolean {
    return this.checkIfDisableSyncOnError(err) || err instanceof SyncUncommittedError;
  }

  showInterfaceAsSyncing(syncType?: SyncType): ng.IPromise<void> {
    // Update browser action icon with current sync type
    if (!angular.isUndefined(syncType ?? undefined)) {
      return this.platformSvc.refreshNativeInterface(undefined, syncType);
    }

    // Get cached sync enabled value and update browser action icon
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => this.platformSvc.refreshNativeInterface(syncEnabled));
  }
}
</file>

<file path="src/modules/shared/telemetry/telemetry.interface.ts">
import { ApiXbrowsersyncSyncInfo } from '../api/api-xbrowsersync/api-xbrowsersync.interface';
import { PlatformInfo } from '../global-shared.interface';
import { AllSettings } from '../settings/settings.interface';

export interface TelemetryPayload extends Partial<AllSettings>, Partial<ApiXbrowsersyncSyncInfo>, PlatformInfo {
  appVersion: string;
  currentLocale: string;
  platform: string;
  syncEnabled: boolean;
  syncSize?: number;
}
</file>

<file path="src/modules/shared/telemetry/telemetry.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { ApiSyncInfo } from '../api/api.interface';
import { NetworkConnectionError } from '../errors/errors';
import Globals from '../global-shared.constants';
import { PlatformService } from '../global-shared.interface';
import { LogService } from '../log/log.service';
import { NetworkService } from '../network/network.service';
import { SettingsService } from '../settings/settings.service';
import { StoreKey } from '../store/store.enum';
import { StoreService } from '../store/store.service';
import { SyncService } from '../sync/sync.service';
import { UtilityService } from '../utility/utility.service';
import { TelemetryPayload } from './telemetry.interface';

@Injectable('TelemetryService')
export class TelemetryService {
  $http: ng.IHttpService;
  $q: ng.IQService;
  logSvc: LogService;
  networkSvc: NetworkService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  storeSvc: StoreService;
  syncSvc: SyncService;
  utilitySvc: UtilityService;

  static $inject = [
    '$http',
    '$q',
    'LogService',
    'NetworkService',
    'PlatformService',
    'SettingsService',
    'StoreService',
    'SyncService',
    'UtilityService'
  ];
  constructor(
    $http: ng.IHttpService,
    $q: ng.IQService,
    LogSvc: LogService,
    NetworkSvc: NetworkService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService
  ) {
    this.$http = $http;
    this.$q = $q;
    this.logSvc = LogSvc;
    this.networkSvc = NetworkSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.storeSvc = StoreSvc;
    this.syncSvc = SyncSvc;
    this.utilitySvc = UtilitySvc;
  }

  getTelemetryPayload(): ng.IPromise<TelemetryPayload> {
    return this.$q
      .all([
        this.platformSvc.getAppVersionName(),
        this.platformSvc.getCurrentLocale(),
        this.settingsSvc.all(),
        this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo),
        this.utilitySvc.isSyncEnabled()
      ])
      .then((data) => {
        const [appVersion, currentLocale, settings, syncInfo, syncEnabled] = data;
        const { id, password, ...safeSyncInfo } = syncInfo ?? {};
        return (syncEnabled ? this.syncSvc.getSyncSize() : this.$q.resolve(0)).then((syncSize) => {
          let telemetryPayload: TelemetryPayload = {
            appVersion,
            currentLocale,
            platform: this.utilitySvc.getBrowserName(),
            syncEnabled,
            ...settings,
            ...this.platformSvc.getPlatformInfo()
          };
          if (syncEnabled) {
            telemetryPayload = {
              syncSize,
              ...safeSyncInfo,
              ...telemetryPayload
            };
          }
          return Object.keys(telemetryPayload)
            .filter((key) => {
              return telemetryPayload[key] != null;
            })
            .reduce((prev, current) => {
              prev[current] = telemetryPayload[current];
              return prev;
            }, {}) as TelemetryPayload;
        });
      });
  }

  submitTelemetry(): ng.IPromise<void> {
    return this.networkSvc
      .checkNetworkConnection()
      .then(() => this.$q.all([this.utilitySvc.getInstallationId(), this.getTelemetryPayload()]))
      .then((data) => {
        const [installationId, telemetry] = data;
        return this.$http
          .post<void>(
            Globals.TelemetryUrl,
            JSON.stringify({
              installationId,
              ...telemetry
            })
          )
          .catch((response) => {
            throw this.networkSvc.getErrorFromHttpResponse(response);
          });
      })
      .then(() => {})
      .catch((err) => {
        if (err instanceof NetworkConnectionError) {
          return;
        }
        this.logSvc.logWarning(`Failed to submit telemetry: ${err?.message}`);
      });
  }
}
</file>

<file path="src/modules/shared/upgrade/v1.6.0-upgrade-provider/v1.6.0-upgrade-provider.service.ts">
import angular from 'angular';
import { BookmarkContainer } from '../../bookmark/bookmark.enum';
import { Bookmark } from '../../bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../bookmark/bookmark-helper/bookmark-helper.service';
import Globals from '../../global-shared.constants';
import { PlatformService } from '../../global-shared.interface';
import { StoreKey } from '../../store/store.enum';
import { StoreService } from '../../store/store.service';
import { UtilityService } from '../../utility/utility.service';
import { UpgradeProvider } from '../upgrade.interface';

export abstract class V160UpgradeProviderService implements UpgradeProvider {
  $q: ng.IQService;
  bookmarkHelperSvc: BookmarkHelperService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;

  constructor(
    $q: ng.IQService,
    BookmarkHelperSvc: BookmarkHelperService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$q = $q;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  upgradeApp(upgradingFromVersion?: string): ng.IPromise<void> {
    // Set help page to display
    return this.storeSvc.set(StoreKey.DisplayHelp, false);
  }

  upgradeBookmarks(bookmarks: Bookmark[], upgradingFromVersion?: string): ng.IPromise<Bookmark[]> {
    const upgradedBookmarks = angular.copy(bookmarks);

    // Upgrade separators
    this.bookmarkHelperSvc.eachBookmark((bookmark) => {
      if (bookmark.title === '-' && !bookmark.url && !bookmark.children) {
        bookmark.url = Globals.Bookmarks.SeparatorUrl;
        delete bookmark.title;
      }
    }, upgradedBookmarks);

    // Move mobile bookmarks container into other bookmarks if present
    const mobileContainerIndex = upgradedBookmarks.findIndex((bookmark) => bookmark.title === '[xbs] Mobile');
    if (mobileContainerIndex >= 0) {
      const mobileContainerArr = upgradedBookmarks.splice(mobileContainerIndex, 1);
      const [mobileContainer] = mobileContainerArr;
      mobileContainer.title = 'Mobile bookmarks';
      const otherContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, upgradedBookmarks, true);
      otherContainer.children = [...mobileContainerArr, ...otherContainer.children];
    }

    return this.$q.resolve(upgradedBookmarks);
  }
}
</file>

<file path="src/modules/shared/upgrade/upgrade.interface.ts">
import { Bookmark } from '../bookmark/bookmark.interface';

export interface UpgradeProvider {
  upgradeApp: (upgradingFromVersion?: string) => ng.IPromise<void>;
  upgradeBookmarks: (bookmarks: Bookmark[], upgradingFromVersion?: string) => ng.IPromise<Bookmark[]>;
}
</file>

<file path="src/modules/shared/upgrade/upgrade.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { Bookmark } from '../bookmark/bookmark.interface';
import { SyncVersionNotSupportedError, UpgradeFailedError } from '../errors/errors';
import { PlatformService } from '../global-shared.interface';
import { LogService } from '../log/log.service';
import { StoreKey } from '../store/store.enum';
import { StoreService } from '../store/store.service';
import { UtilityService } from '../utility/utility.service';
import { UpgradeProvider } from './upgrade.interface';
import { V160UpgradeProviderService } from './v1.6.0-upgrade-provider/v1.6.0-upgrade-provider.service';

@Injectable('UpgradeService')
export class UpgradeService {
  $q: ng.IQService;
  logSvc: LogService;
  platformSvc: PlatformService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;
  v160UpgradeProviderSvc: V160UpgradeProviderService;

  upgradeMap: Map<string, UpgradeProvider>;

  static $inject = [
    '$q',
    'LogService',
    'PlatformService',
    'StoreService',
    'UtilityService',
    'V160UpgradeProviderService'
  ];
  constructor(
    $q: ng.IQService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService,
    V1_6_0_UpgradeProviderSvc: V160UpgradeProviderService
  ) {
    this.$q = $q;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
    this.v160UpgradeProviderSvc = V1_6_0_UpgradeProviderSvc;

    // Configure upgrade map with available upgrade steps
    this.upgradeMap = new Map<string, UpgradeProvider>();
    this.upgradeMap.set('1.6.0', this.v160UpgradeProviderSvc);
  }

  checkIfUpgradeRequired(currentVersion: string): ng.IPromise<boolean> {
    return this.getLastUpgradeVersion().then((lastUpgradeVersion) => {
      return (
        angular.isUndefined(lastUpgradeVersion) ||
        this.utilitySvc.compareVersions(lastUpgradeVersion, currentVersion, '<')
      );
    });
  }

  getLastUpgradeVersion(): ng.IPromise<string> {
    return this.storeSvc.get<string>(StoreKey.LastUpgradeVersion);
  }

  setLastUpgradeVersion(version: string): ng.IPromise<void> {
    return this.storeSvc.set(StoreKey.LastUpgradeVersion, version);
  }

  upgrade(targetVersion: string): ng.IPromise<void> {
    if (angular.isUndefined(targetVersion)) {
      throw new UpgradeFailedError('Failed upgrade, target version not provided');
    }

    return this.getLastUpgradeVersion()
      .then((lastUpgradeVersion = '1.0.0') => {
        const condition = (currentVersion): ng.IPromise<boolean> => {
          // Exit when current version is no longer less than target version
          return this.$q.resolve(this.utilitySvc.compareVersions(currentVersion, targetVersion, '<'));
        };

        const action = (currentVersion): ng.IPromise<string> => {
          // Get the next sequential upgrade step from upgrade map
          const upgradeStep = [...this.upgradeMap].find(({ 0: x }) =>
            this.utilitySvc.compareVersions(currentVersion, x, '<')
          );
          const [upgradeVersion, upgradeProvider] = upgradeStep ?? [];

          // If upgrade found, run app upgrade process
          return (
            upgradeVersion
              ? upgradeProvider.upgradeApp(lastUpgradeVersion).then(() => upgradeVersion)
              : this.$q.resolve(targetVersion)
          ).then((newVersion) => {
            return this.setLastUpgradeVersion(newVersion)
              .then(() => this.logSvc.logInfo(`Upgraded to ${newVersion}`))
              .then(() => newVersion);
          });
        };

        // Run each sequential upgrade from last upgrade version to target
        return this.utilitySvc.asyncWhile<string>(lastUpgradeVersion, condition, action);
      })
      .then(() => this.platformSvc.disableSync())
      .catch((err) => {
        throw new UpgradeFailedError(`Failed upgrade to ${targetVersion}`, err);
      });
  }

  upgradeBookmarks(
    targetVersion: string,
    syncVersion: string = '1.0.0',
    bookmarks: Bookmark[] = []
  ): ng.IPromise<Bookmark[]> {
    if (bookmarks.length === 0) {
      return this.$q.resolve(bookmarks);
    }

    if (angular.isUndefined(targetVersion)) {
      throw new UpgradeFailedError('Failed upgrade bookmarks, target version not provided');
    }

    if (this.utilitySvc.compareVersions(syncVersion, targetVersion, '>')) {
      // Sync version is greater than target version, throw error
      throw new SyncVersionNotSupportedError();
    }

    let upgradedBookmarks = angular.copy(bookmarks);

    const condition = (currentVersion): ng.IPromise<boolean> => {
      // Exit when current version is no longer less than target version
      return this.$q.resolve(this.utilitySvc.compareVersions(currentVersion, targetVersion, '<'));
    };

    const action = (currentVersion): ng.IPromise<string> => {
      // Get the next sequential upgrade step from upgrade map
      const upgradeStep = [...this.upgradeMap].find(({ 0: x }) =>
        this.utilitySvc.compareVersions(currentVersion, x, '<')
      );
      const [upgradeVersion, upgradeProvider] = upgradeStep ?? [];

      // Run provider upgrade process if exists
      return (
        upgradeVersion
          ? upgradeProvider.upgradeBookmarks(upgradedBookmarks, currentVersion)
          : this.$q.resolve(upgradedBookmarks)
      ).then((bookmarksUpgradeResult) => {
        upgradedBookmarks = bookmarksUpgradeResult;
        return upgradeVersion ?? targetVersion;
      });
    };

    // Run each sequential upgrade from bookmarks sync version to target
    return this.utilitySvc.asyncWhile<string>(syncVersion, condition, action).then(() => upgradedBookmarks);
  }
}
</file>

<file path="src/modules/shared/utility/utility.service.ts">
/* eslint-disable @typescript-eslint/naming-convention */

import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { compare } from 'compare-versions';
import * as detectBrowser from 'detect-browser';
import XRegExp from 'xregexp';
import { AppEventType, RoutePath } from '../../app/app.enum';
import { ApiServiceType } from '../api/api.enum';
import { ApiService, ApiServiceNames, ApiSyncInfo } from '../api/api.interface';
import { IncompleteSyncInfoError } from '../errors/errors';
import { ExceptionHandler } from '../errors/errors.interface';
import Globals from '../global-shared.constants';
import { BrowserName, PlatformType } from '../global-shared.enum';
import { Url } from '../global-shared.interface';
import { LogService } from '../log/log.service';
import { NetworkService } from '../network/network.service';
import { StoreKey } from '../store/store.enum';
import { StoreService } from '../store/store.service';

@Injectable('UtilityService')
export class UtilityService {
  $exceptionHandler: ExceptionHandler;
  $http: ng.IHttpService;
  $injector: ng.auto.IInjectorService;
  $location: ng.ILocationService;
  $q: ng.IQService;
  $rootScope: ng.IRootScopeService;
  logSvc: LogService;
  networkSvc: NetworkService;
  storeSvc: StoreService;

  static $inject = [
    '$exceptionHandler',
    '$http',
    '$injector',
    '$location',
    '$q',
    '$rootScope',
    'LogService',
    'NetworkService',
    'StoreService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $http: ng.IHttpService,
    $injector: ng.auto.IInjectorService,
    $location: ng.ILocationService,
    $q: ng.IQService,
    $rootScope: ng.IRootScopeService,
    LogSvc: LogService,
    NetworkSvc: NetworkService,
    StoreSvc: StoreService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$http = $http;
    this.$injector = $injector;
    this.$location = $location;
    this.$q = $q;
    this.$rootScope = $rootScope;
    this.logSvc = LogSvc;
    this.networkSvc = NetworkSvc;
    this.storeSvc = StoreSvc;
  }

  asyncWhile<T = any>(data: T, condition: (data: T) => ng.IPromise<boolean>, action: (data: T) => ng.IPromise<T>) {
    const whilst = (whilstData: T): ng.IPromise<T> => {
      return condition(whilstData).then((conditionIsTrue) =>
        conditionIsTrue ? action(whilstData).then(whilst) : this.$q.resolve(whilstData)
      );
    };

    return whilst(data);
  }

  broadcastEvent(eventType: AppEventType, eventData?: any[]): void {
    this.$rootScope.$broadcast(eventType, eventData);
  }

  checkCurrentRoute(route: RoutePath): boolean {
    return this.$location.path().indexOf(route) === 0;
  }

  checkForNewVersion(currentVersion: string): ng.IPromise<string> {
    if (!this.networkSvc.isNetworkConnected()) {
      return this.$q.resolve('');
    }

    // Get latest app version info
    return this.$http
      .get<any>(Globals.ReleaseLatestUrl)
      .then((response) => {
        const latestVersion = this.getSemVerAlignedVersion(response?.data?.tag_name ?? '');
        if (!this.compareVersions(latestVersion, currentVersion, '>', true)) {
          return '';
        }
        this.logSvc.logInfo(`${latestVersion} update available`);
        return latestVersion;
      })
      .catch(() => {
        this.logSvc.logInfo('Couldn’t check for new version');
        return '';
      });
  }

  checkSyncCredentialsExist(): ng.IPromise<ApiSyncInfo> {
    return this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => {
      if (!syncInfo?.id || !syncInfo?.password) {
        throw new IncompleteSyncInfoError();
      }
      return syncInfo;
    });
  }

  compareVersions(firstVersion: string, secondVersion: string, operator: string, includeBeta = false): boolean {
    const regex = includeBeta
      ? /^[vV]?(\d+\.\d+\.\d+(-\w+\.\d+)?)(\.\d+)?$/
      : /^[vV]?(\d+\.\d+\.\d+)(\.\d+|-\w+\.\d+)?$/;
    return compare(firstVersion?.replace(regex, '$1'), secondVersion?.replace(regex, '$1'), operator as any);
  }

  filterFalsyValues(values: string[]): string[] {
    return values.filter((x) => x);
  }

  getCurrentApiServiceType(): ng.IPromise<ApiServiceType> {
    return this.$q.resolve(ApiServiceType.xBrowserSync);
  }

  getApiService(): ng.IPromise<ApiService> {
    let apiServiceName: string;

    return this.getCurrentApiServiceType().then((currentServiceType) => {
      switch (currentServiceType) {
        case ApiServiceType.xBrowserSync:
          apiServiceName = ApiServiceNames.XbrowsersyncService;
          break;
        default:
          apiServiceName = ApiServiceNames.XbrowsersyncService;
      }

      return this.$injector.get(apiServiceName) as ApiService;
    });
  }

  getBrowserName(): string {
    const browserName = detectBrowser.detect()?.name.replace('edge-chromium', BrowserName.Edge) ?? BrowserName.Chrome;
    return this.isBraveBrowser() ? BrowserName.Brave : browserName;
  }

  getDateTimeString(date: Date): string {
    if (!date) {
      return '';
    }

    const second = `0${date.getSeconds()}`.slice(-2);
    const minute = `0${date.getMinutes()}`.slice(-2);
    const hour = `0${date.getHours()}`.slice(-2);
    const day = `0${date.getDate()}`.slice(-2);
    const month = `0${date.getMonth() + 1}`.slice(-2);
    const year = date.getFullYear();
    return year + month + day + hour + minute + second;
  }

  getInstallationId(): ng.IPromise<string> {
    return this.storeSvc.get<string>(StoreKey.InstallationId).then((installationId) => {
      if (!installationId) {
        installationId = this.uuidv4();
        return this.storeSvc.set(StoreKey.InstallationId, installationId).then(() => installationId);
      }
      return installationId;
    });
  }

  getSemVerAlignedVersion(version: string): string {
    return version.replace(/^[vV]?(\d+\.\d+\.\d+)(\.\d+|-\w+\.\d+)?$/, '$1');
  }

  getSyncVersion(): ng.IPromise<string> {
    return this.storeSvc.get<ApiSyncInfo>(StoreKey.SyncInfo).then((syncInfo) => syncInfo?.version);
  }

  getTagArrayFromText(tagText: string): string[] | undefined {
    if (angular.isUndefined(tagText ?? undefined)) {
      return;
    }

    // Split tags by comma or semi colon and filter by minimum length
    const tags = tagText.split(/[,;]/).filter((x) => x.length > Globals.LookaheadMinChars);

    // Clean and sort tags
    const cleanedTags = this.sortWords(tags.filter((x) => !!x?.trim()).map((x) => x.trim()));
    return cleanedTags;
  }

  getUniqueishId(): string {
    return window.crypto.getRandomValues(new Uint32Array(1))[0].toString(36);
  }

  @boundMethod
  handleEvent(eventHandler: (...args: any[]) => any, ...args: any[]): void {
    try {
      this.$q
        .resolve()
        .then(() => eventHandler(...args))
        .catch((err) => this.$exceptionHandler(err));
    } catch (err) {
      this.$exceptionHandler(err);
    }
  }

  isBraveBrowser(): boolean {
    return !angular.isUndefined(window.navigator.brave);
  }

  @boundMethod
  isMobilePlatform(platformName: string): boolean {
    return platformName === PlatformType.Android;
  }

  isSyncEnabled(): ng.IPromise<boolean> {
    return this.storeSvc.get<boolean>(StoreKey.SyncEnabled);
  }

  isTextInput(element: Element): boolean {
    return ['INPUT', 'TEXTAREA'].indexOf(element.nodeName) !== -1;
  }

  parseUrl(url: string): Url {
    const searchObject: any = {};
    const parser = document.createElement('a');
    parser.href = url;
    const queries = parser.search.replace(/^\?/, '').split('&');

    let split;
    for (let i = 0; i < queries.length; i += 1) {
      split = queries[i].split('=');
      searchObject[split[0]] = split[1];
    }

    return {
      protocol: parser.protocol,
      host: parser.host,
      hostname: parser.hostname,
      port: parser.port,
      pathname: parser.pathname,
      search: parser.search,
      searchObject,
      hash: parser.hash
    };
  }

  sortWords(words: string[]): string[] {
    return [...new Set(words)].sort();
  }

  splitTextIntoWords(text: string, locale: string): string[] {
    if (angular.isUndefined(text ?? undefined)) {
      return [];
    }
    const words = text!.toLocaleLowerCase(locale).replace(/['"]/g, '');
    const wordsArr = words.split(XRegExp('[^\\p{L}\\p{Nd}]', 'g'));
    return this.filterFalsyValues(wordsArr);
  }

  stopEventPropagation(event: Event): void {
    // Stop event propogation
    event?.preventDefault();
    (event as any)?.srcEvent?.stopPropagation();
  }

  stringsAreEquivalent(str1 = '', str2 = '', locale?: string): boolean {
    return str1.localeCompare(str2, locale, { sensitivity: 'base' }) === 0;
  }

  stripTags(input: string): string {
    return input ? input.replace(/<(?:.|\n)*?>/gm, '') : input;
  }

  syncIdIsValid(syncId: string): boolean {
    if (!syncId) {
      return false;
    }

    const hexStringToBytes = (hexString: string): Uint8Array => {
      const bytes = new Uint8Array(hexString.length / 2);
      for (let i = 0; i !== bytes.length; i += 1) {
        bytes[i] = parseInt(hexString.substr(i * 2, 2), 16);
      }
      return bytes;
    };

    const bytesToGuidString = (bytes: Uint8Array): string | undefined => {
      if (bytes == null) {
        return '';
      }

      if (bytes.length !== 16) {
        return '';
      }

      const _a = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
      const _b = (bytes[5] << 8) | bytes[4];
      const _c = (bytes[7] << 8) | bytes[6];
      const _d = bytes[8];
      const _e = bytes[9];
      const _f = bytes[10];
      const _g = bytes[11];
      const _h = bytes[12];
      const _i = bytes[13];
      const _j = bytes[14];
      const _k = bytes[15];

      const hexToChar = (a: number): string => {
        a &= 0xf;
        return String.fromCharCode(a > 9 ? a - 10 + 0x61 : a + 0x30);
      };

      const hexsToChars = (guidChars: any[], offset: number, a: number, b: number, hex?: boolean): number => {
        hex = hex === undefined ? false : hex;

        if (hex) {
          guidChars[(offset += 1)] = '0';
          guidChars[(offset += 1)] = 'x';
        }
        guidChars[(offset += 1)] = hexToChar(a >> 4);
        guidChars[(offset += 1)] = hexToChar(a);
        if (hex) {
          guidChars[(offset += 1)] = ',';
          guidChars[(offset += 1)] = '0';
          guidChars[(offset += 1)] = 'x';
        }
        guidChars[(offset += 1)] = hexToChar(b >> 4);
        guidChars[(offset += 1)] = hexToChar(b);
        return offset;
      };

      const _toString = (format: string): string | undefined => {
        if (!format?.length) format = 'D';

        let guidChars = [];
        let offset = 0;
        let dash = true;
        let hex = false;

        if (format.length !== 1) {
          // all acceptable format strings are of length 1
          return;
        }

        const formatCh = format[0];

        if (formatCh === 'D' || formatCh === 'd') {
          guidChars = new Array(36);
        } else if (formatCh === 'N' || formatCh === 'n') {
          guidChars = new Array(32);
          dash = false;
        } else if (formatCh === 'B' || formatCh === 'b') {
          guidChars = new Array(38);
          guidChars[(offset += 1)] = '{';
          guidChars[37] = '}';
        } else if (formatCh === 'P' || formatCh === 'p') {
          guidChars = new Array(38);
          guidChars[(offset += 1)] = '(';
          guidChars[37] = ')';
        } else if (formatCh === 'X' || formatCh === 'x') {
          guidChars = new Array(68);
          guidChars[(offset += 1)] = '{';
          guidChars[67] = '}';
          dash = false;
          hex = true;
        } else {
          return;
        }

        if (hex) {
          // {0xdddddddd,0xdddd,0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}
          guidChars[(offset += 1)] = '0';
          guidChars[(offset += 1)] = 'x';
          offset = hexsToChars(guidChars, offset, _a >> 24, _a >> 16);
          offset = hexsToChars(guidChars, offset, _a >> 8, _a);
          guidChars[(offset += 1)] = ',';
          guidChars[(offset += 1)] = '0';
          guidChars[(offset += 1)] = 'x';
          offset = hexsToChars(guidChars, offset, _b >> 8, _b);
          guidChars[(offset += 1)] = ',';
          guidChars[(offset += 1)] = '0';
          guidChars[(offset += 1)] = 'x';
          offset = hexsToChars(guidChars, offset, _c >> 8, _c);
          guidChars[(offset += 1)] = ',';
          guidChars[(offset += 1)] = '{';
          offset = hexsToChars(guidChars, offset, _d, _e, true);
          guidChars[(offset += 1)] = ',';
          offset = hexsToChars(guidChars, offset, _f, _g, true);
          guidChars[(offset += 1)] = ',';
          offset = hexsToChars(guidChars, offset, _h, _i, true);
          guidChars[(offset += 1)] = ',';
          offset = hexsToChars(guidChars, offset, _j, _k, true);
          guidChars[(offset += 1)] = '}';
        } else {
          // [{|(]dddddddd[-]dddd[-]dddd[-]dddd[-]dddddddddddd[}|)]
          offset = hexsToChars(guidChars, offset, _a >> 24, _a >> 16);
          offset = hexsToChars(guidChars, offset, _a >> 8, _a);
          if (dash) guidChars[(offset += 1)] = '-';
          offset = hexsToChars(guidChars, offset, _b >> 8, _b);
          if (dash) guidChars[(offset += 1)] = '-';
          offset = hexsToChars(guidChars, offset, _c >> 8, _c);
          if (dash) guidChars[(offset += 1)] = '-';
          offset = hexsToChars(guidChars, offset, _d, _e);
          if (dash) guidChars[(offset += 1)] = '-';
          offset = hexsToChars(guidChars, offset, _f, _g);
          offset = hexsToChars(guidChars, offset, _h, _i);
          offset = hexsToChars(guidChars, offset, _j, _k);
        }

        return guidChars.join('');
      };

      return _toString('D')?.split(',').join('');
    };

    return !!bytesToGuidString(hexStringToBytes(syncId));
  }

  trimToNearestWord(text: string, limit: number): string {
    if (!text) {
      return '';
    }

    text = text.trim();

    if (limit >= text.length) {
      return text;
    }

    const trimmedText = `${text.substring(0, text.lastIndexOf(' ', limit))}\u2026`;
    return trimmedText;
  }

  uuidv4(): string {
    return `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, (c) => {
      const num = parseInt(c, 10);
      return (num ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (num / 4)))).toString(16);
    });
  }
}
</file>

<file path="src/modules/shared/working/working.enum.ts">
enum WorkingContext {
  DelayedSyncing = 'DELAYED_SYNCING',
  Resetting = 'RESETTING',
  Restoring = 'RESTORING',
  RetrievingMetadata = 'RETRIEVING_METADATA',
  Syncing = 'SYNCING',
  WaitingForSyncsToFinish = 'WAITING'
}
export { WorkingContext };
</file>

<file path="src/modules/shared/working/working.interface.ts">
import { WorkingContext } from './working.enum';

export interface WorkingStatus {
  activated: boolean;
  context?: WorkingContext;
}
</file>

<file path="src/modules/shared/working/working.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { WorkingContext } from './working.enum';
import { WorkingStatus } from './working.interface';

@Injectable('WorkingService')
export class WorkingService {
  status: WorkingStatus;

  constructor() {
    this.status = {
      activated: false
    };
  }

  hide(): void {
    this.status = {
      activated: false
    };
  }

  show(context?: WorkingContext): void {
    this.status = {
      activated: true,
      context
    };
  }
}
</file>

<file path="src/modules/shared/global-shared.constants.ts">
export default {
  Alarms: {
    AutoBackUp: {
      Name: 'ALARM_AUTO_BACK_UP'
    },
    SyncUpdatesCheck: {
      Name: 'ALARM_SYNC_UPDATES_CHECK',
      Period: 15
    }
  },
  Bookmarks: {
    DescriptionMaxLength: 300,
    HorizontalSeparatorTitle:
      '────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────',
    SeparatorUrl: 'xbs:separator',
    VerticalSeparatorTitle: '|'
  },
  Debounce: 300,
  I18n: {
    DefaultLocale: 'en'
  },
  InterfaceReadyTimeout: 100,
  LookaheadMinChars: 2,
  MinApiVersion: '1.1.9',
  PathToAssets: 'assets',
  QrCode: {
    Delimiter: '|$$|'
  },
  ReleaseNotesUrlStem: 'https://github.com/xbrowsersync/app/releases/tag/v',
  ReleaseLatestUrl: 'https://api.github.com/repos/xbrowsersync/app/releases/latest',
  TelemetryUrl: 'https://telemetry.xbrowsersync.org/submit',
  Title: 'xBrowserSync',
  URL: {
    DefaultServiceUrl: 'https://api.xbrowsersync.org',
    HttpRegex: '^https?://\\w+',
    ProtocolRegex: '^[\\w-]+:',
    ValidUrlRegex:
      '(?:[a-z0-9\\u00a1-\\uffff]{3,}:(?:\\/\\/)?)?(?:\\S+(?::\\S*)?@)?(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})|(?:[a-z0-9\\u00a1-\\uffff]{3,}:[a-z0-9\\u00a1-\\uffff]{2,})|(?:(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))|(?:localhost))(?::\\d{2,5})?(?:[/?#]\\S*)?'
  }
};
</file>

<file path="src/modules/shared/global-shared.enum.ts">
enum BrowserName {
  Brave = 'brave',
  Chrome = 'chrome',
  Edge = 'edge'
}

enum MessageCommand {
  SyncBookmarks = 'SYNC_BOOKMARKS',
  RestoreBookmarks = 'RESTORE_BOOKMARKS',
  GetCurrentSync = 'GET_CURRENT_SYNC',
  GetSyncQueueLength = 'GET_SYNC_QUEUE_LENGTH',
  DisableSync = 'DISABLE_SYNC',
  DownloadFile = 'DOWNLOAD_FILE',
  GetPageMetadata = 'GET_PAGE_METADATA',
  EnableEventListeners = 'ENABLE_EVENT_LISTENERS',
  DisableEventListeners = 'DISABLE_EVENT_LISTENERS',
  EnableAutoBackUp = 'ENABLE_AUTO_BACK_UP',
  DisableAutoBackUp = 'DISABLE_AUTO_BACK_UP'
}

enum PlatformType {
  Android = 'android',
  Chromium = 'chromium',
  Firefox = 'firefox'
}

export { BrowserName, MessageCommand, PlatformType };
</file>

<file path="src/modules/shared/global-shared.interface.ts">
import { MessageCommand } from './global-shared.enum';
import { SyncType } from './sync/sync.enum';
import { Sync } from './sync/sync.interface';

export interface I18nObject {
  android?: string;
  default: string;
  chromium?: string;
  key: string;
  firefox?: string;
}

export interface PlatformInfo {
  browser?: string;
  browserVersion?: string;
  device: string;
}

export interface PlatformService {
  checkOptionalNativePermissions: () => ng.IPromise<boolean>;
  disableNativeEventListeners: () => ng.IPromise<void>;
  disableSync: () => ng.IPromise<any>;
  downloadFile: (filename: string, textContents: string, displaySaveDialog?: boolean) => ng.IPromise<string | void>;
  enableNativeEventListeners: () => ng.IPromise<void>;
  getAppVersion: () => ng.IPromise<string>;
  getAppVersionName: () => ng.IPromise<string>;
  getCurrentLocale: () => ng.IPromise<string>;
  getCurrentUrl: () => ng.IPromise<string>;
  getI18nString: (i18nObj: I18nObject) => string;
  getNewTabUrl?: () => string;
  getPageMetadata: (getFullMetadata?: boolean, pageUrl?: string) => ng.IPromise<WebpageMetadata>;
  getPlatformInfo: () => PlatformInfo;
  openUrl: (url: string) => void;
  platformName: string;
  queueLocalResync: () => ng.IPromise<void>;
  queueSync: (sync?: Sync, command?: MessageCommand, runSync?: boolean) => ng.IPromise<void>;
  refreshNativeInterface: (syncEnabled?: boolean, syncType?: SyncType) => ng.IPromise<void>;
  startSyncUpdateChecks: () => ng.IPromise<void>;
  stopSyncUpdateChecks: () => ng.IPromise<void>;
  urlIsSupported: (url: string) => boolean;
}

export interface Url {
  protocol: string;
  host: string;
  hostname: string;
  port: string;
  pathname: string;
  search: string;
  searchObject: any;
  hash: string;
}

export interface WebpageMetadata {
  description?: string;
  tags?: string;
  title?: string;
  url?: string;
}
</file>

<file path="src/modules/shared/global-shared.module.ts">
import { NgModule } from 'angular-ts-decorators';
import { AlertService } from './alert/alert.service';
import { ApiRequestInterceptorFactory } from './api/api-request-interceptor/api-request-interceptor.factory';
import { ApiXbrowsersyncService } from './api/api-xbrowsersync/api-xbrowsersync.service';
import { BackupRestoreService } from './backup-restore/backup-restore.service';
import { BookmarkHelperService } from './bookmark/bookmark-helper/bookmark-helper.service';
import { CryptoService } from './crypto/crypto.service';
import { ExceptionHandlerService } from './errors/exception-handler/exception-handler.service';
import { LogService } from './log/log.service';
import { MetadataService } from './metadata/metadata.service';
import { NetworkService } from './network/network.service';
import { SettingsService } from './settings/settings.service';
import { SyncModule } from './sync/sync.module';
import { TelemetryService } from './telemetry/telemetry.service';
import { UpgradeService } from './upgrade/upgrade.service';
import { UtilityService } from './utility/utility.service';
import { WorkingService } from './working/working.service';

@NgModule({
  id: 'GlobalSharedModule',
  imports: [SyncModule],
  providers: [
    AlertService,
    ApiRequestInterceptorFactory,
    ApiXbrowsersyncService,
    BackupRestoreService,
    BookmarkHelperService,
    CryptoService,
    ExceptionHandlerService,
    LogService,
    MetadataService,
    NetworkService,
    SettingsService,
    TelemetryService,
    UpgradeService,
    UtilityService,
    WorkingService
  ]
})
export class GlobalSharedModule {}
</file>

<file path="src/modules/webext/chromium/chromium-app/chromium-app-backup-restore-settings/chromium-app-backup-restore-settings.component.ts">
import { Component } from 'angular-ts-decorators';
import { WebExtAppBackupRestoreSettingsComponent } from '../../../webext-app/webext-app-backup-restore-settings/webext-app-backup-restore-settings.component';

@Component({
  controllerAs: 'vm',
  selector: 'backupRestoreSettings',
  styles: [require('../../../../app/app-settings/backup-restore-settings/backup-restore-settings.component.scss')],
  template: require('../../../../app/app-settings/backup-restore-settings/backup-restore-settings.component.html')
})
export class ChromiumAppBackupRestoreSettingsComponent extends WebExtAppBackupRestoreSettingsComponent {
  autoBackUpFormComplete(): void {
    super.autoBackUpFormComplete();
    this.displayAutoBackUpConfirmation = true;
    this.appHelperSvc.focusOnElement('.auto-backups-confirmation .focused');
  }
}
</file>

<file path="src/modules/webext/chromium/chromium-app/shared/chromium-app-helper/chromium-app-helper.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { WebExtAppHelperService } from '../../../../webext-app/shared/webext-app-helper/webext-app-helper.service';

@Injectable('AppHelperService')
export class ChromiumAppHelperService extends WebExtAppHelperService {
  getHelpPages(): string[] {
    const pages = [
      this.platformSvc.getI18nString(this.Strings.View.Help.Welcome),
      this.platformSvc.getI18nString(this.Strings.View.Help.BeforeYouBegin),
      this.platformSvc.getI18nString(this.Strings.View.Help.FirstSync),
      this.platformSvc.getI18nString(this.Strings.View.Help.Service),
      this.platformSvc.getI18nString(this.Strings.View.Help.SyncId),
      this.platformSvc.getI18nString(this.Strings.View.Help.ExistingId),
      this.platformSvc.getI18nString(this.Strings.View.Help.Searching),
      this.platformSvc.getI18nString(this.Strings.View.Help.AddingBookmarks),
      this.platformSvc.getI18nString(this.Strings.View.Help.NativeFeatures),
      this.platformSvc.getI18nString(this.Strings.View.Help.BackingUp),
      this.platformSvc.getI18nString(this.Strings.View.Help.Shortcuts),
      this.platformSvc.getI18nString(this.Strings.View.Help.Mobile),
      this.platformSvc.getI18nString(this.Strings.View.Help.FurtherSupport)
    ];

    return pages;
  }
}
</file>

<file path="src/modules/webext/chromium/chromium-app/chromium-app.module.ts">
import angular from 'angular';
import { NgModule } from 'angular-ts-decorators';
import { WebExtAppModule } from '../../webext-app/webext-app.module';
import { ChromiumBookmarkService } from '../shared/chromium-bookmark/chromium-bookmark.service';
import { ChromiumPlatformService } from '../shared/chromium-platform/chromium-platform.service';
import { ChromiumAppBackupRestoreSettingsComponent } from './chromium-app-backup-restore-settings/chromium-app-backup-restore-settings.component';
import { ChromiumAppHelperService } from './shared/chromium-app-helper/chromium-app-helper.service';

@NgModule({
  declarations: [ChromiumAppBackupRestoreSettingsComponent],
  id: 'ChromiumAppModule',
  imports: [WebExtAppModule],
  providers: [ChromiumAppHelperService, ChromiumBookmarkService, ChromiumPlatformService]
})
class ChromiumAppModule {}

angular.element(document).ready(() => {
  angular.bootstrap(document, [(ChromiumAppModule as NgModule).module.name], { strictDi: true });
});
</file>

<file path="src/modules/webext/chromium/chromium-background/chromium-background.module.ts">
import angular from 'angular';
import { NgModule } from 'angular-ts-decorators';
import { WebExtBackgroundModule } from '../../webext-background/webext-background.module';
import { ChromiumBookmarkService } from '../shared/chromium-bookmark/chromium-bookmark.service';
import { ChromiumPlatformService } from '../shared/chromium-platform/chromium-platform.service';

@NgModule({
  id: 'ChromiumBackgroundModule',
  imports: [WebExtBackgroundModule],
  providers: [ChromiumBookmarkService, ChromiumPlatformService]
})
class ChromiumBackgroundModule {}

angular.element(document).ready(() => {
  angular.bootstrap(document, [(ChromiumBackgroundModule as NgModule).module.name]);
});
</file>

<file path="src/modules/webext/chromium/shared/chromium-bookmark/chromium-bookmark.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import browser, { Bookmarks as NativeBookmarks } from 'webextension-polyfill';
import { BookmarkChangeType, BookmarkContainer, BookmarkType } from '../../../../shared/bookmark/bookmark.enum';
import {
  AddNativeBookmarkChangeData,
  Bookmark,
  BookmarkChange,
  ModifyNativeBookmarkChangeData,
  MoveNativeBookmarkChangeData
} from '../../../../shared/bookmark/bookmark.interface';
import {
  BaseError,
  BookmarkMappingNotFoundError,
  ContainerNotFoundError,
  FailedCreateNativeBookmarksError,
  FailedRemoveNativeBookmarksError
} from '../../../../shared/errors/errors';
import Globals from '../../../../shared/global-shared.constants';
import { WebpageMetadata } from '../../../../shared/global-shared.interface';
import { WebExtBookmarkService } from '../../../shared/webext-bookmark/webext-bookmark.service';

@Injectable('BookmarkService')
export class ChromiumBookmarkService extends WebExtBookmarkService {
  otherBookmarksNodeId = '2';
  toolbarBookmarksNodeId = '1';
  unsupportedContainers: string[] = [BookmarkContainer.Menu];

  clearNativeBookmarks(): ng.IPromise<void> {
    // Get native container ids
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
        const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

        // Clear other bookmarks
        const clearOthers = browser.bookmarks
          .getChildren(otherBookmarksId)
          .then((results) => {
            return this.$q.all(
              results.map((child) => {
                return this.removeNativeBookmarks(child.id);
              })
            );
          })
          .catch((err) => {
            this.logSvc.logWarning('Error clearing other bookmarks');
            throw err;
          });

        // Clear bookmarks toolbar if enabled
        const clearToolbar = this.$q((resolve, reject) => {
          return this.settingsSvc
            .syncBookmarksToolbar()
            .then((syncBookmarksToolbar) => {
              if (!syncBookmarksToolbar) {
                this.logSvc.logInfo('Not clearing toolbar');
                resolve();
                return;
              }
              return browser.bookmarks.getChildren(toolbarBookmarksId).then((results) => {
                return this.$q.all(
                  results.map((child) => {
                    return this.removeNativeBookmarks(child.id);
                  })
                );
              });
            })
            .then(resolve)
            .catch((err) => {
              this.logSvc.logWarning('Error clearing bookmarks toolbar');
              reject(err);
            });
        });

        return this.$q.all([clearOthers, clearToolbar]).then(() => {});
      })
      .catch((err) => {
        throw new FailedRemoveNativeBookmarksError(undefined, err);
      });
  }

  convertNativeBookmarkToSeparator(
    bookmark: NativeBookmarks.BookmarkTreeNode
  ): ng.IPromise<NativeBookmarks.BookmarkTreeNode> {
    // Check if bookmark is in toolbar
    return this.isNativeBookmarkInToolbarContainer(bookmark)
      .then((inToolbar) => {
        // Skip process if bookmark is not in toolbar and already native separator
        if (
          (bookmark.url === this.platformSvc.getNewTabUrl() &&
            !inToolbar &&
            bookmark.title === Globals.Bookmarks.HorizontalSeparatorTitle) ||
          (inToolbar && bookmark.title === Globals.Bookmarks.VerticalSeparatorTitle)
        ) {
          return bookmark;
        }

        // Disable event listeners and process conversion
        return this.disableEventListeners()
          .then(() => {
            const title = inToolbar
              ? Globals.Bookmarks.VerticalSeparatorTitle
              : Globals.Bookmarks.HorizontalSeparatorTitle;

            // If already a separator just update the title
            if (
              (!inToolbar && bookmark.title === Globals.Bookmarks.VerticalSeparatorTitle) ||
              (inToolbar && bookmark.title === Globals.Bookmarks.HorizontalSeparatorTitle)
            ) {
              return browser.bookmarks.update(bookmark.id, { title });
            }

            // Remove and recreate bookmark as a separator
            const separator: NativeBookmarks.CreateDetails = {
              index: bookmark.index,
              parentId: bookmark.parentId,
              title,
              url: this.platformSvc.getNewTabUrl()
            };
            return browser.bookmarks.remove(bookmark.id).then(() => {
              return browser.bookmarks.create(separator);
            });
          })
          .finally(() => this.enableEventListeners());
      })
      .then((nativeSeparator: NativeBookmarks.BookmarkTreeNode) => {
        // Set type to separator to identify type when syncing
        nativeSeparator.type = BookmarkType.Separator;
        return nativeSeparator;
      });
  }

  createNativeBookmarksFromBookmarks(bookmarks: Bookmark[]): ng.IPromise<number> {
    // Get containers
    const menuContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Menu, bookmarks);
    const otherContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, bookmarks);
    const toolbarContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Toolbar, bookmarks);

    // Get native container ids
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
        const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

        // Populate menu bookmarks in other bookmarks
        let populateMenu = this.$q.resolve(0);
        if (menuContainer) {
          populateMenu = browser.bookmarks
            .getSubTree(otherBookmarksId)
            .then(() => {
              return this.createNativeBookmarkTree(otherBookmarksId, [menuContainer], toolbarBookmarksId);
            })
            .catch((err) => {
              this.logSvc.logInfo('Error populating bookmarks menu.');
              throw err;
            });
        }

        // Populate other bookmarks
        let populateOther = this.$q.resolve(0);
        if (otherContainer) {
          populateOther = browser.bookmarks
            .getSubTree(otherBookmarksId)
            .then(() => {
              return this.createNativeBookmarkTree(otherBookmarksId, otherContainer.children, toolbarBookmarksId);
            })
            .catch((err) => {
              this.logSvc.logInfo('Error populating other bookmarks.');
              throw err;
            });
        }

        // Populate bookmarks toolbar if enabled
        const populateToolbar = this.$q<number>((resolve, reject) => {
          if (!toolbarContainer) {
            return resolve(0);
          }
          return this.settingsSvc
            .syncBookmarksToolbar()
            .then((syncBookmarksToolbar) => {
              if (!syncBookmarksToolbar) {
                this.logSvc.logInfo('Not populating toolbar');
                resolve();
                return;
              }
              return browser.bookmarks.getSubTree(toolbarBookmarksId).then(() => {
                return this.createNativeBookmarkTree(toolbarBookmarksId, toolbarContainer.children);
              });
            })
            .then(resolve)
            .catch((err) => {
              this.logSvc.logInfo('Error populating bookmarks toolbar.');
              reject(err);
            });
        });

        return this.$q.all([populateMenu, populateOther, populateToolbar]);
      })
      .then((totals) => {
        // Move native unsupported containers into the correct order
        return this.reorderUnsupportedContainers().then(() => {
          return totals.filter(Boolean).reduce((a, b) => a + b, 0);
        });
      });
  }

  createNativeSeparator(
    parentId: string,
    nativeToolbarContainerId: string
  ): ng.IPromise<NativeBookmarks.BookmarkTreeNode> {
    const newSeparator: NativeBookmarks.CreateDetails = {
      parentId,
      title:
        parentId === nativeToolbarContainerId
          ? Globals.Bookmarks.VerticalSeparatorTitle
          : Globals.Bookmarks.HorizontalSeparatorTitle,
      url: this.platformSvc.getNewTabUrl()
    };
    return browser.bookmarks.create(newSeparator).catch((err) => {
      this.logSvc.logInfo('Failed to create native separator');
      throw new FailedCreateNativeBookmarksError(undefined, err);
    });
  }

  disableEventListeners(): ng.IPromise<void> {
    return this.$q
      .all([
        (browser.bookmarks as any).onChildrenReordered.removeListener(this.onNativeBookmarkChildrenReordered),
        browser.bookmarks.onCreated.removeListener(this.onNativeBookmarkCreated),
        browser.bookmarks.onRemoved.removeListener(this.onNativeBookmarkRemoved),
        browser.bookmarks.onChanged.removeListener(this.onNativeBookmarkChanged),
        browser.bookmarks.onMoved.removeListener(this.onNativeBookmarkMoved)
      ])
      .then(() => {})
      .catch((err) => {
        this.logSvc.logWarning('Failed to disable event listeners');
        throw new BaseError(undefined, err);
      });
  }

  enableEventListeners(): ng.IPromise<void> {
    return this.disableEventListeners()
      .then(() => {
        return this.utilitySvc.isSyncEnabled();
      })
      .then((syncEnabled) => {
        if (!syncEnabled) {
          return;
        }
        browser.bookmarks.onCreated.addListener(this.onNativeBookmarkCreated);
        browser.bookmarks.onRemoved.addListener(this.onNativeBookmarkRemoved);
        browser.bookmarks.onChanged.addListener(this.onNativeBookmarkChanged);
        (browser.bookmarks as any).onChildrenReordered.addListener(this.onNativeBookmarkChildrenReordered);
        browser.bookmarks.onMoved.addListener(this.onNativeBookmarkMoved);
      })
      .catch((err) => {
        this.logSvc.logWarning('Failed to enable event listeners');
        throw new BaseError(undefined, err);
      });
  }

  ensureContainersExist(bookmarks: Bookmark[]): Bookmark[] {
    if (angular.isUndefined(bookmarks)) {
      return;
    }

    // Add supported containers
    const bookmarksToReturn = angular.copy(bookmarks);
    this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, bookmarksToReturn, true);
    this.bookmarkHelperSvc.getContainer(BookmarkContainer.Toolbar, bookmarksToReturn, true);

    // Return sorted containers
    return bookmarksToReturn.sort((x, y) => {
      if (x.title < y.title) {
        return -1;
      }
      if (x.title > y.title) {
        return 1;
      }
      return 0;
    });
  }

  getNativeBookmarksAsBookmarks(): ng.IPromise<Bookmark[]> {
    let allNativeBookmarks = [];

    // Get native container ids
    return this.getNativeContainerIds().then((nativeContainerIds) => {
      const menuBookmarksId = nativeContainerIds.get(BookmarkContainer.Menu);
      const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
      const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

      // Get menu bookmarks
      const getMenuBookmarks =
        menuBookmarksId === undefined
          ? this.$q.resolve<Bookmark[]>(undefined)
          : browser.bookmarks.getSubTree(menuBookmarksId).then((subTree) => {
              const [menuContainer] = subTree;
              return this.bookmarkHelperSvc.getNativeBookmarksAsBookmarks(
                this.getNativeBookmarksWithSeparators(menuContainer.children)
              );
            });

      // Get other bookmarks
      const getOtherBookmarks =
        otherBookmarksId === undefined
          ? this.$q.resolve<Bookmark[]>(undefined)
          : browser.bookmarks.getSubTree(otherBookmarksId).then((subTree) => {
              const [otherContainer] = subTree;
              if (otherContainer.children.length === 0) {
                return;
              }

              // Add all bookmarks into flat array
              this.bookmarkHelperSvc.eachBookmark((bookmark) => {
                allNativeBookmarks.push(bookmark);
              }, otherContainer.children);

              // Remove any unsupported container folders present
              const bookmarksWithoutContainers = this.bookmarkHelperSvc
                .getNativeBookmarksAsBookmarks(this.getNativeBookmarksWithSeparators(otherContainer.children))
                .filter((x) => {
                  return !this.unsupportedContainers.find((y) => {
                    return y === x.title;
                  });
                });
              return bookmarksWithoutContainers;
            });

      // Get toolbar bookmarks if enabled
      const getToolbarBookmarks =
        toolbarBookmarksId === undefined
          ? this.$q.resolve<Bookmark[]>(undefined)
          : browser.bookmarks.getSubTree(toolbarBookmarksId).then((results) => {
              const [toolbarContainer] = results;
              return this.settingsSvc.syncBookmarksToolbar().then((syncBookmarksToolbar) => {
                if (syncBookmarksToolbar && toolbarContainer.children.length > 0) {
                  // Add all bookmarks into flat array
                  this.bookmarkHelperSvc.eachBookmark((bookmark) => {
                    allNativeBookmarks.push(bookmark);
                  }, toolbarContainer.children);
                  return this.bookmarkHelperSvc.getNativeBookmarksAsBookmarks(
                    this.getNativeBookmarksWithSeparators(toolbarContainer.children)
                  );
                }
              });
            });

      return this.$q.all([getMenuBookmarks, getOtherBookmarks, getToolbarBookmarks]).then((results) => {
        const [menuBookmarks, otherBookmarks, toolbarBookmarks] = results;
        const bookmarks: Bookmark[] = [];

        // Add other container if bookmarks present
        const otherContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, bookmarks, true);
        if (otherBookmarks?.length > 0) {
          otherContainer.children = otherBookmarks;
        }

        // Add toolbar container if bookmarks present
        const toolbarContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Toolbar, bookmarks, true);
        if (toolbarBookmarks?.length > 0) {
          toolbarContainer.children = toolbarBookmarks;
        }

        // Add menu container if bookmarks present
        let menuContainer: Bookmark;
        if (menuBookmarksId !== undefined) {
          menuContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Menu, bookmarks, true);
          if (menuBookmarks?.length > 0) {
            menuContainer.children = menuBookmarks;
          }
        }

        // Filter containers from flat array of bookmarks
        [otherContainer, toolbarContainer, menuContainer].forEach((container) => {
          if (!container) {
            return;
          }

          allNativeBookmarks = allNativeBookmarks.filter((bookmark) => {
            return bookmark.title !== container.title;
          });
        });

        // Sort by date added asc
        allNativeBookmarks = allNativeBookmarks.sort((x, y) => {
          return x.dateAdded - y.dateAdded;
        });

        // Iterate native bookmarks to add unique bookmark ids in correct order
        allNativeBookmarks.forEach((nativeBookmark) => {
          this.bookmarkHelperSvc.eachBookmark((bookmark) => {
            if (
              !bookmark.id &&
              ((!nativeBookmark.url && bookmark.title === nativeBookmark.title) ||
                (nativeBookmark.url && bookmark.url === nativeBookmark.url))
            ) {
              bookmark.id = this.bookmarkHelperSvc.getNewBookmarkId(bookmarks);
            }
          }, bookmarks);
        });

        // Find and fix any bookmarks missing ids
        this.bookmarkHelperSvc.eachBookmark((bookmark) => {
          if (!bookmark.id) {
            bookmark.id = this.bookmarkHelperSvc.getNewBookmarkId(bookmarks);
          }
        }, bookmarks);

        return bookmarks;
      });
    });
  }

  getNativeBookmarksWithSeparators(
    nativeBookmarks: NativeBookmarks.BookmarkTreeNode[]
  ): NativeBookmarks.BookmarkTreeNode[] {
    // Check very bookmark setting type to separator to identify type when syncing
    this.bookmarkHelperSvc.eachBookmark((bookmark) => {
      if (this.isSeparator(bookmark)) {
        bookmark.type = BookmarkType.Separator;
      }
      return bookmark;
    }, nativeBookmarks);
    return nativeBookmarks;
  }

  getNativeContainerIds(): ng.IPromise<Map<BookmarkContainer, string>> {
    return this.utilitySvc
      .isSyncEnabled()
      .then((syncEnabled) => (syncEnabled ? this.bookmarkHelperSvc.getCachedBookmarks() : undefined))
      .then((bookmarks) => {
        // Initialise container ids object using containers defined in bookmarks
        const containerIds = new Map<BookmarkContainer, string>();
        if (!angular.isUndefined(bookmarks)) {
          bookmarks.forEach((x) => {
            containerIds.set(x.title as BookmarkContainer, undefined);
          });
        }

        // Populate container ids
        return browser.bookmarks.getTree().then((tree) => {
          // Get the root child nodes
          const [root] = tree;
          const otherBookmarksNode = root.children.find((x) => {
            return x.id === this.otherBookmarksNodeId;
          });
          const toolbarBookmarksNode = root.children.find((x) => {
            return x.id === this.toolbarBookmarksNodeId;
          });

          // Throw an error if a native container node is not found
          if (!otherBookmarksNode || !toolbarBookmarksNode) {
            if (!otherBookmarksNode) {
              this.logSvc.logWarning('Missing container: other bookmarks');
            }
            if (!toolbarBookmarksNode) {
              this.logSvc.logWarning('Missing container: toolbar bookmarks');
            }
            throw new ContainerNotFoundError();
          }

          // Check for unsupported containers
          const menuBookmarksNode = otherBookmarksNode.children.find((x) => {
            return x.title === BookmarkContainer.Menu;
          });

          // Add container ids to result
          containerIds.set(BookmarkContainer.Other, otherBookmarksNode.id);
          containerIds.set(BookmarkContainer.Toolbar, toolbarBookmarksNode.id);
          if (!angular.isUndefined(menuBookmarksNode)) {
            containerIds.set(BookmarkContainer.Menu, menuBookmarksNode.id);
          }
          return containerIds;
        });
      });
  }

  isSeparator(nativeBookmark: NativeBookmarks.BookmarkTreeNode): boolean {
    // Native bookmark is separator if title is dashes or designated separator title
    // and has no url and no children
    const separatorRegex = /^[-─]{1,}$/;
    return (
      !angular.isUndefined(nativeBookmark.title) &&
      ((separatorRegex.test(nativeBookmark.title ?? '') && !nativeBookmark.children?.length) ||
        ((nativeBookmark.title!.indexOf(Globals.Bookmarks.HorizontalSeparatorTitle) >= 0 ||
          nativeBookmark.title === Globals.Bookmarks.VerticalSeparatorTitle) &&
          nativeBookmark.url === this.platformSvc.getNewTabUrl!()))
    );
  }

  @boundMethod
  onNativeBookmarkChildrenReordered(...args: any[]): void {
    this.logSvc.logInfo('onChildrenReordered event detected');
    this.queueNativeBookmarkEvent(BookmarkChangeType.ChildrenReordered, ...args);
  }

  syncNativeBookmarkChanged(id?: string): ng.IPromise<void> {
    // Retrieve full bookmark info
    return browser.bookmarks.getSubTree(id).then((results) => {
      const [changedBookmark] = results;

      // If bookmark is separator update native bookmark properties
      (this.isSeparator(changedBookmark)
        ? this.convertNativeBookmarkToSeparator(changedBookmark)
        : this.$q.resolve(changedBookmark)
      ).then((bookmarkNode) => {
        // If the bookmark was converted to a separator, update id mapping
        let updateMappingPromise: ng.IPromise<void>;
        if (bookmarkNode.id !== id) {
          updateMappingPromise = this.bookmarkIdMapperSvc.get(id).then((idMapping) => {
            if (!idMapping) {
              throw new BookmarkMappingNotFoundError();
            }

            return this.bookmarkIdMapperSvc.remove(idMapping.syncedId).then(() => {
              const newMapping = this.bookmarkIdMapperSvc.createMapping(idMapping.syncedId, bookmarkNode.id);
              return this.bookmarkIdMapperSvc.add(newMapping);
            });
          });
        } else {
          updateMappingPromise = this.$q.resolve();
        }
        return updateMappingPromise.then(() => {
          // Create change info
          const data: ModifyNativeBookmarkChangeData = {
            nativeBookmark: bookmarkNode
          };
          const changeInfo: BookmarkChange = {
            changeData: data,
            type: BookmarkChangeType.Modify
          };

          // Queue sync
          this.syncChange(changeInfo);
        });
      });
    });
  }

  syncNativeBookmarkCreated(id?: string, nativeBookmark?: NativeBookmarks.BookmarkTreeNode): ng.IPromise<void> {
    // If bookmark is separator update native bookmark properties
    return (
      this.isSeparator(nativeBookmark)
        ? this.convertNativeBookmarkToSeparator(nativeBookmark)
        : this.$q.resolve(nativeBookmark)
    ).then((bookmarkNode) => {
      // Create change info
      const data: AddNativeBookmarkChangeData = {
        nativeBookmark: bookmarkNode
      };
      const changeInfo: BookmarkChange = {
        changeData: data,
        type: BookmarkChangeType.Add
      };

      // If bookmark is not folder or separator, get page metadata from current tab
      return (
        bookmarkNode.url && !this.isSeparator(bookmarkNode)
          ? this.checkPermsAndGetPageMetadata()
          : this.$q.resolve<WebpageMetadata>(null)
      ).then((metadata) => {
        // Add metadata if bookmark is current tab location
        if (metadata && bookmarkNode.url === metadata.url) {
          (changeInfo.changeData as AddNativeBookmarkChangeData).nativeBookmark.title = this.utilitySvc.stripTags(
            metadata.title
          );
          (changeInfo.changeData as AddNativeBookmarkChangeData).nativeBookmark.description = this.utilitySvc.stripTags(
            metadata.description
          );
          (changeInfo.changeData as AddNativeBookmarkChangeData).nativeBookmark.tags =
            this.utilitySvc.getTagArrayFromText(metadata.tags);
        }

        // Queue sync
        this.syncChange(changeInfo);
      });
    });
  }

  syncNativeBookmarkMoved(id?: string, moveInfo?: NativeBookmarks.OnMovedMoveInfoType): ng.IPromise<void> {
    return browser.bookmarks.get(id).then((results) => {
      const [movedBookmark] = results;

      // If bookmark is separator update native bookmark properties
      return (
        this.isSeparator(movedBookmark)
          ? this.convertNativeBookmarkToSeparator(movedBookmark)
          : this.$q.resolve(movedBookmark)
      ).then((bookmarkNode) => {
        // If the bookmark was converted to a separator, update id mapping
        let updateMappingPromise: ng.IPromise<void>;
        if (bookmarkNode.id !== id) {
          updateMappingPromise = this.bookmarkIdMapperSvc.get(id).then((idMapping) => {
            if (!idMapping) {
              throw new BookmarkMappingNotFoundError();
            }

            return this.bookmarkIdMapperSvc.remove(idMapping.syncedId).then(() => {
              const newMapping = this.bookmarkIdMapperSvc.createMapping(idMapping.syncedId, bookmarkNode.id);
              return this.bookmarkIdMapperSvc.add(newMapping);
            });
          });
        } else {
          updateMappingPromise = this.$q.resolve();
        }
        return updateMappingPromise.then(() => {
          // Create change info
          const data: MoveNativeBookmarkChangeData = {
            ...moveInfo,
            id
          };
          const changeInfo: BookmarkChange = {
            changeData: data,
            type: BookmarkChangeType.Move
          };

          // Queue sync
          this.syncChange(changeInfo);
        });
      });
    });
  }
}
</file>

<file path="src/modules/webext/chromium/shared/chromium-platform/chromium-platform.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { BrowserName, PlatformType } from '../../../../shared/global-shared.enum';
import { WebExtPlatformService } from '../../../shared/webext-platform/webext-platform.service';

@Injectable('PlatformService')
export class ChromiumPlatformService extends WebExtPlatformService {
  platformName = PlatformType.Chromium;

  getNewTabUrl(): string {
    const browserName = this.utilitySvc.getBrowserName();
    switch (browserName) {
      case BrowserName.Edge:
        return 'edge://newtab/';
      default:
        return 'chrome://newtab/';
    }
  }

  urlIsNativeConfigPage(url: string): boolean {
    return /(chrome|edge):\/\//i.test(url ?? '');
  }

  urlIsSupported(url: string): boolean {
    return /^[\w-]+:/i.test(url ?? '');
  }
}
</file>

<file path="src/modules/webext/firefox/firefox-app/firefox-app-backup-restore-settings/firefox-app-backup-restore-settings.component.ts">
import { Component } from 'angular-ts-decorators';
import { WebExtAppBackupRestoreSettingsComponent } from '../../../webext-app/webext-app-backup-restore-settings/webext-app-backup-restore-settings.component';

@Component({
  controllerAs: 'vm',
  selector: 'backupRestoreSettings',
  styles: [require('../../../../app/app-settings/backup-restore-settings/backup-restore-settings.component.scss')],
  template: require('../../../../app/app-settings/backup-restore-settings/backup-restore-settings.component.html')
})
export class FirefoxAppBackupRestoreSettingsComponent extends WebExtAppBackupRestoreSettingsComponent {
  autoBackUpFormComplete(): void {
    super.autoBackUpFormComplete();
    this.confirmAutoBackUpForm();
  }
}
</file>

<file path="src/modules/webext/firefox/firefox-app/shared/firefox-app-helper/firefox-app-helper.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { WebExtAppHelperService } from '../../../../webext-app/shared/webext-app-helper/webext-app-helper.service';

@Injectable('AppHelperService')
export class FirefoxAppHelperService extends WebExtAppHelperService {
  getHelpPages(): string[] {
    const pages = [
      this.platformSvc.getI18nString(this.Strings.View.Help.Welcome),
      this.platformSvc.getI18nString(this.Strings.View.Help.BeforeYouBegin),
      this.platformSvc.getI18nString(this.Strings.View.Help.FirstSync),
      this.platformSvc.getI18nString(this.Strings.View.Help.Service),
      this.platformSvc.getI18nString(this.Strings.View.Help.SyncId),
      this.platformSvc.getI18nString(this.Strings.View.Help.ExistingId),
      this.platformSvc.getI18nString(this.Strings.View.Help.Searching),
      this.platformSvc.getI18nString(this.Strings.View.Help.AddingBookmarks),
      this.platformSvc.getI18nString(this.Strings.View.Help.NativeFeatures),
      this.platformSvc.getI18nString(this.Strings.View.Help.BackingUp),
      this.platformSvc.getI18nString(this.Strings.View.Help.Shortcuts),
      this.platformSvc.getI18nString(this.Strings.View.Help.Mobile),
      this.platformSvc.getI18nString(this.Strings.View.Help.FurtherSupport)
    ];

    return pages;
  }
}
</file>

<file path="src/modules/webext/firefox/firefox-app/firefox-app.module.ts">
import angular from 'angular';
import { NgModule } from 'angular-ts-decorators';
import { WebExtAppModule } from '../../webext-app/webext-app.module';
import { FirefoxBookmarkService } from '../shared/firefox-bookmark/firefox-bookmark.service';
import { FirefoxPlatformService } from '../shared/firefox-platform/firefox-platform.service';
import { FirefoxAppBackupRestoreSettingsComponent } from './firefox-app-backup-restore-settings/firefox-app-backup-restore-settings.component';
import { FirefoxAppHelperService } from './shared/firefox-app-helper/firefox-app-helper.service';

@NgModule({
  declarations: [FirefoxAppBackupRestoreSettingsComponent],
  id: 'FirefoxAppModule',
  imports: [WebExtAppModule],
  providers: [FirefoxAppHelperService, FirefoxBookmarkService, FirefoxPlatformService]
})
class FirefoxAppModule {}

angular.element(document).ready(() => {
  angular.bootstrap(document, [(FirefoxAppModule as NgModule).module.name], { strictDi: true });
});
</file>

<file path="src/modules/webext/firefox/firefox-background/firefox-background.module.ts">
import angular from 'angular';
import { NgModule } from 'angular-ts-decorators';
import browser from 'webextension-polyfill';
import { WebExtBackgroundModule } from '../../webext-background/webext-background.module';
import { FirefoxBookmarkService } from '../shared/firefox-bookmark/firefox-bookmark.service';
import { FirefoxPlatformService } from '../shared/firefox-platform/firefox-platform.service';

@NgModule({
  id: 'FirefoxBackgroundModule',
  imports: [WebExtBackgroundModule],
  providers: [FirefoxBookmarkService, FirefoxPlatformService]
})
class FirefoxBackgroundModule {}

(FirefoxBackgroundModule as NgModule).module.config([
  '$compileProvider',
  '$httpProvider',
  ($compileProvider: ng.ICompileProvider, $httpProvider: ng.IHttpProvider) => {
    $compileProvider.debugInfoEnabled(false);
    $httpProvider.interceptors.push('ApiRequestInterceptorFactory');
  }
]);

angular.element(document).ready(() => {
  angular.bootstrap(document, [(FirefoxBackgroundModule as NgModule).module.name]);
});

// Set synchronous event handlers
browser.runtime.onInstalled.addListener((details) => {
  // Store event details as element data
  const element = document.querySelector('#install');
  angular.element(element).data('details', details);
  (document.querySelector('#install') as HTMLButtonElement).click();
});
browser.runtime.onStartup.addListener(() => {
  (document.querySelector('#startup') as HTMLButtonElement).click();
});
</file>

<file path="src/modules/webext/firefox/shared/firefox-bookmark/firefox-bookmark.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import browser, { Bookmarks as NativeBookmarks } from 'webextension-polyfill';
import { BookmarkChangeType, BookmarkContainer } from '../../../../shared/bookmark/bookmark.enum';
import {
  AddNativeBookmarkChangeData,
  Bookmark,
  BookmarkChange,
  ModifyNativeBookmarkChangeData,
  MoveNativeBookmarkChangeData
} from '../../../../shared/bookmark/bookmark.interface';
import {
  BaseError,
  ContainerNotFoundError,
  FailedCreateNativeBookmarksError,
  FailedRemoveNativeBookmarksError
} from '../../../../shared/errors/errors';
import { WebpageMetadata } from '../../../../shared/global-shared.interface';
import { WebExtBookmarkService } from '../../../shared/webext-bookmark/webext-bookmark.service';

@Injectable('BookmarkService')
export class FirefoxBookmarkService extends WebExtBookmarkService {
  unsupportedContainers: string[] = [];

  clearNativeBookmarks(): ng.IPromise<void> {
    // Get native container ids
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        const menuBookmarksId = nativeContainerIds.get(BookmarkContainer.Menu);
        const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
        const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

        // Clear menu bookmarks
        const clearMenu = browser.bookmarks
          .getChildren(menuBookmarksId)
          .then((results) => {
            return this.$q.all(
              results.map((child) => {
                return this.removeNativeBookmarks(child.id);
              })
            );
          })
          .catch((err) => {
            this.logSvc.logWarning('Error clearing bookmarks menu');
            throw err;
          });

        // Clear other bookmarks
        const clearOthers = browser.bookmarks
          .getChildren(otherBookmarksId)
          .then((results) => {
            return this.$q.all(
              results.map((child) => {
                return this.removeNativeBookmarks(child.id);
              })
            );
          })
          .catch((err) => {
            this.logSvc.logWarning('Error clearing other bookmarks');
            throw err;
          });

        // Clear bookmarks toolbar if enabled
        const clearToolbar = this.$q((resolve, reject) => {
          return this.settingsSvc
            .syncBookmarksToolbar()
            .then((syncBookmarksToolbar) => {
              if (!syncBookmarksToolbar) {
                this.logSvc.logInfo('Not clearing toolbar');
                resolve();
                return;
              }
              return browser.bookmarks.getChildren(toolbarBookmarksId).then((results) => {
                return this.$q.all(
                  results.map((child) => {
                    return this.removeNativeBookmarks(child.id);
                  })
                );
              });
            })
            .then(resolve)
            .catch((err) => {
              this.logSvc.logWarning('Error clearing bookmarks toolbar');
              reject(err);
            });
        });

        return this.$q.all([clearMenu, clearOthers, clearToolbar]).then(() => {});
      })
      .catch((err) => {
        throw new FailedRemoveNativeBookmarksError(undefined, err);
      });
  }

  createNativeBookmarksFromBookmarks(bookmarks: Bookmark[]): ng.IPromise<number> {
    // Get containers
    const menuContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Menu, bookmarks);
    const otherContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, bookmarks);
    const toolbarContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Toolbar, bookmarks);

    // Get native container ids
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        const menuBookmarksId = nativeContainerIds.get(BookmarkContainer.Menu);
        const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
        const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

        // Populate menu bookmarks
        let populateMenu = this.$q.resolve(0);
        if (menuContainer) {
          populateMenu = browser.bookmarks
            .getSubTree(menuBookmarksId)
            .then(() => {
              return this.createNativeBookmarkTree(menuBookmarksId, menuContainer.children);
            })
            .catch((err) => {
              this.logSvc.logInfo('Error populating bookmarks menu.');
              throw err;
            });
        }

        // Populate other bookmarks
        let populateOther = this.$q.resolve(0);
        if (otherContainer) {
          populateOther = browser.bookmarks
            .getSubTree(otherBookmarksId)
            .then(() => {
              return this.createNativeBookmarkTree(otherBookmarksId, otherContainer.children);
            })
            .catch((err) => {
              this.logSvc.logInfo('Error populating other bookmarks.');
              throw err;
            });
        }

        // Populate bookmarks toolbar if enabled
        const populateToolbar = this.$q<number>((resolve, reject) => {
          if (!toolbarContainer) {
            return resolve(0);
          }

          return this.settingsSvc
            .syncBookmarksToolbar()
            .then((syncBookmarksToolbar) => {
              if (!syncBookmarksToolbar) {
                this.logSvc.logInfo('Not populating toolbar');
                resolve();
                return;
              }

              return browser.bookmarks.getSubTree(toolbarBookmarksId).then(() => {
                return this.createNativeBookmarkTree(toolbarBookmarksId, toolbarContainer.children);
              });
            })
            .then(resolve)
            .catch((err) => {
              this.logSvc.logInfo('Error populating bookmarks toolbar.');
              reject(err);
            });
        });

        return this.$q.all([populateMenu, populateOther, populateToolbar]);
      })
      .then((totals) => {
        // Move native unsupported containers into the correct order
        return this.reorderUnsupportedContainers().then(() => {
          return totals.filter(Boolean).reduce((a, b) => a + b, 0);
        });
      });
  }

  createNativeSeparator(parentId: string): ng.IPromise<NativeBookmarks.BookmarkTreeNode> {
    const newSeparator: NativeBookmarks.CreateDetails = {
      parentId,
      type: 'separator'
    };
    return browser.bookmarks.create(newSeparator).catch((err) => {
      this.logSvc.logInfo('Failed to create native separator');
      throw new FailedCreateNativeBookmarksError(undefined, err);
    });
  }

  disableEventListeners(): ng.IPromise<void> {
    return this.$q
      .all([
        browser.bookmarks.onCreated.removeListener(this.onNativeBookmarkCreated),
        browser.bookmarks.onRemoved.removeListener(this.onNativeBookmarkRemoved),
        browser.bookmarks.onChanged.removeListener(this.onNativeBookmarkChanged),
        browser.bookmarks.onMoved.removeListener(this.onNativeBookmarkMoved)
      ])
      .then(() => {})
      .catch((err) => {
        this.logSvc.logWarning('Failed to disable event listeners');
        throw new BaseError(undefined, err);
      });
  }

  enableEventListeners(): ng.IPromise<void> {
    return this.disableEventListeners()
      .then(() => {
        return this.utilitySvc.isSyncEnabled();
      })
      .then((syncEnabled) => {
        if (!syncEnabled) {
          return;
        }
        browser.bookmarks.onCreated.addListener(this.onNativeBookmarkCreated);
        browser.bookmarks.onRemoved.addListener(this.onNativeBookmarkRemoved);
        browser.bookmarks.onChanged.addListener(this.onNativeBookmarkChanged);
        browser.bookmarks.onMoved.addListener(this.onNativeBookmarkMoved);
      })
      .catch((err) => {
        this.logSvc.logWarning('Failed to enable event listeners');
        throw new BaseError(undefined, err);
      });
  }

  ensureContainersExist(bookmarks: Bookmark[]): Bookmark[] {
    if (angular.isUndefined(bookmarks)) {
      return;
    }

    // Add supported containers
    const bookmarksToReturn = angular.copy(bookmarks);
    this.bookmarkHelperSvc.getContainer(BookmarkContainer.Menu, bookmarksToReturn, true);
    this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, bookmarksToReturn, true);
    this.bookmarkHelperSvc.getContainer(BookmarkContainer.Toolbar, bookmarksToReturn, true);

    // Return sorted containers
    return bookmarksToReturn.sort((x, y) => {
      if (x.title < y.title) {
        return -1;
      }
      if (x.title > y.title) {
        return 1;
      }
      return 0;
    });
  }

  fixMultipleMoveOldIndexes(): void {
    const processBatch = (batch) => {
      // Adjust oldIndexes if bookmarks moved to different parent or to higher indexes
      const [moveInfo] = batch;
      if (moveInfo.parentId !== moveInfo.oldParentId || moveInfo.index > moveInfo.oldIndex) {
        for (let i = batch.length - 1; i >= 0; i -= 1) {
          batch[i].oldIndex -= 1;
        }
      }
    };

    const finalBatch = this.nativeBookmarkEventsQueue.reduce((currentBatch, currentEvent, currentIndex) => {
      // Check the current event is a move
      if (currentEvent[0] === this.syncNativeBookmarkMoved) {
        // If no events in batch, add this as the first and continue
        if (currentBatch.length === 0) {
          currentBatch.push(currentEvent[1][1]);
          return currentBatch;
        }

        // Otherwise check if this is part of the batch (will have same parent and index as first event)
        const currentMoveInfo = currentEvent[1][1];
        if (
          currentMoveInfo.parentId === currentBatch[0].parentId &&
          (currentMoveInfo.index === currentBatch[0].index ||
            currentMoveInfo.index === this.nativeBookmarkEventsQueue[currentIndex - 1][1][1].index + 1)
        ) {
          currentBatch.push(currentMoveInfo);
          return currentBatch;
        }
      }

      if (currentBatch.length > 0) {
        // Process current batch
        processBatch(currentBatch);
      }

      // Return empty batch
      return [];
    }, []);

    if (finalBatch.length > 0) {
      // Process final batch
      processBatch(finalBatch);
    }
  }

  getNativeBookmarksAsBookmarks(): ng.IPromise<Bookmark[]> {
    let allNativeBookmarks = [];

    // Get native container ids
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        const menuBookmarksId = nativeContainerIds.get(BookmarkContainer.Menu);
        const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
        const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

        // Get menu bookmarks
        const getMenuBookmarks =
          menuBookmarksId === undefined
            ? this.$q.resolve<Bookmark[]>(undefined)
            : browser.bookmarks.getSubTree(menuBookmarksId).then((subTree) => {
                const [menuContainer] = subTree;
                // Add all bookmarks into flat array
                this.bookmarkHelperSvc.eachBookmark((bookmark) => {
                  allNativeBookmarks.push(bookmark);
                }, menuContainer.children);
                return this.bookmarkHelperSvc.getNativeBookmarksAsBookmarks(menuContainer.children);
              });

        // Get other bookmarks
        const getOtherBookmarks =
          otherBookmarksId === undefined
            ? this.$q.resolve<Bookmark[]>(undefined)
            : browser.bookmarks.getSubTree(otherBookmarksId).then((subTree) => {
                const [otherContainer] = subTree;
                if (otherContainer.children.length === 0) {
                  return;
                }

                // Add all bookmarks into flat array
                this.bookmarkHelperSvc.eachBookmark((bookmark) => {
                  allNativeBookmarks.push(bookmark);
                }, otherContainer.children);

                // Convert native bookmarks sub tree to bookmarks
                const bookmarks = this.bookmarkHelperSvc.getNativeBookmarksAsBookmarks(otherContainer.children);

                // Remove any unsupported container folders present
                const bookmarksWithoutContainers = bookmarks.filter((x) => {
                  return !this.unsupportedContainers.find((y) => {
                    return y === x.title;
                  });
                });
                return bookmarksWithoutContainers;
              });

        // Get toolbar bookmarks if enabled
        const getToolbarBookmarks =
          toolbarBookmarksId === undefined
            ? this.$q.resolve<Bookmark[]>(undefined)
            : browser.bookmarks.getSubTree(toolbarBookmarksId).then((results) => {
                const [toolbarContainer] = results;
                return this.settingsSvc.syncBookmarksToolbar().then((syncBookmarksToolbar) => {
                  if (syncBookmarksToolbar && toolbarContainer.children.length > 0) {
                    // Add all bookmarks into flat array
                    this.bookmarkHelperSvc.eachBookmark((bookmark) => {
                      allNativeBookmarks.push(bookmark);
                    }, toolbarContainer.children);
                    return this.bookmarkHelperSvc.getNativeBookmarksAsBookmarks(toolbarContainer.children);
                  }
                });
              });

        return this.$q.all([getMenuBookmarks, getOtherBookmarks, getToolbarBookmarks]);
      })
      .then((results) => {
        const [menuBookmarks, otherBookmarks, toolbarBookmarks] = results;
        const bookmarks: Bookmark[] = [];

        // Add other container if bookmarks present
        const otherContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Other, bookmarks, true);
        if (otherBookmarks?.length > 0) {
          otherContainer.children = otherBookmarks;
        }

        // Add toolbar container if bookmarks present
        const toolbarContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Toolbar, bookmarks, true);
        if (toolbarBookmarks?.length > 0) {
          toolbarContainer.children = toolbarBookmarks;
        }

        // Add menu container if bookmarks present
        const menuContainer = this.bookmarkHelperSvc.getContainer(BookmarkContainer.Menu, bookmarks, true);
        if (menuBookmarks?.length > 0) {
          menuContainer.children = menuBookmarks;
        }

        // Filter containers from flat array of bookmarks
        [otherContainer, toolbarContainer, menuContainer].forEach((container) => {
          if (!container) {
            return;
          }

          allNativeBookmarks = allNativeBookmarks.filter((bookmark) => {
            return bookmark.title !== container.title;
          });
        });

        // Sort by date added asc
        allNativeBookmarks = allNativeBookmarks.sort((x, y) => {
          return x.dateAdded - y.dateAdded;
        });

        // Iterate native bookmarks to add unique bookmark ids in correct order
        allNativeBookmarks.forEach((nativeBookmark) => {
          this.bookmarkHelperSvc.eachBookmark((bookmark) => {
            if (
              !bookmark.id &&
              ((!nativeBookmark.url && bookmark.title === nativeBookmark.title) ||
                (nativeBookmark.url && bookmark.url === nativeBookmark.url))
            ) {
              bookmark.id = this.bookmarkHelperSvc.getNewBookmarkId(bookmarks);
            }
          }, bookmarks);
        });

        // Find and fix any bookmarks missing ids
        this.bookmarkHelperSvc.eachBookmark((bookmark) => {
          if (!bookmark.id) {
            bookmark.id = this.bookmarkHelperSvc.getNewBookmarkId(bookmarks);
          }
        }, bookmarks);

        return bookmarks;
      });
  }

  getNativeContainerIds(): ng.IPromise<Map<BookmarkContainer, string>> {
    return this.utilitySvc
      .isSyncEnabled()
      .then((syncEnabled) => (syncEnabled ? this.bookmarkHelperSvc.getCachedBookmarks() : undefined))
      .then((bookmarks) => {
        // Initialise container ids object using containers defined in bookmarks
        const containerIds = new Map<BookmarkContainer, string>();
        if (!angular.isUndefined(bookmarks)) {
          bookmarks.forEach((x) => {
            containerIds.set(x.title as BookmarkContainer, undefined);
          });
        }

        // Populate container ids
        return browser.bookmarks.getTree().then((tree) => {
          // Get the root child nodes
          const [root] = tree;
          const menuBookmarksNode = root.children.find((x) => {
            return x.id === 'menu________';
          });
          const otherBookmarksNode = root.children.find((x) => {
            return x.id === 'unfiled_____';
          });
          const toolbarBookmarksNode = root.children.find((x) => {
            return x.id === 'toolbar_____';
          });

          // Throw an error if a native container is not found
          if (!menuBookmarksNode || !otherBookmarksNode || !toolbarBookmarksNode) {
            if (!menuBookmarksNode) {
              this.logSvc.logWarning('Missing container: menu bookmarks');
            }
            if (!otherBookmarksNode) {
              this.logSvc.logWarning('Missing container: other bookmarks');
            }
            if (!toolbarBookmarksNode) {
              this.logSvc.logWarning('Missing container: toolbar bookmarks');
            }
            throw new ContainerNotFoundError();
          }

          // Add container ids to result
          containerIds.set(BookmarkContainer.Menu, menuBookmarksNode.id);
          containerIds.set(BookmarkContainer.Other, otherBookmarksNode.id);
          containerIds.set(BookmarkContainer.Toolbar, toolbarBookmarksNode.id);
          return containerIds;
        });
      });
  }

  processNativeBookmarkEventsQueue(): void {
    // Fix incorrect oldIndex values for multiple moves
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1556427
    this.fixMultipleMoveOldIndexes();
    super.processNativeBookmarkEventsQueue();
  }

  syncNativeBookmarkChanged(id: string): ng.IPromise<void> {
    // Retrieve full bookmark info
    return browser.bookmarks.getSubTree(id).then((results) => {
      const [changedBookmark] = results;

      // Create change info
      const data: ModifyNativeBookmarkChangeData = {
        nativeBookmark: changedBookmark
      };
      const changeInfo: BookmarkChange = {
        changeData: data,
        type: BookmarkChangeType.Modify
      };

      // Queue sync
      this.syncChange(changeInfo);
    });
  }

  syncNativeBookmarkCreated(id: string, nativeBookmark: NativeBookmarks.BookmarkTreeNode): ng.IPromise<void> {
    // Create change info
    const data: AddNativeBookmarkChangeData = {
      nativeBookmark
    };
    const changeInfo: BookmarkChange = {
      changeData: data,
      type: BookmarkChangeType.Add
    };

    // If bookmark is not folder or separator, get page metadata from current tab
    return (
      nativeBookmark.url && !this.bookmarkHelperSvc.nativeBookmarkIsSeparator(nativeBookmark)
        ? this.platformSvc.getPageMetadata()
        : this.$q.resolve<WebpageMetadata>(null)
    ).then((metadata) => {
      // Add metadata if bookmark is current tab location
      if (metadata && nativeBookmark.url === metadata.url) {
        (changeInfo.changeData as AddNativeBookmarkChangeData).nativeBookmark.title = this.utilitySvc.stripTags(
          metadata.title
        );
        (changeInfo.changeData as AddNativeBookmarkChangeData).nativeBookmark.description = this.utilitySvc.stripTags(
          metadata.description
        );
        (changeInfo.changeData as AddNativeBookmarkChangeData).nativeBookmark.tags =
          this.utilitySvc.getTagArrayFromText(metadata.tags);
      }

      // Queue sync
      this.syncChange(changeInfo);
      return this.$q.resolve();
    });
  }

  syncNativeBookmarkMoved(id: string, moveInfo: NativeBookmarks.OnMovedMoveInfoType): ng.IPromise<void> {
    // Create change info
    const data: MoveNativeBookmarkChangeData = {
      ...moveInfo,
      id
    };
    const changeInfo: BookmarkChange = {
      changeData: data,
      type: BookmarkChangeType.Move
    };

    // Queue sync
    this.syncChange(changeInfo);
    return this.$q.resolve();
  }
}
</file>

<file path="src/modules/webext/firefox/shared/firefox-platform/firefox-platform.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import browser from 'webextension-polyfill';
import { PlatformType } from '../../../../shared/global-shared.enum';
import { WebExtPlatformService } from '../../../shared/webext-platform/webext-platform.service';

@Injectable('PlatformService')
export class FirefoxPlatformService extends WebExtPlatformService {
  platformName = PlatformType.Firefox;

  getNewTabUrl(): string {
    return 'about:newtab';
  }

  @boundMethod
  openUrl(url: string): void {
    // If url is native config page, open new tab intead
    if (this.urlIsNativeConfigPage(url)) {
      browser.tabs.create({}).then(window.close);
      return;
    }
    super.openUrl(url);
  }

  urlIsNativeConfigPage(url: string): boolean {
    return /^about:/i.test(url ?? '');
  }

  urlIsSupported(url: string): boolean {
    return /^(?!chrome|data)[\w-]+:/i.test(url ?? '');
  }
}
</file>

<file path="src/modules/webext/shared/bookmark-id-mapper/bookmark-id-mapper.interface.ts">
export interface BookmarkIdMapping {
  nativeId: string;
  syncedId: number;
}
</file>

<file path="src/modules/webext/shared/bookmark-id-mapper/bookmark-id-mapper.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { BookmarkMappingNotFoundError } from '../../../shared/errors/errors';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { BookmarkIdMapping } from './bookmark-id-mapper.interface';

@Injectable('BookmarkIdMapperService')
export class BookmarkIdMapperService {
  $q: ng.IQService;
  storeSvc: StoreService;

  static $inject = ['$q', 'StoreService'];
  constructor($q: ng.IQService, StoreSvc: StoreService) {
    this.$q = $q;
    this.storeSvc = StoreSvc;
  }

  add(newMappings: BookmarkIdMapping | BookmarkIdMapping[]): ng.IPromise<void> {
    // Convert mappings to arrays if necessary
    const newMappingsArr = Array.isArray(newMappings) ? newMappings : [newMappings];

    // Add new mappings to existing mappings
    return this.storeSvc
      .get<BookmarkIdMapping[]>(StoreKey.BookmarkIdMappings)
      .then((idMappings) => {
        return idMappings.concat(newMappingsArr);
      })
      .then((updatedMappings) => {
        return this.set(updatedMappings);
      });
  }

  clear(): ng.IPromise<void> {
    return this.storeSvc.remove(StoreKey.BookmarkIdMappings);
  }

  createMapping(syncedId: number, nativeId?: string): BookmarkIdMapping {
    return {
      nativeId,
      syncedId
    };
  }

  get(nativeId: string, syncedId?: number): ng.IPromise<BookmarkIdMapping> {
    return this.storeSvc.get<BookmarkIdMapping[]>(StoreKey.BookmarkIdMappings).then((idMappings) => {
      // Find the requested mapping
      let mapping: BookmarkIdMapping;
      if (nativeId != null) {
        mapping = idMappings.find((x) => {
          return x.nativeId === nativeId;
        });
      } else if (syncedId != null) {
        mapping = idMappings.find((x) => {
          return x.syncedId === syncedId;
        });
      }
      return mapping;
    });
  }

  remove(syncedIds: number | number[], nativeIds?: string | string[]): ng.IPromise<void> {
    // Convert ids to arrays if necessary
    const syncedIdsArr = syncedIds != null ? (Array.isArray(syncedIds) ? syncedIds : [syncedIds]) : null;
    const nativeIdsArr = nativeIds != null ? (Array.isArray(nativeIds) ? nativeIds : [nativeIds]) : null;

    // Retrieve id mappings
    return this.storeSvc
      .get<BookmarkIdMapping[]>(StoreKey.BookmarkIdMappings)
      .then((idMappings) => {
        // Remove id mappings matching provided synced ids
        const idMappingsLessSynced =
          syncedIdsArr == null
            ? idMappings
            : syncedIdsArr.reduce((acc, val) => {
                const indexToRemove = acc.findIndex((x) => {
                  return x.syncedId === val;
                });
                if (indexToRemove < 0) {
                  throw new Error('Bookmark ID mapping to remove could not be determined');
                }
                return acc.filter((x, index) => {
                  return index !== indexToRemove;
                });
              }, idMappings);

        // Remove id mappings matching provided native ids
        const idMappingsLessNative =
          nativeIdsArr == null
            ? idMappingsLessSynced
            : nativeIdsArr.reduce((acc, val) => {
                const indexToRemove = acc.findIndex((x) => {
                  return x.nativeId === val;
                });
                if (indexToRemove < 0) {
                  throw new Error('Bookmark ID mapping to remove could not be determined');
                }
                return acc.filter((x, index) => {
                  return index !== indexToRemove;
                });
              }, idMappingsLessSynced);

        // Add updated mappings to store
        return this.set(idMappingsLessNative);
      })
      .catch((err) => {
        throw new BookmarkMappingNotFoundError(undefined, err);
      });
  }

  set(idMappings: BookmarkIdMapping[]): ng.IPromise<void> {
    // Sort mappings then save to store
    const sortedMappings = idMappings.sort((x, y) => {
      return x.syncedId - y.syncedId;
    });
    return this.storeSvc.set(StoreKey.BookmarkIdMappings, sortedMappings);
  }
}
</file>

<file path="src/modules/webext/shared/webext-bookmark/webext-bookmark.service.ts">
import angular from 'angular';
import { boundMethod } from 'autobind-decorator';
import browser, { Bookmarks as NativeBookmarks } from 'webextension-polyfill';
import { BookmarkChangeType, BookmarkContainer, BookmarkType } from '../../../shared/bookmark/bookmark.enum';
import {
  AddNativeBookmarkChangeData,
  Bookmark,
  BookmarkChange,
  BookmarkMetadata,
  BookmarkService,
  ModifyNativeBookmarkChangeData,
  MoveNativeBookmarkChangeData,
  OnChildrenReorderedReorderInfoType,
  RemoveNativeBookmarkChangeData,
  ReorderNativeBookmarkChangeData,
  UpdateBookmarksResult
} from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import {
  AmbiguousSyncRequestError,
  BookmarkNotFoundError,
  ContainerChangedError,
  ContainerNotFoundError,
  FailedCreateNativeBookmarksError,
  FailedGetNativeBookmarksError,
  FailedRemoveNativeBookmarksError,
  FailedUpdateNativeBookmarksError,
  NativeBookmarkNotFoundError
} from '../../../shared/errors/errors';
import { MessageCommand } from '../../../shared/global-shared.enum';
import { PlatformService, WebpageMetadata } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { SettingsService } from '../../../shared/settings/settings.service';
import { StoreService } from '../../../shared/store/store.service';
import { SyncType } from '../../../shared/sync/sync.enum';
import { Sync } from '../../../shared/sync/sync.interface';
import { SyncService } from '../../../shared/sync/sync.service';
import { UtilityService } from '../../../shared/utility/utility.service';
import { BookmarkIdMapping } from '../bookmark-id-mapper/bookmark-id-mapper.interface';
import { BookmarkIdMapperService } from '../bookmark-id-mapper/bookmark-id-mapper.service';

export abstract class WebExtBookmarkService implements BookmarkService {
  $injector: ng.auto.IInjectorService;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  bookmarkIdMapperSvc: BookmarkIdMapperService;
  bookmarkHelperSvc: BookmarkHelperService;
  logSvc: LogService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  storeSvc: StoreService;
  _syncSvc: SyncService;
  utilitySvc: UtilityService;

  nativeBookmarkEventsQueue: any[] = [];
  processNativeBookmarkEventsTimeout: ng.IPromise<void>;
  unsupportedContainers: string[] = [];

  static $inject = [
    '$injector',
    '$q',
    '$timeout',
    'BookmarkHelperService',
    'BookmarkIdMapperService',
    'LogService',
    'PlatformService',
    'SettingsService',
    'StoreService',
    'UtilityService'
  ];
  constructor(
    $injector: ng.auto.IInjectorService,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    BookmarkHelperSvc: BookmarkHelperService,
    BookmarkIdMapperSvc: BookmarkIdMapperService,
    LogSvc: LogService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    this.$injector = $injector;
    this.$q = $q;
    this.$timeout = $timeout;
    this.bookmarkIdMapperSvc = BookmarkIdMapperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.logSvc = LogSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
  }

  get syncSvc(): SyncService {
    if (angular.isUndefined(this._syncSvc)) {
      this._syncSvc = this.$injector.get('SyncService');
    }
    return this._syncSvc;
  }

  addBookmark(bookmark: Bookmark, parentId: number, index: number, bookmarks: Bookmark[]): UpdateBookmarksResult {
    // Add bookmark as child at index param
    const updatedBookmarks = angular.copy(bookmarks);
    const parent = this.bookmarkHelperSvc.findBookmarkById(parentId, updatedBookmarks);
    if (!parent) {
      throw new BookmarkNotFoundError();
    }
    parent.children.splice(index, 0, bookmark);

    return {
      bookmark,
      bookmarks: updatedBookmarks
    } as UpdateBookmarksResult;
  }

  buildIdMappings(bookmarks: Bookmark[]): ng.IPromise<void> {
    const mapIds = (
      nativeBookmarks: NativeBookmarks.BookmarkTreeNode[],
      syncedBookmarks: Bookmark[]
    ): BookmarkIdMapping[] => {
      return nativeBookmarks.reduce((acc, val, index) => {
        // Create mapping for the current node
        const mapping = this.bookmarkIdMapperSvc.createMapping(syncedBookmarks[index].id, val.id);
        acc.push(mapping);

        // Process child nodes
        return val.children?.length ? acc.concat(mapIds(val.children, syncedBookmarks[index].children)) : acc;
      }, [] as BookmarkIdMapping[]);
    };

    // Get native container ids
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        const menuBookmarksId = nativeContainerIds.get(BookmarkContainer.Menu);
        const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
        const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

        // Map menu bookmarks
        const getMenuBookmarks =
          menuBookmarksId == null
            ? this.$q.resolve([] as BookmarkIdMapping[])
            : browser.bookmarks.getSubTree(menuBookmarksId).then((subTree) => {
                const [menuContainer] = subTree;
                if (!menuContainer.children?.length) {
                  return [] as BookmarkIdMapping[];
                }

                // Map ids between nodes and synced container children
                const menuBookmarksContainer = bookmarks.find((x) => {
                  return x.title === BookmarkContainer.Menu;
                });
                return menuBookmarksContainer?.children?.length
                  ? mapIds(menuContainer.children, menuBookmarksContainer.children)
                  : ([] as BookmarkIdMapping[]);
              });

        // Map other bookmarks
        const getOtherBookmarks =
          otherBookmarksId == null
            ? this.$q.resolve([] as BookmarkIdMapping[])
            : browser.bookmarks.getSubTree(otherBookmarksId).then((subTree) => {
                const [otherContainer] = subTree;
                if (!otherContainer.children?.length) {
                  return [] as BookmarkIdMapping[];
                }

                // Remove any unsupported container folders present
                const nodes = otherContainer.children.filter((x) => !this.unsupportedContainers.includes(x.title));

                // Map ids between nodes and synced container children
                const otherBookmarksContainer = bookmarks.find((x) => {
                  return x.title === BookmarkContainer.Other;
                });
                return otherBookmarksContainer?.children?.length
                  ? mapIds(nodes, otherBookmarksContainer.children)
                  : ([] as BookmarkIdMapping[]);
              });

        // Map toolbar bookmarks if enabled
        const getToolbarBookmarks =
          toolbarBookmarksId == null
            ? this.$q.resolve([] as BookmarkIdMapping[])
            : browser.bookmarks.getSubTree(toolbarBookmarksId).then((results) => {
                return this.settingsSvc.syncBookmarksToolbar().then((syncBookmarksToolbar) => {
                  const [toolbarContainer] = results;
                  if (!syncBookmarksToolbar || !toolbarContainer.children?.length) {
                    return [] as BookmarkIdMapping[];
                  }

                  // Map ids between nodes and synced container children
                  const toolbarBookmarksContainer = bookmarks.find((x) => {
                    return x.title === BookmarkContainer.Toolbar;
                  });
                  return toolbarBookmarksContainer?.children?.length
                    ? mapIds(toolbarContainer.children, toolbarBookmarksContainer.children)
                    : ([] as BookmarkIdMapping[]);
                });
              });

        return this.$q.all([getMenuBookmarks, getOtherBookmarks, getToolbarBookmarks]);
      })
      .then((results) => {
        // Combine all mappings
        const combinedMappings = results.reduce((acc, val) => {
          return acc.concat(val);
        }, []);

        // Save mappings
        return this.bookmarkIdMapperSvc.set(combinedMappings);
      });
  }

  checkIfBookmarkChangeShouldBeSynced(changedBookmark: Bookmark, bookmarks: Bookmark[]): ng.IPromise<boolean> {
    return this.settingsSvc.syncBookmarksToolbar().then((syncBookmarksToolbar) => {
      // If container is Toolbar, check if Toolbar sync is disabled
      const container = this.bookmarkHelperSvc.getContainerByBookmarkId(changedBookmark.id, bookmarks);
      if (!container) {
        throw new ContainerNotFoundError();
      }
      if (container.title === BookmarkContainer.Toolbar && !syncBookmarksToolbar) {
        this.logSvc.logInfo('Not syncing toolbar');
        return false;
      }
      return true;
    });
  }

  checkPermsAndGetPageMetadata(): ng.IPromise<WebpageMetadata> {
    return this.platformSvc.checkOptionalNativePermissions().then((hasPermissions) => {
      if (!hasPermissions) {
        this.logSvc.logInfo('Do not have permission to read active tab content');
      }

      // Depending on current perms, get full or partial page metadata
      return hasPermissions ? this.platformSvc.getPageMetadata(true) : this.platformSvc.getPageMetadata(false);
    });
  }

  abstract clearNativeBookmarks(): ng.IPromise<void>;

  convertNativeBookmarkToBookmark(
    nativeBookmark: NativeBookmarks.BookmarkTreeNode,
    bookmarks: Bookmark[],
    takenIds?: number[]
  ): Bookmark {
    if (!nativeBookmark) {
      return;
    }

    // Get a new bookmark id and add to taken ids array so that ids are not duplicated before bookmarks are updated
    const id = this.bookmarkHelperSvc.getNewBookmarkId(bookmarks, takenIds);
    if (angular.isUndefined(takenIds)) {
      takenIds = [];
    }
    takenIds.push(id);

    // Create the new bookmark
    const bookmark = this.bookmarkHelperSvc.newBookmark(nativeBookmark.title, nativeBookmark.url);
    bookmark.id = id;

    // Process children if any
    if (nativeBookmark.children?.length) {
      bookmark.children = nativeBookmark.children.map((childBookmark) => {
        return this.convertNativeBookmarkToBookmark(childBookmark, bookmarks, takenIds);
      });
    }

    return bookmark;
  }

  countNativeContainersBeforeIndex(parentId: string, index: number): ng.IPromise<number> {
    // Get native container ids
    return this.getNativeContainerIds().then((nativeContainerIds) => {
      // No containers to adjust for if parent is not other bookmarks
      if (parentId !== nativeContainerIds.get(BookmarkContainer.Other)) {
        return 0;
      }

      // Get parent bookmark and count containers
      return browser.bookmarks.getSubTree(parentId).then((subTree) => {
        const [parent] = subTree;
        const numContainers = parent.children.filter((child, childIndex) => {
          return childIndex < index && Array.from(nativeContainerIds.values()).includes(child.id);
        }).length;
        return numContainers;
      });
    });
  }

  createBookmarkFromNativeBookmarkId(id: string, bookmarks: Bookmark[]): ng.IPromise<Bookmark> {
    return browser.bookmarks.get(id).then((results) => {
      if (results?.length === 0) {
        throw new NativeBookmarkNotFoundError();
      }
      const [nativeBookmark] = results;
      const convertedBookmark = this.convertNativeBookmarkToBookmark(nativeBookmark, bookmarks);
      return convertedBookmark;
    });
  }

  createNativeBookmark(
    parentId: string,
    title: string,
    url: string,
    index?: number
  ): ng.IPromise<NativeBookmarks.BookmarkTreeNode> {
    const nativeBookmarkInfo: NativeBookmarks.CreateDetails = {
      index,
      parentId,
      title
    };

    // Don't use unsupported urls for native bookmarks
    if (!angular.isUndefined(url ?? undefined)) {
      nativeBookmarkInfo.url = this.getSupportedUrl(url);
    }

    return browser.bookmarks.create(nativeBookmarkInfo).catch((err) => {
      this.logSvc.logWarning(`Failed to create native bookmark: ${JSON.stringify(nativeBookmarkInfo)}`);
      throw new FailedCreateNativeBookmarksError(undefined, err);
    });
  }

  abstract createNativeBookmarksFromBookmarks(bookmarks: Bookmark[]): ng.IPromise<number>;

  createNativeBookmarkTree(
    parentId: string,
    bookmarks: Bookmark[],
    nativeToolbarContainerId?: string
  ): ng.IPromise<number> {
    let processError: Error;
    let total = 0;
    const createRecursive = (id: string, toolbarId: string, bookmarksToCreate: Bookmark[] = []) => {
      const createChildBookmarksPromises = [];

      // Create bookmarks at the top level of the supplied array
      return bookmarksToCreate
        .reduce((p, bookmark) => {
          return p.then(() => {
            // If an error occurred during the recursive process, prevent any more bookmarks being created
            if (processError) {
              return this.$q.resolve();
            }

            return this.bookmarkHelperSvc.getBookmarkType(bookmark) === BookmarkType.Separator
              ? this.createNativeSeparator(id, toolbarId).then(() => {})
              : this.createNativeBookmark(id, bookmark.title, bookmark.url).then((newNativeBookmark) => {
                  // If the bookmark has children, recurse
                  if (bookmark.children?.length) {
                    createChildBookmarksPromises.push(
                      createRecursive(newNativeBookmark.id, toolbarId, bookmark.children)
                    );
                  }
                });
          });
        }, this.$q.resolve())
        .then(() => this.$q.all(createChildBookmarksPromises))
        .then(() => {
          total += bookmarksToCreate.length;
        })
        .catch((err) => {
          processError = err;
          throw err;
        });
    };
    return createRecursive(parentId, nativeToolbarContainerId, bookmarks).then(() => total);
  }

  abstract createNativeSeparator(
    parentId: string,
    nativeToolbarContainerId: string
  ): ng.IPromise<NativeBookmarks.BookmarkTreeNode>;

  abstract disableEventListeners(): ng.IPromise<void>;

  abstract enableEventListeners(): ng.IPromise<void>;

  abstract ensureContainersExist(bookmarks: Bookmark[]): Bookmark[];

  getBookmarksForExport(): ng.IPromise<Bookmark[]> {
    return this.utilitySvc
      .isSyncEnabled()
      .then((syncEnabled) => {
        // If sync is not enabled, export native bookmarks
        return syncEnabled ? this.bookmarkHelperSvc.getCachedBookmarks() : this.getNativeBookmarksAsBookmarks();
      })
      .then((bookmarks) => {
        // Clean bookmarks for export
        return this.bookmarkHelperSvc.cleanAllBookmarks(this.bookmarkHelperSvc.removeEmptyContainers(bookmarks));
      });
  }

  getContainerNameFromNativeId(nativeBookmarkId: string): ng.IPromise<string> {
    return this.getNativeContainerIds().then((nativeContainerIds) => {
      const menuBookmarksId = nativeContainerIds.get(BookmarkContainer.Menu);
      const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
      const toolbarBookmarksId = nativeContainerIds.get(BookmarkContainer.Toolbar);

      const nativeContainers = [
        { nativeId: otherBookmarksId, containerName: BookmarkContainer.Other },
        { nativeId: toolbarBookmarksId, containerName: BookmarkContainer.Toolbar }
      ];

      if (menuBookmarksId) {
        nativeContainers.push({ nativeId: menuBookmarksId, containerName: BookmarkContainer.Menu });
      }

      // Check if the native bookmark id resolves to a container
      const result = nativeContainers.find((x) => x.nativeId === nativeBookmarkId);
      return result ? result.containerName : '';
    });
  }

  getIdsFromDescendants(bookmark: Bookmark): number[] {
    const ids = [];
    if (angular.isUndefined(bookmark.children ?? undefined) || bookmark.children.length === 0) {
      return ids;
    }

    this.bookmarkHelperSvc.eachBookmark((child) => {
      ids.push(child.id);
    }, bookmark.children);
    return ids;
  }

  getNativeBookmarkByTitle(title: string): ng.IPromise<NativeBookmarks.BookmarkTreeNode> {
    if (!title) {
      return this.$q.resolve(null);
    }

    return browser.bookmarks.search({ title }).then((results) => {
      const [bookmark] = results ?? [];
      return bookmark;
    });
  }

  abstract getNativeBookmarksAsBookmarks(): ng.IPromise<Bookmark[]>;

  abstract getNativeContainerIds(): ng.IPromise<Map<BookmarkContainer, string>>;

  getSupportedUrl(url: string): string {
    if (angular.isUndefined(url ?? undefined)) {
      return '';
    }

    // If url is not supported, use new tab url instead
    let returnUrl = url;
    if (!this.platformSvc.urlIsSupported(url)) {
      this.logSvc.logInfo(`Bookmark url unsupported: ${url}`);
      returnUrl = this.platformSvc.getNewTabUrl();
    }

    return returnUrl;
  }

  isNativeBookmarkInToolbarContainer(nativeBookmark: NativeBookmarks.BookmarkTreeNode): ng.IPromise<boolean> {
    return this.getNativeContainerIds().then((nativeContainerIds) => {
      return nativeBookmark.parentId === nativeContainerIds.get(BookmarkContainer.Toolbar);
    });
  }

  modifyNativeBookmark(id: string, newMetadata: BookmarkMetadata): ng.IPromise<NativeBookmarks.BookmarkTreeNode> {
    // Don't use unsupported urls for native bookmarks
    const updateInfo: NativeBookmarks.UpdateChangesType = {
      title: newMetadata.title
    };

    // Don't use unsupported urls for native bookmarks
    if (!angular.isUndefined(updateInfo.url ?? undefined)) {
      updateInfo.url = this.getSupportedUrl(updateInfo.url);
    }

    return browser.bookmarks.update(id, updateInfo).catch((err) => {
      this.logSvc.logInfo(`Failed to modify native bookmark: ${JSON.stringify(newMetadata)}`);
      throw new FailedUpdateNativeBookmarksError(undefined, err);
    });
  }

  @boundMethod
  onNativeBookmarkChanged(...args: any[]): void {
    this.logSvc.logInfo('onChanged event detected');
    this.queueNativeBookmarkEvent(BookmarkChangeType.Modify, ...args);
  }

  @boundMethod
  onNativeBookmarkCreated(...args: any[]): void {
    this.logSvc.logInfo('onCreated event detected');
    this.queueNativeBookmarkEvent(BookmarkChangeType.Add, ...args);
  }

  @boundMethod
  onNativeBookmarkMoved(...args: any[]): void {
    this.logSvc.logInfo('onMoved event detected');
    this.queueNativeBookmarkEvent(BookmarkChangeType.Move, ...args);
  }

  @boundMethod
  onNativeBookmarkRemoved(...args: any[]): void {
    this.logSvc.logInfo('onRemoved event detected');
    this.queueNativeBookmarkEvent(BookmarkChangeType.Remove, ...args);
  }

  processChangeOnNativeBookmarks(
    id: number,
    changeType: BookmarkChangeType,
    changeInfo: BookmarkMetadata
  ): ng.IPromise<void> {
    // Check the change type and process native bookmark changes
    switch (changeType) {
      case BookmarkChangeType.Add:
        return this.processChangeTypeAddOnNativeBookmarks(id, changeInfo);
      case BookmarkChangeType.Modify:
        return this.processChangeTypeModifyOnNativeBookmarks(id, changeInfo);
      case BookmarkChangeType.Remove:
        return this.processChangeTypeRemoveOnNativeBookmarks(id);
      default:
        throw new AmbiguousSyncRequestError();
    }
  }

  processChangeTypeAddOnBookmarks(
    bookmarks: Bookmark[],
    changeData: AddNativeBookmarkChangeData
  ): ng.IPromise<Bookmark[]> {
    // Check if container was changed
    return this.wasContainerChanged(changeData.nativeBookmark).then((changedBookmarkIsContainer) => {
      if (changedBookmarkIsContainer) {
        throw new ContainerChangedError();
      }

      return this.getContainerNameFromNativeId(changeData.nativeBookmark.parentId)
        .then((containerName) => {
          if (containerName) {
            // If parent is a container use it's id
            const container = this.bookmarkHelperSvc.getContainer(containerName, bookmarks, true);
            return container.id as number;
          }

          // Get the synced parent id from id mappings and retrieve the synced parent bookmark
          return this.bookmarkIdMapperSvc.get(changeData.nativeBookmark.parentId).then((idMapping) => {
            if (!idMapping) {
              // No mappings found, skip sync
              this.logSvc.logInfo('No id mapping found, skipping sync');
              return;
            }

            return idMapping.syncedId;
          });
        })
        .then((parentId) => {
          if (!parentId) {
            // Don't sync this change
            return bookmarks;
          }

          // Add new bookmark then check if the change should be synced
          const newBookmarkMetadata = this.bookmarkHelperSvc.extractBookmarkMetadata(changeData.nativeBookmark);
          const newBookmark = this.bookmarkHelperSvc.newBookmark(
            newBookmarkMetadata.title,
            newBookmarkMetadata.url,
            newBookmarkMetadata.description,
            newBookmarkMetadata.tags,
            bookmarks
          );
          const addBookmarkResult = this.addBookmark(newBookmark, parentId, changeData.nativeBookmark.index, bookmarks);

          return this.checkIfBookmarkChangeShouldBeSynced(addBookmarkResult.bookmark, addBookmarkResult.bookmarks).then(
            (syncThisChange) => {
              if (!syncThisChange) {
                // Don't sync this change
                return bookmarks;
              }
              // Add new id mapping
              const idMapping = this.bookmarkIdMapperSvc.createMapping(
                addBookmarkResult.bookmark.id,
                changeData.nativeBookmark.id
              );
              return this.bookmarkIdMapperSvc.add(idMapping).then(() => {
                return addBookmarkResult.bookmarks;
              });
            }
          );
        });
    });
  }

  /**
   * Triggered when using "sort by name" in Chromium to sort bookmarks.
   *
   * Note: Firefox does not implement this, see https://bugzilla.mozilla.org/show_bug.cgi?id=1319530
   */
  processChangeTypeChildrenReorderedOnBookmarks(
    bookmarks: Bookmark[],
    changeData: ReorderNativeBookmarkChangeData
  ): ng.IPromise<Bookmark[]> {
    // Check if parent bookmark is a container
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        // If parent is not a container, find bookmark using mapped id
        const containerName = [...nativeContainerIds].find(({ 1: x }) => x === changeData.parentId)?.[0];
        if (angular.isUndefined(containerName)) {
          return this.bookmarkIdMapperSvc
            .get(changeData.parentId)
            .then((idMapping) => this.bookmarkHelperSvc.findBookmarkById(idMapping.syncedId, bookmarks));
        }

        // Otherwise get the relavant container
        return this.$q.resolve().then(() => this.bookmarkHelperSvc.getContainer(containerName, bookmarks));
      })
      .then((parentBookmark) => {
        // Retrieve child id mappings using change data
        return this.$q
          .all(changeData.childIds.map((childId) => this.bookmarkIdMapperSvc.get(childId)))
          .then((idMappings) => {
            // Reorder children as per change data
            const childIds = idMappings.filter(Boolean).map((idMapping) => idMapping.syncedId);
            parentBookmark.children = childIds.map<Bookmark>((childId) => {
              return (parentBookmark.children as Bookmark[]).find((x) => x.id === childId);
            });

            return bookmarks;
          });
      });
  }

  processChangeTypeAddOnNativeBookmarks(id: number, createInfo: BookmarkMetadata): ng.IPromise<void> {
    // Create native bookmark in other bookmarks container
    return this.getNativeContainerIds()
      .then((nativeContainerIds) => {
        const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
        return this.createNativeBookmark(otherBookmarksId, createInfo.title, createInfo.url);
      })
      .then((newNativeBookmark) => {
        // Add id mapping for new bookmark
        const idMapping = this.bookmarkIdMapperSvc.createMapping(id, newNativeBookmark.id);
        return this.bookmarkIdMapperSvc.add(idMapping);
      });
  }

  processChangeTypeModifyOnBookmarks(
    bookmarks: Bookmark[],
    changeData: ModifyNativeBookmarkChangeData
  ): ng.IPromise<Bookmark[]> {
    // Check if container was changed
    return this.wasContainerChanged(changeData.nativeBookmark).then((changedBookmarkIsContainer) => {
      if (changedBookmarkIsContainer) {
        throw new ContainerChangedError();
      }

      // Retrieve id mapping using change data
      return this.bookmarkIdMapperSvc.get(changeData.nativeBookmark.id).then((idMapping) => {
        if (!idMapping) {
          // No mappings found, skip sync
          this.logSvc.logInfo('No id mapping found, skipping sync');
          return bookmarks;
        }

        // Check if the change should be synced
        const bookmarkToUpdate = this.bookmarkHelperSvc.findBookmarkById(idMapping.syncedId, bookmarks) as Bookmark;
        return this.checkIfBookmarkChangeShouldBeSynced(bookmarkToUpdate, bookmarks).then((syncThisChange) => {
          if (!syncThisChange) {
            // Don't sync this change
            return bookmarks;
          }

          // Modify the bookmark with the update info
          const updateInfo = this.bookmarkHelperSvc.extractBookmarkMetadata(changeData.nativeBookmark);
          return this.bookmarkHelperSvc.modifyBookmarkById(idMapping.syncedId, updateInfo, bookmarks);
        });
      });
    });
  }

  processChangeTypeModifyOnNativeBookmarks(id: number, updateInfo: BookmarkMetadata): ng.IPromise<void> {
    // Retrieve native bookmark id from id mappings
    return this.bookmarkIdMapperSvc.get(null, id).then((idMapping) => {
      if (!idMapping) {
        this.logSvc.logWarning(`No id mapping found for synced id '${id}'`);
        return;
      }

      // Modify native bookmark
      return this.modifyNativeBookmark(idMapping.nativeId, updateInfo).then(() => {});
    });
  }

  processChangeTypeMoveOnBookmarks(
    bookmarks: Bookmark[],
    changeData: MoveNativeBookmarkChangeData
  ): ng.IPromise<Bookmark[]> {
    // Get native container ids
    return this.getNativeContainerIds().then((nativeContainerIds) => {
      // Check if container was moved to a different folder
      if (Array.from(nativeContainerIds.values()).includes(undefined)) {
        throw new ContainerChangedError();
      }

      return browser.bookmarks.get(changeData.id).then((results) => {
        // If container moved to a different position in same folder, skip sync
        const [movedBookmark] = results;
        if (Array.from(nativeContainerIds.values()).includes(movedBookmark.id)) {
          return;
        }

        // Get the moved bookmark and new parent ids from id mappings or if container use the existing id
        return this.$q
          .all([
            this.bookmarkIdMapperSvc.get(changeData.id),
            this.getContainerNameFromNativeId(changeData.parentId).then((parentNameAsContainer) => {
              if (parentNameAsContainer) {
                const container = this.bookmarkHelperSvc.getContainer(parentNameAsContainer, bookmarks, true);
                return { syncedId: container.id };
              }
              return this.bookmarkIdMapperSvc.get(changeData.parentId);
            })
          ])
          .then((idMappings) => {
            const [movedBookmarkMapping, parentMapping] = idMappings;
            if (!movedBookmarkMapping && !parentMapping) {
              // No mappings found, skip sync
              this.logSvc.logInfo('No id mappings found, skipping sync');
              return;
            }

            // Get the bookmark to be removed
            // If no mapping exists then native bookmark will likely have been
            //  created in toolbar container whilst not syncing toolbar option enabled
            //  in which case create a new bookmark from the native bookmark
            let changesMade = false;
            return (
              !movedBookmarkMapping
                ? this.createBookmarkFromNativeBookmarkId(changeData.id, bookmarks)
                : this.$q
                    .resolve()
                    .then(
                      () =>
                        this.bookmarkHelperSvc.findBookmarkById(movedBookmarkMapping.syncedId, bookmarks) as Bookmark
                    )
            ).then((bookmarkToRemove) => {
              // If old parent is mapped, remove the moved bookmark
              let removeBookmarkPromise: ng.IPromise<Bookmark[]>;
              if (!movedBookmarkMapping) {
                // Moved bookmark not mapped, skip remove
                removeBookmarkPromise = this.$q.resolve(bookmarks);
              } else {
                // Check if change should be synced then remove the bookmark
                removeBookmarkPromise = this.$q((resolve, reject) => {
                  this.checkIfBookmarkChangeShouldBeSynced(bookmarkToRemove, bookmarks)
                    .then((syncThisChange) => {
                      if (!syncThisChange) {
                        // Don't sync this change, return unmodified bookmarks
                        return resolve(bookmarks);
                      }
                      return this.bookmarkHelperSvc
                        .removeBookmarkById(movedBookmarkMapping.syncedId, bookmarks)
                        .then((updatedBookmarks) => {
                          // Set flag to ensure update bookmarks are synced
                          changesMade = true;
                          resolve(updatedBookmarks);
                        });
                    })
                    .catch(reject);
                });
              }
              return (
                removeBookmarkPromise
                  .then((bookmarksAfterRemoval) => {
                    let addBookmarkPromise: ng.IPromise<Bookmark[]>;
                    if (!parentMapping) {
                      // New parent not mapped, skip add
                      addBookmarkPromise = this.$q.resolve(bookmarksAfterRemoval);
                    } else {
                      // Add the bookmark then check if change should be synced
                      addBookmarkPromise = this.countNativeContainersBeforeIndex(
                        changeData.parentId,
                        changeData.index
                      ).then((numContainers) => {
                        // Adjust the target index by the number of container folders then add the bookmark
                        const index = changeData.index - numContainers;
                        const addBookmarkResult = this.addBookmark(
                          bookmarkToRemove,
                          parentMapping.syncedId,
                          index,
                          bookmarksAfterRemoval
                        );
                        addBookmarkResult.bookmark.id = bookmarkToRemove.id;
                        return this.checkIfBookmarkChangeShouldBeSynced(
                          addBookmarkResult.bookmark,
                          addBookmarkResult.bookmarks
                        ).then((syncThisChange) => {
                          if (!syncThisChange) {
                            // Don't sync this change, return bookmarks after removal processed
                            return bookmarksAfterRemoval;
                          }

                          // Set flag to ensure update bookmarks are synced
                          changesMade = true;

                          // Add new id mapping for moved bookmark
                          if (movedBookmarkMapping) {
                            // If moved bookmark was already mapped, no need to update id mappings
                            return addBookmarkResult.bookmarks;
                          }
                          const idMapping = this.bookmarkIdMapperSvc.createMapping(
                            addBookmarkResult.bookmark.id,
                            changeData.id
                          );
                          return this.bookmarkIdMapperSvc.add(idMapping).then(() => {
                            return addBookmarkResult.bookmarks;
                          });
                        });
                      });
                    }
                    return addBookmarkPromise;
                  })
                  // If no changes made return original bookmarks
                  .then((updatedBookmarks) => (!changesMade ? bookmarks : updatedBookmarks))
              );
            });
          });
      });
    });
  }

  processChangeTypeRemoveOnBookmarks(
    bookmarks: Bookmark[],
    changeData: RemoveNativeBookmarkChangeData
  ): ng.IPromise<Bookmark[]> {
    // Check if container was changed
    return this.wasContainerChanged(changeData.nativeBookmark).then((changedBookmarkIsContainer) => {
      if (changedBookmarkIsContainer) {
        throw new ContainerChangedError();
      }

      // Retrieve the id mapping using change data
      return this.bookmarkIdMapperSvc.get(changeData.nativeBookmark.id).then((idMapping) => {
        if (!idMapping) {
          // No mappings found, skip sync
          this.logSvc.logInfo('No id mapping found, skipping sync');
          return bookmarks;
        }

        // Check if the change should be synced
        const bookmarkToRemove = this.bookmarkHelperSvc.findBookmarkById(idMapping.syncedId, bookmarks) as Bookmark;
        return this.checkIfBookmarkChangeShouldBeSynced(bookmarkToRemove, bookmarks).then((syncThisChange) => {
          if (!syncThisChange) {
            // Don't sync this change
            return bookmarks;
          }

          // Get all child bookmark mappings
          const descendantsIds = this.getIdsFromDescendants(bookmarkToRemove);

          // Remove bookmark
          return this.bookmarkHelperSvc.removeBookmarkById(idMapping.syncedId, bookmarks).then((updatedBookmarks) => {
            // Remove all retrieved ids from mappings
            const syncedIds = descendantsIds.concat([idMapping.syncedId]);
            return this.bookmarkIdMapperSvc.remove(syncedIds).then(() => {
              return updatedBookmarks;
            });
          });
        });
      });
    });
  }

  processChangeTypeRemoveOnNativeBookmarks(id: number): ng.IPromise<void> {
    // Get native bookmark id from id mappings
    return this.bookmarkIdMapperSvc.get(null, id).then((idMapping) => {
      if (!idMapping) {
        this.logSvc.logWarning(`No id mapping found for synced id '${id}'`);
        return;
      }

      // Remove bookmark and id mapping
      return this.removeNativeBookmarks(idMapping.nativeId).then(() => {
        return this.bookmarkIdMapperSvc.remove(id);
      });
    });
  }

  processNativeBookmarkEventsQueue(): void {
    const condition = (): ng.IPromise<boolean> => {
      return this.$q.resolve(this.nativeBookmarkEventsQueue.length > 0);
    };

    const action = (): ng.IPromise<void> => {
      // Get first event in the queue and process change
      const currentEvent = this.nativeBookmarkEventsQueue.shift();
      switch (currentEvent.changeType) {
        case BookmarkChangeType.Add:
          return this.syncNativeBookmarkCreated(...currentEvent.eventArgs);
        case BookmarkChangeType.ChildrenReordered:
          return this.syncNativeBookmarkChildrenReordered(...currentEvent.eventArgs);
        case BookmarkChangeType.Remove:
          return this.syncNativeBookmarkRemoved(...currentEvent.eventArgs);
        case BookmarkChangeType.Move:
          return this.syncNativeBookmarkMoved(...currentEvent.eventArgs);
        case BookmarkChangeType.Modify:
          return this.syncNativeBookmarkChanged(...currentEvent.eventArgs);
        default:
          throw new AmbiguousSyncRequestError();
      }
    };

    // Iterate through the queue and process the events
    this.utilitySvc.asyncWhile<any>(this.nativeBookmarkEventsQueue, condition, action).then(() => {
      this.$timeout(() => {
        this.syncSvc.executeSync().then(() => {
          // Move native unsupported containers into the correct order
          return this.disableEventListeners()
            .then(() => this.reorderUnsupportedContainers())
            .then(() => this.enableEventListeners());
        });
      }, 100);
    });
  }

  processNativeChangeOnBookmarks(changeInfo: BookmarkChange, bookmarks: Bookmark[]): ng.IPromise<Bookmark[]> {
    switch (changeInfo.type) {
      case BookmarkChangeType.Add:
        return this.processChangeTypeAddOnBookmarks(bookmarks, changeInfo.changeData as AddNativeBookmarkChangeData);
      case BookmarkChangeType.ChildrenReordered:
        return this.processChangeTypeChildrenReorderedOnBookmarks(
          bookmarks,
          changeInfo.changeData as ReorderNativeBookmarkChangeData
        );
      case BookmarkChangeType.Modify:
        return this.processChangeTypeModifyOnBookmarks(
          bookmarks,
          changeInfo.changeData as ModifyNativeBookmarkChangeData
        );
      case BookmarkChangeType.Move:
        return this.processChangeTypeMoveOnBookmarks(bookmarks, changeInfo.changeData as MoveNativeBookmarkChangeData);
      case BookmarkChangeType.Remove:
        return this.processChangeTypeRemoveOnBookmarks(
          bookmarks,
          changeInfo.changeData as RemoveNativeBookmarkChangeData
        );
      default:
        throw new AmbiguousSyncRequestError();
    }
  }

  queueNativeBookmarkEvent(changeType: BookmarkChangeType, ...eventArgs: any[]): void {
    // Clear timeout
    if (this.processNativeBookmarkEventsTimeout) {
      this.$timeout.cancel(this.processNativeBookmarkEventsTimeout);
    }

    // Add event to the queue and trigger processing after a delay
    this.nativeBookmarkEventsQueue.push({
      changeType,
      eventArgs
    });
    this.processNativeBookmarkEventsTimeout = this.$timeout(() => this.processNativeBookmarkEventsQueue(), 200);
  }

  removeNativeBookmarks(id: string): ng.IPromise<void> {
    return browser.bookmarks.removeTree(id).catch((err) => {
      this.logSvc.logInfo(`Failed to remove native bookmark: ${id}`);
      throw new FailedRemoveNativeBookmarksError(undefined, err);
    });
  }

  reorderUnsupportedContainers(): ng.IPromise<void> {
    // Get unsupported containers
    return this.$q
      .all(this.unsupportedContainers.map((container) => this.getNativeBookmarkByTitle(container)))
      .then((results) => {
        return this.$q
          .all(
            results
              // Remove falsy results
              .filter((x) => x)
              // Reorder each native bookmark to top of parent
              .map((container, index) => {
                return browser.bookmarks.move(container.id, {
                  index,
                  parentId: container.parentId
                });
              })
          )
          .then(() => {});
      });
  }

  syncChange(changeInfo: BookmarkChange): ng.IPromise<any> {
    const sync: Sync = {
      changeInfo,
      type: SyncType.Remote
    };

    // Queue sync but dont execute sync to allow for batch processing multiple changes
    return this.platformSvc.queueSync(sync, MessageCommand.SyncBookmarks, false).catch(() => {
      // Swallow error, sync errors thrown separately by processBookmarkEventsQueue
    });
  }

  abstract syncNativeBookmarkChanged(id?: string): ng.IPromise<void>;

  syncNativeBookmarkChildrenReordered(
    id?: string,
    reorderInfo?: OnChildrenReorderedReorderInfoType
  ): ng.IPromise<void> {
    // Create change info
    const data: ReorderNativeBookmarkChangeData = {
      childIds: reorderInfo.childIds,
      parentId: id
    };
    const changeInfo: BookmarkChange = {
      changeData: data,
      type: BookmarkChangeType.ChildrenReordered
    };

    // Queue sync
    this.syncChange(changeInfo);
    return this.$q.resolve();
  }

  abstract syncNativeBookmarkCreated(id?: string, nativeBookmark?: NativeBookmarks.BookmarkTreeNode): ng.IPromise<void>;

  abstract syncNativeBookmarkMoved(id?: string, moveInfo?: NativeBookmarks.OnMovedMoveInfoType): ng.IPromise<void>;

  syncNativeBookmarkRemoved(id?: string, removeInfo?: NativeBookmarks.OnRemovedRemoveInfoType): ng.IPromise<void> {
    // Create change info
    const data: RemoveNativeBookmarkChangeData = {
      nativeBookmark: {
        ...removeInfo.node,
        parentId: removeInfo.parentId
      }
    };
    const changeInfo: BookmarkChange = {
      changeData: data,
      type: BookmarkChangeType.Remove
    };

    // Queue sync
    this.syncChange(changeInfo);
    return this.$q.resolve();
  }

  wasContainerChanged(changedNativeBookmark: NativeBookmarks.BookmarkTreeNode): ng.IPromise<boolean> {
    return this.getNativeContainerIds().then((nativeContainerIds) => {
      // If parent is not other bookmarks, no container was changed
      const otherBookmarksId = nativeContainerIds.get(BookmarkContainer.Other);
      if ((changedNativeBookmark as NativeBookmarks.BookmarkTreeNode).parentId !== otherBookmarksId) {
        return false;
      }

      // If any native container ids are undefined, container was removed
      if (Array.from(nativeContainerIds.values()).includes(undefined)) {
        return true;
      }

      return browser.bookmarks
        .getChildren(otherBookmarksId)
        .then((children) => {
          // Get all native bookmarks in other bookmarks that are unsupported containers and check for duplicates
          const containers = children.filter((x) => this.unsupportedContainers.includes(x.title)).map((x) => x.title);
          return containers.length !== new Set(containers).size;
        })
        .catch((err) => {
          this.logSvc.logInfo(`Failed to detect whether container changed: ${JSON.stringify(changedNativeBookmark)}`);
          throw new FailedGetNativeBookmarksError(undefined, err);
        });
    });
  }
}
</file>

<file path="src/modules/webext/shared/webext-platform/webext-platform.service.ts">
import angular from 'angular';
import { boundMethod } from 'autobind-decorator';
import * as detectBrowser from 'detect-browser';
import browser, { Tabs } from 'webextension-polyfill';
import { AlertService } from '../../../shared/alert/alert.service';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import {
  BaseError,
  FailedGetPageMetadataError,
  FailedRegisterAutoUpdatesError,
  I18nError
} from '../../../shared/errors/errors';
import * as Errors from '../../../shared/errors/errors';
import Globals from '../../../shared/global-shared.constants';
import { BrowserName, MessageCommand, PlatformType } from '../../../shared/global-shared.enum';
import { I18nObject, PlatformInfo, PlatformService, WebpageMetadata } from '../../../shared/global-shared.interface';
import { LogService } from '../../../shared/log/log.service';
import { StoreService } from '../../../shared/store/store.service';
import { SyncType } from '../../../shared/sync/sync.enum';
import { Sync } from '../../../shared/sync/sync.interface';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingService } from '../../../shared/working/working.service';
import { DownloadFileMessage, Message, SyncBookmarksMessage } from '../../webext.interface';
import { WebExtBackgroundService } from '../../webext-background/webext-background.service';
import { BookmarkIdMapperService } from '../bookmark-id-mapper/bookmark-id-mapper.service';

export abstract class WebExtPlatformService implements PlatformService {
  Strings = require('../../../../../res/strings/en.json');

  $injector: ng.auto.IInjectorService;
  $interval: ng.IIntervalService;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  _backgroundSvc: WebExtBackgroundService | undefined;
  bookmarkIdMapperSvc: BookmarkIdMapperService;
  bookmarkHelperSvc: BookmarkHelperService;
  logSvc: LogService;
  storeSvc: StoreService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  contentScriptUrl = 'assets/webpage-metadata-collecter.js';
  optionalPermissions = {
    origins: ['http://*/', 'https://*/']
  };
  refreshInterfaceTimeout: any;

  static $inject = [
    '$injector',
    '$interval',
    '$q',
    '$timeout',
    'AlertService',
    'BookmarkHelperService',
    'BookmarkIdMapperService',
    'LogService',
    'StoreService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $injector: ng.auto.IInjectorService,
    $interval: ng.IIntervalService,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    BookmarkHelperSvc: BookmarkHelperService,
    BookmarkIdMapperSvc: BookmarkIdMapperService,
    LogSvc: LogService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$injector = $injector;
    this.$interval = $interval;
    this.$q = $q;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.bookmarkIdMapperSvc = BookmarkIdMapperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.logSvc = LogSvc;
    this.storeSvc = StoreSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;
  }
  platformName = '';

  get backgroundSvc(): WebExtBackgroundService {
    if (angular.isUndefined(this._backgroundSvc)) {
      this._backgroundSvc = this.$injector.get('WebExtBackgroundService');
    }
    return this._backgroundSvc as WebExtBackgroundService;
  }

  checkOptionalNativePermissions(): ng.IPromise<boolean> {
    // Check if extension has optional permissions
    return this.$q.resolve().then(() => {
      return browser.permissions.contains(this.optionalPermissions);
    });
  }

  disableNativeEventListeners(): ng.IPromise<void> {
    return this.sendMessage({
      command: MessageCommand.DisableEventListeners
    });
  }

  disableSync(): ng.IPromise<any> {
    return this.sendMessage({
      command: MessageCommand.DisableSync
    });
  }

  downloadFile(filename: string, textContents: string, displaySaveDialog = true): ng.IPromise<string | void> {
    const message: DownloadFileMessage = {
      command: MessageCommand.DownloadFile,
      displaySaveDialog,
      filename,
      textContents
    };
    return this.sendMessage(message);
  }

  enableNativeEventListeners(): ng.IPromise<void> {
    return this.sendMessage({
      command: MessageCommand.EnableEventListeners
    });
  }

  getAppVersion(): ng.IPromise<string> {
    const appVersion = browser.runtime.getManifest().version;
    return this.$q.resolve(this.utilitySvc.getSemVerAlignedVersion(appVersion));
  }

  getAppVersionName(): ng.IPromise<string> {
    return this.$q.resolve((browser.runtime.getManifest() as any).version_name);
  }

  getCurrentLocale(): ng.IPromise<string> {
    return this.$q.resolve(browser.i18n.getUILanguage());
  }

  getCurrentUrl(): ng.IPromise<string> {
    // Get current tab
    return browser.tabs.query({ currentWindow: true, active: true }).then((tabs) => {
      const [activeTab] = tabs;
      return activeTab.url ?? '';
    });
  }

  @boundMethod
  getI18nString(i18nObj: I18nObject): string {
    let i18nStr: string;
    let platformName = this.platformName.toString();
    if (platformName === PlatformType.Chromium) {
      const browserName = this.utilitySvc.getBrowserName() as string;
      platformName = browserName !== BrowserName.Chrome ? browserName : platformName;
    }

    // If the i18n object contains a string for this platform then use that, otherwise use the default
    if (Object.keys(i18nObj).includes(platformName)) {
      i18nStr = browser.i18n.getMessage(`${i18nObj.key}_${platformName}`);
    } else {
      i18nStr = browser.i18n.getMessage(`${i18nObj.key}_Default`);
    }

    if (angular.isUndefined(i18nStr ?? undefined)) {
      throw new I18nError('I18n string has no value');
    }

    return i18nStr;
  }

  abstract getNewTabUrl(): string;

  getPageMetadata(getFullMetadata = true, pageUrl?: string): ng.IPromise<WebpageMetadata> {
    return browser.tabs.query({ active: true, currentWindow: true }).then((tabs) => {
      // If active tab empty, throw error
      const [activeTab] = tabs;
      if (!activeTab) {
        throw new FailedGetPageMetadataError();
      }

      // Default metadata to the info from the active tab
      let metadata: WebpageMetadata = activeTab && {
        title: activeTab.title,
        url: activeTab.url
      };

      // Don't get metadata if this is a native config page url
      if (getFullMetadata) {
        getFullMetadata = !this.urlIsNativeConfigPage(activeTab.url);
      }

      // If not retrieving full metadata return with default
      if (!getFullMetadata) {
        return metadata;
      }

      return browser.tabs
        .executeScript(activeTab.id, { file: this.contentScriptUrl })
        .then(() => {
          return browser.tabs.executeScript(activeTab.id, {
            code: 'WebpageMetadataCollecter.CollectMetadata();'
          });
        })
        .then((response) => {
          if (response?.length && response?.[0]) {
            [metadata] = response;
          }

          // If no metadata returned, use the info from the active tab
          metadata.title = metadata.title ?? activeTab.title;
          metadata.url = metadata.url ?? activeTab.url;
          return metadata;
        })
        .catch((err) => {
          this.logSvc.logWarning(`Failed to get metadata: ${err ? err.message : ''}`);
          return metadata;
        });
    });
  }

  getPlatformInfo(): PlatformInfo {
    const { name, os, version: browserVersion } = detectBrowser.detect();
    return {
      browser: name,
      browserVersion,
      device: os
    };
  }

  @boundMethod
  openUrl(url: string): void {
    const createProperties: Tabs.CreateCreatePropertiesType = {};

    const openInNewTab = (urlToOpen?: string) => {
      if (urlToOpen) {
        createProperties.url = urlToOpen;
      }
      return browser.tabs.create(createProperties).then(window.close);
    };

    // Attempting to navigate to unsupported urls can cause errors
    // Check url is supported, otherwise navigate to new tab url
    if (!this.urlIsSupported(url)) {
      this.logSvc.logInfo(`Attempted to navigate to unsupported url: ${url}`);
      openInNewTab();
      return;
    }

    browser.tabs
      .query({ currentWindow: true, active: true })
      .then((tabs) => {
        // Open url in current tab if new then close the extension window
        const [activeTab] = tabs;
        return tabs.length > 0 && activeTab.url && activeTab.url.startsWith(this.getNewTabUrl())
          ? browser.tabs.update(activeTab.id, { url }).then(window.close)
          : openInNewTab(url);
      })
      .catch(() => openInNewTab());
  }

  queueLocalResync(): ng.IPromise<void> {
    return this.queueSync({ type: SyncType.Local }).then(() => {
      this.logSvc.logInfo('Local sync data refreshed');
    });
  }

  queueSync(sync?: Sync, command = MessageCommand.SyncBookmarks, runSync = true): ng.IPromise<void> {
    const message: SyncBookmarksMessage = {
      command,
      sync,
      runSync
    };
    return this.sendMessage(message).finally(() => this.workingSvc.hide());
  }

  refreshNativeInterface(syncEnabled?: boolean, syncType?: SyncType): ng.IPromise<void> {
    let iconPath: string;
    let newTitle = this.getI18nString(this.Strings.App.Title);
    const syncingTitle = ` (${this.getI18nString(this.Strings.Tooltip.Syncing)})`;
    const syncedTitle = ` (${this.getI18nString(this.Strings.Tooltip.Synced)})`;
    const notSyncedTitle = ` (${this.getI18nString(this.Strings.Tooltip.NotSynced)})`;

    // Clear timeout
    if (this.refreshInterfaceTimeout) {
      this.$timeout.cancel(this.refreshInterfaceTimeout);
      this.refreshInterfaceTimeout = null;
    }

    if (syncType) {
      iconPath =
        syncType === SyncType.Local
          ? `${Globals.PathToAssets}/downloading.png`
          : `${Globals.PathToAssets}/uploading.png`;
      newTitle += syncingTitle;
    } else if (syncEnabled) {
      iconPath = `${Globals.PathToAssets}/synced.png`;
      newTitle += syncedTitle;
    } else {
      iconPath = `${Globals.PathToAssets}/notsynced.png`;
      newTitle += notSyncedTitle;
    }

    return this.$q((resolve, reject) => {
      const iconUpdated = this.$q.defer<void>();
      const titleUpdated = this.$q.defer<void>();

      browser.browserAction.getTitle({}).then((currentTitle) => {
        // Don't do anything if browser action title hasn't changed
        if (newTitle === currentTitle) {
          return resolve();
        }

        // Set a delay if finished syncing to prevent flickering when executing many syncs
        if (currentTitle.indexOf(syncingTitle) > 0 && newTitle.indexOf(syncedTitle)) {
          this.refreshInterfaceTimeout = this.$timeout(() => {
            browser.browserAction.setIcon({ path: iconPath });
            browser.browserAction.setTitle({ title: newTitle });
          }, 350);
          iconUpdated.resolve();
          titleUpdated.resolve();
        } else {
          browser.browserAction.setIcon({ path: iconPath }).then(iconUpdated.resolve);
          browser.browserAction.setTitle({ title: newTitle }).then(titleUpdated.resolve);
        }

        this.$q.all([iconUpdated, titleUpdated]).then(resolve).catch(reject);
      });
    });
  }

  sendMessage(message: Message): ng.IPromise<any> {
    // If background module loaded use browser API to send the message
    let module: ng.IModule | undefined;
    try {
      module = angular.module('WebExtBackgroundModule');
    } catch (err) {}

    let promise: ng.IPromise<any>;
    if (angular.isUndefined(module)) {
      promise = browser.runtime.sendMessage(message);
    } else {
      promise = this.backgroundSvc.onMessage(message);
    }

    return promise.catch((err: Error) => {
      // Recreate the error object as webextension-polyfill wraps the object before returning it
      const error: BaseError = new (<any>Errors)[err.message]();
      error.logged = true;
      throw error;
    });
  }

  startSyncUpdateChecks(): ng.IPromise<void> {
    // Register alarm
    return browser.alarms
      .clear(Globals.Alarms.SyncUpdatesCheck.Name)
      .then(() => {
        return browser.alarms.create(Globals.Alarms.SyncUpdatesCheck.Name, {
          periodInMinutes: Globals.Alarms.SyncUpdatesCheck.Period
        });
      })
      .catch((err) => {
        throw new FailedRegisterAutoUpdatesError(undefined, err);
      });
  }

  stopSyncUpdateChecks(): ng.IPromise<void> {
    // Clear registered alarm
    return browser.alarms.clear(Globals.Alarms.SyncUpdatesCheck.Name).then(() => {});
  }

  urlIsNativeConfigPage(url?: string): boolean {
    return false;
  }

  urlIsSupported(url: string): boolean {
    return true;
  }
}
</file>

<file path="src/modules/webext/shared/webext-store/webext-store.service.ts">
import { Injectable } from 'angular-ts-decorators';
import { clear, createStore, del, get, keys as idbKeys, set, UseStore } from 'idb-keyval';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreContent, TraceLogItem } from '../../../shared/store/store.interface';
import { StoreService } from '../../../shared/store/store.service';

@Injectable('StoreService')
export class WebExtStoreService extends StoreService {
  dbName = 'xbs-store';
  store: UseStore;
  storeName = 'xbs';

  static $inject = ['$q'];
  constructor($q: ng.IQService) {
    super($q);

    // Initialise the store
    this.store = createStore(this.dbName, this.storeName);
  }

  protected addTraceLog(newLogItem: TraceLogItem): ng.IPromise<void> {
    return this.getAllTraceLogs().then((traceLogItems = []) => {
      traceLogItems.push(newLogItem);
      return this.setInIdbKeyval(StoreKey.TraceLog, traceLogItems);
    });
  }

  protected clear(): ng.IPromise<void> {
    return clear(this.getStore());
  }

  protected getFromStore<T = StoreContent>(keys: string[] = []): ng.IPromise<T[]> {
    const values = new Array(keys.length);
    return this.$q<T[]>((resolve, reject) => {
      // Get non-trace log values
      const keysWithoutTraceLog = keys.filter((key) => key !== StoreKey.TraceLog);
      if (keysWithoutTraceLog.length === 0) {
        return resolve();
      }
      return this.$q.all(keysWithoutTraceLog.map((key) => get<any>(key, this.getStore()))).then((results) => {
        keysWithoutTraceLog.forEach((key, index) => {
          values[keys.indexOf(key)] = results[index];
        });
        resolve();
      });
    })
      .then(() => {
        // Get trace log if requested
        if (!keys.includes(StoreKey.TraceLog)) {
          return;
        }
        return this.getAllTraceLogs().then((traceLogItems) => {
          values[keys.indexOf(StoreKey.TraceLog)] = traceLogItems;
        });
      })
      .then(() => values);
  }

  protected getAllTraceLogs(): ng.IPromise<TraceLogItem[]> {
    return get<TraceLogItem[]>(StoreKey.TraceLog, this.getStore()).then((traceLogItems) => traceLogItems);
  }

  protected getStore(): UseStore {
    return this.store;
  }

  protected keys(): ng.IPromise<string[]> {
    return this.$q.resolve().then(() => idbKeys(this.getStore()));
  }

  protected removeFromStore(keys: string[] = []): ng.IPromise<void> {
    return this.$q.all(keys.map((key) => del(key, this.getStore()))).then(() => {});
  }

  protected setInStore(key: string, value: any): ng.IPromise<void> {
    if (key === StoreKey.TraceLog) {
      return this.addTraceLog(value);
    }
    return this.setInIdbKeyval(key, value);
  }

  protected setInIdbKeyval(key: string, value: any): ng.IPromise<void> {
    return set(key, value, this.getStore());
  }
}
</file>

<file path="src/modules/webext/shared/webext-upgrade/webext-v1.6.0-upgrade-provider.service.ts">
import { Injectable } from 'angular-ts-decorators';
import browser from 'webextension-polyfill';
import { ApiServiceType } from '../../../shared/api/api.enum';
import { ApiXbrowsersyncSyncInfo } from '../../../shared/api/api-xbrowsersync/api-xbrowsersync.interface';
import { BookmarkService } from '../../../shared/bookmark/bookmark.interface';
import { BookmarkHelperService } from '../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import Globals from '../../../shared/global-shared.constants';
import { PlatformService } from '../../../shared/global-shared.interface';
import { StoreKey } from '../../../shared/store/store.enum';
import { StoreService } from '../../../shared/store/store.service';
import { V160UpgradeProviderService } from '../../../shared/upgrade/v1.6.0-upgrade-provider/v1.6.0-upgrade-provider.service';
import { UtilityService } from '../../../shared/utility/utility.service';

@Injectable('V160UpgradeProviderService')
export class WebExtV160UpgradeProviderService extends V160UpgradeProviderService {
  bookmarkSvc: BookmarkService;

  static $inject = [
    '$q',
    'BookmarkHelperService',
    'BookmarkService',
    'PlatformService',
    'StoreService',
    'UtilityService'
  ];
  constructor(
    $q: ng.IQService,
    BookmarkHelperSvc: BookmarkHelperService,
    BookmarkSvc: BookmarkService,
    PlatformSvc: PlatformService,
    StoreSvc: StoreService,
    UtilitySvc: UtilityService
  ) {
    super($q, BookmarkHelperSvc, PlatformSvc, StoreSvc, UtilitySvc);
    this.bookmarkSvc = BookmarkSvc;
  }

  upgradeApp(upgradingFromVersion?: string): ng.IPromise<void> {
    // Migrate items in local storage to new IndexedDB store
    return this.storeSvc
      .init()
      .then(() => browser.storage.local.get())
      .then((cachedData) => {
        if (!cachedData || Object.keys(cachedData).length === 0) {
          return;
        }

        const syncInfo: Partial<ApiXbrowsersyncSyncInfo> = {
          serviceType: ApiServiceType.xBrowserSync
        };
        return this.$q
          .all(
            Object.keys(cachedData).map((key) => {
              // Ignore items that should not be migrated
              if (key === 'password' || key === 'traceLog') {
                return;
              }

              // Upgrade sync settings
              switch (key) {
                case 'serviceUrl':
                  syncInfo.serviceUrl = cachedData[key];
                  return;
                case 'syncId':
                  syncInfo.id = cachedData[key];
                  return;
                case 'syncVersion':
                  syncInfo.version = cachedData[key];
                  return;
                default:
              }

              return this.storeSvc.set(key, cachedData[key]);
            })
          )
          .then(() => {
            if (!syncInfo.id) {
              return;
            }
            if (!syncInfo.serviceUrl) {
              syncInfo.serviceUrl = Globals.URL.DefaultServiceUrl;
            }
            return this.storeSvc.set(StoreKey.SyncInfo, syncInfo);
          });
      })
      .then(() => browser.storage.local.clear())
      .then(() => super.upgradeApp());
  }
}
</file>

<file path="src/modules/webext/shared/webext-shared.module.ts">
import { NgModule } from 'angular-ts-decorators';
import { BookmarkIdMapperService } from './bookmark-id-mapper/bookmark-id-mapper.service';
import { WebExtStoreService } from './webext-store/webext-store.service';
import { WebExtV160UpgradeProviderService } from './webext-upgrade/webext-v1.6.0-upgrade-provider.service';

@NgModule({
  id: 'WebExtSharedModule',
  providers: [BookmarkIdMapperService, WebExtStoreService, WebExtV160UpgradeProviderService]
})
export class WebExtSharedModule {}
</file>

<file path="src/modules/webext/webext-app/shared/webext-app-helper/webext-app-helper.service.ts">
import angular from 'angular';
import { boundMethod } from 'autobind-decorator';
import browser from 'webextension-polyfill';
import { AppHelperService } from '../../../../app/shared/app-helper/app-helper.service';
import { BookmarkHelperService } from '../../../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import { ExceptionHandler } from '../../../../shared/errors/errors.interface';
import Globals from '../../../../shared/global-shared.constants';
import { MessageCommand } from '../../../../shared/global-shared.enum';
import { LogService } from '../../../../shared/log/log.service';
import { StoreService } from '../../../../shared/store/store.service';
import { Sync } from '../../../../shared/sync/sync.interface';
import { SyncService } from '../../../../shared/sync/sync.service';
import { UtilityService } from '../../../../shared/utility/utility.service';
import { WorkingService } from '../../../../shared/working/working.service';
import { WebExtPlatformService } from '../../../shared/webext-platform/webext-platform.service';

export abstract class WebExtAppHelperService extends AppHelperService {
  $filter: ng.FilterFactory;
  bookmarkHelperSvc: BookmarkHelperService;
  platformSvc: WebExtPlatformService;

  static $inject = [
    '$exceptionHandler',
    '$filter',
    '$location',
    '$q',
    '$timeout',
    'BookmarkHelperService',
    'LogService',
    'PlatformService',
    'StoreService',
    'SyncService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $filter: ng.FilterFactory,
    $location: ng.ILocationService,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    BookmarkHelperSvc: BookmarkHelperService,
    LogSvc: LogService,
    PlatformSvc: WebExtPlatformService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    super($exceptionHandler, $location, $q, $timeout, LogSvc, PlatformSvc, StoreSvc, SyncSvc, UtilitySvc, WorkingSvc);

    this.$filter = $filter;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
  }

  confirmBeforeSyncing(): boolean {
    return true;
  }

  copyTextToClipboard(text: string): ng.IPromise<void> {
    return this.$q.resolve().then(() => navigator.clipboard.writeText(text));
  }

  currentUrlBookmarked(): ng.IPromise<boolean> {
    return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
      if (!syncEnabled) {
        return false;
      }

      // Check if current url exists in bookmarks
      return this.bookmarkHelperSvc.findCurrentUrlInBookmarks().then((result) => {
        return !angular.isUndefined(result ?? undefined);
      });
    });
  }

  getCurrentSync(): ng.IPromise<Sync> {
    return this.platformSvc.sendMessage({
      command: MessageCommand.GetCurrentSync
    });
  }

  abstract getHelpPages(): string[];

  getNextScheduledSyncUpdateCheck(): ng.IPromise<Date> {
    return browser.alarms.get(Globals.Alarms.SyncUpdatesCheck.Name).then((alarm) => {
      return !alarm ? new Date('') : new Date(alarm.scheduledTime);
    });
  }

  getSyncQueueLength(): ng.IPromise<number> {
    return this.platformSvc.sendMessage({
      command: MessageCommand.GetSyncQueueLength
    });
  }

  @boundMethod
  openUrl(event?: Event, url?: string): void {
    // Stop event propogation
    event?.preventDefault();

    // Open the target url
    if (url) {
      this.platformSvc.openUrl(url);
    } else if (event?.currentTarget) {
      this.platformSvc.openUrl((event.currentTarget as HTMLLinkElement).href);
    } else {
      this.logSvc.logWarning('Couldn’t open url');
    }
  }

  removePermissions(): ng.IPromise<void> {
    // Remove optional permissions
    return browser.permissions.remove(this.platformSvc.optionalPermissions).then(() => {
      this.logSvc.logInfo('Optional permissions removed');
    });
  }

  requestPermissions(): ng.IPromise<boolean> {
    // Request optional permissions
    return browser.permissions.request(this.platformSvc.optionalPermissions).then((granted) => {
      this.logSvc.logInfo(`Optional permissions ${!granted ? 'not ' : ''}granted`);
      return granted;
    });
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app-alert/webext-app-alert.component.html">
<div class="alert animate" role="alert" ng-class="{
  'alert-info': vm.alert.type === vm.alertType.Information,
  'alert-warning': vm.alert.type === vm.alertType.Warning,
  'alert-danger': vm.alert.type === vm.alertType.Error }" ng-if="vm.showAlert">
  <icon-button type="'x'" title="{{ vm.platformSvc.getI18nString(vm.Strings.Button.Close) }}"
               on-click="vm.utilitySvc.handleEvent(vm.close)" tab-index="1000"></icon-button>
  <h4 ng-bind-html="vm.alert.title"></h4>
  <p ng-bind-html="vm.alert.message"></p>
</div>
</file>

<file path="src/modules/webext/webext-app/webext-app-alert/webext-app-alert.component.scss">
@import '../../../../styles/modules/all';

app-alert {
  --color-alert-text: #{$color-text1-default};

  display: block;

  @include theme-dark {
    --color-alert-text: #{$color-text1-dark};
  }

  .alert {
    @include animation-fade-in;
    @include animation-fade-out;

    border-radius: 0;
    border-width: 0;
    color: var(--color-alert-text);
    margin: 0 auto;
    max-width: $width-tablet-small;
    padding: 0.75rem;
    position: fixed;
    width: 100%;
    z-index: 1010;

    &-danger {
      background-color: var(--color-danger);
    }

    &-info {
      background-color: var(--color-success);
    }

    &-warning {
      background-color: var(--color-warning);
    }

    a {
      border-bottom-color: var(--color-alert-text);
      color: var(--color-alert-text);

      @media (hover: hover) {
        &:active,
        &:focus,
        &:hover {
          border-bottom-color: var(--color-alert-text);
          color: var(--color-alert-text);
        }
      }
    }

    icon-button {
      color: var(--color-alert-text);
      position: absolute;
      right: 0.5rem;
      top: 0.5rem;
    }

    h4,
    p {
      margin-right: 2rem;
    }

    h4 {
      margin-bottom: 0.5rem;
    }

    p {
      margin-bottom: 0;
    }

    @media (min-width: $width-mobile-small + 1) {
      font-size: 0.9rem;

      h4 {
        margin-bottom: 0 !important;
        margin-top: -0.4rem;
      }

      p {
        max-width: 95%;
      }
    }
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app-alert/webext-app-alert.component.ts">
import angular from 'angular';
import { Component } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AlertType } from '../../../shared/alert/alert.enum';
import { Alert } from '../../../shared/alert/alert.interface';
import { AlertService } from '../../../shared/alert/alert.service';
import { PlatformService } from '../../../shared/global-shared.interface';
import { UtilityService } from '../../../shared/utility/utility.service';

@Component({
  controllerAs: 'vm',
  selector: 'appAlert',
  styles: [require('./webext-app-alert.component.scss')],
  template: require('./webext-app-alert.component.html')
})
export class WebExtAppAlertComponent {
  Strings = require('../../../../../res/strings/en.json');

  $scope: ng.IScope;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;

  alert: Alert;
  alertType = AlertType;
  showAlert = false;

  static $inject = ['$scope', '$timeout', 'AlertService', 'PlatformService', 'UtilityService'];
  constructor(
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService
  ) {
    this.$scope = $scope;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;

    $scope.$watch(
      () => AlertSvc.currentAlert,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          this.alert = newVal;
          this.showAlert = !angular.isUndefined(newVal ?? undefined);
        }
      }
    );
  }

  @boundMethod
  close(): void {
    this.$timeout(() => {
      this.showAlert = false;
      this.alertSvc.clearCurrentAlert();
    });
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app-backup-restore-settings/webext-app-backup-restore-settings.component.ts">
import angular from 'angular';
import { boundMethod } from 'autobind-decorator';
import { BackupRestoreSettingsComponent } from '../../../app/app-settings/backup-restore-settings/backup-restore-settings.component';
import { AutoBackUpSchedule } from '../../../shared/backup-restore/backup-restore.interface';
import { MessageCommand } from '../../../shared/global-shared.enum';
import { WebExtPlatformService } from '../../shared/webext-platform/webext-platform.service';
import { EnableAutoBackUpMessage } from '../../webext.interface';

interface AutoBackUpFormController extends ng.IFormController {
  autoBackUpAtHour: any;
  autoBackUpAtMinute: any;
  autoBackUpEveryNumber: any;
  autoBackUpEveryUnit: any;
}

export abstract class WebExtAppBackupRestoreSettingsComponent extends BackupRestoreSettingsComponent {
  platformSvc: WebExtPlatformService;

  autoBackUpAtHour: string;
  autoBackUpAtMinute: string;
  autoBackUpEveryNumber: string;
  autoBackUpEveryUnit: string;
  autoBackUpEnabled: boolean;
  autoBackUpForm: AutoBackUpFormController;
  autoBackUpHours: string[] = [
    '00',
    '01',
    '02',
    '03',
    '04',
    '05',
    '06',
    '07',
    '08',
    '09',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
    '16',
    '17',
    '18',
    '19',
    '20',
    '21',
    '22',
    '23'
  ];
  autoBackUpMinutes: string[] = ['00', '05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55'];
  autoBackUpSchedule: AutoBackUpSchedule;

  autoBackUpFormComplete(): void {
    this.displayAutoBackUpForm = false;
  }

  @boundMethod
  confirmAutoBackUpForm(): void {
    this.displayAutoBackUpConfirmation = false;
    this.displayAutoBackUpForm = false;
  }

  @boundMethod
  hideAutoBackUpPanel(): void {
    this.displayAutoBackUpConfirmation = false;
    if (this.displayAutoBackUpForm) {
      this.autoBackUpEnabled = false;
      this.displayAutoBackUpForm = false;
    }
  }

  ngOnInit(): void {
    // Load auto back up schedule
    this.backupRestoreSvc.getSetAutoBackUpSchedule().then((autoBackUpSchedule) => {
      if (!angular.isUndefined(autoBackUpSchedule ?? undefined)) {
        this.autoBackUpSchedule = autoBackUpSchedule;
        this.autoBackUpEnabled = true;
      }
    });

    super.ngOnInit();
  }

  resetAutoBackUpForm(): void {
    this.autoBackUpForm.$setPristine();
    this.autoBackUpForm.$setUntouched();
    this.autoBackUpAtHour = '00';
    this.autoBackUpAtMinute = '00';
    this.autoBackUpEveryNumber = '1';
    this.autoBackUpEveryUnit = 'day';
  }

  @boundMethod
  submitAutoBackUpForm(): void {
    // Save the localised schedule display strings to the store
    this.autoBackUpSchedule = {
      autoBackUpNumber: this.autoBackUpForm.autoBackUpEveryNumber.$$element[0].selectedOptions[0].innerText,
      autoBackUpUnit: this.autoBackUpForm.autoBackUpEveryUnit.$$element[0].selectedOptions[0].innerText,
      autoBackUpHour: this.autoBackUpForm.autoBackUpAtHour.$$element[0].selectedOptions[0].innerText,
      autoBackUpMinute: this.autoBackUpForm.autoBackUpAtMinute.$$element[0].selectedOptions[0].innerText
    };

    // Enable auto back up using the actual values
    const message: EnableAutoBackUpMessage = {
      command: MessageCommand.EnableAutoBackUp,
      schedule: {
        autoBackUpNumber: this.autoBackUpEveryNumber,
        autoBackUpUnit: this.autoBackUpEveryUnit,
        autoBackUpHour: this.autoBackUpAtHour,
        autoBackUpMinute: this.autoBackUpAtMinute
      }
    };
    this.platformSvc
      .sendMessage(message)
      .then(() => this.backupRestoreSvc.getSetAutoBackUpSchedule(this.autoBackUpSchedule))
      .then(() => this.autoBackUpFormComplete());
  }

  @boundMethod
  toggleAutoBackUp(): void {
    this.autoBackUpEnabled = !this.autoBackUpEnabled;
    if (this.autoBackUpEnabled) {
      // Display auto back up form
      this.hideResetPanel();
      this.hideRestorePanel();
      this.resetAutoBackUpForm();
      this.displayAutoBackUpForm = true;
      this.appHelperSvc.focusOnElement('#autoBackUpForm .focused');
    } else {
      // Disable auto back up
      this.backupRestoreSvc.getSetAutoBackUpSchedule(null);
      this.platformSvc.sendMessage({ command: MessageCommand.DisableAutoBackUp });
      this.autoBackUpSchedule = undefined;
      this.hideAutoBackUpPanel();
    }
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app-search/webext-app-search.component.ts">
import { Component } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AppSearchComponent } from '../../../app/app-search/app-search.component';
import { WebExtAppHelperService } from '../shared/webext-app-helper/webext-app-helper.service';

@Component({
  controllerAs: 'vm',
  selector: 'appSearch',
  template: require('../../../app/app-search/app-search.component.html')
})
export class WebExtAppSearchComponent extends AppSearchComponent {
  appHelperSvc: WebExtAppHelperService;

  ngOnInit(): ng.IPromise<void> {
    // Check if current url is bookmarked
    return (
      this.appHelperSvc
        .currentUrlBookmarked()
        .then((currentUrlBookmarked) => {
          this.currentUrlBookmarked = currentUrlBookmarked;
        })
        .then(() => super.ngOnInit())
        // Focus on search box
        .then(() => this.appHelperSvc.focusOnElement('input[name=txtSearch]'))
    );
  }

  @boundMethod
  toggleBookmarkTreeView(): ng.IPromise<void> {
    return (
      super
        .toggleBookmarkTreeView()
        // Focus on search box
        .then(() => this.appHelperSvc.focusOnElement('input[name=txtSearch]'))
    );
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app-working/webext-app-working.component.html">
<div class="animate overlay"
     ng-class="{ 'darker-overlay': vm.currentContext !== vm.WorkingContext.WaitingForSyncsToFinish, 'fullsize': vm.currentContext === vm.WorkingContext.WaitingForSyncsToFinish }"
     ng-show="vm.show">
  <div class="spinner-border" aria-hidden="true"></div>
  <h3>{{ vm.message }}</h3>
  <div class="buttons" ng-if="vm.enableCancel">
    <button type="button" class="btn btn-default" ng-click="vm.utilitySvc.handleEvent(vm.cancelSync)">
      {{ vm.platformSvc.getI18nString(vm.Strings.Button.Cancel) }}
    </button>
  </div>
</div>
</file>

<file path="src/modules/webext/webext-app/webext-app-working/webext-app-working.component.scss">
@import '../../../../styles/modules/all';

app-working {
  display: block;

  h3 {
    @include ellipsis;

    color: var(--color-spinner);
    font-size: 1.1rem;
    margin: 1rem 0 0;
  }

  .buttons {
    align-items: flex-end;
    display: flex;
    height: 50vh;
    justify-content: center;
    position: absolute;
    width: 50vw;

    .button {
      position: absolute;
    }
  }

  .fullsize {
    height: 37rem;
    position: unset;
    width: 23rem;
  }

  .spinner-border {
    height: 20vw;
    width: 20vw;
  }

  .overlay {
    @include animation-fade-in;

    flex-direction: column;
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app-working/webext-app-working.component.ts">
import { Component, Output } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AppHelperService } from '../../../app/shared/app-helper/app-helper.service';
import { AlertService } from '../../../shared/alert/alert.service';
import { PlatformService } from '../../../shared/global-shared.interface';
import { SyncType } from '../../../shared/sync/sync.enum';
import { UtilityService } from '../../../shared/utility/utility.service';
import { WorkingContext } from '../../../shared/working/working.enum';
import { WorkingService } from '../../../shared/working/working.service';

@Component({
  controllerAs: 'vm',
  selector: 'appWorking',
  styles: [require('./webext-app-working.component.scss')],
  template: require('./webext-app-working.component.html')
})
export class WebExtAppWorkingComponent {
  Strings = require('../../../../../res/strings/en.json');

  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  appHelperSvc: AppHelperService;
  platformSvc: PlatformService;
  utilitySvc: UtilityService;
  workingSvc: WorkingService;

  currentContext: WorkingContext;
  currentTimeout: ng.IPromise<void>;
  enableCancel: boolean;
  message: string;
  show = false;
  WorkingContext = WorkingContext;

  @Output() cancelAction: () => any;

  static $inject = [
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'PlatformService',
    'UtilityService',
    'WorkingService'
  ];
  constructor(
    $scope: ng.IScope,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    AppHelperSvc: AppHelperService,
    PlatformSvc: PlatformService,
    UtilitySvc: UtilityService,
    WorkingSvc: WorkingService
  ) {
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.appHelperSvc = AppHelperSvc;
    this.platformSvc = PlatformSvc;
    this.utilitySvc = UtilitySvc;
    this.workingSvc = WorkingSvc;

    // Watch working service for status changes to display as panel
    $scope.$watch(
      () => WorkingSvc.status,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          if (this.show !== newVal.activated) {
            if (newVal.activated) {
              if (newVal.context === WorkingContext.WaitingForSyncsToFinish) {
                this.showView(newVal.context);
              } else {
                this.showPanel(newVal.context);
              }
            } else {
              this.hidePanel();
            }
          }
        }
      }
    );
  }

  @boundMethod
  cancelSync(): void {
    this.cancelAction()().then(() => this.appHelperSvc.switchView());
  }

  hidePanel(): void {
    if (this.currentTimeout) {
      this.$timeout.cancel(this.currentTimeout);
    }
    this.currentContext = undefined;
    this.currentTimeout = undefined;
    this.show = false;
  }

  showPanel(context: WorkingContext): void {
    // Return if working panel already displayed
    if (this.currentContext) {
      return;
    }

    // Hide any alert messages
    this.alertSvc.clearCurrentAlert();

    // Set displayed message based on context
    this.currentContext = context;
    let message: string;
    switch (context) {
      case WorkingContext.Restoring:
        message = this.platformSvc.getI18nString(this.Strings.View.Working.Restoring);
        break;
      case WorkingContext.Resetting:
        message = this.platformSvc.getI18nString(this.Strings.View.Working.Resetting);
        break;
      default:
        message = this.platformSvc.getI18nString(this.Strings.View.Working.Syncing);
    }

    this.currentTimeout = this.$timeout(() => {
      this.enableCancel = false;
      this.message = message;
      this.show = true;
    });
  }

  showView(context: WorkingContext): void {
    this.currentContext = context;
    this.message = this.platformSvc.getI18nString(this.Strings.View.Working.Syncing);
    this.appHelperSvc.getCurrentSync().then((currentSync) => {
      this.enableCancel = currentSync?.type === SyncType.Remote || false;
      this.show = true;
    });
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app-working/webext-app-working.controller.html">
<app-working cancel-action="vm.workingCancelAction"></app-working>
</file>

<file path="src/modules/webext/webext-app/webext-app.component.scss">
@import '../../../styles/modules/all';

body {
  overflow: hidden;
}

app {
  .icon-button-container {
    icon-button {
      margin-top: -0.65em !important;

      & > div {
        height: 1.3em !important;
        width: 1.3em !important;
      }
    }
  }

  .container {
    &.search {
      .view,
      .view-content {
        max-height: 599px;
      }

      .view {
        height: auto;
        width: 38rem;

        .header-panel {
          flex-direction: row-reverse;
        }
      }
    }

    &.settings {
      backup-restore-settings {
        #restoreForm .validation {
          bottom: -0.75rem;
        }
      }

      .view,
      .view-content {
        max-height: 37rem;
      }
    }

    .view {
      height: 37rem;
      width: 23rem;
    }
  }

  .header-panel {
    height: 1.7rem;
  }
}

app-search {
  .btn-clear {
    margin-top: -0.6em;
    right: 0.5em;
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app.component.ts">
import angular from 'angular';
import { Component, OnInit } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import { AppMainComponent } from '../../app/app-main/app-main.component';
import { SyncType } from '../../shared/sync/sync.enum';
import { Sync } from '../../shared/sync/sync.interface';
import { WorkingContext } from '../../shared/working/working.enum';
import { WebExtPlatformService } from '../shared/webext-platform/webext-platform.service';

@Component({
  controllerAs: 'vm',
  selector: 'app',
  styles: [require('./webext-app.component.scss')],
  template: require('../../app/app-main/app-main.component.html')
})
export class WebExtAppComponent extends AppMainComponent implements OnInit {
  platformSvc: WebExtPlatformService;

  static $inject = [
    '$location',
    '$q',
    '$scope',
    '$timeout',
    'AlertService',
    'AppHelperService',
    'BookmarkHelperService',
    'LogService',
    'NetworkService',
    'PlatformService',
    'SettingsService',
    'StoreService',
    'UtilityService',
    'WorkingService'
  ];

  copyTextToClipboard(text: string): ng.IPromise<void> {
    return navigator.clipboard.writeText(text);
  }

  ngOnInit(): ng.IPromise<void> {
    return (
      super
        .ngOnInit()
        // Check if a sync is currently in progress
        .then(() => this.appHelperSvc.getCurrentSync())
        .then((currentSync) => {
          if (!currentSync) {
            return;
          }

          // Display working panel
          this.logSvc.logInfo('Waiting for syncs to finish...');
          this.workingSvc.show(WorkingContext.WaitingForSyncsToFinish);
          return this.waitForSyncsToFinish()
            .then(() => {
              // Sync was a success if sync is still enabled
              return this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
                if (syncEnabled) {
                  this.logSvc.logInfo('Syncs finished, resuming');
                  return this.appHelperSvc.syncBookmarksSuccess();
                }
              });
            })
            .finally(() => this.workingSvc.hide());
        })
    );
  }

  waitForSyncsToFinish(): ng.IPromise<void> {
    const condition = (currentSync: Sync): ng.IPromise<boolean> => {
      return this.$q.resolve(!angular.isUndefined(currentSync ?? undefined));
    };

    const action = (): ng.IPromise<Sync> => {
      return this.$q((resolve, reject) => {
        this.$timeout(() => {
          this.appHelperSvc.getCurrentSync().then(resolve).catch(reject);
        }, 1e3);
      });
    };

    // Periodically check sync queue until it is empty
    return this.utilitySvc.asyncWhile<Sync>({} as any, condition, action).then(() => {});
  }

  @boundMethod
  workingCancelAction(): ng.IPromise<void> {
    this.logSvc.logInfo('Cancelling sync');
    return this.platformSvc
      .queueSync({
        type: SyncType.Cancel
      })
      .then(() => {});
  }
}
</file>

<file path="src/modules/webext/webext-app/webext-app.module.ts">
import { NgModule } from 'angular-ts-decorators';
import { AppModule } from '../../app/app.module';
import { AppBookmarkComponent } from '../../app/app-bookmark/app-bookmark.component';
import { WebExtSharedModule } from '../shared/webext-shared.module';
import { WebExtAppComponent } from './webext-app.component';
import { WebExtAppAlertComponent } from './webext-app-alert/webext-app-alert.component';
import { WebExtAppSearchComponent } from './webext-app-search/webext-app-search.component';
import { WebExtAppWorkingComponent } from './webext-app-working/webext-app-working.component';

@NgModule({
  declarations: [
    AppBookmarkComponent,
    WebExtAppAlertComponent,
    WebExtAppComponent,
    WebExtAppSearchComponent,
    WebExtAppWorkingComponent
  ],
  id: 'WebExtAppModule',
  imports: [AppModule, WebExtSharedModule]
})
export class WebExtAppModule {}
</file>

<file path="src/modules/webext/webext-background/webext-background.component.html">
<button id="install" ng-click="vm.install($event)"></button>
<button id="startup" ng-click="vm.startup()"></button>
</file>

<file path="src/modules/webext/webext-background/webext-background.component.ts">
import { Component } from 'angular-ts-decorators';
import { AlertService } from '../../shared/alert/alert.service';
import { WebExtBackgroundService } from './webext-background.service';

@Component({
  controllerAs: 'vm',
  selector: 'webextBackground',
  template: require('./webext-background.component.html')
})
export class WebExtBackgroundComponent {
  backgroundSvc: WebExtBackgroundService;

  startupInitiated = false;

  static $inject = ['$scope', 'AlertService', 'WebExtBackgroundService'];
  constructor($scope: ng.IScope, AlertSvc: AlertService, BackgroundSvc: WebExtBackgroundService) {
    this.backgroundSvc = BackgroundSvc;

    $scope.$watch(
      () => AlertSvc.currentAlert,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          this.backgroundSvc.displayAlert(newVal);
        }
      }
    );
  }

  install(event) {
    if (this.startupInitiated) {
      return;
    }

    this.startupInitiated = true;
    this.backgroundSvc.onInstall(event);
  }

  startup() {
    if (this.startupInitiated) {
      return;
    }

    this.backgroundSvc.init();
  }
}
</file>

<file path="src/modules/webext/webext-background/webext-background.module.ts">
import angular from 'angular';
import { NgModule } from 'angular-ts-decorators';
import browser from 'webextension-polyfill';
import { ExceptionHandlerService } from '../../shared/errors/exception-handler/exception-handler.service';
import { GlobalSharedModule } from '../../shared/global-shared.module';
import { WebExtSharedModule } from '../shared/webext-shared.module';
import { WebExtBackgroundComponent } from './webext-background.component';
import { WebExtBackgroundService } from './webext-background.service';

@NgModule({
  declarations: [WebExtBackgroundComponent],
  id: 'WebExtBackgroundModule',
  imports: [GlobalSharedModule, WebExtSharedModule],
  providers: [WebExtBackgroundService]
})
export class WebExtBackgroundModule {}

(WebExtBackgroundModule as NgModule).module
  .config([
    '$compileProvider',
    '$httpProvider',
    ($compileProvider: ng.ICompileProvider, $httpProvider: ng.IHttpProvider) => {
      $compileProvider.debugInfoEnabled(false);
      $httpProvider.interceptors.push('ApiRequestInterceptorFactory');
    }
  ])
  .factory('$exceptionHandler', ['$injector', 'AlertService', 'LogService', ExceptionHandlerService.Factory]);

// Set synchronous event handlers
browser.runtime.onInstalled.addListener((details) => {
  // Store event details as element data
  const element = document.querySelector('#install');
  angular.element(element).data('details', details);
  (document.querySelector('#install') as HTMLButtonElement).click();
});
browser.runtime.onStartup.addListener(() => {
  (document.querySelector('#startup') as HTMLButtonElement).click();
});
</file>

<file path="src/modules/webext/webext-background/webext-background.service.ts">
import angular from 'angular';
import { Injectable } from 'angular-ts-decorators';
import { boundMethod } from 'autobind-decorator';
import browser, { Alarms, Downloads, Notifications } from 'webextension-polyfill';
import { Alert } from '../../shared/alert/alert.interface';
import { AlertService } from '../../shared/alert/alert.service';
import { BackupRestoreService } from '../../shared/backup-restore/backup-restore.service';
import { BookmarkHelperService } from '../../shared/bookmark/bookmark-helper/bookmark-helper.service';
import {
  AmbiguousSyncRequestError,
  FailedDownloadFileError,
  HttpRequestAbortedError
} from '../../shared/errors/errors';
import { ExceptionHandler } from '../../shared/errors/errors.interface';
import Globals from '../../shared/global-shared.constants';
import { MessageCommand } from '../../shared/global-shared.enum';
import { PlatformService } from '../../shared/global-shared.interface';
import { LogService } from '../../shared/log/log.service';
import { NetworkService } from '../../shared/network/network.service';
import { SettingsService } from '../../shared/settings/settings.service';
import { StoreKey } from '../../shared/store/store.enum';
import { StoreService } from '../../shared/store/store.service';
import { Sync } from '../../shared/sync/sync.interface';
import { SyncService } from '../../shared/sync/sync.service';
import { TelemetryService } from '../../shared/telemetry/telemetry.service';
import { UpgradeService } from '../../shared/upgrade/upgrade.service';
import { UtilityService } from '../../shared/utility/utility.service';
import { ChromiumBookmarkService } from '../chromium/shared/chromium-bookmark/chromium-bookmark.service';
import { BookmarkIdMapperService } from '../shared/bookmark-id-mapper/bookmark-id-mapper.service';
import {
  DownloadFileMessage,
  EnableAutoBackUpMessage,
  InstallBackup,
  Message,
  SyncBookmarksMessage
} from '../webext.interface';

@Injectable('WebExtBackgroundService')
export class WebExtBackgroundService {
  Strings = require('../../../../res/strings/en.json');

  $exceptionHandler: ExceptionHandler;
  $q: ng.IQService;
  $timeout: ng.ITimeoutService;
  alertSvc: AlertService;
  backupRestoreSvc: BackupRestoreService;
  bookmarkIdMapperSvc: BookmarkIdMapperService;
  bookmarkHelperSvc: BookmarkHelperService;
  bookmarkSvc: ChromiumBookmarkService;
  logSvc: LogService;
  networkSvc: NetworkService;
  platformSvc: PlatformService;
  settingsSvc: SettingsService;
  storeSvc: StoreService;
  syncSvc: SyncService;
  telemetrySvc: TelemetryService;
  upgradeSvc: UpgradeService;
  utilitySvc: UtilityService;

  notificationClickHandlers: any[] = [];

  static $inject = [
    '$exceptionHandler',
    '$q',
    '$timeout',
    'AlertService',
    'BackupRestoreService',
    'BookmarkHelperService',
    'BookmarkIdMapperService',
    'BookmarkService',
    'LogService',
    'NetworkService',
    'PlatformService',
    'SettingsService',
    'StoreService',
    'SyncService',
    'TelemetryService',
    'UpgradeService',
    'UtilityService'
  ];
  constructor(
    $exceptionHandler: ExceptionHandler,
    $q: ng.IQService,
    $timeout: ng.ITimeoutService,
    AlertSvc: AlertService,
    BackupRestoreSvc: BackupRestoreService,
    BookmarkHelperSvc: BookmarkHelperService,
    BookmarkIdMapperSvc: BookmarkIdMapperService,
    BookmarkSvc: ChromiumBookmarkService,
    LogSvc: LogService,
    NetworkSvc: NetworkService,
    PlatformSvc: PlatformService,
    SettingsSvc: SettingsService,
    StoreSvc: StoreService,
    SyncSvc: SyncService,
    TelemetrySvc: TelemetryService,
    UpgradeSvc: UpgradeService,
    UtilitySvc: UtilityService
  ) {
    this.$exceptionHandler = $exceptionHandler;
    this.$q = $q;
    this.$timeout = $timeout;
    this.alertSvc = AlertSvc;
    this.backupRestoreSvc = BackupRestoreSvc;
    this.bookmarkIdMapperSvc = BookmarkIdMapperSvc;
    this.bookmarkHelperSvc = BookmarkHelperSvc;
    this.bookmarkSvc = BookmarkSvc;
    this.logSvc = LogSvc;
    this.networkSvc = NetworkSvc;
    this.platformSvc = PlatformSvc;
    this.settingsSvc = SettingsSvc;
    this.storeSvc = StoreSvc;
    this.syncSvc = SyncSvc;
    this.telemetrySvc = TelemetrySvc;
    this.upgradeSvc = UpgradeSvc;
    this.utilitySvc = UtilitySvc;

    browser.alarms.onAlarm.addListener(this.onAlarm);
    browser.notifications.onClicked.addListener(this.onNotificationClicked);
    browser.notifications.onClosed.addListener(this.onNotificationClosed);
    browser.runtime.onMessage.addListener(this.onMessage);
  }

  checkForNewVersion(): void {
    this.platformSvc.getAppVersion().then((appVersion) => {
      return this.utilitySvc.checkForNewVersion(appVersion).then((newVersion) => {
        if (!newVersion) {
          return;
        }

        const alert: Alert = {
          message: this.platformSvc
            .getI18nString(this.Strings.Alert.AppUpdateAvailable.Message)
            .replace('{version}', `v${newVersion}`),
          title: this.platformSvc.getI18nString(this.Strings.Alert.AppUpdateAvailable.Title)
        };
        this.displayAlert(alert, `${Globals.ReleaseNotesUrlStem}${newVersion}`);
      });
    });
  }

  checkForSyncUpdates(): ng.IPromise<void> {
    // Exit if currently syncing
    const currentSync = this.syncSvc.getCurrentSync();
    if (currentSync) {
      return this.$q.resolve();
    }

    // Exit if sync not enabled
    return this.syncSvc.executeSync().catch((err) => this.checkForSyncUpdatesFailed(err));
  }

  checkForSyncUpdatesFailed(err: Error): void {
    // Don't display alert if sync failed due to network connection
    if (this.networkSvc.isNetworkConnectionError(err)) {
      this.logSvc.logInfo('Could not check for updates, no connection');
      return;
    }
    throw err;
  }

  checkForSyncUpdatesOnStartup(): ng.IPromise<void> {
    return this.$q<void>((resolve, reject) => {
      this.utilitySvc.isSyncEnabled().then((syncEnabled) => {
        if (!syncEnabled) {
          return resolve();
        }

        // Check for updates to synced bookmarks
        this.checkForSyncUpdates()
          .then(resolve)
          .catch((err) => {
            if (!this.networkSvc.isNetworkConnectionError(err)) {
              return reject(err);
            }

            // If request failed, retry once
            this.logSvc.logInfo('Connection lost, retrying check for sync updates momentarily');
            this.$timeout(() => {
              this.utilitySvc.isSyncEnabled().then((syncEnabledAfterError) => {
                if (!syncEnabledAfterError) {
                  this.logSvc.logInfo('Sync was disabled before retry attempted');
                  return reject(new HttpRequestAbortedError());
                }
                this.checkForSyncUpdates().then(resolve).catch(reject);
              });
            }, 5000);
          });
      });
    });
  }

  displayAlert(alert: Alert, url?: string): void {
    // Strip html tags from message
    const urlRegex = new RegExp(Globals.URL.ValidUrlRegex, 'i');
    const urlInAlert = alert.message.match(urlRegex)?.find(Boolean);
    const messageToDisplay = urlInAlert
      ? new DOMParser().parseFromString(`<span>${alert.message}</span>`, 'text/xml').firstElementChild.textContent
      : alert.message;
    const options: Notifications.CreateNotificationOptions = {
      iconUrl: `${Globals.PathToAssets}/notification.svg`,
      message: messageToDisplay,
      title: alert.title,
      type: 'basic'
    };

    // Display notification
    browser.notifications.create(this.utilitySvc.getUniqueishId(), options).then((notificationId) => {
      // Add a click handler to open url if provided or if the message contains a url
      const urlToOpenOnClick = urlInAlert ?? url;
      if (urlToOpenOnClick) {
        const openUrlInNewTab = () => {
          this.platformSvc.openUrl(urlToOpenOnClick);
        };
        this.notificationClickHandlers.push({
          id: notificationId,
          eventHandler: openUrlInNewTab
        });
      }
    });
  }

  getDownloadById(id: number): ng.IPromise<Downloads.DownloadItem> {
    return browser.downloads.search({ id }).then((results) => {
      const [download] = results;
      if ((download ?? undefined) === undefined) {
        this.logSvc.logWarning('Failed to find download');
        return;
      }
      return download;
    });
  }

  init(): void {
    this.logSvc.logInfo('Starting up');

    // Before initialising, check if upgrade required
    this.platformSvc
      .getAppVersion()
      .then((appVersion) => this.upgradeSvc.checkIfUpgradeRequired(appVersion))
      .then((upgradeRequired) => upgradeRequired && this.upgradeExtension())
      .then(() =>
        this.$q
          .all([
            this.settingsSvc.checkForAppUpdates(),
            this.settingsSvc.telemetryEnabled(),
            this.utilitySvc.isSyncEnabled()
          ])
          .then((data) => {
            // Update browser action icon
            const [checkForAppUpdates, telemetryEnabled, syncEnabled] = data;
            this.platformSvc.refreshNativeInterface(syncEnabled);

            // Check for new app version
            if (checkForAppUpdates) {
              this.$timeout(() => this.checkForNewVersion(), 5e3);
            }

            // Enable sync and check for updates
            if (!syncEnabled) {
              return;
            }
            return this.syncSvc.enableSync().then(() => {
              this.$timeout(() => this.checkForSyncUpdatesOnStartup(), 3e3);

              // Submit telemetry if enabled
              if (telemetryEnabled) {
                this.$timeout(() => this.telemetrySvc.submitTelemetry(), 4e3);
              }
            });
          })
      );
  }

  installExtension(): ng.IPromise<void> {
    // Initialise data storage
    return (
      this.storeSvc
        .init()
        .then(() =>
          this.$q.all([
            this.storeSvc.set(StoreKey.DisplayOtherSyncsWarning, true),
            this.storeSvc.set(StoreKey.DisplayPermissions, true),
            this.storeSvc.set(StoreKey.SyncBookmarksToolbar, true)
          ])
        )
        .then(() => {
          // Get native bookmarks and save data state at install to store
          return this.bookmarkSvc.getNativeBookmarksAsBookmarks().then((bookmarks) => {
            const backup: InstallBackup = {
              bookmarks,
              date: new Date().toISOString()
            };
            return this.storeSvc.set(StoreKey.InstallBackup, JSON.stringify(backup));
          });
        })
        // Set the initial upgrade version
        .then(() =>
          this.platformSvc.getAppVersion().then((currentVersion) =>
            this.upgradeSvc.setLastUpgradeVersion(currentVersion).then(() => {
              this.logSvc.logInfo(`Installed ${currentVersion}`);
            })
          )
        )
        .catch((err) => {
          this.$exceptionHandler(err);
          return this.$q.reject(err);
        })
    );
  }

  @boundMethod
  onAlarm(alarm: Alarms.Alarm): void {
    switch (alarm?.name) {
      case Globals.Alarms.AutoBackUp.Name:
        this.backupRestoreSvc.runAutoBackUp();
        break;
      case Globals.Alarms.SyncUpdatesCheck.Name:
        this.checkForSyncUpdates();
        break;
      default:
    }
  }

  onInstall(event: InputEvent): void {
    // Check if fresh install needed
    const details = angular.element(event.currentTarget as Element).data('details');
    (details?.reason === 'install' ? this.installExtension() : this.$q.resolve()).then(() => this.init());
  }

  @boundMethod
  onNotificationClicked(notificationId: string): void {
    // Execute the event handler if one exists and then remove
    const notificationClickHandler = this.notificationClickHandlers.find((x) => {
      return x.id === notificationId;
    });
    if (notificationClickHandler != null) {
      notificationClickHandler.eventHandler();
      browser.notifications.clear(notificationId);
    }
  }

  @boundMethod
  onNotificationClosed(notificationId: string): void {
    // Remove the handler for this notification if one exists
    const index = this.notificationClickHandlers.findIndex((x) => {
      return x.id === notificationId;
    });
    if (index >= 0) {
      this.notificationClickHandlers.splice(index, 1);
    }
  }

  @boundMethod
  onMessage(message: Message): Promise<any> {
    // Use native Promise not $q otherwise browser.runtime.sendMessage will return immediately in Firefox
    return new Promise((resolve, reject) => {
      let action: ng.IPromise<any>;
      switch (message.command) {
        // Queue bookmarks sync
        case MessageCommand.SyncBookmarks:
          action = this.runSyncBookmarksCommand(message as SyncBookmarksMessage);
          break;
        // Trigger bookmarks restore
        case MessageCommand.RestoreBookmarks:
          action = this.runRestoreBookmarksCommand(message as SyncBookmarksMessage);
          break;
        // Get current sync in progress
        case MessageCommand.GetCurrentSync:
          action = this.runGetCurrentSyncCommand();
          break;
        // Get current number of syncs on the queue
        case MessageCommand.GetSyncQueueLength:
          action = this.runGetSyncQueueLengthCommand();
          break;
        // Disable sync
        case MessageCommand.DisableSync:
          action = this.runDisableSyncCommand();
          break;
        // Download file
        case MessageCommand.DownloadFile:
          action = this.runDownloadFileCommand(message as DownloadFileMessage);
          break;
        // Enable event listeners
        case MessageCommand.EnableEventListeners:
          action = this.runEnableEventListenersCommand();
          break;
        // Disable event listeners
        case MessageCommand.DisableEventListeners:
          action = this.runDisableEventListenersCommand();
          break;
        // Enable auto back up
        case MessageCommand.EnableAutoBackUp:
          action = this.runEnableAutoBackUpCommand(message as EnableAutoBackUpMessage);
          break;
        // Disable auto back up
        case MessageCommand.DisableAutoBackUp:
          action = this.runDisableAutoBackUpCommand();
          break;
        // Unknown command
        default:
          action = this.$q.reject(new AmbiguousSyncRequestError());
      }
      action.then(resolve).catch(reject);
    }).catch((err) => {
      // Set message to error class name so sender can rehydrate the error on receipt
      err.message = err.constructor.name;
      throw err;
    });
  }

  runDisableAutoBackUpCommand(): ng.IPromise<void> {
    return browser.alarms.clear(Globals.Alarms.AutoBackUp.Name).then(() => {});
  }

  runDisableEventListenersCommand(): ng.IPromise<void> {
    return this.bookmarkSvc.disableEventListeners();
  }

  runDisableSyncCommand(): ng.IPromise<void> {
    return this.syncSvc.disableSync();
  }

  runDownloadFileCommand(message: DownloadFileMessage): ng.IPromise<string | void> {
    const { filename, textContents, displaySaveDialog = true } = message;
    if (!filename) {
      return this.$q.reject(new Error('File name parameter missing.'));
    }
    if (!textContents) {
      return this.$q.reject(new Error('File contents parameter missing.'));
    }

    return new this.$q<string | void>((resolve, reject) => {
      // Use create a new object url using contents and trigger download
      const file = new Blob([textContents], { type: 'text/plain' });
      const url = URL.createObjectURL(file);
      browser.downloads
        .download({
          filename,
          saveAs: displaySaveDialog,
          url
        })
        .then((downloadId) => {
          const onChangedHandler = (delta: Downloads.OnChangedDownloadDeltaType) => {
            switch (delta.state?.current) {
              case 'complete':
                URL.revokeObjectURL(url);
                browser.downloads.onChanged.removeListener(onChangedHandler);
                this.getDownloadById(downloadId).then((download) => {
                  this.logSvc.logInfo(`Downloaded file ${download.filename}`);
                  resolve(download.filename);
                });
                break;
              case 'interrupted':
                URL.revokeObjectURL(url);
                browser.downloads.onChanged.removeListener(onChangedHandler);
                if (delta.error?.current === 'USER_CANCELED') {
                  resolve();
                } else {
                  reject(new FailedDownloadFileError());
                }
                break;
              default:
            }
          };
          browser.downloads.onChanged.addListener(onChangedHandler);
        }, reject);
    });
  }

  runEnableAutoBackUpCommand(message: EnableAutoBackUpMessage): ng.IPromise<void> {
    const { schedule } = message;

    // Calculate alarm delay from schedule
    let delayInMinutes = 0;
    const now = new Date();
    const runTime = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate(),
      parseInt(schedule.autoBackUpHour, 10),
      parseInt(schedule.autoBackUpMinute, 10)
    );
    if (runTime < now) {
      runTime.setDate(now.getDate() + 1);
    }
    delayInMinutes = Math.round((runTime.getTime() - now.getTime()) / 1e3 / 60);

    // Calculate alarm period from schedule
    let periodInMinutes;
    switch (schedule.autoBackUpUnit) {
      case 'week':
        periodInMinutes = 60 * 24 * 7;
        break;
      case 'month':
        periodInMinutes = 60 * 24 * (365 / 12);
        break;
      case 'day':
      default:
        periodInMinutes = 60 * 24;
    }
    periodInMinutes *= parseInt(schedule.autoBackUpNumber, 10);

    // Register alarm
    return browser.alarms.clear(Globals.Alarms.AutoBackUp.Name).then(() => {
      return browser.alarms.create(Globals.Alarms.AutoBackUp.Name, {
        delayInMinutes,
        periodInMinutes
      });
    });
  }

  runEnableEventListenersCommand(): ng.IPromise<void> {
    return this.bookmarkSvc.enableEventListeners();
  }

  runGetCurrentSyncCommand(): ng.IPromise<Sync> {
    return this.$q.resolve(this.syncSvc.getCurrentSync());
  }

  runGetSyncQueueLengthCommand(): ng.IPromise<number> {
    return this.$q.resolve(this.syncSvc.getSyncQueueLength());
  }

  runRestoreBookmarksCommand(message: SyncBookmarksMessage): ng.IPromise<void> {
    const { sync } = message;
    return this.syncSvc.queueSync(sync);
  }

  runSyncBookmarksCommand(message: SyncBookmarksMessage): ng.IPromise<void> {
    const { sync, runSync } = message;
    // If no sync has been provided, process current sync queue and check for updates
    if (angular.isUndefined(sync)) {
      return this.syncSvc.executeSync();
    }
    return this.syncSvc.queueSync(sync, runSync);
  }

  upgradeExtension(): ng.IPromise<void> {
    // Run upgrade process and display notification to user
    return this.platformSvc
      .getAppVersion()
      .then((appVersion) => this.upgradeSvc.upgrade(appVersion))
      .then(() => {
        return this.platformSvc.getAppVersionName().then((appVersion) => {
          const alert: Alert = {
            message: this.platformSvc.getI18nString(this.Strings.Alert.AppUpdated.Message),
            title: `${this.platformSvc.getI18nString(this.Strings.Alert.AppUpdated.Title)} v${appVersion}`
          };
          this.displayAlert(alert, `${Globals.ReleaseNotesUrlStem}${appVersion}`);
          return this.storeSvc.set(StoreKey.DisplayUpdated, true);
        });
      });
  }
}
</file>

<file path="src/modules/webext/webpage-metadata-collecter/webpage-metadata-collecter.ts">
import { WebpageMetadata } from '../../shared/global-shared.interface';
import { getMetadata } from '../../shared/metadata/get-metadata';

class WebpageMetadataCollecter {
  static CollectMetadata(): WebpageMetadata {
    return getMetadata(document.location.href, document.documentElement.innerHTML);
  }
}
export default WebpageMetadataCollecter;
</file>

<file path="src/modules/webext/webext.interface.ts">
import { AutoBackUpSchedule } from '../shared/backup-restore/backup-restore.interface';
import { Bookmark } from '../shared/bookmark/bookmark.interface';
import { MessageCommand } from '../shared/global-shared.enum';
import { Sync } from '../shared/sync/sync.interface';

export interface InstallBackup {
  bookmarks: Bookmark[];
  date: string;
}

export interface Message {
  command: MessageCommand;
}

export interface DownloadFileMessage extends Message {
  command: MessageCommand.DownloadFile;
  displaySaveDialog: boolean;
  filename: string;
  textContents: string;
}

export interface EnableAutoBackUpMessage extends Message {
  command: MessageCommand.EnableAutoBackUp;
  schedule: AutoBackUpSchedule;
}

export interface SyncBookmarksMessage extends Message {
  runSync?: boolean;
  sync?: Sync;
}
</file>

<file path="src/styles/modules/_all.scss">
@import 'responsive';
@import 'fonts';
@import 'colors-default';
@import 'colors-dark';
@import 'background';
@import 'borders';
@import 'functions';
@import 'mixins';
@import 'animations';
</file>

<file path="src/styles/modules/_animations.scss">
@keyframes animation-clouds {
  0% {
    transform: translate3d(0, 0, 0);
  }

  100% {
    transform: translate3d(-$bg-width, $bg-height, 0);
  }
}

@mixin animation-clouds {
  animation: animation-clouds 100s linear infinite;
}

@mixin animation-fade-in() {
  &.ng-hide-remove {
    opacity: 0;
    transition: opacity 0.2s ease-in;

    &.ng-hide-remove-active {
      opacity: 1;
    }
  }

  &.ng-enter {
    opacity: 0;
    transition: opacity 0.2s ease-in;

    &.ng-enter-active {
      opacity: 1;
    }
  }
}

@mixin animation-fade-out() {
  &.ng-hide-add {
    transition: opacity 0.2s ease-in;

    &.ng-hide-add-active {
      opacity: 0;
    }
  }

  &.ng-leave {
    opacity: 1;
    transition: opacity 0.2s ease-in;

    &.ng-leave-active {
      opacity: 0;
    }
  }
}
</file>

<file path="src/styles/modules/_background.scss">
$bg-height: 32.142rem;
$bg-width: 53.571rem;
</file>

<file path="src/styles/modules/_borders.scss">
$border-radius-input: 3rem;
$border-radius-well: 1.25rem;
</file>

<file path="src/styles/modules/_colors-dark.scss">
$color-bg1-dark: #1e2228;
$color-bg2-dark: #2d333b;
$color-bg3-dark: #474f5b;
$color-text1-dark: #cdd9e5;
$color-text2-dark: #adbac7;
$color-text3-dark: #8a96a3;
$color-success-dark: #0e8662;
$color-warning-dark: #9d9524;
$color-danger-dark: #a5333c;
</file>

<file path="src/styles/modules/_colors-default.scss">
$color-bg1-default: #01ab8a;
$color-bg2-default: #35c6e8;
$color-bg3-default: #edfeff;
$color-text1-default: #edfeff;
$color-text2-default: #083039;
$color-text3-default: #75959c;
$color-success-default: #30d278;
$color-warning-default: #ddc72d;
$color-danger-default: #ea3869;
</file>

<file path="src/styles/modules/_fonts.scss">
$font-stack-regular: 'Roboto Condensed', sans-serif;
$font-stack-code: 'Source Code Pro', 'Courier New', monospace;
$base-font-size: 14px;
</file>

<file path="src/styles/modules/_functions.scss">
@use 'sass:color';

@function hex2rgb($hexcolor) {
  $red: color.red($hexcolor);
  $green: color.green($hexcolor);
  $blue: color.blue($hexcolor);
  @return unquote('#{$red}, #{$green}, #{$blue}');
}
</file>

<file path="src/styles/modules/_mixins.scss">
@mixin animation($str) {
  animation: $str;
}

@mixin background-gradient($direction, $startColor, $startColorAmount, $endColor, $endColorAmount) {
  background: linear-gradient($direction, $startColor $startColorAmount, $endColor $endColorAmount);
  background-color: $startColor;
}

@mixin box-shadow {
  box-shadow: 0.5rem 0.9rem 1.5rem rgba(0, 0, 0, 0.25);
}

@mixin ellipsis {
  &::after {
    content: '\2026';
  }
}

@mixin spinner-colour($colour) {
  border-color: $colour;
  border-right-color: transparent;
}

@mixin text-overflow-ellipsis {
  min-width: 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

@mixin theme-dark() {
  .theme-dark & {
    @content;
  }

  @media (prefers-color-scheme: dark) {
    @content;
  }
}

@mixin valign {
  bottom: 0;
  margin: auto;
  position: absolute;
  top: 0;
}
</file>

<file path="src/styles/modules/_responsive.scss">
$height-mobile-small: 480px;
$height-mobile-medium: 570px;
$height-mobile-large: 640px;
$height-mobile-xlarge: 720px;
$height-tablet-small: 1024px;
$width-mobile-small: 320px;
$width-mobile-medium: 360px;
$width-mobile-large: 375px;
$width-mobile-xlarge: 410px;
$width-tablet-small: 768px;
$width-tablet-large: 1024px;
</file>

<file path="src/styles/partials/_animations.scss">
.animate-fade-in {
  @include animation-fade-in;
}

.animate-fade-out {
  @include animation-fade-out;
}
</file>

<file path="src/styles/partials/_base.scss">
@import '~angular/angular-csp.css';
@import 'bootstrap';
@import '../modules/all';

* {
  box-shadow: none;
  outline: none !important;
}

:root {
  color-scheme: light dark;
  font-size: $base-font-size;
}

@import 'fonts';
@import 'typography';
@import 'layout';
@import 'forms';
@import 'buttons';
@import 'animations';
@import 'utilities';
</file>

<file path="src/styles/partials/_bootstrap.scss">
// Required
@import '~bootstrap/scss/functions';
@import '~bootstrap/scss/variables';
@import '~bootstrap/scss/mixins';

// Optional
@import '~bootstrap/scss/reboot';
@import '~bootstrap/scss/type';
@import '~bootstrap/scss/grid';
@import '~bootstrap/scss/alert';
@import '~bootstrap/scss/badge';
@import '~bootstrap/scss/buttons';
@import '~bootstrap/scss/list-group';
@import '~bootstrap/scss/progress';
@import '~bootstrap/scss/spinners';
@import '~bootstrap/scss/utilities';
</file>

<file path="src/styles/partials/_buttons.scss">
button {
  &.btn {
    border-width: 0;

    &:active,
    &:hover,
    &:focus {
      box-shadow: none;
    }

    &.btn-default {
      background-color: var(--color-button-default-bg);
      border-color: var(--color-button-default-border);
      border-radius: $border-radius-input;
      border-width: 0.15rem;
      color: var(--color-button-default-text);
      font-size: 1.2rem;
      font-weight: 800;
      line-height: 2.5rem;
      max-width: 90vw;
      padding: 0 1.2rem;
      transition-duration: 0.2s;
      transition-property: background-color, border-color, color;
      transition-timing-function: ease-in-out;

      &[disabled] {
        background-color: var(--color-button-default-bg-disabled);
        border-color: var(--color-button-default-border-disabled);
        color: var(--color-button-default-text-disabled);
        cursor: default;
        opacity: 0.5;
      }

      .well & {
        background-color: var(--color-well-button-bg);
        border-color: var(--color-well-button-border);
        border-width: 0.1rem;
        color: var(--color-well-button-text);
        font-weight: 400;

        &[disabled] {
          background-color: var(--color-well-button-bg-disabled);
          border-color: var(--color-well-button-border-disabled);
          color: var(--color-well-button-text-disabled);
        }

        .spinner-border-sm {
          @include spinner-colour(var(--color-well-button-text));

          border-width: 0.1em;
          height: 0.85rem;
          width: 0.85rem;
        }

        @media (hover: hover) {
          &:not([disabled]):active,
          &:not([disabled]):hover {
            background-color: var(--color-well-button-bg-hover);
            border-color: var(--color-well-button-border-hover);
            color: var(--color-well-button-text-hover);

            .spinner-border-sm {
              @include spinner-colour(var(--color-well-button-text-hover));
            }
          }
        }
      }

      &.working {
        @include ellipsis;

        opacity: 1 !important;
      }

      @media (hover: hover) {
        &:not([disabled]):active,
        &:not([disabled]):hover {
          background-color: var(--color-button-default-bg-hover);
          border-color: var(--color-button-default-border-hover);
          color: var(--color-button-default-text-hover);

          .spinner-border-sm {
            @include spinner-colour(var(--color-button-default-text-hover));
          }
        }

        &:not([disabled]):focus {
          text-decoration: underline;

          &:active,
          &:hover {
            text-decoration: none;
          }
        }
      }
    }
  }

  &:active,
  &:active:focus,
  &:focus,
  &:hover {
    outline: 0;
  }

  .spinner-border-sm {
    @include spinner-colour(var(--color-button-default-text));

    height: 1.05rem;
    margin-right: 0.25rem;
    width: 1.05rem;
  }
}

.buttons {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;

  &.vertical {
    align-items: center;
    flex-direction: column;
  }

  button {
    margin: 0 0 0.75rem;
  }
}
</file>

<file path="src/styles/partials/_fonts.scss">
@font-face {
  font-family: 'Roboto Condensed';
  font-style: normal;
  font-display: swap;
  font-weight: 400;
  src: url('~@fontsource/roboto-condensed/files/roboto-condensed-all-400-normal.woff') format('woff');
}

@font-face {
  font-family: 'Roboto Condensed';
  font-style: italic;
  font-display: swap;
  font-weight: 400;
  src: url('~@fontsource/roboto-condensed/files/roboto-condensed-all-400-italic.woff') format('woff');
}

@font-face {
  font-family: 'Roboto Condensed';
  font-style: normal;
  font-display: swap;
  font-weight: 700;
  src: url('~@fontsource/roboto-condensed/files/roboto-condensed-all-700-normal.woff') format('woff');
}

@font-face {
  font-family: 'Roboto Condensed';
  font-style: italic;
  font-display: swap;
  font-weight: 700;
  src: url('~@fontsource/roboto-condensed/files/roboto-condensed-all-700-italic.woff') format('woff');
}

@font-face {
  font-family: 'Source Code Pro';
  font-style: normal;
  font-display: swap;
  font-weight: 500;
  src: url('~@fontsource/source-code-pro/files/source-code-pro-all-500-normal.woff') format('woff');
}
</file>

<file path="src/styles/partials/_forms.scss">
.checkbox {
  background-color: var(--color-checkbox-bg);
  border-radius: $border-radius-input;
  cursor: pointer;
  height: 1.3rem;
  padding: 0.15rem;
  position: relative;
  width: 2.5rem;

  input {
    display: none;

    &[type='checkbox'] {
      & + label {
        background-color: var(--color-checkbox-toggle);
        opacity: 0.6;
      }

      &:checked + label {
        left: 1.35rem;
        opacity: 1;
      }
    }
  }

  label {
    border-radius: 50%;
    display: block;
    height: 1rem;
    left: 0.15rem;
    margin: 0 !important;
    min-height: 0;
    min-width: 0;
    padding: 0;
    pointer-events: none;
    position: absolute;
    width: 1rem;

    &.animate {
      transition-duration: 0.25s;
      transition-property: background-color, left, opacity;
      transition-timing-function: ease;
    }
  }
}

.form-group {
  margin-bottom: 1rem;
  position: relative;

  &.icon-button-container {
    input {
      padding-right: 2.3rem !important;
    }

    icon-button {
      margin-top: -0.75em;
      position: absolute;
      right: 0.7em;
      top: 50%;
      z-index: 55;
    }
  }

  &.has-error {
    input,
    textarea {
      &.form-control {
        border-color: var(--color-danger) !important;
        border-style: solid !important;
        border-width: 1px !important;
        color: var(--color-danger) !important;

        &::placeholder {
          color: var(--color-danger) !important;
          opacity: 0.8 !important;
        }
      }
    }
  }

  input,
  textarea {
    &.form-control {
      background-color: var(--color-input-bg);
      border-color: var(--color-input-border);
      border-style: solid;
      border-width: 1px;
      color: var(--color-input-text);
      font-size: 1rem;
      resize: none;
      width: 100%;

      &::placeholder {
        color: var(--color-input-placeholder);
      }
    }
  }

  input.form-control {
    border-radius: $border-radius-input;
    line-height: 2.4rem;
    padding: 0 1rem;
  }

  textarea.form-control {
    border-radius: 1.1rem;
    line-height: 1.2rem;
    padding: 0.5rem 1rem;
  }
}

.validation {
  background: var(--color-danger);
  border-radius: $border-radius-input;
  color: var(--color-validation-text);
  font-size: 0.75rem;
  left: 50%;
  line-height: 1.15rem;
  padding: 0 0.5rem;
  position: absolute;
  transform: translate(-50%, -50%);
  white-space: nowrap;
  z-index: 60;
}
</file>

<file path="src/styles/partials/_layout.scss">
.container {
  display: flex;
  height: 100%;
  justify-content: center;
  margin: 0;
  max-width: 100%;
  padding: 0;
  position: relative;
  z-index: 20;

  &.search {
    .alert p {
      @include text-overflow-ellipsis;
    }
  }
}

.float-nowrap {
  overflow: auto;
  width: 200%;
}

.float-right {
  float: right;
}

.header-panel {
  align-items: center;
  display: flex;
  flex: 0 0 auto;
  font-size: 1.3rem;
  justify-content: space-between;
  margin-bottom: 0.75rem;
  position: relative;
}

.overlay {
  align-items: center;
  background-color: var(--color-overlay);
  display: flex;
  height: 100%;
  justify-content: center;
  left: 0;
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 1000;
}

.darker-overlay {
  @extend .overlay;

  background-color: var(--color-darker-overlay);
}

.footer {
  margin-top: 1rem;
  text-align: center;
}

.view {
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: center;
  width: 100%;
}

.view-content {
  display: flex;
  flex-direction: column;
  height: 100%;
  padding: 0.75rem;
  z-index: 0;
}

.view-overlay {
  overflow: hidden;

  &::after {
    @extend .overlay;

    content: '';
    z-index: -1;
  }

  h4 {
    font-size: 1.5rem;
    line-height: 1.8rem;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  p,
  ul {
    font-size: 1.1rem;
    line-height: 1.4rem;
  }

  ul {
    margin-bottom: 0.75rem;
    padding-left: 1rem;
  }

  .buttons {
    margin-top: 1rem;

    &.small {
      button {
        font-size: 1rem;
        line-height: 2.1rem;
        padding: 0 0.5rem;
      }
    }
  }

  .view-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 2rem;
  }
}

.well {
  @include box-shadow;

  background-color: var(--color-well-bg);
  border-radius: $border-radius-well;
  border-width: 0;
  color: var(--color-well-text);
  margin-bottom: 0.75rem;
  overflow: hidden;
  padding: 1rem 1.25rem;

  a {
    border-bottom-color: var(--color-well-link);
    color: var(--color-well-link);

    @media (hover: hover) {
      &:active,
      &:focus,
      &:hover {
        border-bottom-color: var(--color-well-link-hover);
        color: var(--color-well-link-hover);
      }
    }
  }

  h4 {
    text-align: center;
  }

  .confirm {
    margin-bottom: 0;
    width: 100%;
  }

  .form-group {
    &.has-error {
      input,
      textarea {
        &.form-control {
          border-color: var(--color-danger) !important;
          color: var(--color-danger) !important;

          &::placeholder {
            color: var(--color-danger) !important;
            opacity: 0.8 !important;
          }
        }
      }
    }

    input,
    textarea {
      &.form-control {
        border-color: var(--color-well-input-border) !important;
        border-style: solid !important;
        border-width: 1px !important;
      }
    }
  }
}
</file>

<file path="src/styles/partials/_typography.scss">
h2 {
  float: left;
  font-size: 1.4em;
  font-weight: 700;
  line-height: 1em;
  margin-bottom: 0;
}

h4 {
  font-size: 1.3rem;
  font-weight: 700;
  line-height: 1.75rem;
  margin-top: 0;
}

a {
  border-bottom: dotted 1px var(--color-link);
  color: var(--color-link);
  cursor: pointer;
  text-decoration: none;
  transition-duration: 0.2s;
  transition-property: border-bottom-color, color;
  transition-timing-function: ease-in-out;

  @media (hover: hover) {
    &:active,
    &:focus,
    &:hover {
      border-bottom-color: var(--color-link-hover);
      color: var(--color-link-hover);
      outline: 0;
      text-decoration: none;
    }
  }
}

p {
  margin: 0 0 0.75rem;
}

.text {
  &-success {
    color: var(--color-success) !important;
  }

  &-warning {
    color: var(--color-warning) !important;
  }

  &-danger {
    color: var(--color-danger) !important;
  }
}
</file>

<file path="src/styles/partials/_utilities.scss">
.bottom {
  display: table-cell;
  position: relative;
  vertical-align: bottom;
}

.darken {
  height: 100%;
  left: 0;
  opacity: 0.8;
  position: absolute;
  top: 0;
  width: 100%;
  z-index: 100;
}

.display-none {
  display: none !important;
}

.ellipsis {
  @include ellipsis;
}

.margin-bottom-0 {
  margin-bottom: 0 !important;
}
</file>

<file path="src/styles/styles.scss">
@import './partials/base';

body {
  font-family: $font-stack-regular;
  line-height: 1.25rem;
  margin: 0;
}
</file>

<file path="src/test/mock-services.ts">
export const $injector: ng.auto.IInjectorService = (() => {
  return {
    annotate: () => {},
    get: () => {},
    has: () => {},
    instantiate: () => {},
    invoke: () => {},
    loadNewModules: () => {},
    modules: {},
    strictDi: false
  } as any;
})();

export const $log: ng.ILogService = (() => {
  return {
    debug: () => {},
    error: () => {},
    info: () => {},
    log: () => {},
    warn: () => {}
  };
})();

export const $q: ng.IQService = (() => {
  // eslint-disable-next-line func-style
  function mock$q(executor) {
    return new Promise(executor);
  }
  mock$q.all = Promise.all;
  mock$q.apply = Promise.apply;
  mock$q.bind = Promise.bind;
  mock$q.call = Promise.call;
  mock$q.race = Promise.race;
  mock$q.reject = Promise.reject;
  mock$q.resolve = Promise.resolve;
  return mock$q as any;
})();
</file>

<file path="webpack/android.config.js">
const CopyWebpackPlugin = require('copy-webpack-plugin');
const fs = require('fs');
const Path = require('path');
const xml2js = require('xml2js');
const { getAndroidVersionCode } = require('../scripts/android-utils');
const BaseConfig = require('./base.config');

const generateI18nStrings = (i18n) => {
  return Object.keys(i18n).reduce((acc, val) => {
    if (!Object.keys(i18n[val]).includes('default')) {
      return Object.assign(acc, generateI18nStrings(i18n[val]));
    }
    const value = Object.keys(i18n[val]).includes('android') ? i18n[val].android : i18n[val].default;
    acc[`${i18n[val].key}`] = value;
    return acc;
  }, {});
};

module.exports = (env, argv) => {
  const baseConfig = BaseConfig(env, argv);
  return {
    ...baseConfig,
    entry: {
      app: './src/modules/android/android-app/android-app.module.ts'
    },
    output: {
      ...baseConfig.output,
      path: Path.resolve(__dirname, '../build/android/www/assets')
    },
    plugins: [
      ...baseConfig.plugins,
      new CopyWebpackPlugin({
        patterns: [
          {
            from: './res/strings',
            to: './strings_[name].json',
            toType: 'template',
            transform: (buffer) => {
              // Convert strings to proper webext messages format
              const i18n = JSON.parse(buffer.toString());
              const messages = generateI18nStrings(i18n);
              return JSON.stringify(messages, null, 2);
            }
          },
          {
            from: './res/android',
            to: '../../'
          },
          {
            from: './res/android/config.xml',
            to: '../../',
            transform: (buffer) => {
              // Set version in android config
              const appPackage = JSON.parse(fs.readFileSync(Path.resolve(__dirname, '../package.json')));
              const parser = new xml2js.Parser();
              const builder = new xml2js.Builder();
              let xml = '';
              parser.parseString(buffer.toString(), (err, result) => {
                result.widget.$.version = appPackage.version;
                result.widget.$['android-versionCode'] = getAndroidVersionCode(`${appPackage.version}.0`);
                xml = builder.buildObject(result);
              });
              return xml;
            }
          }
        ]
      })
    ]
  };
};
</file>

<file path="webpack/base.config.js">
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const TerserPlugin = require('terser-webpack-plugin');

module.exports = (env, argv) => {
  const devMode = argv.mode === 'development';
  const createBundleReport = false;
  return {
    devtool: devMode ? 'inline-source-map' : 'source-map',
    externals: ['fs'],
    mode: devMode ? 'development' : 'production',
    module: {
      rules: [
        { test: /\.ts$/, loader: 'ts-loader' },
        {
          test: /\.js$/,
          use: ['source-map-loader'],
          enforce: 'pre'
        },
        {
          test: /\.(sa|sc|c)ss$/,
          use: [
            {
              loader: MiniCssExtractPlugin.loader,
              options: {
                publicPath: ''
              }
            },
            'css-loader',
            'resolve-url-loader',
            {
              loader: 'sass-loader',
              options: {
                sourceMap: true
              }
            }
          ]
        },
        {
          test: /\.svg$/,
          loader: 'svg-inline-loader',
          issuer: /\.ts$/
        },
        {
          test: /\.(eot|gif|jpg|otf|png|ttf|woff|woff2)$/,
          type: 'asset/resource',
          generator: {
            filename: '[name][ext][query]'
          }
        },
        {
          test: /\.html$/i,
          loader: 'html-loader',
          options: {
            esModule: false
          }
        }
      ]
    },
    optimization: !devMode
      ? {
          minimizer: [
            new TerserPlugin({
              parallel: true,
              terserOptions: {
                keep_classnames: true
              }
            })
          ],
          splitChunks: {
            cacheGroups: {
              vendor: {
                chunks: 'all',
                name: 'vendor',
                test: /node_modules/
              }
            }
          }
        }
      : {},
    output: {
      chunkFilename: '[name].js',
      clean: true,
      filename: '[name].js'
    },
    plugins: [
      new MiniCssExtractPlugin({ filename: '[name].css' }),
      new BundleAnalyzerPlugin({
        analyzerMode: createBundleReport ? 'static' : 'disabled'
      })
    ],
    resolve: {
      extensions: ['.js', '.ts']
    }
  };
};
</file>

<file path="webpack/chromium.config.js">
const Path = require('path');
const WebExtConfig = require('./webext.config');

module.exports = (env, argv) => {
  const webExtConfig = WebExtConfig(env, argv);
  return {
    ...webExtConfig,
    entry: {
      ...webExtConfig.entry,
      app: './src/modules/webext/chromium/chromium-app/chromium-app.module.ts',
      background: './src/modules/webext/chromium/chromium-background/chromium-background.module.ts'
    },
    output: {
      ...webExtConfig.output,
      path: Path.resolve(__dirname, '../build/chromium/assets')
    }
  };
};
</file>

<file path="webpack/firefox.config.js">
const Path = require('path');
const WebExtConfig = require('./webext.config');

module.exports = (env, argv) => {
  const webExtConfig = WebExtConfig(env, argv);

  // Add Firefox browser_specific_settings entry to manifest
  const copyPlugin = webExtConfig.plugins.find((p) => p.constructor.name === 'CopyPlugin');
  const manifestPattern = copyPlugin.patterns.find((p) => p.from.indexOf('manifest.json') > -1);
  const webExtTransfrom = manifestPattern.transform;
  manifestPattern.transform = (buffer) => {
    const webExtTransfromResult = webExtTransfrom(buffer);
    const manifest = JSON.parse(webExtTransfromResult);
    manifest.browser_specific_settings = {
      gecko: {
        id: '{019b606a-6f61-4d01-af2a-cea528f606da}',
        strict_min_version: '75.0',
        update_url: 'https://xbrowsersync.github.io/app/firefox-versions.json'
      }
    };
    return JSON.stringify(manifest, null, 2);
  };

  return {
    ...webExtConfig,
    entry: {
      ...webExtConfig.entry,
      app: './src/modules/webext/firefox/firefox-app/firefox-app.module.ts',
      background: './src/modules/webext/firefox/firefox-background/firefox-background.module.ts'
    },
    output: {
      ...webExtConfig.output,
      path: Path.resolve(__dirname, '../build/firefox/assets')
    }
  };
};
</file>

<file path="webpack/webext.config.js">
const CopyWebpackPlugin = require('copy-webpack-plugin');
const fs = require('fs');
const Path = require('path');
const BaseConfig = require('./base.config');

const convertI18nForWebExt = (i18n) => {
  return Object.keys(i18n).reduce((acc, val) => {
    if (!Object.keys(i18n[val]).includes('default')) {
      return Object.assign(acc, convertI18nForWebExt(i18n[val]));
    }

    acc[`${i18n[val].key}_Default`] = { message: i18n[val].default };
    if (Object.keys(i18n[val]).includes('brave')) {
      acc[`${i18n[val].key}_Brave`] = { message: i18n[val].brave };
    }
    if (Object.keys(i18n[val]).includes('chromium')) {
      acc[`${i18n[val].key}_Chromium`] = { message: i18n[val].chromium };
    }
    if (Object.keys(i18n[val]).includes('edge')) {
      acc[`${i18n[val].key}_Edge`] = { message: i18n[val].edge };
    }
    if (Object.keys(i18n[val]).includes('firefox')) {
      acc[`${i18n[val].key}_Firefox`] = { message: i18n[val].firefox };
    }

    return acc;
  }, {});
};

module.exports = (env, argv) => {
  const baseConfig = BaseConfig(env, argv);
  return {
    ...baseConfig,
    entry: {
      'webpage-metadata-collecter': {
        import: './src/modules/webext/webpage-metadata-collecter/webpage-metadata-collecter.ts',
        library: {
          name: 'WebpageMetadataCollecter',
          type: 'var',
          export: 'default'
        }
      }
    },
    plugins: [
      ...baseConfig.plugins,
      new CopyWebpackPlugin({
        patterns: [
          {
            from: './res/strings',
            to: '../_locales/[name]/messages.json',
            toType: 'template',
            transform: (buffer) => {
              // Convert strings to proper webext messages format
              const i18n = JSON.parse(buffer.toString());
              const messages = convertI18nForWebExt(i18n);
              return JSON.stringify(messages, null, 2);
            }
          },
          {
            from: './res/webext/app.html',
            to: '..'
          },
          {
            from: './res/webext/background.html',
            to: '..'
          },
          {
            from: './res/webext/images'
          },
          {
            from: './res/webext/manifest.json',
            to: '../manifest.json',
            transform: (buffer) => {
              // Set version in webext manifest
              const appPackage = JSON.parse(fs.readFileSync(Path.resolve(__dirname, '../package.json')));
              const manifest = JSON.parse(buffer.toString());
              manifest.version = appPackage.version;
              manifest.version_name = appPackage.version;
              return JSON.stringify(manifest, null, 2);
            }
          }
        ]
      })
    ]
  };
};
</file>

<file path=".gitattributes">
* text=auto
</file>

<file path=".gitignore">
.DS_Store
*.log
build
coverage
dist
node_modules
PACKAGE_VERSION
</file>

<file path="CHANGELOG.md">
## v1.6.0

### General improvements

- Complete re-write and re-architecture of code base in Typescript to improve maintainability and extensibility
- Added support for the following non-English locales (via [Crowdin](https://crowdin.com/project/xbrowsersync-app)):
  - Arabic
  - Chinese (simplified)
  - Dutch
  - Finnish
  - French
  - Galician
  - German
  - Indonesian
  - Italian
  - Japanese
  - Polish
  - Portuguese (Brazilian)
  - Russian
  - Spanish
  - Swedish
- Updated sync engine to improve handling of syncing when offline
- Overhauled app upgrade process to be more robust; sync data must now be upgraded in web extension
- Added preference to enable dark mode and support for following platform light/dark theme (#182)
- Added preference to display bookmark folders by default (#178)
- Added optional anonymous telemetry submission to improve ability to support xBrowserSync
- Added last synced date to Sync panel in Settings view
- Added bookmark URL validation check (#305)
- Added debounce to search box and bookmark tags field to resolve autocompletion issues
- Fixed bug where incorrect title and description are retrieved when adding youtube videos as bookmarks
- Fixed display bug where elements visibly resize on app load
- Fixed bug where HTTP request errors are incorrectly treated as network connection errors
- Removed support for "Mobile" bookmarks container; previously synced mobile bookmarks are moved to "Other bookmarks" > "Mobile bookmarks" folder
- Refactored metadata collection to use common collection process across all platforms (#298)
- When a sync error occurs that results in sync being disabled, app now switches back to the Login view
- Supported containers are now always added to synced bookmarks whenever a sync is performed, if they don't already exist
- Manual sync now syncs offline changes in addition to pulling down updates
- Improved handling for when sync is not found or has been removed; added interface for user to back up their data before creating a new sync
- Shortened search input placeholder text to support lower screen resolutions (#230)
- Improved Search view so that view only refreshes if bookmarks data has changed
- Refactored searching/bookmark/metadata code to account for locale when converting to lowercase (#357)
- Removed capitalization style from buttons (#355)
- Improved logging and error reporting
- Added font preloading to improve app loading experience
- Changed icon library to [Lucide icons](https://lucide.dev/)
- Mininum supported xBrowserSync API version updated to 1.1.9
- Many, many more minor enhancements and bug fixes

### Web extensions

- Brave and Edge (Chromium) browsers now supported (#100,#31)
- Sync engine now uses ID map instead of index paths making sync much more robust (#120,#158)
- Switched storage API from localStorage to IndexedDB to improve support for syncing large amounts of data
- Added auto back up functionality to Back up and restore panel in Settings view (#15)
- Improved how separators are handled to prevent sync conflicts
- Support for browser incognito mode has been disabled due to required APIs not available in incognito mode (#123)
- Increased height of extension window to maximum allowed when in Search view to display more bookmarks at once (#362)
- Using native "Sort by Name" browser function now triggers sync (Chromium browsers only)  (#233)
- Restore panel in Settings view now uses file selection for providing backup data (not currently supported in Firefox or Linux Chromium builds)
- Firefox now supports optional "read and change all website data" permissions (#43)
- Updated login form to support Firefox native password features
- Updated minimum supported Firefox version to 75

### Android

- Updated target SDK version to 30 (Android 11) and minimum supported version to 26 (Android Oreo)
- Switched storage API from WebView localStorage to combination of native storage and SQLLite to resolve data persistance issues and to improve support for syncing large amounts of data (#384)
- Added ability to bypass QR code scanning and enter sync info manually (#209)
- Added undo functionality when deleting or modifying a bookmark
- Added "pull to refresh" functionality in Search view
- Added preference to toggle auto-fetching of bookmark metadata (#231)
- Android app now supports syncing to xBrowserSync services over HTTP, and over HTTPS when the service uses a self-signed SSL certificate or custom Certificate Authorities (#234,#228,#356)
- Updated Cordova plugins to resolve a number of issues and improve device support

### Contributors

Special thanks to the following people for contributing their time and effort to this release!

- **PRs:** shunf4; taivlam
- **Translations:** alexandregz; Amolith; CharlesDeJager; coka4you; darqmoon; wizzdom; xDonatello; honchar; matabulan; ilyonfly; bohden; jules.seigneur77; julien.quievreux; korbendallas; LandyLERThERmfLOpi; leeo97one; maraven2001; fringoo

## v1.5.2

- Fixed bug where startup process can be triggered twice in some instances which can cause data loss/corruption (#171)
- Fixed bug where checking for updates whilst syncs are being processed can trigger a local refresh whilst event listeners are enabled (#133)
- Fixed bug when checking network connection status (#161)
- Fixed Firefox bug where moving multiple bookmarks results in corrupt sync data
- Fixed Firefox bug where sync data is corrupted when creating new folders via native bookmarking functionality
- Fixed Firefox bug where sync is executed twice when moving bookmarks
- Improved sync engine handling of large amounts of simultaneous changes
- Updated sync engine so that remote data is only updated once after all queued syncs have been processed
- Fixed Android bug when retrieving metadata fails with an error and Bookmark view does not display
- Fixed Android bug where loading dialog displays before form is shown when adding bookmark by sharing to app
- Fixed Android bug where status bar disappears when loading metadata
- Fixed Android bug where error message not displaying when retrieving metadata for shared bookmark fails
- Added ability to cancel sync when extension window is opened during push sync
- Added a delay on checking for sync updates on startup to allow browser to init connection
- Changed check for updates period back to 15 minutes
- Fixed bug where disabling sync from extension window doesn't disable properly in background
- Fixed potential messaging bugs when extension window is opened during sync
- Fixed bug in metadata collection where description displays encoded characters
- Fixed bug where encoded characters are displayed in tags after getting bookmark metadata
- Fixed bug where password fields highlight spelling issues when set to show password
- Fixed bug where sync id is not displayed when disabling sync just after creating a new sync
- Fixed bug when disabling sync, Settings view flickers and Login view displays after slight delay
- Fixed bug where only first bookmark tag in field shows autocomplete
- Improved sync UI by adding ability to update service URL when creating a new sync/entering sync credentials (#45)
- Added confirmation panel displaying service info when updating service URL
- Updated Sync ID QR code to now also include service URL and updated Android scanning functionality to read new QR code format
- Improved handling of syncing when offline for desktop platforms
- Added option of checking for app updates to Preferences section in Settings view
- Added ability to click native alerts to open links
- Moved sync bookmarks toolbar setting to Preferences panel
- Updated layout CSS to improve handling of browser page zoom (#173)
- Many, many more minor enhancements and bug fixes

## v1.5.1

- Updated Android platform to include v1.5.0 changes (#139,#146), and:
	- Fixed responsive mobile styles to support all mobile device screen sizes and support landscape orientation (#47)
	- Fixed bug when fetching metadata for new bookmark by switching cordova-plugin-inappbrowser to xbs repo which includes PR to fix executeScript failing for large return values (#78,#125)
	- Added get metadata button to bookmark panel
	- If bookmark metadata isn't retrieved, shared title is now used
	- Reduced start up time to two secs (#25)
	- Added preferences section to Settings view and added preference to display search bar beneath search results (#143)
	- Replaced local storage with native storage so cache is no longer subject to WebView local storage limits
	- Updated download functionality to download backup and log files to Download folder
	- Added new scan interface with sync ID validation
	- Updated offline functionality to better handle changes made when offline
	- Fixed bug when back button does not cause the correct action for certain screens
	- Changed add bookmark button to floating action button
	- Fixed button styles to display correct styling when pressed
	- Alerts now display in native snackbar
	- Added install/upgrade functionality
	- Added adaptive icons
	- Added swipe to close on Help view
	- Updated delete bookmark animation
	- Added validating spinner to restore file field
	- Fixed background linear gradient to match other platforms
- Added bookmark folder view to Search view (#16)
- Added install backup point which allows user to restore bookmarks to the same state as when extension was installed
- Added reveal password functionality on Login view
- Implemented background syncing to replace checking for uncommitted syncs
- Refactored syncing logic to support separate queuing and execution
- Added sync ID validation to login and scan views
- Fixed bookmark id handling validation during sync/restore
- Fixed bug with sync bookmarks toolbar toggle switch not hiding confirmation message when switched off
- Fixed flickering on autocomplete text when search text changes
- Fixed bug where service panels are displayed before service status is retrieved
- Add bookmark button on Bookmark view is now disabled until empty form is changed
- Shortened log and backup file names
- Updated HTTP error codes to correspond to changes in API v1.1.11
- Changed background clouds from png to svg image for better resolution on high pixel density displays
- Updated help page content
- Updated close link label on Help view
- Updated logo image
- Removed deprecated crypto-js dependency
- Many, many more minor enhancements and bug fixes

## v1.5.0

- Huge improvements to syncing engine:
	- Updated sync process to be more reliable and less prone to issues
	- Fixed issues when changing local bookmarks using native tools that can cause sync failures/duplication/corruption
	- Population of local bookmarks takes much less time in Chrome (unfortunately Firefox is excluded for now due to a Mozilla [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1533061))
	- UI updated to display syncing animation when syncs are in progress
	- Browser icons updated to reflect sync status and direction (uploading/downloading)
- Sync is no longer disabled when clearing local browser cache or by third-party privacy plugins (#38)
- Bookmarking Chrome-specific URLs (i.e. chrome://...) no longer breaks sync in Firefox (#58)
- Many more bookmark URL protocols now supported
- Added support for syncing Firefox native separators (#64)
- Added button to manually update sync with latest changes (#21)
- Updated required permissions, "read and change all website data" is now optional and added options to Settings view (Chrome only, Firefox implementation is currently blocked due to a Mozilla [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=1432083)) (#43)
- Much improved password validation when creating new syncs: more accurate password strength meter, warnings and suggestions displayed to help user choose a more effective password and relaxed validation rules to allow users more freedom in choosing a password (#42,#48)
- Bookmarking of non-HTML web pages such as PDFs now supported (#66)
- Very large sync data sizes now supported (#20)
- Extension icons updated to make current sync status clearer (#77)
- Bookmark URL validation improved (#62)
- Sync ID field value now saved whenever it is updated resolving issues when pasting values from a password manager (#86,#101)
- Default keyboard shortcut now included (#98)
- Added button for easily copying sync ID (#102)
- Added retry after delay when checking for sync updates at startup, avoids "Connection lost" warnings when using proxied connections for example
- Added button to clear existing tags, useful when pages contain many irrelevant tags
- Removed debug mode, added better logging and ability to download log file to provide when logging issues
- Improved code security: more restrictive content security policy, removed all references to `innerHTML`, removed references to `eval` (javascript bookmarklets no longer supported)
- Updated donation options, Liberapay and better crypto donation process added
- User interface updates and improvements
- Prettier backup file JSON data
- Many, many more minor enhancements and bug fixes

## v1.4.0

- Added [Firefox](https://www.mozilla.org/firefox/) support, download the add-on here: https://addons.mozilla.org/en-GB/firefox/addon/xbs/
- Huge improvements to encryption: now uses native [Web Crypto API](https://www.w3.org/TR/WebCryptoAPI/) rather than external cryptography library, key derivation uses PBKDF2 with 250,000 rounds of SHA-256, encryption uses AES-GCM with a random 16 byte IV and the user's random 32 char sync ID as a salt. For comparison, [LastPass' key derivation](https://support.logmeininc.com/lastpass/help/about-password-iterations-lp030027) uses a similar approach but with only 100,100 rounds by default
- Existing syncs will be automatically upgraded to use the latest encryption. Upgraded syncs cannot sync to older version of xBrowserSync
- Data is now compressed before being encrypted reducing sync size by up to 60%
- When adding or modifying a bookmark using the xBrowserSync interface, local bookmarks are no longer removed and re-added - only the target bookmark is affected
- xBrowserSync now adds bookmarks by default directly to Other Bookmarks, the `_xBrowserSync_` folder is no longer used and is renamed to `Legacy xBrowserSync bookmarks` on upgrade
- When creating a new sync, password must now be confirmed and required password complexity has been increased to ensure stronger encryption
- Updated to use smaller font files for faster more responsive experience
- Page metadata collection method improved, content scripts no longer run automatically when a page is loaded and page metadata no longer needs to be stored in browser's local storage cache
- Latest sync changes now pulled down on browser start up
- Ability to create new sync remove from mobile apps to prevent user deleting all local bookmarks inadvertently
- Sync confirmation text updated to clearly inform user that local bookmarks data will be deleted
- Login view fields now use monospace font
- Bookmark and Change Service panels now display validation messages
- Bookmark view URL field now much less restrictive to allow for different bookmark formats. 
- Bookmark view URL field validation now checks if URL already exists
- Bookmark view tags now respect maximum width by displaying ellipses if tag text too long to show
- Bookmark view tags field no longer suggest tags that have already been added
- Change Service panel now allows IP addresses as well as host names
- Service panel now displays loading text when retrieving service status
- Service panel now displays data usage in most relevant unit
- Panel styling updated to include drop shadows
- About panel cleaned up to display only relevant information
- Message now displayed when app is updated with link to release notes
- Dependencies updated
- Many, many more minor enhancements and bug fixes

## v1.3.1

- Android and iOS apps released
- Redesigned, more intuitive sync/Login view and Settings view
- Cleaned up extension dependencies for smaller footprint and faster loading
- Added support for bookmarklets
- Search queries now allow commas between keywords
- Titleless bookmarks now display their URL host as a title
- Bookmark descriptions are now shortened to 300 characters to the nearest word
- “Connection Lost” warnings are no longer shown when checking for updates in the background
- Many, many more minor enhancements and bug fixes

## v1.2.1

- Search results are now sorted in order of highest score _and_ date bookmark added. Note: for existing syncs, only bookmarks added after v1.2.1 was installed will be sorted by date added
- Searching with no search terms entered displays bookmarks in order of date bookmark added. Note: for existing syncs, only bookmarks added after v1.2.1 was installed will be sorted by date added
- Added support for Twitter meta page tags
- Can now handle bookmarks without titles
- Searching for "un" no longer displays "undefined" as a suggestion
- Page meta tag detection no longer case sensitive

## v1.2.0

- Added mobile apps support. Expect releases for Android and iOS very soon
- Added Firefox support. xBrowserSync now works with Firefox's new WebExtensions browser extension API. However, Mozilla are still in the process of implementing the full API used by Chrome and currently there are gaps, some of which xBrowserSync depends on. Once support has been added xBrowserSync will be released for Firefox
- Added data usage chart. Check how much of your allocated sync data you are currently using in Settings > Sync > Data Usage
- Adding a bookmark via native browser bookmark button now adds description and tags metadata automatically
- Bookmark updates made whilst offline will now be synced automatically when connection is restored
- Added About view
- Synced data is now left encrypted before being cached locally, for extra security
- QR code now displayed using canvas, much clearer at higher resolutions
- Bookmark searches no longer match partial words to improve results relevance
- Suppressed the frequency of alerts if unable to connect to the xBrowserSync service when syncing in background
- Numerous other minor enhancements and bug fixes

## v1.1.1

- Updated website links to https
- Stopped punctuation appearing in search lookahead
- Fixed change conflict when data out of sync
- Fixed issue with browser action icon sometimes not updating correctly

## v1.0.0

Initial release
</file>

<file path="crowdin.yml">
pull_request_title: New translations

files:
  - source: /res/strings/en.json
    translation: /res/strings/%two_letters_code%.json
</file>

<file path="LICENSE.md">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.

                            Preamble

The GNU General Public License is a free, copyleft license for
software and other kinds of works.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works. By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users. We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors. You can apply it to
your programs, too.

When we speak of free software, we are referring to freedom, not
price. Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights. Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received. You must make sure that they, too, receive
or can get the source code. And you must show them these terms so they
know their rights.

Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software. For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so. This is fundamentally incompatible with the aim of
protecting users' freedom to change the software. The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable. Therefore, we
have designed this version of the GPL to prohibit the practice for those
products. If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary. To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

0. Definitions.

"This License" refers to version 3 of the GNU General Public License.

"Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

"The Program" refers to any copyrightable work licensed under this
License. Each licensee is addressed as "you". "Licensees" and
"recipients" may be individuals or organizations.

To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy. The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

A "covered work" means either the unmodified Program or a work based
on the Program.

To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy. Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To "convey" a work means any kind of propagation that enables other
parties to make or receive copies. Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License. If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

1. Source Code.

The "source code" for a work means the preferred form of the work
for making modifications to it. "Object code" means any non-source
form of a work.

A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form. A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities. However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work. For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

The Corresponding Source for a work in source code form is that
same work.

2. Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met. This License explicitly affirms your unlimited
permission to run the unmodified Program. The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work. This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force. You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright. Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under
the conditions stated below. Sublicensing is not allowed; section 10
makes it unnecessary.

3. Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

4. Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

5. Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit. Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

6. Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling. In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage. For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product. A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

"Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source. The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information. But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed. Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

7. Additional Terms.

"Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law. If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it. (Additional permissions may be written to require their own
removal in certain cases when you modify the work.) You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10. If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term. If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

8. Termination.

You may not propagate or modify a covered work except as expressly
provided under this License. Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License. If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

9. Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or
run a copy of the Program. Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance. However,
nothing other than this License grants you permission to propagate or
modify any covered work. These actions infringe copyright if you do
not accept this License. Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

10. Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License. You are not responsible
for enforcing compliance by third parties with this License.

An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations. If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License. For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

11. Patents.

A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based. The
work thus licensed is called the contributor's "contributor version".

A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version. For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement). To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients. "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License. You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

12. No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License. If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all. For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

13. Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work. The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

14. Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time. Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number. If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation. If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

Later license versions may give you additional or different
permissions. However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

15. Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

16. Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

17. Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

To do so, attach the following notices to the program. It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and`show c' should show the appropriate
parts of the General Public License. Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

The GNU General Public License does not permit incorporating your program
into proprietary programs. If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library. If this is what you want to do, use the GNU Lesser General
Public License instead of this License. But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="package.json">
{
  "name": "xbrowsersync-app",
  "description": "The xBrowserSync client app.",
  "version": "1.6.0",
  "author": "xBrowserSync",
  "license": "GPL-3.0-only",
  "repository": {
    "type": "git",
    "url": "https://github.com/xbrowsersync/app.git"
  },
  "bugs": {
    "url": "https://github.com/xbrowsersync/app/issues"
  },
  "scripts": {
    "test": "jest --coverage --passWithNoTests",
    "lint": "echo Checking for lint errors... && eslint ./src --ext .ts && stylelint \"./src/**/*.scss\"",
    "lint:fix": "echo Checking and fixing lint errors... && eslint ./src --fix --ext .ts && stylelint \"./src/**/*.scss\" --fix",
    "webpack:chromium": "webpack --config ./webpack/chromium.config.js",
    "build:chromium": "npm run --silent lint:fix && echo Building platform CHROMIUM to ./build/chromium... && rimraf ./build/chromium && npm run --silent webpack:chromium",
    "build:chromium:dev": "npm run --silent build:chromium -- -- --mode=development",
    "watch:chromium": "npm run --silent build:chromium:dev -- --watch",
    "package:chromium": "npm run --silent build:chromium && echo Packaging platform CHROMIUM... && node ./scripts/update-build-number.js chromium && node ./scripts/create-zip-package.js chromium",
    "postpackage:chromium": "echo Package saved to ./dist",
    "webpack:firefox": "webpack --config ./webpack/firefox.config.js",
    "build:firefox": "npm run --silent lint:fix && echo Building platform FIREFOX to ./build/firefox... && rimraf ./build/firefox && npm run --silent webpack:firefox",
    "build:firefox:dev": "npm run --silent build:firefox -- -- --mode=development",
    "watch:firefox": "npm run --silent build:firefox:dev -- --watch",
    "package:firefox": "npm run --silent build:firefox && echo Packaging platform FIREFOX... && node ./scripts/update-build-number.js firefox && node ./scripts/create-zip-package.js firefox",
    "postpackage:firefox": "echo Package saved to ./dist",
    "webpack:android": "webpack --config ./webpack/android.config.js",
    "build:android": "npm run --silent lint:fix && echo Building platform ANDROID to ./build/android... && rimraf ./build/android && npm run --silent webpack:android",
    "build:android:dev": "npm run --silent build:android -- -- --mode=development",
    "watch:android": "npm run --silent build:android:dev -- --watch",
    "package:android": "npm run --silent build:android && echo Packaging platform ANDROID... && node ./scripts/update-build-number.js android && node ./scripts/create-apk-package.js",
    "postpackage:android": "echo Package saved to ./dist"
  },
  "dependencies": {
    "@fontsource/roboto-condensed": "^4.5.0",
    "@fontsource/source-code-pro": "^4.5.0",
    "@types/webextension-polyfill": "^0.8.2",
    "@zxcvbn-ts/core": "^2.0.0",
    "@zxcvbn-ts/language-common": "^2.0.0",
    "@zxcvbn-ts/language-en": "^2.0.0",
    "angular": "^1.8.2",
    "angular-animate": "^1.8.2",
    "angular-filter": "^0.5.17",
    "angular-hammer": "^2.2.0",
    "angular-route": "^1.8.2",
    "angular-sanitize": "^1.8.2",
    "base64-js": "^1.5.1",
    "bootstrap": "^5.1.3",
    "buffer": "^6.0.3",
    "compare-versions": "^4.1.1",
    "countries-list": "^2.6.1",
    "detect-browser": "^5.2.1",
    "dompurify": "^2.3.3",
    "fs": "0.0.1-security",
    "hammerjs": "^2.0.8",
    "idb-keyval": "^6.0.3",
    "lucide-static": "^0.17.9",
    "lzutf8": "^0.6.0",
    "marked": "^4.0.3",
    "ng-infinite-scroll": "^1.3.0",
    "popper.js": "^1.16.0",
    "pulltorefreshjs": "^0.1.22",
    "qrcode-svg": "^1.1.0",
    "stacktrace-js": "^2.0.2",
    "webextension-polyfill": "^0.8.0",
    "xregexp": "^5.1.0"
  },
  "devDependencies": {
    "@ffflorian/jszip-cli": "^3.1.6",
    "@types/angular": "^1.8.3",
    "@types/angular-animate": "^1.5.11",
    "@types/angular-route": "^1.7.2",
    "@types/base64-js": "^1.3.0",
    "@types/cordova": "0.0.34",
    "@types/dompurify": "^2.3.1",
    "@types/jest": "^27.0.2",
    "@types/marked": "^4.0.0",
    "@typescript-eslint/eslint-plugin": "^5.3.1",
    "@typescript-eslint/parser": "^5.3.1",
    "angular-ts-decorators": "^3.7.8",
    "autobind-decorator": "^2.4.0",
    "copy-webpack-plugin": "^10.2.0",
    "css-loader": "^6.5.1",
    "eslint": "^8.2.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-airbnb-typescript": "^16.1.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-import": "^2.25.3",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-simple-import-sort": "^7.0.0",
    "eslint-plugin-unused-imports": "^2.0.0",
    "html-loader": "^3.0.1",
    "jest": "^27.3.1",
    "js-beautify": "^1.14.0",
    "mini-css-extract-plugin": "^2.4.4",
    "postcss": "^8.3.11",
    "prettier": "^2.4.1",
    "resolve-url-loader": "^5.0.0",
    "rimraf": "^3.0.2",
    "sass": "^1.45.0",
    "sass-loader": "^12.3.0",
    "source-map-loader": "^3.0.0",
    "stylelint": "^14.1.0",
    "stylelint-config-prettier": "^9.0.3",
    "stylelint-config-standard-scss": "^3.0.0",
    "stylelint-prettier": "^2.0.0",
    "svg-inline-loader": "^0.8.2",
    "terser-webpack-plugin": "^5.3.1",
    "ts-jest": "^27.0.7",
    "ts-loader": "^9.2.6",
    "typescript": "~4.5.5",
    "webpack": "^5.64.0",
    "webpack-bundle-analyzer": "^4.5.0",
    "webpack-cli": "^4.9.1",
    "xml2js": "^0.4.23",
    "zip-dir": "^2.0.0"
  },
  "eslintConfig": {
    "env": {
      "browser": true,
      "jest": true
    },
    "extends": [
      "airbnb-base",
      "airbnb-typescript/base",
      "plugin:prettier/recommended"
    ],
    "globals": {
      "Atomics": "readonly",
      "ng": "readonly",
      "SharedArrayBuffer": "readonly"
    },
    "ignorePatterns": [
      "**/build/*",
      "**/dist/*",
      "**/node_modules/*"
    ],
    "parserOptions": {
      "ecmaVersion": 2020,
      "project": "./tsconfig.eslint.json",
      "sourceType": "module"
    },
    "plugins": [
      "simple-import-sort",
      "unused-imports"
    ],
    "root": true,
    "rules": {
      "@typescript-eslint/comma-dangle": "off",
      "@typescript-eslint/indent": "off",
      "@typescript-eslint/lines-between-class-members": "off",
      "@typescript-eslint/no-unused-vars": "off",
      "@typescript-eslint/semi": "warn",
      "class-methods-use-this": "off",
      "consistent-return": "off",
      "default-param-last": "off",
      "func-style": "warn",
      "global-require": "off",
      "import/no-dynamic-require": "off",
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": true
        }
      ],
      "import/order": "off",
      "import/prefer-default-export": "off",
      "no-bitwise": "off",
      "no-empty": "off",
      "no-nested-ternary": "off",
      "no-param-reassign": "off",
      "no-undef": "error",
      "no-underscore-dangle": "off",
      "no-unreachable": "warn",
      "prefer-destructuring": "off",
      "prettier/prettier": "warn",
      "simple-import-sort/imports": [
        "warn",
        {
          "groups": [
            [
              "^\\u0000",
              "^@?\\w",
              "^[^.]",
              "^\\."
            ]
          ]
        }
      ],
      "simple-import-sort/exports": "warn",
      "sort-imports": "off",
      "spaced-comment": "off",
      "unused-imports/no-unused-imports-ts": "warn"
    }
  },
  "stylelint": {
    "extends": [
      "stylelint-config-standard-scss",
      "stylelint-prettier/recommended"
    ],
    "rules": {
      "alpha-value-notation": "number",
      "color-function-notation": "legacy",
      "declaration-block-no-duplicate-properties": null,
      "font-family-no-missing-generic-family-keyword": null,
      "max-nesting-depth": 20,
      "no-descending-specificity": null,
      "no-invalid-position-at-import-rule": null,
      "no-irregular-whitespace": null,
      "prettier/prettier": [
        true,
        {
          "severity": "warning"
        }
      ],
      "scss/at-extend-no-missing-placeholder": null,
      "scss/selector-no-redundant-nesting-selector": null,
      "selector-id-pattern": null,
      "selector-max-compound-selectors": null,
      "selector-max-id": null,
      "selector-no-qualifying-type": null,
      "selector-type-no-unknown": null
    }
  },
  "prettier": {
    "bracketSpacing": true,
    "endOfLine": "auto",
    "overrides": [
      {
        "files": [
          "*.html"
        ],
        "options": {
          "htmlWhitespaceSensitivity": "ignore",
          "jsxBracketSameLine": true
        }
      }
    ],
    "printWidth": 120,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "none",
    "useTabs": false
  },
  "jest": {
    "collectCoverageFrom": [
      "<rootDir>/src/modules/**/*.ts"
    ],
    "preset": "ts-jest",
    "testEnvironment": "jsdom",
    "testMatch": [
      "<rootDir>/src/modules/**/*.spec.ts"
    ]
  }
}
</file>

<file path="README.md">
# xBrowserSync

## Desktop browser web extensions and Android app

[![Latest release](https://img.shields.io/github/release/xbrowsersync/app.svg)](https://github.com/xbrowsersync/app/blob/master/LICENSE.md) [![GitHub license](https://img.shields.io/github/license/xbrowsersync/app.svg)](https://github.com/xbrowsersync/app/releases/latest) [![build](https://github.com/xbrowsersync/app/actions/workflows/build.yml/badge.svg)](https://github.com/xbrowsersync/app/actions/workflows/build.yml) [![Coverage Status](https://coveralls.io/repos/github/xbrowsersync/app/badge.svg?branch=master)](https://coveralls.io/github/xbrowsersync/app?branch=master) [![Crowdin](https://badges.crowdin.net/xbrowsersync-app/localized.svg)](https://crowdin.com/project/xbrowsersync-app) ![Dependencies](https://img.shields.io/depfu/xbrowsersync/app) [![Liberapay patrons](http://img.shields.io/liberapay/patrons/xbrowsersync.svg?logo=liberapay)](https://liberapay.com/xbrowsersync/donate)

[![GitHub forks](https://img.shields.io/github/forks/xbrowsersync/app.svg?style=social&label=Fork)](https://github.com/xbrowsersync/app/fork)
[![GitHub stars](https://img.shields.io/github/stars/xbrowsersync/app.svg?style=social&label=Star)](https://github.com/xbrowsersync/app)

xBrowserSync is a free tool for syncing browser data between different browsers and devices, built for privacy and anonymity. For full details, see [www.xbrowsersync.org](https://www.xbrowsersync.org/).

This repository contains the source code for the browser web extensions and Android mobile app used for syncing to an xBrowserSync service. You can get the official releases of the xBrowserSync clients from the various app stores, but if you’d like to build from source you can do so here.

## Prerequisites

- NPM. It’s bundled with [Node.js](https://nodejs.org/) so [download and install it](https://nodejs.org/en/download/) for your platform.

## Installation

CD into the source directory and install the package and dependencies using NPM:

    $ npm install

### Android

You must follow the Cordova Android [installation guide](https://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html) in order to develop xBrowserSync for Android. Once that's done, run the following commands in the xBrowserSync source directory:

    $ npm install -g cordova@11.0.0
    $ cd ./res/android
    $ cordova prepare

## Building

Run a debug build for the given platform:

    $ npm run build:[platform]

or

    $ npm run watch:[platform]

Replace [platform] with the name of the platform to build. The app code will be output to the 'build/[platform]' folder. Available platforms:

- android
- chromium
- firefox

### Debugging in Chrome

Once you have built xBrowserSync for Chromium, browse to `chrome://extensions`, enable Developer mode, click "Load unpacked" and browse to `build/chromium` within the xBrowserSync source directory.

Note: We recommend creating a new Chrome profile for testing so you do not affect your actual profile data.

### Debugging in Firefox

Use the [web-ext](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Getting_started_with_web-ext) tool for testing xBrowserSync in Firefox. Once that is installed and you have built xBrowserSync for Firefox, CD into `build/firefox` within the xBrowserSync source directory and run the following command:

    $ web-ext run --verbose

Firefox will open using a temporary profile and the xBrowserSync extension will be installed from the built source.

### Debugging in Android

After building, in order to run the app you'll need to execute the relevant [cordova cli](https://cordova.apache.org/docs/en/latest/reference/cordova-cli/index.html) commands. For example, to run the app on a connected device, CD into `build/android` within the xBrowserSync source directory and run the following commands:

    $ cordova build android
    $ cordova run android --device

Make sure to run the `cordova build` command at least once after running a fresh build so that required gradle files are copied (`cordova run` alone does not copy these files).

## Packaging

Run a release build and then package for the given platform:

    $ npm run package:[platform]

Replace [platform] with the name of the platform to build. The package will be output to the 'dist' folder.

## Issues

If you’ve found a bug or wish to request a new feature, please submit it [here](https://github.com/xbrowsersync/app/issues/).

## Translation

If you would like to help with translating xBrowserSync into another language, please read the [Translations](https://github.com/xbrowsersync/app/wiki/Translations) wiki page to get started.
</file>

<file path="tsconfig.eslint.json">
{
  "exclude": [],
  "extends": "./tsconfig.json",
  "include": ["res/**/*.js", "src/**/*.ts", "scripts/**/*.js", "webpack/**/*.js"]
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ES2015",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "sourceMap": true,
    "strictFunctionTypes": true,
    "target": "ES2015"
  },
  "exclude": ["src/**/*.spec.ts"],
  "include": ["src/**/*.ts"]
}
</file>

</files>
